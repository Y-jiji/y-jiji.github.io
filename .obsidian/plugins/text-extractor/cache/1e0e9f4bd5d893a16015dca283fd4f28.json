{"path":"2-仓库/4-工程/PL-Dragon-Book.pdf","text":"Compilers Second Edition Principles, Techniques, & Tools This page intentionally left blank Compilers Second Edition Principles, Techniques, & Tools Alfred V. Aho Columbia University Monica S. Lam Stanford University Ravi Sethi Avaya Jeffrey D. Ullman Stanford University Publisher Greg Tobin Executive Editor Michael Hirsch Acquisitions Editor Matt Goldstein Project Editor Katherine Harutunian Associate Managing Editor Jeffrey Holcomb Cover Designer Joyce Cosentino Wells Digital Assets Manager Marianne Groth Media Producer Bethany Tidd Senior Marketing Manager Michelle Brown Marketing Assistant Sarah Milmore Senior Author Support/ Technology Specialist Joe Vetere Senior Manufacturing Buyer Carol Melville Cover Image Scott Ullman of Strange Tonic Productions (www.strangetonic.com) Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and Addison-Wesley was aware of a trademark claim, the designations have been printed in initial caps or all caps. This interior of this book was composed in L ATEX. Library of Congress Cataloging-in-Publication Data Compilers : principles, techniques, and tools / Alfred V. Aho ... [et al.]. -- 2nd ed. p. cm. Rev. ed. of: Compilers, principles, techniques, and tools / Alfred V. Aho, Ravi Sethi, Jeffrey D. Ullman. 1986. ISBN 0-321-48681-1 (alk. paper) 1. Compilers (Computer programs) I. Aho, Alfred V. II. Aho, Alfred V. Compilers, principles, techniques, and tools. QA76.76.C65A37 2007 005.4'53--dc22 2006024333 Copyright © 2007 Pearson Education, Inc. All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, recording, or otherwise, without the prior written permission of the publisher. Printed in the United States of America. For information on obtaining permission for use of material in this work, please submit a written request to Pearson Education, Inc., Rights and Contracts Department, 75 Arlington Street, Suite 300, Boston, MA 02116, fax your request to 617-848-7047, or e-mail at http://www.pearsoned.com/legal/permissions.htm. 1 2 3 4 5 6 7 8 9 10—CW—10 09 08 07 06 PrefaceInthetimesincethe1986editionofthisbook,theworldofcompilerdesignhaschangedsigni\fcantly.Programminglanguageshaveevolvedtopresentnewcompilationproblems.Computerarchitectureso\u000beravarietyofresourcesofwhichthecompilerdesignermusttakeadvantage.Perhapsmostinterestingly,thevenerabletechnologyofcodeoptimizationhasfounduseoutsidecompilers.Itisnowusedintoolsthat\fndbugsinsoftware,andmostimportantly,\fndsecurityholesinexistingcode.Andmuchofthe\\front-end\"technology|grammars,regularexpressions,parsers,andsyntax-directedtranslators|arestillinwideuse.Thus,ourphilosophyfrompreviousversionsofthebookhasnotchanged.Werecognizethatfewreaderswillbuild,orevenmaintain,acompilerforamajorprogramminglanguage.Yetthemodels,theory,andalgorithmsassoci-atedwithacompilercanbeappliedtoawiderangeofproblemsinsoftwaredesignandsoftwaredevelopment.Wethereforeemphasizeproblemsthataremostcommonlyencounteredindesigningalanguageprocessor,regardlessofthesourcelanguageortargetmachine.UseoftheBookIttakesatleasttwoquartersoreventwosemesterstocoverallormostofthematerialinthisbook.Itiscommontocoverthe\frsthalfinanundergraduatecourseandthesecondhalfofthebook|stressingcodeoptimization|inasecondcourseatthegraduateormezzaninelevel.Hereisanoutlineofthechapters:Chapter1containsmotivationalmaterialandalsopresentssomebackgroundissuesincomputerarchitectureandprogramming-languageprinciples.Chapter2developsaminiaturecompilerandintroducesmanyoftheimpor-tantconcepts,whicharethendevelopedinlaterchapters.Thecompileritselfappearsintheappendix.Chapter3coverslexicalanalysis,regularexpressions,\fnite-statemachines,andscanner-generatortools.Thismaterialisfundamentaltotext-processingofallsorts.vviPREFACEChapter4coversthemajorparsingmethods,top-down(recursive-descent,LL)andbottom-up(LRanditsvariants).Chapter5introducestheprincipalideasinsyntax-directedde\fnitionsandsyntax-directedtranslations.Chapter6takesthetheoryofChapter5andshowshowtouseittogenerateintermediatecodeforatypicalprogramminglanguage.Chapter7coversrun-timeenvironments,especiallymanagementoftherun-timestackandgarbagecollection.Chapter8isonobject-codegeneration.Itcoversconstructionofbasicblocks,generationofcodefromexpressionsandbasicblocks,andregister-allocationtechniques.Chapter9introducesthetechnologyofcodeoptimization,including\rowgraphs,data-\rowframeworks,anditerativealgorithmsforsolvingtheseframeworks.Chapter10coversinstruction-leveloptimization.Theemphasisisontheex-tractionofparallelismfromsmallsequencesofinstructionsandschedulingthemonsingleprocessorsthatcandomorethanonethingatonce.Chapter11talksaboutlarger-scaleparallelismdetectionandexploitation.Here,theemphasisisonnumericcodesthathavemanytightloopsthatrangeovermultidimensionalarrays.Chapter12isoninterproceduralanalysis.Itcoverspointeranalysis,aliasing,anddata-\rowanalysisthattakesintoaccountthesequenceofprocedurecallsthatreachagivenpointinthecode.CoursesfrommaterialinthisbookhavebeentaughtatColumbia,Harvard,andStanford.AtColumbia,asenior/\frst-yeargraduatecourseonprogram-minglanguagesandtranslatorshasbeenregularlyo\u000beredusingmaterialfromthe\frsteightchapters.Ahighlightofthiscourseisasemester-longprojectinwhichstudentsworkinsmallteamstocreateandimplementalittlelan-guageoftheirowndesign.Thestudent-createdlanguageshavecovereddiverseapplicationdomainsincludingquantumcomputation,musicsynthesis,com-putergraphics,gaming,matrixoperationsandmanyotherareas.Studentsusecompiler-componentgeneratorssuchasANTLR,Lex,andYaccandthesyntax-directedtranslationtechniquesdiscussedinchapterstwoand\fvetobuildtheircompilers.Afollow-ongraduatecoursehasfocusedonmaterialinChapters9through12,emphasizingcodegenerationandoptimizationforcontemporarymachinesincludingnetworkprocessorsandmultiprocessorarchitectures.AtStanford,aone-quarterintroductorycoursecoversroughlythemate-rialinChapters1through8,althoughthereisanintroductiontoglobalcodeoptimizationfromChapter9.ThesecondcompilercoursecoversChapters9through12,plusthemoreadvancedmaterialongarbagecollectionfromChap-ter7.Studentsusealocallydeveloped,Java-basedsystemcalledJoeqforimplementingdata-\rowanalysisalgorithms.PREFACEviiPrerequisitesThereadershouldpossesssome\\computer-sciencesophistication,\"includingatleastasecondcourseonprogramming,andcoursesindatastructuresanddiscretemathematics.Knowledgeofseveraldi\u000berentprogramminglanguagesisuseful.ExercisesThebookcontainsextensiveexercises,withsomeforalmosteverysection.Weindicateharderexercisesorpartsofexerciseswithanexclamationpoint.Thehardestexerciseshaveadoubleexclamationpoint.GradianceOn-LineHomeworksAfeatureoftheneweditionisthatthereisanaccompanyingsetofon-linehomeworksusingatechnologydevelopedbyGradianceCorp.Instructorsmayassignthesehomeworkstotheirclass,orstudentsnotenrolledinaclassmayenrollinan\\omnibusclass\"thatallowsthemtodothehomeworksasatutorial(withoutaninstructor-createdclass).Gradiancequestionslooklikeordinaryquestions,butyoursolutionsaresampled.Ifyoumakeanincorrectchoiceyouaregivenspeci\fcadviceorfeedbacktohelpyoucorrectyoursolution.Ifyourinstructorpermits,youareallowedtotryagain,untilyougetaperfectscore.AsubscriptiontotheGradianceserviceiso\u000beredwithallnewcopiesofthistextsoldinNorthAmerica.Formoreinformation,visittheAddison-Wesleywebsitewww.aw.com/gradianceorsendemailtocomputing@aw.com.SupportontheWorldWideWebThebook'shomepageisdragonbook.stanford.eduHere,youwill\fnderrataaswelearnofthem,andbackupmaterials.Wehopetomakeavailablethenotesforeacho\u000beringofcompiler-relatedcoursesasweteachthem,includinghomeworks,solutions,andexams.Wealsoplantopostdescriptionsofimportantcompilerswrittenbytheirimplementers.AcknowledgementsCoverartisbyS.D.UllmanofStrangeTonicProductions.JonBentleygaveusextensivecommentsonanumberofchaptersofanearlierdraftofthisbook.Helpfulcommentsanderratawerereceivedfrom:viiiPREFACEDomenicoBianculli,PeterBosch,MarcioBuss,MarcEaddy,StephenEdwards,VibhavGarg,KimHazelwood,GauravKc,WeiLi,MikeSmith,ArtStamness,KrystaSvore,OlivierTardieu,andJiaZeng.Thehelpofallthesepeopleisgratefullyacknowledged.Remainingerrorsareours,ofcourse.Inaddition,MonicawouldliketothankhercolleaguesontheSUIFcom-pilerteamforan18-yearlessononcompiling:GeraldAigner,DzintarsAvots,SamanAmarasinghe,JenniferAnderson,MichaelCarbin,GeraldCheong,AmerDiwan,RobertFrench,AnwarGhuloum,MaryHall,JohnHennessy,DavidHeine,Shih-WeiLiao,AmyLim,BenjaminLivshits,MichaelMartin,DrorMaydan,ToddMowry,BrianMurphy,Je\u000breyOplinger,KarenPieper,Mar-tinRinard,OlatunjiRuwase,ConstantineSapuntzakis,PatrickSathyanathan,MichaelSmith,StevenTjiang,Chau-WenTseng,ChristopherUnkel,JohnWhaley,RobertWilson,ChristopherWilson,andMichaelWolf.A.V.A.,ChathamNJM.S.L.,MenloParkCAR.S.,FarHillsNJJ.D.U.,StanfordCAJune,2006TableofContents1Introduction11.1LanguageProcessors.........................11.1.1ExercisesforSection1.1...................31.2TheStructureofaCompiler.....................41.2.1LexicalAnalysis.......................51.2.2SyntaxAnalysis.......................81.2.3SemanticAnalysis......................81.2.4IntermediateCodeGeneration...............91.2.5CodeOptimization......................101.2.6CodeGeneration.......................101.2.7Symbol-TableManagement.................111.2.8TheGroupingofPhasesintoPasses............111.2.9Compiler-ConstructionTools................121.3TheEvolutionofProgrammingLanguages.............121.3.1TheMovetoHigher-levelLanguages............131.3.2ImpactsonCompilers....................141.3.3ExercisesforSection1.3...................141.4TheScienceofBuildingaCompiler.................151.4.1ModelinginCompilerDesignandImplementation....151.4.2TheScienceofCodeOptimization.............151.5ApplicationsofCompilerTechnology................171.5.1ImplementationofHigh-LevelProgrammingLanguages.171.5.2OptimizationsforComputerArchitectures.........191.5.3DesignofNewComputerArchitectures..........211.5.4ProgramTranslations....................221.5.5SoftwareProductivityTools.................231.6ProgrammingLanguageBasics...................251.6.1TheStatic/DynamicDistinction..............251.6.2EnvironmentsandStates..................261.6.3StaticScopeandBlockStructure..............281.6.4ExplicitAccessControl...................311.6.5DynamicScope........................311.6.6ParameterPassingMechanisms...............33ixxTABLEOFCONTENTS1.6.7Aliasing............................351.6.8ExercisesforSection1.6...................351.7SummaryofChapter1........................361.8ReferencesforChapter1.......................382ASimpleSyntax-DirectedTranslator392.1Introduction..............................402.2SyntaxDe\fnition...........................422.2.1De\fnitionofGrammars...................422.2.2Derivations..........................442.2.3ParseTrees..........................452.2.4Ambiguity...........................472.2.5AssociativityofOperators..................482.2.6PrecedenceofOperators...................482.2.7ExercisesforSection2.2...................512.3Syntax-DirectedTranslation.....................522.3.1Post\fxNotation.......................532.3.2SynthesizedAttributes....................542.3.3SimpleSyntax-DirectedDe\fnitions.............562.3.4TreeTraversals........................562.3.5TranslationSchemes.....................572.3.6ExercisesforSection2.3...................602.4Parsing................................602.4.1Top-DownParsing......................612.4.2PredictiveParsing......................642.4.3WhentoUse\u000f-Productions.................652.4.4DesigningaPredictiveParser................662.4.5LeftRecursion........................672.4.6ExercisesforSection2.4...................682.5ATranslatorforSimpleExpressions................682.5.1AbstractandConcreteSyntax...............692.5.2AdaptingtheTranslationScheme..............702.5.3ProceduresfortheNonterminals..............722.5.4SimplifyingtheTranslator..................732.5.5TheCompleteProgram...................742.6LexicalAnalysis...........................762.6.1RemovalofWhiteSpaceandComments..........772.6.2ReadingAhead........................782.6.3Constants...........................782.6.4RecognizingKeywordsandIdenti\fers...........792.6.5ALexicalAnalyzer......................812.6.6ExercisesforSection2.6...................842.7SymbolTables............................852.7.1SymbolTablePerScope...................862.7.2TheUseofSymbolTables..................89TABLEOFCONTENTSxi2.8IntermediateCodeGeneration...................912.8.1TwoKindsofIntermediateRepresentations........912.8.2ConstructionofSyntaxTrees................922.8.3StaticChecking........................972.8.4Three-AddressCode.....................992.8.5ExercisesforSection2.8...................1052.9SummaryofChapter2........................1053LexicalAnalysis1093.1TheRoleoftheLexicalAnalyzer..................1093.1.1LexicalAnalysisVersusParsing...............1103.1.2Tokens,Patterns,andLexemes...............1113.1.3AttributesforTokens....................1123.1.4LexicalErrors.........................1133.1.5ExercisesforSection3.1...................1143.2InputBu\u000bering............................1153.2.1Bu\u000berPairs..........................1153.2.2Sentinels............................1163.3Speci\fcationofTokens........................1163.3.1StringsandLanguages....................1173.3.2OperationsonLanguages..................1193.3.3RegularExpressions.....................1203.3.4RegularDe\fnitions......................1233.3.5ExtensionsofRegularExpressions.............1243.3.6ExercisesforSection3.3...................1253.4RecognitionofTokens........................1283.4.1TransitionDiagrams.....................1303.4.2RecognitionofReservedWordsandIdenti\fers......1323.4.3CompletionoftheRunningExample............1333.4.4ArchitectureofaTransition-Diagram-BasedLexicalAn-alyzer.............................1343.4.5ExercisesforSection3.4...................1363.5TheLexical-AnalyzerGeneratorLex................1403.5.1UseofLex...........................1403.5.2StructureofLexPrograms.................1413.5.3Con\rictResolutioninLex..................1443.5.4TheLookaheadOperator..................1443.5.5ExercisesforSection3.5...................1463.6FiniteAutomata...........................1473.6.1NondeterministicFiniteAutomata.............1473.6.2TransitionTables.......................1483.6.3AcceptanceofInputStringsbyAutomata.........1493.6.4DeterministicFiniteAutomata...............1493.6.5ExercisesforSection3.6...................1513.7FromRegularExpressionstoAutomata..............152xiiTABLEOFCONTENTS3.7.1ConversionofanNFAtoaDFA..............1523.7.2SimulationofanNFA....................1563.7.3E\u000eciencyofNFASimulation................1573.7.4ConstructionofanNFAfromaRegularExpression...1593.7.5E\u000eciencyofString-ProcessingAlgorithms.........1633.7.6ExercisesforSection3.7...................1663.8DesignofaLexical-AnalyzerGenerator..............1663.8.1TheStructureoftheGeneratedAnalyzer.........1673.8.2PatternMatchingBasedonNFA's.............1683.8.3DFA'sforLexicalAnalyzers.................1703.8.4ImplementingtheLookaheadOperator...........1713.8.5ExercisesforSection3.8...................1723.9OptimizationofDFA-BasedPatternMatchers...........1733.9.1ImportantStatesofanNFA.................1733.9.2FunctionsComputedFromtheSyntaxTree........1753.9.3Computingnullable,\frstpos,andlastpos..........1763.9.4Computingfollowpos.....................1773.9.5ConvertingaRegularExpressionDirectlytoaDFA...1793.9.6MinimizingtheNumberofStatesofaDFA........1803.9.7StateMinimizationinLexicalAnalyzers..........1843.9.8TradingTimeforSpaceinDFASimulation........1853.9.9ExercisesforSection3.9...................1863.10SummaryofChapter3........................1873.11ReferencesforChapter3.......................1894SyntaxAnalysis1914.1Introduction..............................1924.1.1TheRoleoftheParser....................1924.1.2RepresentativeGrammars..................1934.1.3SyntaxErrorHandling....................1944.1.4Error-RecoveryStrategies..................1954.2Context-FreeGrammars.......................1974.2.1TheFormalDe\fnitionofaContext-FreeGrammar....1974.2.2NotationalConventions...................1984.2.3Derivations..........................1994.2.4ParseTreesandDerivations.................2014.2.5Ambiguity...........................2034.2.6VerifyingtheLanguageGeneratedbyaGrammar....2044.2.7Context-FreeGrammarsVersusRegularExpressions...2054.2.8ExercisesforSection4.2...................2064.3WritingaGrammar.........................2094.3.1LexicalVersusSyntacticAnalysis..............2094.3.2EliminatingAmbiguity....................2104.3.3EliminationofLeftRecursion................2124.3.4LeftFactoring........................214TABLEOFCONTENTSxiii4.3.5Non-Context-FreeLanguageConstructs..........2154.3.6ExercisesforSection4.3...................2164.4Top-DownParsing..........................2174.4.1Recursive-DescentParsing..................2194.4.2FIRSTandFOLLOW....................2204.4.3LL(1)Grammars.......................2224.4.4NonrecursivePredictiveParsing...............2264.4.5ErrorRecoveryinPredictiveParsing............2284.4.6ExercisesforSection4.4...................2314.5Bottom-UpParsing..........................2334.5.1Reductions..........................2344.5.2HandlePruning........................2354.5.3Shift-ReduceParsing.....................2364.5.4Con\rictsDuringShift-ReduceParsing...........2384.5.5ExercisesforSection4.5...................2404.6IntroductiontoLRParsing:SimpleLR..............2414.6.1WhyLRParsers?.......................2414.6.2ItemsandtheLR(0)Automaton..............2424.6.3TheLR-ParsingAlgorithm.................2484.6.4ConstructingSLR-ParsingTables..............2524.6.5ViablePre\fxes........................2564.6.6ExercisesforSection4.6...................2574.7MorePowerfulLRParsers......................2594.7.1CanonicalLR(1)Items....................2604.7.2ConstructingLR(1)SetsofItems..............2614.7.3CanonicalLR(1)ParsingTables..............2654.7.4ConstructingLALRParsingTables.............2664.7.5E\u000ecientConstructionofLALRParsingTables......2704.7.6CompactionofLRParsingTables.............2754.7.7ExercisesforSection4.7...................2774.8UsingAmbiguousGrammars....................2784.8.1PrecedenceandAssociativitytoResolveCon\ricts....2794.8.2The\\Dangling-Else\"Ambiguity..............2814.8.3ErrorRecoveryinLRParsing................2834.8.4ExercisesforSection4.8...................2854.9ParserGenerators..........................2874.9.1TheParserGeneratorYacc.................2874.9.2UsingYaccwithAmbiguousGrammars..........2914.9.3CreatingYaccLexicalAnalyzerswithLex.........2944.9.4ErrorRecoveryinYacc...................2954.9.5ExercisesforSection4.9...................2974.10SummaryofChapter4........................2974.11ReferencesforChapter4.......................300xivTABLEOFCONTENTS5Syntax-DirectedTranslation3035.1Syntax-DirectedDe\fnitions.....................3045.1.1InheritedandSynthesizedAttributes............3045.1.2EvaluatinganSDDattheNodesofaParseTree.....3065.1.3ExercisesforSection5.1...................3095.2EvaluationOrdersforSDD's....................3105.2.1DependencyGraphs.....................3105.2.2OrderingtheEvaluationofAttributes...........3125.2.3S-AttributedDe\fnitions...................3125.2.4L-AttributedDe\fnitions...................3135.2.5SemanticRuleswithControlledSideE\u000bects........3145.2.6ExercisesforSection5.2...................3175.3ApplicationsofSyntax-DirectedTranslation............3185.3.1ConstructionofSyntaxTrees................3185.3.2TheStructureofaType...................3215.3.3ExercisesforSection5.3...................3235.4Syntax-DirectedTranslationSchemes................3245.4.1Post\fxTranslationSchemes.................3245.4.2Parser-StackImplementationofPost\fxSDT's......3255.4.3SDT'sWithActionsInsideProductions..........3275.4.4EliminatingLeftRecursionFromSDT's..........3285.4.5SDT'sforL-AttributedDe\fnitions.............3315.4.6ExercisesforSection5.4...................3365.5ImplementingL-AttributedSDD's.................3375.5.1TranslationDuringRecursive-DescentParsing......3385.5.2On-The-FlyCodeGeneration................3405.5.3L-AttributedSDD'sandLLParsing............3435.5.4Bottom-UpParsingofL-AttributedSDD's........3485.5.5ExercisesforSection5.5...................3525.6SummaryofChapter5........................3535.7ReferencesforChapter5.......................3546Intermediate-CodeGeneration3576.1VariantsofSyntaxTrees.......................3586.1.1DirectedAcyclicGraphsforExpressions..........3596.1.2TheValue-NumberMethodforConstructingDAG's...3606.1.3ExercisesforSection6.1...................3626.2Three-AddressCode.........................3636.2.1AddressesandInstructions.................3646.2.2Quadruples..........................3666.2.3Triples.............................3676.2.4StaticSingle-AssignmentForm...............3696.2.5ExercisesforSection6.2...................3706.3TypesandDeclarations.......................3706.3.1TypeExpressions.......................371TABLEOFCONTENTSxv6.3.2TypeEquivalence.......................3726.3.3Declarations..........................3736.3.4StorageLayoutforLocalNames..............3736.3.5SequencesofDeclarations..................3766.3.6FieldsinRecordsandClasses................3766.3.7ExercisesforSection6.3...................3786.4TranslationofExpressions......................3786.4.1OperationsWithinExpressions...............3786.4.2IncrementalTranslation...................3806.4.3AddressingArrayElements.................3816.4.4TranslationofArrayReferences...............3836.4.5ExercisesforSection6.4...................3846.5TypeChecking............................3866.5.1RulesforTypeChecking...................3876.5.2TypeConversions......................3886.5.3OverloadingofFunctionsandOperators..........3906.5.4TypeInferenceandPolymorphicFunctions........3916.5.5AnAlgorithmforUni\fcation................3956.5.6ExercisesforSection6.5...................3986.6ControlFlow.............................3996.6.1BooleanExpressions.....................3996.6.2Short-CircuitCode......................4006.6.3Flow-of-ControlStatements.................4016.6.4Control-FlowTranslationofBooleanExpressions.....4036.6.5AvoidingRedundantGotos.................4056.6.6BooleanValuesandJumpingCode.............4086.6.7ExercisesforSection6.6...................4086.7Backpatching.............................4106.7.1One-PassCodeGenerationUsingBackpatching......4106.7.2BackpatchingforBooleanExpressions...........4116.7.3Flow-of-ControlStatements.................4136.7.4Break-,Continue-,andGoto-Statements..........4166.7.5ExercisesforSection6.7...................4176.8Switch-Statements..........................4186.8.1TranslationofSwitch-Statements..............4196.8.2Syntax-DirectedTranslationofSwitch-Statements....4206.8.3ExercisesforSection6.8...................4216.9IntermediateCodeforProcedures..................4226.10SummaryofChapter6........................4246.11ReferencesforChapter6.......................425xviTABLEOFCONTENTS7Run-TimeEnvironments4277.1StorageOrganization.........................4277.1.1StaticVersusDynamicStorageAllocation.........4297.2StackAllocationofSpace......................4307.2.1ActivationTrees.......................4307.2.2ActivationRecords......................4337.2.3CallingSequences......................4367.2.4Variable-LengthDataontheStack.............4387.2.5ExercisesforSection7.2...................4407.3AccesstoNonlocalDataontheStack...............4417.3.1DataAccessWithoutNestedProcedures..........4427.3.2IssuesWithNestedProcedures...............4427.3.3ALanguageWithNestedProcedureDeclarations.....4437.3.4NestingDepth........................4437.3.5AccessLinks.........................4457.3.6ManipulatingAccessLinks.................4477.3.7AccessLinksforProcedureParameters..........4487.3.8Displays............................4497.3.9ExercisesforSection7.3...................4517.4HeapManagement..........................4527.4.1TheMemoryManager....................4537.4.2TheMemoryHierarchyofaComputer...........4547.4.3LocalityinPrograms.....................4557.4.4ReducingFragmentation...................4577.4.5ManualDeallocationRequests...............4607.4.6ExercisesforSection7.4...................4637.5IntroductiontoGarbageCollection.................4637.5.1DesignGoalsforGarbageCollectors............4647.5.2Reachability..........................4667.5.3ReferenceCountingGarbageCollectors..........4687.5.4ExercisesforSection7.5...................4707.6IntroductiontoTrace-BasedCollection...............4707.6.1ABasicMark-and-SweepCollector.............4717.6.2BasicAbstraction......................4737.6.3OptimizingMark-and-Sweep................4757.6.4Mark-and-CompactGarbageCollectors..........4767.6.5Copyingcollectors......................4787.6.6ComparingCosts.......................4827.6.7ExercisesforSection7.6...................4827.7Short-PauseGarbageCollection...................4837.7.1IncrementalGarbageCollection...............4837.7.2IncrementalReachabilityAnalysis.............4857.7.3Partial-CollectionBasics...................4877.7.4GenerationalGarbageCollection..............4887.7.5TheTrainAlgorithm.....................490TABLEOFCONTENTSxvii7.7.6ExercisesforSection7.7...................4937.8AdvancedTopicsinGarbageCollection..............4947.8.1ParallelandConcurrentGarbageCollection........4957.8.2PartialObjectRelocation..................4977.8.3ConservativeCollectionforUnsafeLanguages.......4987.8.4WeakReferences.......................4987.8.5ExercisesforSection7.8...................4997.9SummaryofChapter7........................5007.10ReferencesforChapter7.......................5028CodeGeneration5058.1IssuesintheDesignofaCodeGenerator.............5068.1.1InputtotheCodeGenerator................5078.1.2TheTargetProgram.....................5078.1.3InstructionSelection.....................5088.1.4RegisterAllocation......................5108.1.5EvaluationOrder.......................5118.2TheTargetLanguage........................5128.2.1ASimpleTargetMachineModel..............5128.2.2ProgramandInstructionCosts...............5158.2.3ExercisesforSection8.2...................5168.3AddressesintheTargetCode....................5188.3.1StaticAllocation.......................5188.3.2StackAllocation.......................5208.3.3Run-TimeAddressesforNames...............5228.3.4ExercisesforSection8.3...................5248.4BasicBlocksandFlowGraphs...................5258.4.1BasicBlocks.........................5268.4.2Next-UseInformation....................5288.4.3FlowGraphs.........................5298.4.4RepresentationofFlowGraphs...............5308.4.5Loops.............................5318.4.6ExercisesforSection8.4...................5318.5OptimizationofBasicBlocks....................5338.5.1TheDAGRepresentationofBasicBlocks.........5338.5.2FindingLocalCommonSubexpressions..........5348.5.3DeadCodeElimination...................5358.5.4TheUseofAlgebraicIdentities...............5368.5.5RepresentationofArrayReferences.............5378.5.6PointerAssignmentsandProcedureCalls.........5398.5.7ReassemblingBasicBlocksFromDAG's..........5398.5.8ExercisesforSection8.5...................5418.6ASimpleCodeGenerator......................5428.6.1RegisterandAddressDescriptors..............5438.6.2TheCode-GenerationAlgorithm..............544xviiiTABLEOFCONTENTS8.6.3DesignoftheFunctiongetReg................5478.6.4ExercisesforSection8.6...................5488.7PeepholeOptimization........................5498.7.1EliminatingRedundantLoadsandStores.........5508.7.2EliminatingUnreachableCode...............5508.7.3Flow-of-ControlOptimizations...............5518.7.4AlgebraicSimpli\fcationandReductioninStrength....5528.7.5UseofMachineIdioms....................5528.7.6ExercisesforSection8.7...................5538.8RegisterAllocationandAssignment................5538.8.1GlobalRegisterAllocation..................5538.8.2UsageCounts.........................5548.8.3RegisterAssignmentforOuterLoops...........5568.8.4RegisterAllocationbyGraphColoring...........5568.8.5ExercisesforSection8.8...................5578.9InstructionSelectionbyTreeRewriting..............5588.9.1Tree-TranslationSchemes..................5588.9.2CodeGenerationbyTilinganInputTree.........5608.9.3PatternMatchingbyParsing................5638.9.4RoutinesforSemanticChecking..............5658.9.5GeneralTreeMatching....................5658.9.6ExercisesforSection8.9...................5678.10OptimalCodeGenerationforExpressions.............5678.10.1ErshovNumbers.......................5678.10.2GeneratingCodeFromLabeledExpressionTrees.....5688.10.3EvaluatingExpressionswithanInsu\u000ecientSupplyofReg-isters..............................5708.10.4ExercisesforSection8.10..................5728.11DynamicProgrammingCode-Generation..............5738.11.1ContiguousEvaluation....................5748.11.2TheDynamicProgrammingAlgorithm...........5758.11.3ExercisesforSection8.11..................5778.12SummaryofChapter8........................5788.13ReferencesforChapter8.......................5799Machine-IndependentOptimizations5839.1ThePrincipalSourcesofOptimization...............5849.1.1CausesofRedundancy....................5849.1.2ARunningExample:Quicksort...............5859.1.3Semantics-PreservingTransformations...........5869.1.4GlobalCommonSubexpressions..............5889.1.5CopyPropagation......................5909.1.6Dead-CodeElimination...................5919.1.7CodeMotion.........................5929.1.8InductionVariablesandReductioninStrength......592TABLEOFCONTENTSxix9.1.9ExercisesforSection9.1...................5969.2IntroductiontoData-FlowAnalysis................5979.2.1TheData-FlowAbstraction.................5979.2.2TheData-FlowAnalysisSchema..............5999.2.3Data-FlowSchemasonBasicBlocks............6009.2.4ReachingDe\fnitions.....................6019.2.5Live-VariableAnalysis....................6089.2.6AvailableExpressions....................6109.2.7Summary...........................6149.2.8ExercisesforSection9.2...................6159.3FoundationsofData-FlowAnalysis.................6189.3.1Semilattices..........................6189.3.2TransferFunctions......................6239.3.3TheIterativeAlgorithmforGeneralFrameworks.....6269.3.4MeaningofaData-FlowSolution..............6289.3.5ExercisesforSection9.3...................6319.4ConstantPropagation........................6329.4.1Data-FlowValuesfortheConstant-PropagationFrame-work..............................6339.4.2TheMeetfortheConstant-PropagationFramework...6339.4.3TransferFunctionsfortheConstant-PropagationFrame-work..............................6349.4.4MonotonicityoftheConstant-PropagationFramework..6359.4.5NondistributivityoftheConstant-PropagationFramework6359.4.6InterpretationoftheResults................6379.4.7ExercisesforSection9.4...................6379.5Partial-RedundancyElimination..................6399.5.1TheSourcesofRedundancy.................6399.5.2CanAllRedundancyBeEliminated?............6429.5.3TheLazy-Code-MotionProblem..............6449.5.4AnticipationofExpressions.................6459.5.5TheLazy-Code-MotionAlgorithm.............6469.5.6ExercisesforSection9.5...................6559.6LoopsinFlowGraphs........................6559.6.1Dominators..........................6569.6.2Depth-FirstOrdering....................6609.6.3EdgesinaDepth-FirstSpanningTree...........6619.6.4BackEdgesandReducibility................6629.6.5DepthofaFlowGraph...................6659.6.6NaturalLoops........................6659.6.7SpeedofConvergenceofIterativeData-FlowAlgorithms.6679.6.8ExercisesforSection9.6...................6699.7Region-BasedAnalysis........................6729.7.1Regions............................6729.7.2RegionHierarchiesforReducibleFlowGraphs......673xxTABLEOFCONTENTS9.7.3OverviewofaRegion-BasedAnalysis...........6769.7.4NecessaryAssumptionsAboutTransferFunctions....6789.7.5AnAlgorithmforRegion-BasedAnalysis.........6809.7.6HandlingNonreducibleFlowGraphs............6849.7.7ExercisesforSection9.7...................6869.8SymbolicAnalysis..........................6869.8.1A\u000eneExpressionsofReferenceVariables.........6879.8.2Data-FlowProblemFormulation..............6899.8.3Region-BasedSymbolicAnalysis..............6949.8.4ExercisesforSection9.8...................6999.9SummaryofChapter9........................7009.10ReferencesforChapter9.......................70310Instruction-LevelParallelism70710.1ProcessorArchitectures.......................70810.1.1InstructionPipelinesandBranchDelays..........70810.1.2PipelinedExecution.....................70910.1.3MultipleInstructionIssue..................71010.2Code-SchedulingConstraints....................71010.2.1DataDependence.......................71110.2.2FindingDependencesAmongMemoryAccesses......71210.2.3Tradeo\u000bBetweenRegisterUsageandParallelism.....71310.2.4PhaseOrderingBetweenRegisterAllocationandCodeScheduling..........................71610.2.5ControlDependence.....................71610.2.6SpeculativeExecutionSupport...............71710.2.7ABasicMachineModel...................71910.2.8ExercisesforSection10.2..................72010.3Basic-BlockScheduling........................72110.3.1Data-DependenceGraphs..................72210.3.2ListSchedulingofBasicBlocks...............72310.3.3PrioritizedTopologicalOrders...............72510.3.4ExercisesforSection10.3..................72610.4GlobalCodeScheduling.......................72710.4.1PrimitiveCodeMotion...................72810.4.2UpwardCodeMotion....................73010.4.3DownwardCodeMotion...................73110.4.4UpdatingDataDependences................73210.4.5GlobalSchedulingAlgorithms................73210.4.6AdvancedCodeMotionTechniques.............73610.4.7InteractionwithDynamicSchedulers............73710.4.8ExercisesforSection10.4..................73710.5SoftwarePipelining..........................73810.5.1Introduction.........................73810.5.2SoftwarePipeliningofLoops................740TABLEOFCONTENTSxxi10.5.3RegisterAllocationandCodeGeneration.........74310.5.4Do-AcrossLoops.......................74310.5.5GoalsandConstraintsofSoftwarePipelining.......74510.5.6ASoftware-PipeliningAlgorithm..............74910.5.7SchedulingAcyclicData-DependenceGraphs.......74910.5.8SchedulingCyclicDependenceGraphs...........75110.5.9ImprovementstothePipeliningAlgorithms........75810.5.10ModularVariableExpansion................75810.5.11ConditionalStatements...................76110.5.12HardwareSupportforSoftwarePipelining.........76210.5.13ExercisesforSection10.5..................76310.6SummaryofChapter10.......................76510.7ReferencesforChapter10......................76611OptimizingforParallelismandLocality76911.1BasicConcepts............................77111.1.1Multiprocessors........................77211.1.2ParallelisminApplications.................77311.1.3Loop-LevelParallelism....................77511.1.4DataLocality.........................77711.1.5IntroductiontoA\u000eneTransformTheory.........77811.2MatrixMultiply:AnIn-DepthExample..............78211.2.1TheMatrix-MultiplicationAlgorithm...........78211.2.2Optimizations.........................78511.2.3CacheInterference......................78811.2.4ExercisesforSection11.2..................78811.3IterationSpaces............................78811.3.1ConstructingIterationSpacesfromLoopNests......78811.3.2ExecutionOrderforLoopNests..............79111.3.3MatrixFormulationofInequalities.............79111.3.4IncorporatingSymbolicConstants.............79311.3.5ControllingtheOrderofExecution.............79311.3.6ChangingAxes........................79811.3.7ExercisesforSection11.3..................79911.4A\u000eneArrayIndexes.........................80111.4.1A\u000eneAccesses........................80211.4.2A\u000eneandNona\u000eneAccessesinPractice.........80311.4.3ExercisesforSection11.4..................80411.5DataReuse..............................80411.5.1TypesofReuse........................80511.5.2SelfReuse...........................80611.5.3Self-SpatialReuse......................80911.5.4GroupReuse.........................81111.5.5ExercisesforSection11.5..................81411.6ArrayData-DependenceAnalysis..................815xxiiTABLEOFCONTENTS11.6.1De\fnitionofDataDependenceofArrayAccesses.....81611.6.2IntegerLinearProgramming................81711.6.3TheGCDTest........................81811.6.4HeuristicsforSolvingIntegerLinearPrograms......82011.6.5SolvingGeneralIntegerLinearPrograms.........82311.6.6Summary...........................82511.6.7ExercisesforSection11.6..................82611.7FindingSynchronization-FreeParallelism.............82811.7.1AnIntroductoryExample..................82811.7.2A\u000eneSpacePartitions....................83011.7.3Space-PartitionConstraints.................83111.7.4SolvingSpace-PartitionConstraints............83511.7.5ASimpleCode-GenerationAlgorithm...........83811.7.6EliminatingEmptyIterations................84111.7.7EliminatingTestsfromInnermostLoops..........84411.7.8Source-CodeTransforms...................84611.7.9ExercisesforSection11.7..................85111.8SynchronizationBetweenParallelLoops..............85311.8.1AConstantNumberofSynchronizations..........85311.8.2Program-DependenceGraphs................85411.8.3HierarchicalTime......................85711.8.4TheParallelizationAlgorithm................85911.8.5ExercisesforSection11.8..................86011.9Pipelining...............................86111.9.1WhatisPipelining?.....................86111.9.2SuccessiveOver-Relaxation(SOR):AnExample.....86311.9.3FullyPermutableLoops...................86411.9.4PipeliningFullyPermutableLoops.............86411.9.5GeneralTheory........................86711.9.6Time-PartitionConstraints.................86811.9.7SolvingTime-PartitionConstraintsbyFarkas'Lemma..87211.9.8CodeTransformations....................87511.9.9ParallelismWithMinimumSynchronization........88011.9.10ExercisesforSection11.9..................88211.10LocalityOptimizations.......................88411.10.1TemporalLocalityofComputedData...........88511.10.2ArrayContraction......................88511.10.3PartitionInterleaving....................88711.10.4PuttingitAllTogether...................89011.10.5ExercisesforSection11.10..................89211.11OtherUsesofA\u000eneTransforms..................89311.11.1Distributedmemorymachines................89411.11.2Multi-Instruction-IssueProcessors.............89511.11.3VectorandSIMDInstructions...............89511.11.4Prefetching..........................896TABLEOFCONTENTSxxiii11.12SummaryofChapter11.......................89711.13ReferencesforChapter11......................89912InterproceduralAnalysis90312.1BasicConcepts............................90412.1.1CallGraphs..........................90412.1.2ContextSensitivity......................90612.1.3CallStrings..........................90812.1.4Cloning-BasedContext-SensitiveAnalysis.........91012.1.5Summary-BasedContext-SensitiveAnalysis........91112.1.6ExercisesforSection12.1..................91412.2WhyInterproceduralAnalysis?...................91612.2.1VirtualMethodInvocation.................91612.2.2PointerAliasAnalysis....................91712.2.3Parallelization........................91712.2.4DetectionofSoftwareErrorsandVulnerabilities.....91712.2.5SQLInjection.........................91812.2.6Bu\u000berOver\row........................92012.3ALogicalRepresentationofDataFlow...............92112.3.1IntroductiontoDatalog...................92112.3.2DatalogRules.........................92212.3.3IntensionalandExtensionalPredicates...........92412.3.4ExecutionofDatalogPrograms...............92712.3.5IncrementalEvaluationofDatalogPrograms.......92812.3.6ProblematicDatalogRules.................93012.3.7ExercisesforSection12.3..................93212.4ASimplePointer-AnalysisAlgorithm................93312.4.1WhyisPointerAnalysisDi\u000ecult..............93412.4.2AModelforPointersandReferences............93512.4.3FlowInsensitivity......................93612.4.4TheFormulationinDatalog.................93712.4.5UsingTypeInformation...................93812.4.6ExercisesforSection12.4..................93912.5Context-InsensitiveInterproceduralAnalysis............94112.5.1E\u000bectsofaMethodInvocation...............94112.5.2CallGraphDiscoveryinDatalog..............94312.5.3DynamicLoadingandRe\rection..............94412.5.4ExercisesforSection12.5..................94512.6Context-SensitivePointerAnalysis.................94512.6.1ContextsandCallStrings..................94612.6.2AddingContexttoDatalogRules..............94912.6.3AdditionalObservationsAboutSensitivity.........94912.6.4ExercisesforSection12.6..................95012.7DatalogImplementationbyBDD's.................95112.7.1BinaryDecisionDiagrams..................951xxivTABLEOFCONTENTS12.7.2TransformationsonBDD's.................95312.7.3RepresentingRelationsbyBDD's..............95412.7.4RelationalOperationsasBDDOperations.........95412.7.5UsingBDD'sforPoints-toAnalysis............95712.7.6ExercisesforSection12.7..................95812.8SummaryofChapter12.......................95812.9ReferencesforChapter12......................961AACompleteFrontEnd965A.1TheSourceLanguage........................965A.2Main..................................966A.3LexicalAnalyzer...........................967A.4SymbolTablesandTypes......................970A.5IntermediateCodeforExpressions.................971A.6JumpingCodeforBooleanExpressions..............974A.7IntermediateCodeforStatements.................978A.8Parser.................................981A.9CreatingtheFrontEnd.......................986BFindingLinearlyIndependentSolutions989Index993Chapter1IntroductionProgramminglanguagesarenotationsfordescribingcomputationstopeopleandtomachines.Theworldasweknowitdependsonprogramminglanguages,becauseallthesoftwarerunningonallthecomputerswaswritteninsomeprogramminglanguage.But,beforeaprogramcanberun,it\frstmustbetranslatedintoaforminwhichitcanbeexecutedbyacomputer.Thesoftwaresystemsthatdothistranslationarecalledcompilers.Thisbookisabouthowtodesignandimplementcompilers.Weshalldis-coverthatafewbasicideascanbeusedtoconstructtranslatorsforawidevarietyoflanguagesandmachines.Besidescompilers,theprinciplesandtech-niquesforcompilerdesignareapplicabletosomanyotherdomainsthattheyarelikelytobereusedmanytimesinthecareerofacomputerscientist.Thestudyofcompilerwritingtouchesuponprogramminglanguages,machinear-chitecture,languagetheory,algorithms,andsoftwareengineering.Inthispreliminarychapter,weintroducethedi\u000berentformsoflanguagetranslators,giveahighleveloverviewofthestructureofatypicalcompiler,anddiscussthetrendsinprogramminglanguagesandmachinearchitecturethatareshapingcompilers.Weincludesomeobservationsontherelationshipbetweencompilerdesignandcomputer-sciencetheoryandanoutlineoftheapplicationsofcompilertechnologythatgobeyondcompilation.Weendwithabriefoutlineofkeyprogramming-languageconceptsthatwillbeneededforourstudyofcompilers.1.1LanguageProcessorsSimplystated,acompilerisaprogramthatcanreadaprograminonelan-guage|thesourcelanguage|andtranslateitintoanequivalentprograminanotherlanguage|thetargetlanguage;seeFig.1.1.Animportantroleofthecompileristoreportanyerrorsinthesourceprogramthatitdetectsduringthetranslationprocess.12CHAPTER1.INTRODUCTIONsourceprogramCompilertargetprogramFigure1.1:AcompilerIfthetargetprogramisanexecutablemachine-languageprogram,itcanthenbecalledbytheusertoprocessinputsandproduceoutputs;seeFig.1.2.inputTargetProgramoutputFigure1.2:RunningthetargetprogramAninterpreterisanothercommonkindoflanguageprocessor.Insteadofproducingatargetprogramasatranslation,aninterpreterappearstodirectlyexecutetheoperationsspeci\fedinthesourceprogramoninputssuppliedbytheuser,asshowninFig.1.3.sourceprograminputInterpreteroutputFigure1.3:AninterpreterThemachine-languagetargetprogramproducedbyacompilerisusuallymuchfasterthananinterpreteratmappinginputstooutputs.Aninterpreter,however,canusuallygivebettererrordiagnosticsthanacompiler,becauseitexecutesthesourceprogramstatementbystatement.Example1.1:Javalanguageprocessorscombinecompilationandinterpreta-tion,asshowninFig.1.4.AJavasourceprogrammay\frstbecompiledintoanintermediateformcalledbytecodes.Thebytecodesaretheninterpretedbyavirtualmachine.Abene\ftofthisarrangementisthatbytecodescompiledononemachinecanbeinterpretedonanothermachine,perhapsacrossanetwork.Inordertoachievefasterprocessingofinputstooutputs,someJavacompil-ers,calledjust-in-timecompilers,translatethebytecodesintomachinelanguageimmediatelybeforetheyruntheintermediateprogramtoprocesstheinput.21.1.LANGUAGEPROCESSORS3outputMachineVirtualinputintermediateprogramsourceprogramTranslatorFigure1.4:AhybridcompilerInadditiontoacompiler,severalotherprogramsmayberequiredtocreateanexecutabletargetprogram,asshowninFig.1.5.Asourceprogrammaybedividedintomodulesstoredinseparate\fles.Thetaskofcollectingthesourceprogramissometimesentrustedtoaseparateprogram,calledapreprocessor.Thepreprocessormayalsoexpandshorthands,calledmacros,intosourcelan-guagestatements.Themodi\fedsourceprogramisthenfedtoacompiler.Thecompilermayproduceanassembly-languageprogramasitsoutput,becauseassemblylan-guageiseasiertoproduceasoutputandiseasiertodebug.Theassemblylanguageisthenprocessedbyaprogramcalledanassemblerthatproducesrelocatablemachinecodeasitsoutput.Largeprogramsareoftencompiledinpieces,sotherelocatablemachinecodemayhavetobelinkedtogetherwithotherrelocatableobject\flesandlibrary\flesintothecodethatactuallyrunsonthemachine.Thelinkerresolvesexternalmemoryaddresses,wherethecodeinone\flemayrefertoalocationinanother\fle.Theloaderthenputstogetheralloftheexecutableobject\flesintomemoryforexecution.1.1.1ExercisesforSection1.1Exercise1.1.1:Whatisthedi\u000berencebetweenacompilerandaninterpreter?Exercise1.1.2:Whataretheadvantagesof(a)acompileroveraninterpreter(b)aninterpreteroveracompiler?Exercise1.1.3:Whatadvantagesaretheretoalanguage-processingsysteminwhichthecompilerproducesassemblylanguageratherthanmachinelanguage?Exercise1.1.4:Acompilerthattranslatesahigh-levellanguageintoanotherhigh-levellanguageiscalledasource-to-sourcetranslator.WhatadvantagesaretheretousingCasatargetlanguageforacompiler?Exercise1.1.5:Describesomeofthetasksthatanassemblerneedstoper-form.4CHAPTER1.INTRODUCTIONrelocatableobject\fleslibrary\flestargetmachinecodeLinker/LoaderrelocatablemachinecodeAssemblertargetassemblyprogramCompilermodi\fedsourceprogramPreprocessorsourceprogramFigure1.5:Alanguage-processingsystem1.2TheStructureofaCompilerUptothispointwehavetreatedacompilerasasingleboxthatmapsasourceprogramintoasemanticallyequivalenttargetprogram.Ifweopenupthisboxalittle,weseethattherearetwopartstothismapping:analysisandsynthesis.Theanalysispartbreaksupthesourceprogramintoconstituentpiecesandimposesagrammaticalstructureonthem.Itthenusesthisstructuretocre-ateanintermediaterepresentationofthesourceprogram.Iftheanalysispartdetectsthatthesourceprogramiseithersyntacticallyillformedorsemanti-callyunsound,thenitmustprovideinformativemessages,sotheusercantakecorrectiveaction.Theanalysispartalsocollectsinformationaboutthesourceprogramandstoresitinadatastructurecalledasymboltable,whichispassedalongwiththeintermediaterepresentationtothesynthesispart.Thesynthesispartconstructsthedesiredtargetprogramfromtheinterme-diaterepresentationandtheinformationinthesymboltable.Theanalysispartisoftencalledthefrontendofthecompiler;thesynthesispartisthebackend.Ifweexaminethecompilationprocessinmoredetail,weseethatitoperatesasasequenceofphases,eachofwhichtransformsonerepresentationofthesourceprogramtoanother.AtypicaldecompositionofacompilerintophasesisshowninFig.1.6.Inpractice,severalphasesmaybegroupedtogether,andtheintermediaterepresentationsbetweenthegroupedphasesneednotbeconstructedexplicitly.Thesymboltable,whichstoresinformationaboutthe1.2.THESTRUCTUREOFACOMPILER5SemanticAnalyzersyntaxtreeIntermediateCodeGeneratorintermediaterepresentationMachine-IndependentCodeOptimizerCodeGeneratorintermediaterepresentationtarget-machinecodeMachine-DependentCodeOptimizertarget-machinecodeSymbolTableSyntaxAnalyzersyntaxtreetokenstreamLexicalAnalyzercharacterstreamFigure1.6:Phasesofacompilerentiresourceprogram,isusedbyallphasesofthecompiler.Somecompilershaveamachine-independentoptimizationphasebetweenthefrontendandthebackend.Thepurposeofthisoptimizationphaseistoperformtransformationsontheintermediaterepresentation,sothatthebackendcanproduceabettertargetprogramthanitwouldhaveotherwisepro-ducedfromanunoptimizedintermediaterepresentation.Sinceoptimizationisoptional,oneortheotherofthetwooptimizationphasesshowninFig.1.6maybemissing.1.2.1LexicalAnalysisThe\frstphaseofacompileriscalledlexicalanalysisorscanning.Thelex-icalanalyzerreadsthestreamofcharactersmakingupthesourceprogram6CHAPTER1.INTRODUCTIONandgroupsthecharactersintomeaningfulsequencescalledlexemes.Foreachlexeme,thelexicalanalyzerproducesasoutputatokenoftheformhtoken-name;attribute-valueithatitpassesontothesubsequentphase,syntaxanalysis.Inthetoken,the\frstcomponenttoken-nameisanabstractsymbolthatisusedduringsyntaxanalysis,andthesecondcomponentattribute-valuepointstoanentryinthesymboltableforthistoken.Informationfromthesymbol-tableentryisneededforsemanticanalysisandcodegeneration.Forexample,supposeasourceprogramcontainstheassignmentstatementposition=initial+rate*60(1.1)Thecharactersinthisassignmentcouldbegroupedintothefollowinglexemesandmappedintothefollowingtokenspassedontothesyntaxanalyzer:1.positionisalexemethatwouldbemappedintoatokenhid;1i,whereidisanabstractsymbolstandingforidenti\ferand1pointstothesymbol-tableentryforposition.Thesymbol-tableentryforanidenti\ferholdsinformationabouttheidenti\fer,suchasitsnameandtype.2.Theassignmentsymbol=isalexemethatismappedintothetokenh=i.Sincethistokenneedsnoattribute-value,wehaveomittedthesecondcomponent.Wecouldhaveusedanyabstractsymbolsuchasassignforthetoken-name,butfornotationalconveniencewehavechosentousethelexemeitselfasthenameoftheabstractsymbol.3.initialisalexemethatismappedintothetokenhid;2i,where2pointstothesymbol-tableentryforinitial.4.+isalexemethatismappedintothetokenh+i.5.rateisalexemethatismappedintothetokenhid;3i,where3pointstothesymbol-tableentryforrate.6.*isalexemethatismappedintothetokenh\u0003i.7.60isalexemethatismappedintothetokenh60i.1Blanksseparatingthelexemeswouldbediscardedbythelexicalanalyzer.Figure1.7showstherepresentationoftheassignmentstatement(1.1)afterlexicalanalysisasthesequenceoftokenshid;1ih=ihid;2ih+ihid;3ih\u0003ih60i(1.2)Inthisrepresentation,thetokennames=,+,and\u0003areabstractsymbolsfortheassignment,addition,andmultiplicationoperators,respectively.1.2.THESTRUCTUREOFACOMPILER7SYMBOLTABLEposition=initial+rate*60\u0001\u0001\u0001LexicalAnalyzerhid;1ih=ihid;2ih+ihid;3ih\u0003ih60irateid1=id2+t1CodeGeneratorLDFR2,id3t1=id3*60.0CodeOptimizerid1=t3MULFR2,R2,#60.0LDFR1,id2ADDFR1,R1,R2STFid1,R1t3=id2+t2t2=id3*t1t1=inttofloat(60)IntermediateCodeGeneratorSemanticAnalyzerSyntaxAnalyzer3\u0001\u0001\u0001initial2\u0001\u0001\u0001position1+=hid;1i+hid;2i60intto\roathid;3i\u0003hid;2i\u0003hid;1i=hid;3i60Figure1.7:Translationofanassignmentstatement8CHAPTER1.INTRODUCTION1.2.2SyntaxAnalysisThesecondphaseofthecompilerissyntaxanalysisorparsing.Theparserusesthe\frstcomponentsofthetokensproducedbythelexicalanalyzertocreateatree-likeintermediaterepresentationthatdepictsthegrammaticalstructureofthetokenstream.Atypicalrepresentationisasyntaxtreeinwhicheachinteriornoderepresentsanoperationandthechildrenofthenoderepresenttheargumentsoftheoperation.Asyntaxtreeforthetokenstream(1.2)isshownastheoutputofthesyntacticanalyzerinFig.1.7.Thistreeshowstheorderinwhichtheoperationsintheassignmentposition=initial+rate*60aretobeperformed.Thetreehasaninteriornodelabeled\u0003withhid;3iasitsleftchildandtheinteger60asitsrightchild.Thenodehid;3irepresentstheidenti\ferrate.Thenodelabeled\u0003makesitexplicitthatwemust\frstmultiplythevalueofrateby60.Thenodelabeled+indicatesthatwemustaddtheresultofthismultiplicationtothevalueofinitial.Therootofthetree,labeled=,indicatesthatwemuststoretheresultofthisadditionintothelocationfortheidenti\ferposition.Thisorderingofoperationsisconsistentwiththeusualconventionsofarithmeticwhichtellusthatmultiplicationhashigherprecedencethanaddition,andhencethatthemultiplicationistobeperformedbeforetheaddition.Thesubsequentphasesofthecompilerusethegrammaticalstructuretohelpanalyzethesourceprogramandgeneratethetargetprogram.InChapter4weshallusecontext-freegrammarstospecifythegrammaticalstructureofprogramminglanguagesanddiscussalgorithmsforconstructinge\u000ecientsyntaxanalyzersautomaticallyfromcertainclassesofgrammars.InChapters2and5weshallseethatsyntax-directedde\fnitionscanhelpspecifythetranslationofprogramminglanguageconstructs.1.2.3SemanticAnalysisThesemanticanalyzerusesthesyntaxtreeandtheinformationinthesymboltabletocheckthesourceprogramforsemanticconsistencywiththelanguagede\fnition.Italsogatherstypeinformationandsavesitineitherthesyntaxtreeorthesymboltable,forsubsequentuseduringintermediate-codegeneration.Animportantpartofsemanticanalysisistypechecking,wherethecompilerchecksthateachoperatorhasmatchingoperands.Forexample,manyprogram-minglanguagede\fnitionsrequireanarrayindextobeaninteger;thecompilermustreportanerrorifa\roating-pointnumberisusedtoindexanarray.Thelanguagespeci\fcationmaypermitsometypeconversionscalledcoer-cions.Forexample,abinaryarithmeticoperatormaybeappliedtoeitherapairofintegersortoapairof\roating-pointnumbers.Iftheoperatorisappliedtoa\roating-pointnumberandaninteger,thecompilermayconvertorcoercetheintegerintoa\roating-pointnumber.1.2.THESTRUCTUREOFACOMPILER9SuchacoercionappearsinFig.1.7.Supposethatposition,initial,andratehavebeendeclaredtobe\roating-pointnumbers,andthatthelexeme60byitselfformsaninteger.ThetypecheckerinthesemanticanalyzerinFig.1.7discoversthattheoperator\u0003isappliedtoa\roating-pointnumberrateandaninteger60.Inthiscase,theintegermaybeconvertedintoa\roating-pointnumber.InFig.1.7,noticethattheoutputofthesemanticanalyzerhasanextranodefortheoperatorintto\roat,whichexplicitlyconvertsitsintegerargumentintoa\roating-pointnumber.TypecheckingandsemanticanalysisarediscussedinChapter6.1.2.4IntermediateCodeGenerationIntheprocessoftranslatingasourceprogramintotargetcode,acompilermayconstructoneormoreintermediaterepresentations,whichcanhaveavarietyofforms.Syntaxtreesareaformofintermediaterepresentation;theyarecommonlyusedduringsyntaxandsemanticanalysis.Aftersyntaxandsemanticanalysisofthesourceprogram,manycompil-ersgenerateanexplicitlow-levelormachine-likeintermediaterepresentation,whichwecanthinkofasaprogramforanabstractmachine.Thisintermedi-aterepresentationshouldhavetwoimportantproperties:itshouldbeeasytoproduceanditshouldbeeasytotranslateintothetargetmachine.InChapter6,weconsideranintermediateformcalledthree-addresscode,whichconsistsofasequenceofassembly-likeinstructionswiththreeoperandsperinstruction.Eachoperandcanactlikearegister.Theoutputoftheinter-mediatecodegeneratorinFig.1.7consistsofthethree-addresscodesequencet1=inttofloat(60)t2=id3*t1t3=id2+t2id1=t3(1.3)Thereareseveralpointsworthnotingaboutthree-addressinstructions.First,eachthree-addressassignmentinstructionhasatmostoneoperatorontherightside.Thus,theseinstructions\fxtheorderinwhichoperationsaretobedone;themultiplicationprecedestheadditioninthesourceprogram(1.1).Sec-ond,thecompilermustgenerateatemporarynametoholdthevaluecomputedbyathree-addressinstruction.Third,some\\three-addressinstructions\"likethe\frstandlastinthesequence(1.3),above,havefewerthanthreeoperands.InChapter6,wecovertheprincipalintermediaterepresentationsusedincompilers.Chapter5introducestechniquesforsyntax-directedtranslationthatareappliedinChapter6totypecheckingandintermediate-codegenerationfortypicalprogramminglanguageconstructssuchasexpressions,\row-of-controlconstructs,andprocedurecalls.10CHAPTER1.INTRODUCTION1.2.5CodeOptimizationThemachine-independentcode-optimizationphaseattemptstoimprovetheintermediatecodesothatbettertargetcodewillresult.Usuallybettermeansfaster,butotherobjectivesmaybedesired,suchasshortercode,ortargetcodethatconsumeslesspower.Forexample,astraightforwardalgorithmgeneratestheintermediatecode(1.3),usinganinstructionforeachoperatorinthetreerepresentationthatcomesfromthesemanticanalyzer.Asimpleintermediatecodegenerationalgorithmfollowedbycodeoptimiza-tionisareasonablewaytogenerategoodtargetcode.Theoptimizercandeducethattheconversionof60fromintegerto\roatingpointcanbedoneonceandforallatcompiletime,sotheintto\roatoperationcanbeeliminatedbyreplacingtheinteger60bythe\roating-pointnumber60.0.Moreover,t3isusedonlyoncetotransmititsvaluetoid1sotheoptimizercantransform(1.3)intotheshortersequencet1=id3*60.0id1=id2+t1(1.4)Thereisagreatvariationintheamountofcodeoptimizationdi\u000berentcom-pilersperform.Inthosethatdothemost,theso-called\\optimizingcompilers,\"asigni\fcantamountoftimeisspentonthisphase.Therearesimpleopti-mizationsthatsigni\fcantlyimprovetherunningtimeofthetargetprogramwithoutslowingdowncompilationtoomuch.Thechaptersfrom8ondiscussmachine-independentandmachine-dependentoptimizationsindetail.1.2.6CodeGenerationThecodegeneratortakesasinputanintermediaterepresentationofthesourceprogramandmapsitintothetargetlanguage.Ifthetargetlanguageismachinecode,registersormemorylocationsareselectedforeachofthevariablesusedbytheprogram.Then,theintermediateinstructionsaretranslatedintosequencesofmachineinstructionsthatperformthesametask.Acrucialaspectofcodegenerationisthejudiciousassignmentofregisterstoholdvariables.Forexample,usingregistersR1andR2,theintermediatecodein(1.4)mightgettranslatedintothemachinecodeLDFR2,id3MULFR2,R2,#60.0LDFR1,id2ADDFR1,R1,R2STFid1,R1(1.5)The\frstoperandofeachinstructionspeci\fesadestination.TheFineachinstructiontellsusthatitdealswith\roating-pointnumbers.Thecodein1.2.THESTRUCTUREOFACOMPILER11(1.5)loadsthecontentsofaddressid3intoregisterR2,thenmultipliesitwith\roating-pointconstant60.0.The#signi\festhat60.0istobetreatedasanimmediateconstant.Thethirdinstructionmovesid2intoregisterR1andthefourthaddstoitthevaluepreviouslycomputedinregisterR2.Finally,thevalueinregisterR1isstoredintotheaddressofid1,sothecodecorrectlyimplementstheassignmentstatement(1.1).Chapter8coverscodegeneration.Thisdiscussionofcodegenerationhasignoredtheimportantissueofstor-ageallocationfortheidenti\fersinthesourceprogram.AsweshallseeinChapter7,theorganizationofstorageatrun-timedependsonthelanguagebe-ingcompiled.Storage-allocationdecisionsaremadeeitherduringintermediatecodegenerationorduringcodegeneration.1.2.7Symbol-TableManagementAnessentialfunctionofacompileristorecordthevariablenamesusedinthesourceprogramandcollectinformationaboutvariousattributesofeachname.Theseattributesmayprovideinformationaboutthestorageallocatedforaname,itstype,itsscope(whereintheprogramitsvaluemaybeused),andinthecaseofprocedurenames,suchthingsasthenumberandtypesofitsarguments,themethodofpassingeachargument(forexample,byvalueorbyreference),andthetypereturned.Thesymboltableisadatastructurecontainingarecordforeachvariablename,with\feldsfortheattributesofthename.Thedatastructureshouldbedesignedtoallowthecompilerto\fndtherecordforeachnamequicklyandtostoreorretrievedatafromthatrecordquickly.SymboltablesarediscussedinChapter2.1.2.8TheGroupingofPhasesintoPassesThediscussionofphasesdealswiththelogicalorganizationofacompiler.Inanimplementation,activitiesfromseveralphasesmaybegroupedtogetherintoapassthatreadsaninput\fleandwritesanoutput\fle.Forexample,thefront-endphasesoflexicalanalysis,syntaxanalysis,semanticanalysis,andintermediatecodegenerationmightbegroupedtogetherintoonepass.Codeoptimizationmightbeanoptionalpass.Thentherecouldbeaback-endpassconsistingofcodegenerationforaparticulartargetmachine.Somecompilercollectionshavebeencreatedaroundcarefullydesignedin-termediaterepresentationsthatallowthefrontendforaparticularlanguagetointerfacewiththebackendforacertaintargetmachine.Withthesecollections,wecanproducecompilersfordi\u000berentsourcelanguagesforonetargetmachinebycombiningdi\u000berentfrontendswiththebackendforthattargetmachine.Similarly,wecanproducecompilersfordi\u000berenttargetmachines,bycombiningafrontendwithbackendsfordi\u000berenttargetmachines.12CHAPTER1.INTRODUCTION1.2.9Compiler-ConstructionToolsThecompilerwriter,likeanysoftwaredeveloper,canpro\ftablyusemodernsoftwaredevelopmentenvironmentscontainingtoolssuchaslanguageeditors,debuggers,versionmanagers,pro\flers,testharnesses,andsoon.Inadditiontothesegeneralsoftware-developmenttools,othermorespecializedtoolshavebeencreatedtohelpimplementvariousphasesofacompiler.Thesetoolsusespecializedlanguagesforspecifyingandimplementingspe-ci\fccomponents,andmanyusequitesophisticatedalgorithms.Themostsuc-cessfultoolsarethosethathidethedetailsofthegenerationalgorithmandproducecomponentsthatcanbeeasilyintegratedintotheremainderofthecompiler.Somecommonlyusedcompiler-constructiontoolsinclude1.Parsergeneratorsthatautomaticallyproducesyntaxanalyzersfromagrammaticaldescriptionofaprogramminglanguage.2.Scannergeneratorsthatproducelexicalanalyzersfromaregular-expres-siondescriptionofthetokensofalanguage.3.Syntax-directedtranslationenginesthatproducecollectionsofroutinesforwalkingaparsetreeandgeneratingintermediatecode.4.Code-generatorgeneratorsthatproduceacodegeneratorfromacollectionofrulesfortranslatingeachoperationoftheintermediatelanguageintothemachinelanguageforatargetmachine.5.Data-\rowanalysisenginesthatfacilitatethegatheringofinformationabouthowvaluesaretransmittedfromonepartofaprogramtoeachotherpart.Data-\rowanalysisisakeypartofcodeoptimization.6.Compiler-constructiontoolkitsthatprovideanintegratedsetofroutinesforconstructingvariousphasesofacompiler.Weshalldescribemanyofthesetoolsthroughoutthisbook.1.3TheEvolutionofProgrammingLanguagesThe\frstelectroniccomputersappearedinthe1940'sandwereprogrammedinmachinelanguagebysequencesof0'sand1'sthatexplicitlytoldthecomputerwhatoperationstoexecuteandinwhatorder.Theoperationsthemselveswereverylowlevel:movedatafromonelocationtoanother,addthecontentsoftworegisters,comparetwovalues,andsoon.Needlesstosay,thiskindofprogrammingwasslow,tedious,anderrorprone.Andoncewritten,theprogramswerehardtounderstandandmodify.1.3.THEEVOLUTIONOFPROGRAMMINGLANGUAGES131.3.1TheMovetoHigher-levelLanguagesThe\frststeptowardsmorepeople-friendlyprogramminglanguageswasthedevelopmentofmnemonicassemblylanguagesintheearly1950's.Initially,theinstructionsinanassemblylanguagewerejustmnemonicrepresentationsofmachineinstructions.Later,macroinstructionswereaddedtoassemblylanguagessothataprogrammercouldde\fneparameterizedshorthandsforfrequentlyusedsequencesofmachineinstructions.Amajorsteptowardshigher-levellanguageswasmadeinthelatterhalfofthe1950'swiththedevelopmentofFortranforscienti\fccomputation,Cobolforbusinessdataprocessing,andLispforsymboliccomputation.Thephilos-ophybehindtheselanguageswastocreatehigher-levelnotationswithwhichprogrammerscouldmoreeasilywritenumericalcomputations,businessappli-cations,andsymbolicprograms.Theselanguagesweresosuccessfulthattheyarestillinusetoday.Inthefollowingdecades,manymorelanguageswerecreatedwithinnovativefeaturestohelpmakeprogrammingeasier,morenatural,andmorerobust.Laterinthischapter,weshalldiscusssomekeyfeaturesthatarecommontomanymodernprogramminglanguages.Today,therearethousandsofprogramminglanguages.Theycanbeclassi-\fedinavarietyofways.Oneclassi\fcationisbygeneration.First-generationlanguagesarethemachinelanguages,second-generationtheassemblylanguages,andthird-generationthehigher-levellanguageslikeFortran,Cobol,Lisp,C,C++,C#,andJava.Fourth-generationlanguagesarelanguagesdesignedforspeci\fcapplicationslikeNOMADforreportgeneration,SQLfordatabasequeries,andPostscriptfortextformatting.Theterm\ffth-generationlanguagehasbeenappliedtologic-andconstraint-basedlanguageslikePrologandOPS5.Anotherclassi\fcationoflanguagesusesthetermimperativeforlanguagesinwhichaprogramspeci\feshowacomputationistobedoneanddeclarativeforlanguagesinwhichaprogramspeci\feswhatcomputationistobedone.LanguagessuchasC,C++,C#,andJavaareimperativelanguages.Inimper-ativelanguagesthereisanotionofprogramstateandstatementsthatchangethestate.FunctionallanguagessuchasMLandHaskellandconstraintlogiclanguagessuchasPrologareoftenconsideredtobedeclarativelanguages.ThetermvonNeumannlanguageisappliedtoprogramminglanguageswhosecomputationalmodelisbasedonthevonNeumanncomputerarchi-tecture.Manyoftoday'slanguages,suchasFortranandCarevonNeumannlanguages.Anobject-orientedlanguageisonethatsupportsobject-orientedprogram-ming,aprogrammingstyleinwhichaprogramconsistsofacollectionofobjectsthatinteractwithoneanother.Simula67andSmalltalkaretheearliestmajorobject-orientedlanguages.LanguagessuchasC++,C#,Java,andRubyaremorerecentobject-orientedlanguages.Scriptinglanguagesareinterpretedlanguageswithhigh-leveloperatorsde-signedfor\\gluingtogether\"computations.Thesecomputationswereoriginally14CHAPTER1.INTRODUCTIONcalled\\scripts.\"Awk,JavaScript,Perl,PHP,Python,Ruby,andTclarepop-ularexamplesofscriptinglanguages.ProgramswritteninscriptinglanguagesareoftenmuchshorterthanequivalentprogramswritteninlanguageslikeC.1.3.2ImpactsonCompilersSincethedesignofprogramminglanguagesandcompilersareintimatelyrelated,theadvancesinprogramminglanguagesplacednewdemandsoncompilerwrit-ers.Theyhadtodevisealgorithmsandrepresentationstotranslateandsupportthenewlanguagefeatures.Sincethe1940's,computerarchitecturehasevolvedaswell.Notonlydidthecompilerwritershavetotracknewlanguagefea-tures,theyalsohadtodevisetranslationalgorithmsthatwouldtakemaximaladvantageofthenewhardwarecapabilities.Compilerscanhelppromotetheuseofhigh-levellanguagesbyminimizingtheexecutionoverheadoftheprogramswrittenintheselanguages.Compilersarealsocriticalinmakinghigh-performancecomputerarchitecturese\u000bectiveonusers'applications.Infact,theperformanceofacomputersystemissodependentoncompilertechnologythatcompilersareusedasatoolinevaluatingarchitecturalconceptsbeforeacomputerisbuilt.Compilerwritingischallenging.Acompilerbyitselfisalargeprogram.Moreover,manymodernlanguage-processingsystemshandleseveralsourcelan-guagesandtargetmachineswithinthesameframework;thatis,theyserveascollectionsofcompilers,possiblyconsistingofmillionsoflinesofcode.Con-sequently,goodsoftware-engineeringtechniquesareessentialforcreatingandevolvingmodernlanguageprocessors.Acompilermusttranslatecorrectlythepotentiallyin\fnitesetofprogramsthatcouldbewritteninthesourcelanguage.Theproblemofgeneratingtheoptimaltargetcodefromasourceprogramisundecidableingeneral;thus,compilerwritersmustevaluatetradeo\u000bsaboutwhatproblemstotackleandwhatheuristicstousetoapproachtheproblemofgeneratinge\u000ecientcode.Astudyofcompilersisalsoastudyofhowtheorymeetspractice,asweshallseeinSection1.4.Thepurposeofthistextistoteachthemethodologyandfundamentalideasusedincompilerdesign.Itisnottheintentionofthistexttoteachallthealgorithmsandtechniquesthatcouldbeusedforbuildingastate-of-the-artlanguage-processingsystem.However,readersofthistextwillacquirethebasicknowledgeandunderstandingtolearnhowtobuildacompilerrelativelyeasily.1.3.3ExercisesforSection1.3Exercise1.3.1:Indicatewhichofthefollowingterms:a)imperativeb)declarativec)vonNeumannd)object-orientede)functionalf)third-generationg)fourth-generationh)scripting1.4.THESCIENCEOFBUILDINGACOMPILER15applytowhichofthefollowinglanguages:1)C2)C++3)Cobol4)Fortran5)Java6)Lisp7)ML8)Perl9)Python10)VB.1.4TheScienceofBuildingaCompilerCompilerdesignisfullofbeautifulexampleswherecomplicatedreal-worldprob-lemsaresolvedbyabstractingtheessenceoftheproblemmathematically.Theseserveasexcellentillustrationsofhowabstractionscanbeusedtosolveprob-lems:takeaproblem,formulateamathematicalabstractionthatcapturesthekeycharacteristics,andsolveitusingmathematicaltechniques.Theproblemformulationmustbegroundedinasolidunderstandingofthecharacteristicsofcomputerprograms,andthesolutionmustbevalidatedandre\fnedempirically.Acompilermustacceptallsourceprogramsthatconformtothespeci\fcationofthelanguage;thesetofsourceprogramsisin\fniteandanyprogramcanbeverylarge,consistingofpossiblymillionsoflinesofcode.Anytransformationperformedbythecompilerwhiletranslatingasourceprogrammustpreservethemeaningoftheprogrambeingcompiled.Compilerwritersthushavein\ruenceovernotjustthecompilerstheycreate,butalltheprogramsthattheircom-pilerscompile.Thisleveragemakeswritingcompilersparticularlyrewarding;however,italsomakescompilerdevelopmentchallenging.1.4.1ModelinginCompilerDesignandImplementationThestudyofcompilersismainlyastudyofhowwedesigntherightmathe-maticalmodelsandchoosetherightalgorithms,whilebalancingtheneedforgeneralityandpoweragainstsimplicityande\u000eciency.Someofmostfundamentalmodelsare\fnite-statemachinesandregularexpressions,whichweshallmeetinChapter3.Thesemodelsareusefulforde-scribingthelexicalunitsofprograms(keywords,identi\fers,andsuch)andfordescribingthealgorithmsusedbythecompilertorecognizethoseunits.Alsoamongthemostfundamentalmodelsarecontext-freegrammars,usedtode-scribethesyntacticstructureofprogramminglanguagessuchasthenestingofparenthesesorcontrolconstructs.WeshallstudygrammarsinChapter4.Sim-ilarly,treesareanimportantmodelforrepresentingthestructureofprogramsandtheirtranslationintoobjectcode,asweshallseeinChapter5.1.4.2TheScienceofCodeOptimizationTheterm\\optimization\"incompilerdesignreferstotheattemptsthatacom-pilermakestoproducecodethatismoree\u000ecientthantheobviouscode.\\Op-timization\"isthusamisnomer,sincethereisnowaythatthecodeproducedbyacompilercanbeguaranteedtobeasfastorfasterthananyothercodethatperformsthesametask.16CHAPTER1.INTRODUCTIONInmoderntimes,theoptimizationofcodethatacompilerperformshasbecomebothmoreimportantandmorecomplex.Itismorecomplexbecauseprocessorarchitectureshavebecomemorecomplex,yieldingmoreopportunitiestoimprovethewaycodeexecutes.Itismoreimportantbecausemassivelypar-allelcomputersrequiresubstantialoptimization,ortheirperformancesu\u000bersbyordersofmagnitude.Withthelikelyprevalenceofmulticoremachines(com-puterswithchipsthathavelargenumbersofprocessorsonthem),allcompilerswillhavetofacetheproblemoftakingadvantageofmultiprocessormachines.Itishard,ifnotimpossible,tobuildarobustcompileroutof\\hacks.\"Thus,anextensiveandusefultheoryhasbeenbuiltuparoundtheproblemofoptimizingcode.Theuseofarigorousmathematicalfoundationallowsustoshowthatanoptimizationiscorrectandthatitproducesthedesirablee\u000bectforallpossibleinputs.Weshallsee,startinginChapter9,howmodelssuchasgraphs,matrices,andlinearprogramsarenecessaryifthecompileristoproducewelloptimizedcode.Ontheotherhand,puretheoryaloneisinsu\u000ecient.Likemanyreal-worldproblems,therearenoperfectanswers.Infact,mostofthequestionsthatweaskincompileroptimizationareundecidable.Oneofthemostimportantskillsincompilerdesignistheabilitytoformulatetherightproblemtosolve.Weneedagoodunderstandingofthebehaviorofprogramstostartwithandthoroughexperimentationandevaluationtovalidateourintuitions.Compileroptimizationsmustmeetthefollowingdesignobjectives:\u000fTheoptimizationmustbecorrect,thatis,preservethemeaningofthecompiledprogram,\u000fTheoptimizationmustimprovetheperformanceofmanyprograms,\u000fThecompilationtimemustbekeptreasonable,and\u000fTheengineeringe\u000bortrequiredmustbemanageable.Itisimpossibletooveremphasizetheimportanceofcorrectness.Itistrivialtowriteacompilerthatgeneratesfastcodeifthegeneratedcodeneednotbecorrect!Optimizingcompilersaresodi\u000eculttogetrightthatwedaresaythatnooptimizingcompileriscompletelyerror-free!Thus,themostimportantobjectiveinwritingacompileristhatitiscorrect.Thesecondgoalisthatthecompilermustbee\u000bectiveinimprovingtheper-formanceofmanyinputprograms.Normally,performancemeansthespeedoftheprogramexecution.Especiallyinembeddedapplications,wemayalsowishtominimizethesizeofthegeneratedcode.Andinthecaseofmobiledevices,itisalsodesirablethatthecodeminimizespowerconsumption.Typically,thesameoptimizationsthatspeedupexecutiontimealsoconservepower.Besidesperformance,usabilityaspectssuchaserrorreportinganddebuggingarealsoimportant.Third,weneedtokeepthecompilationtimeshorttosupportarapiddevel-opmentanddebuggingcycle.Thisrequirementhasbecomeeasiertomeetas1.5.APPLICATIONSOFCOMPILERTECHNOLOGY17machinesgetfaster.Often,aprogramis\frstdevelopedanddebuggedwithoutprogramoptimizations.Notonlyisthecompilationtimereduced,butmoreimportantly,unoptimizedprogramsareeasiertodebug,becausetheoptimiza-tionsintroducedbyacompileroftenobscuretherelationshipbetweenthesourcecodeandtheobjectcode.Turningonoptimizationsinthecompilersometimesexposesnewproblemsinthesourceprogram;thustestingmustagainbeper-formedontheoptimizedcode.Theneedforadditionaltestingsometimesdeterstheuseofoptimizationsinapplications,especiallyiftheirperformanceisnotcritical.Finally,acompilerisacomplexsystem;wemustkeepthesystemsim-pletoassurethattheengineeringandmaintenancecostsofthecompileraremanageable.Thereisanin\fnitenumberofprogramoptimizationsthatwecouldimplement,andittakesanontrivialamountofe\u000borttocreateacorrectande\u000bectiveoptimization.Wemustprioritizetheoptimizations,implementingonlythosethatleadtothegreatestbene\ftsonsourceprogramsencounteredinpractice.Thus,instudyingcompilers,welearnnotonlyhowtobuildacompiler,butalsothegeneralmethodologyofsolvingcomplexandopen-endedproblems.Theapproachusedincompilerdevelopmentinvolvesboththeoryandexperimenta-tion.Wenormallystartbyformulatingtheproblembasedonourintuitionsonwhattheimportantissuesare.1.5ApplicationsofCompilerTechnologyCompilerdesignisnotonlyaboutcompilers,andmanypeopleusethetechnol-ogylearnedbystudyingcompilersinschool,yethavenever,strictlyspeaking,written(evenpartof)acompilerforamajorprogramminglanguage.Compilertechnologyhasotherimportantusesaswell.Additionally,compilerdesignim-pactsseveralotherareasofcomputerscience.Inthissection,wereviewthemostimportantinteractionsandapplicationsofthetechnology.1.5.1ImplementationofHigh-LevelProgrammingLanguagesAhigh-levelprogramminglanguagede\fnesaprogrammingabstraction:theprogrammerexpressesanalgorithmusingthelanguage,andthecompilermusttranslatethatprogramtothetargetlanguage.Generally,higher-levelprogram-minglanguagesareeasiertoprogramin,butarelesse\u000ecient,thatis,thetargetprogramsrunmoreslowly.Programmersusingalow-levellanguagehavemorecontroloveracomputationandcan,inprinciple,producemoree\u000ecientcode.Unfortunately,lower-levelprogramsarehardertowriteand|worsestill|lessportable,morepronetoerrors,andhardertomaintain.Optimizingcom-pilersincludetechniquestoimprovetheperformanceofgeneratedcode,thuso\u000bsettingtheine\u000eciencyintroducedbyhigh-levelabstractions.18CHAPTER1.INTRODUCTIONExample1.2:TheregisterkeywordintheCprogramminglanguageisanearlyexampleoftheinteractionbetweencompilertechnologyandlanguageevo-lution.WhentheClanguagewascreatedinthemid1970s,itwasconsiderednecessarytoletaprogrammercontrolwhichprogramvariablesresideinregis-ters.Thiscontrolbecameunnecessaryase\u000bectiveregister-allocationtechniquesweredeveloped,andmostmodernprogramsnolongerusethislanguagefeature.Infact,programsthatusetheregisterkeywordmaylosee\u000eciency,becauseprogrammersoftenarenotthebestjudgeofverylow-levelmatterslikeregisterallocation.Theoptimalchoiceofregisterallocationdependsgreatlyonthespeci\fcsofamachinearchitecture.Hardwiringlow-levelresource-managementdecisionslikeregisterallocationmayinfacthurtperformance,especiallyiftheprogramisrunonmachinesotherthantheoneforwhichitwaswritten.2Themanyshiftsinthepopularchoiceofprogramminglanguageshavebeeninthedirectionofincreasedlevelsofabstraction.Cwasthepredominantsystemsprogramminglanguageofthe80's;manyofthenewprojectsstartedinthe90'schoseC++;Java,introducedin1995,gainedpopularityquicklyinthelate90's.Thenewprogramming-languagefeaturesintroducedineachroundspurrednewresearchincompileroptimization.Inthefollowing,wegiveanoverviewonthemainlanguagefeaturesthathavestimulatedsigni\fcantadvancesincompilertechnology.Practicallyallcommonprogramminglanguages,includingC,FortranandCobol,supportuser-de\fnedaggregatedatatypes,suchasarraysandstructures,andhigh-levelcontrol\row,suchasloopsandprocedureinvocations.Ifwejusttakeeachhigh-levelconstructordata-accessoperationandtranslateitdirectlytomachinecode,theresultwouldbeveryine\u000ecient.Abodyofcompileroptimizations,knownasdata-\rowoptimizations,hasbeendevelopedtoanalyzethe\rowofdatathroughtheprogramandremovesredundanciesacrosstheseconstructs.Theyaree\u000bectiveingeneratingcodethatresemblescodewrittenbyaskilledprogrammeratalowerlevel.Objectorientationwas\frstintroducedinSimulain1967,andhasbeenincorporatedinlanguagessuchasSmalltalk,C++,C#,andJava.Thekeyideasbehindobjectorientationare1.Dataabstractionand2.Inheritanceofproperties,bothofwhichhavebeenfoundtomakeprogramsmoremodularandeasiertomaintain.Object-orientedprogramsaredi\u000berentfromthosewritteninmanyotherlanguages,inthattheyconsistofmanymore,butsmaller,procedures(calledmethodsinobject-orientedterms).Thus,compileroptimizationsmustbeabletoperformwellacrosstheproceduralboundariesofthesourceprogram.Procedureinlining,whichisthereplacementofaprocedurecallbythebodyoftheprocedure,isparticularlyusefulhere.Optimizationstospeedupvirtualmethoddispatcheshavealsobeendeveloped.1.5.APPLICATIONSOFCOMPILERTECHNOLOGY19Javahasmanyfeaturesthatmakeprogrammingeasier,manyofwhichhavebeenintroducedpreviouslyinotherlanguages.TheJavalanguageistype-safe;thatis,anobjectcannotbeusedasanobjectofanunrelatedtype.Allarrayaccessesarecheckedtoensurethattheyliewithintheboundsofthearray.Javahasnopointersanddoesnotallowpointerarithmetic.Ithasabuilt-ingarbage-collectionfacilitythatautomaticallyfreesthememoryofvariablesthatarenolongerinuse.Whileallthesefeaturesmakeprogrammingeasier,theyincurarun-timeoverhead.Compileroptimizationshavebeendevelopedtoreducetheoverhead,forexample,byeliminatingunnecessaryrangechecksandbyallocatingobjectsthatarenotaccessiblebeyondaprocedureonthestackinsteadoftheheap.E\u000bectivealgorithmsalsohavebeendevelopedtominimizetheoverheadofgarbagecollection.Inaddition,Javaisdesignedtosupportportableandmobilecode.ProgramsaredistributedasJavabytecode,whichmusteitherbeinterpretedorcompiledintonativecodedynamically,thatis,atruntime.Dynamiccompilationhasalsobeenstudiedinothercontexts,whereinformationisextracteddynamicallyatruntimeandusedtoproducebetter-optimizedcode.Indynamicoptimization,itisimportanttominimizethecompilationtimeasitispartoftheexecutionoverhead.Acommontechniqueusedistoonlycompileandoptimizethosepartsoftheprogramthatwillbefrequentlyexecuted.1.5.2OptimizationsforComputerArchitecturesTherapidevolutionofcomputerarchitectureshasalsoledtoaninsatiabledemandfornewcompilertechnology.Almostallhigh-performancesystemstakeadvantageofthesametwobasictechniques:parallelismandmemoryhi-erarchies.Parallelismcanbefoundatseverallevels:attheinstructionlevel,wheremultipleoperationsareexecutedsimultaneouslyandattheprocessorlevel,wheredi\u000berentthreadsofthesameapplicationarerunondi\u000berentpro-cessors.Memoryhierarchiesarearesponsetothebasiclimitationthatwecanbuildveryfaststorageorverylargestorage,butnotstoragethatisbothfastandlarge.ParallelismAllmodernmicroprocessorsexploitinstruction-levelparallelism.However,thisparallelismcanbehiddenfromtheprogrammer.Programsarewrittenasifallinstructionswereexecutedinsequence;thehardwaredynamicallychecksfordependenciesinthesequentialinstructionstreamandissuestheminparallelwhenpossible.Insomecases,themachineincludesahardwareschedulerthatcanchangetheinstructionorderingtoincreasetheparallelismintheprogram.Whetherthehardwarereorderstheinstructionsornot,compilerscanrearrangetheinstructionstomakeinstruction-levelparallelismmoree\u000bective.Instruction-levelparallelismcanalsoappearexplicitlyintheinstructionset.VLIW(VeryLongInstructionWord)machineshaveinstructionsthatcanissue20CHAPTER1.INTRODUCTIONmultipleoperationsinparallel.TheIntelIA64isawell-knownexampleofsuchanarchitecture.Allhigh-performance,general-purposemicroprocessorsalsoincludeinstructionsthatcanoperateonavectorofdataatthesametime.Compilertechniqueshavebeendevelopedtogeneratecodeautomaticallyforsuchmachinesfromsequentialprograms.Multiprocessorshavealsobecomeprevalent;evenpersonalcomputersof-tenhavemultipleprocessors.Programmerscanwritemultithreadedcodeformultiprocessors,orparallelcodecanbeautomaticallygeneratedbyacom-pilerfromconventionalsequentialprograms.Suchacompilerhidesfromtheprogrammersthedetailsof\fndingparallelisminaprogram,distributingthecomputationacrossthemachine,andminimizingsynchronizationandcom-municationamongtheprocessors.Manyscienti\fc-computingandengineeringapplicationsarecomputation-intensiveandcanbene\ftgreatlyfromparallelprocessing.Parallelizationtechniqueshavebeendevelopedtotranslateauto-maticallysequentialscienti\fcprogramsintomultiprocessorcode.MemoryHierarchiesAmemoryhierarchyconsistsofseverallevelsofstoragewithdi\u000berentspeedsandsizes,withthelevelclosesttotheprocessorbeingthefastestbutsmall-est.Theaveragememory-accesstimeofaprogramisreducedifmostofitsaccessesaresatis\fedbythefasterlevelsofthehierarchy.Bothparallelismandtheexistenceofamemoryhierarchyimprovethepotentialperformanceofamachine,buttheymustbeharnessede\u000bectivelybythecompilertodeliverrealperformanceonanapplication.Memoryhierarchiesarefoundinallmachines.Aprocessorusuallyhasasmallnumberofregistersconsistingofhundredsofbytes,severallevelsofcachescontainingkilobytestomegabytes,physicalmemorycontainingmega-bytestogigabytes,and\fnallysecondarystoragethatcontainsgigabytesandbeyond.Correspondingly,thespeedofaccessesbetweenadjacentlevelsofthehierarchycandi\u000berbytwoorthreeordersofmagnitude.Theperformanceofasystemisoftenlimitednotbythespeedoftheprocessorbutbytheperformanceofthememorysubsystem.Whilecompilerstraditionallyfocusonoptimizingtheprocessorexecution,moreemphasisisnowplacedonmakingthememoryhierarchymoree\u000bective.Usingregisterse\u000bectivelyisprobablythesinglemostimportantprobleminoptimizingaprogram.Unlikeregistersthathavetobemanagedexplicitlyinsoftware,cachesandphysicalmemoriesarehiddenfromtheinstructionsetandaremanagedbyhardware.Ithasbeenfoundthatcache-managementpoliciesimplementedbyhardwarearenote\u000bectiveinsomecases,especiallyinscienti\fccodethathaslargedatastructures(arrays,typically).Itispossibletoimprovethee\u000bectivenessofthememoryhierarchybychangingthelayoutofthedata,orchangingtheorderofinstructionsaccessingthedata.Wecanalsochangethelayoutofcodetoimprovethee\u000bectivenessofinstructioncaches.1.5.APPLICATIONSOFCOMPILERTECHNOLOGY211.5.3DesignofNewComputerArchitecturesIntheearlydaysofcomputerarchitecturedesign,compilersweredevelopedafterthemachineswerebuilt.Thathaschanged.Sinceprogramminginhigh-levellanguagesisthenorm,theperformanceofacomputersystemisdeterminednotbyitsrawspeedbutalsobyhowwellcompilerscanexploititsfeatures.Thus,inmoderncomputerarchitecturedevelopment,compilersaredevelopedintheprocessor-designstage,andcompiledcode,runningonsimulators,isusedtoevaluatetheproposedarchitecturalfeatures.RISCOneofthebestknownexamplesofhowcompilersin\ruencedthedesignofcomputerarchitecturewastheinventionoftheRISC(ReducedInstruction-SetComputer)architecture.Priortothisinvention,thetrendwastodeveloppro-gressivelycomplexinstructionsetsintendedtomakeassemblyprogrammingeasier;thesearchitectureswereknownasCISC(ComplexInstruction-SetCom-puter).Forexample,CISCinstructionsetsincludecomplexmemory-addressingmodestosupportdata-structureaccessesandprocedure-invocationinstructionsthatsaveregistersandpassparametersonthestack.Compileroptimizationsoftencanreducetheseinstructionstoasmallnum-berofsimpleroperationsbyeliminatingtheredundanciesacrosscomplexin-structions.Thus,itisdesirabletobuildsimpleinstructionsets;compilerscanusetheme\u000bectivelyandthehardwareismucheasiertooptimize.Mostgeneral-purposeprocessorarchitectures,includingPowerPC,SPARC,MIPS,Alpha,andPA-RISC,arebasedontheRISCconcept.Althoughthex86architecture|themostpopularmicroprocessor|hasaCISCinstructionset,manyoftheideasdevelopedforRISCmachinesareusedintheimple-mentationoftheprocessoritself.Moreover,themoste\u000bectivewaytouseahigh-performancex86machineistousejustitssimpleinstructions.SpecializedArchitecturesOverthelastthreedecades,manyarchitecturalconceptshavebeenproposed.Theyincludedata\rowmachines,vectormachines,VLIW(VeryLongInstruc-tionWord)machines,SIMD(SingleInstruction,MultipleData)arraysofpro-cessors,systolicarrays,multiprocessorswithsharedmemory,andmultiproces-sorswithdistributedmemory.Thedevelopmentofeachofthesearchitecturalconceptswasaccompaniedbytheresearchanddevelopmentofcorrespondingcompilertechnology.Someoftheseideashavemadetheirwayintothedesignsofembeddedmachines.Sinceentiresystemscan\ftonasinglechip,processorsneednolongerbeprepackagedcommodityunits,butcanbetailoredtoachievebettercost-e\u000bectivenessforaparticularapplication.Thus,incontrasttogeneral-purposeprocessors,whereeconomiesofscalehaveledcomputerarchitectures22CHAPTER1.INTRODUCTIONtoconverge,application-speci\fcprocessorsexhibitadiversityofcomputerar-chitectures.Compilertechnologyisneedednotonlytosupportprogrammingforthesearchitectures,butalsotoevaluateproposedarchitecturaldesigns.1.5.4ProgramTranslationsWhilewenormallythinkofcompilingasatranslationfromahigh-levellan-guagetothemachinelevel,thesametechnologycanbeappliedtotranslatebetweendi\u000berentkindsoflanguages.Thefollowingaresomeoftheimportantapplicationsofprogram-translationtechniques.BinaryTranslationCompilertechnologycanbeusedtotranslatethebinarycodeforonemachinetothatofanother,allowingamachinetorunprogramsoriginallycompiledforanotherinstructionset.Binarytranslationtechnologyhasbeenusedbyvariouscomputercompaniestoincreasetheavailabilityofsoftwarefortheirmachines.Inparticular,becauseofthedominationofthex86personal-computermar-ket,mostsoftwaretitlesareavailableasx86code.Binarytranslatorshavebeendevelopedtoconvertx86codeintobothAlphaandSparccode.BinarytranslationwasalsousedbyTransmetaInc.intheirimplementationofthex86instructionset.Insteadofexecutingthecomplexx86instructionsetdirectlyinhardware,theTransmetaCrusoeprocessorisaVLIWprocessorthatreliesonbinarytranslationtoconvertx86codeintonativeVLIWcode.Binarytranslationcanalsobeusedtoprovidebackwardcompatibility.WhentheprocessorintheAppleMacintoshwaschangedfromtheMotorolaMC68040tothePowerPCin1994,binarytranslationwasusedtoallowPowerPCprocessorsrunlegacyMC68040code.HardwareSynthesisNotonlyismostsoftwarewritteninhigh-levellanguages;evenhardwarede-signsaremostlydescribedinhigh-levelhardwaredescriptionlanguageslikeVerilogandVHDL(Veryhigh-speedintegratedcircuitHardwareDescriptionLanguage).Hardwaredesignsaretypicallydescribedattheregistertrans-ferlevel(RTL),wherevariablesrepresentregistersandexpressionsrepresentcombinationallogic.Hardware-synthesistoolstranslateRTLdescriptionsauto-maticallyintogates,whicharethenmappedtotransistorsandeventuallytoaphysicallayout.Unlikecompilersforprogramminglanguages,thesetoolsoftentakehoursoptimizingthecircuit.Techniquestotranslatedesignsathigherlevels,suchasthebehaviororfunctionallevel,alsoexist.DatabaseQueryInterpretersBesidesspecifyingsoftwareandhardware,languagesareusefulinmanyotherapplications.Forexample,querylanguages,especiallySQL(StructuredQuery1.5.APPLICATIONSOFCOMPILERTECHNOLOGY23Language),areusedtosearchdatabases.Databasequeriesconsistofpredicatescontainingrelationalandbooleanoperators.Theycanbeinterpretedorcom-piledintocommandstosearchadatabaseforrecordssatisfyingthatpredicate.CompiledSimulationSimulationisageneraltechniqueusedinmanyscienti\fcandengineeringdisci-plinestounderstandaphenomenonortovalidateadesign.Inputstoasimula-torusuallyincludethedescriptionofthedesignandspeci\fcinputparametersforthatparticularsimulationrun.Simulationscanbeveryexpensive.Wetypi-callyneedtosimulatemanypossibledesignalternativesonmanydi\u000berentinputsets,andeachexperimentmaytakedaystocompleteonahigh-performancemachine.Insteadofwritingasimulatorthatinterpretsthedesign,itisfastertocompilethedesigntoproducemachinecodethatsimulatesthatparticulardesignnatively.Compiledsimulationcanrunordersofmagnitudefasterthananinterpreter-basedapproach.Compiledsimulationisusedinmanystate-of-the-arttoolsthatsimulatedesignswritteninVerilogorVHDL.1.5.5SoftwareProductivityToolsProgramsarearguablythemostcomplicatedengineeringartifactseverpro-duced;theyconsistofmanymanydetails,everyoneofwhichmustbecorrectbeforetheprogramwillworkcompletely.Asaresult,errorsarerampantinprograms;errorsmaycrashasystem,producewrongresults,renderasystemvulnerabletosecurityattacks,orevenleadtocatastrophicfailuresincriticalsystems.Testingistheprimarytechniqueforlocatingerrorsinprograms.Aninterestingandpromisingcomplementaryapproachistousedata-\rowanalysistolocateerrorsstatically(thatis,beforetheprogramisrun).Data-\rowanalysiscan\fnderrorsalongallthepossibleexecutionpaths,andnotjustthoseexercisedbytheinputdatasets,asinthecaseofprogramtesting.Manyofthedata-\row-analysistechniques,originallydevelopedforcompileroptimizations,canbeusedtocreatetoolsthatassistprogrammersintheirsoftwareengineeringtasks.Theproblemof\fndingallprogramerrorsisundecidable.Adata-\rowanal-ysismaybedesignedtowarntheprogrammersofallpossiblestatementswithaparticularcategoryoferrors.Butifmostofthesewarningsarefalsealarms,userswillnotusethetool.Thus,practicalerrordetectorsareoftenneithersoundnorcomplete.Thatis,theymaynot\fndalltheerrorsintheprogram,andnotallerrorsreportedareguaranteedtoberealerrors.Nonetheless,var-iousstaticanalyseshavebeendevelopedandshowntobee\u000bectivein\fndingerrors,suchasdereferencingnullorfreedpointers,inrealprograms.Thefactthaterrordetectorsmaybeunsoundmakesthemsigni\fcantlydi\u000berentfromcompileroptimizations.Optimizersmustbeconservativeandcannotalterthesemanticsoftheprogramunderanycircumstances.24CHAPTER1.INTRODUCTIONInthebalanceofthissection,weshallmentionseveralwaysinwhichpro-gramanalysis,buildingupontechniquesoriginallydevelopedtooptimizecodeincompilers,haveimprovedsoftwareproductivity.Ofspecialimportancearetechniquesthatdetectstaticallywhenaprogrammighthaveasecurityvulner-ability.TypeCheckingTypecheckingisane\u000bectiveandwell-establishedtechniquetocatchinconsis-tenciesinprograms.Itcanbeusedtocatcherrors,forexample,whereanoperationisappliedtothewrongtypeofobject,orifparameterspassedtoaproceduredonotmatchthesignatureoftheprocedure.Programanalysiscangobeyond\fndingtypeerrorsbyanalyzingthe\rowofdatathroughaprogram.Forexample,ifapointerisassignednullandthenimmediatelydereferenced,theprogramisclearlyinerror.Thesametechnologycanbeusedtocatchavarietyofsecurityholes,inwhichanattackersuppliesastringorotherdatathatisusedcarelesslybytheprogram.Auser-suppliedstringcanbelabeledwithatype\\dangerous.\"Ifthisstringisnotcheckedforproperformat,thenitremains\\dangerous,\"andifastringofthistypeisabletoin\ruencethecontrol-\rowofthecodeatsomepointintheprogram,thenthereisapotentialsecurity\raw.BoundsCheckingItiseasiertomakemistakeswhenprogramminginalower-levellanguagethanahigher-levelone.Forexample,manysecuritybreachesinsystemsarecausedbybu\u000berover\rowsinprogramswritteninC.BecauseCdoesnothavearray-boundschecks,itisuptotheusertoensurethatthearraysarenotaccessedoutofbounds.Failingtocheckthatthedatasuppliedbytheusercanover\rowabu\u000ber,theprogrammaybetrickedintostoringuserdataoutsideofthebu\u000ber.Anattackercanmanipulatetheinputdatathatcausestheprogramtomisbehaveandcompromisethesecurityofthesystem.Techniqueshavebeendevelopedto\fndbu\u000berover\rowsinprograms,butwithlimitedsuccess.Hadtheprogrambeenwritteninasafelanguagethatincludesautomaticrangechecking,thisproblemwouldnothaveoccurred.Thesamedata-\rowanalysisthatisusedtoeliminateredundantrangecheckscanalsobeusedtolocatebu\u000berover\rows.Themajordi\u000berence,however,isthatfailingtoelimi-natearangecheckwouldonlyresultinasmallrun-timecost,whilefailingtoidentifyapotentialbu\u000berover\rowmaycompromisethesecurityofthesystem.Thus,whileitisadequatetousesimpletechniquestooptimizerangechecks,so-phisticatedanalyses,suchastrackingthevaluesofpointersacrossprocedures,areneededtogethigh-qualityresultsinerrordetectiontools.1.6.PROGRAMMINGLANGUAGEBASICS25Memory-ManagementToolsGarbagecollectionisanotherexcellentexampleofthetradeo\u000bbetweene\u000e-ciencyandacombinationofeaseofprogrammingandsoftwarereliability.Au-tomaticmemorymanagementobliteratesallmemory-managementerrors(e.g.,\\memoryleaks\"),whichareamajorsourceofproblemsinCandC++pro-grams.Varioustoolshavebeendevelopedtohelpprogrammers\fndmemorymanagementerrors.Forexample,Purifyisawidelyusedtoolthatdynamicallycatchesmemorymanagementerrorsastheyoccur.Toolsthathelpidentifysomeoftheseproblemsstaticallyhavealsobeendeveloped.1.6ProgrammingLanguageBasicsInthissection,weshallcoverthemostimportantterminologyanddistinctionsthatappearinthestudyofprogramminglanguages.Itisnotourpurposetocoverallconceptsorallthepopularprogramminglanguages.WeassumethatthereaderisfamiliarwithatleastoneofC,C++,C#,orJava,andmayhaveencounteredotherlanguagesaswell.1.6.1TheStatic/DynamicDistinctionAmongthemostimportantissuesthatwefacewhendesigningacompilerforalanguageiswhatdecisionscanthecompilermakeaboutaprogram.Ifalanguageusesapolicythatallowsthecompilertodecideanissue,thenwesaythatthelanguageusesastaticpolicyorthattheissuecanbedecidedatcompiletime.Ontheotherhand,apolicythatonlyallowsadecisiontobemadewhenweexecutetheprogramissaidtobeadynamicpolicyortorequireadecisionatruntime.Oneissueonwhichweshallconcentrateisthescopeofdeclarations.Thescopeofadeclarationofxistheregionoftheprograminwhichusesofxrefertothisdeclaration.Alanguageusesstaticscopeorlexicalscopeifitispossibletodeterminethescopeofadeclarationbylookingonlyattheprogram.Otherwise,thelanguageusesdynamicscope.Withdynamicscope,astheprogramruns,thesameuseofxcouldrefertoanyofseveraldi\u000berentdeclarationsofx.Mostlanguages,suchasCandJava,usestaticscope.WeshalldiscussstaticscopinginSection1.6.3.Example1.3:Asanotherexampleofthestatic/dynamicdistinction,considertheuseoftheterm\\static\"asitappliestodatainaJavaclassdeclaration.InJava,avariableisanameforalocationinmemoryusedtoholdadatavalue.Here,\\static\"refersnottothescopeofthevariable,butrathertotheabilityofthecompilertodeterminethelocationinmemorywherethedeclaredvariablecanbefound.Adeclarationlikepublicstaticintx;26CHAPTER1.INTRODUCTIONmakesxaclassvariableandsaysthatthereisonlyonecopyofx,nomatterhowmanyobjectsofthisclassarecreated.Moreover,thecompilercandeterminealocationinmemorywherethisintegerxwillbeheld.Incontrast,had\\static\"beenomittedfromthisdeclaration,theneachobjectoftheclasswouldhaveitsownlocationwherexwouldbeheld,andthecompilercouldnotdeterminealltheseplacesinadvanceofrunningtheprogram.21.6.2EnvironmentsandStatesAnotherimportantdistinctionwemustmakewhendiscussingprogramminglanguagesiswhetherchangesoccurringastheprogramrunsa\u000bectthevaluesofdataelementsora\u000becttheinterpretationofnamesforthatdata.Forexample,theexecutionofanassignmentsuchasx=y+1changesthevaluedenotedbythenamex.Morespeci\fcally,theassignmentchangesthevalueinwhateverlocationisdenotedbyx.Itmaybelessclearthatthelocationdenotedbyxcanchangeatruntime.Forinstance,aswediscussedinExample1.3,ifxisnotastatic(or\\class\")variable,theneveryobjectoftheclasshasitsownlocationforaninstanceofvariablex.Inthatcase,theassignmenttoxcanchangeanyofthose\\in-stance\"variables,dependingontheobjecttowhichamethodcontainingthatassignmentisapplied.nameslocations(variables)valuesenvironmentstateFigure1.8:Two-stagemappingfromnamestovaluesTheassociationofnameswithlocationsinmemory(thestore)andthenwithvaluescanbedescribedbytwomappingsthatchangeastheprogramruns(seeFig.1.8):1.Theenvironmentisamappingfromnamestolocationsinthestore.Sincevariablesrefertolocations(\\l-values\"intheterminologyofC),wecouldalternativelyde\fneanenvironmentasamappingfromnamestovariables.2.Thestateisamappingfromlocationsinstoretotheirvalues.Thatis,thestatemapsl-valuestotheircorrespondingr-values,intheterminologyofC.Environmentschangeaccordingtothescoperulesofalanguage.Example1.4:ConsidertheCprogramfragmentinFig.1.9.Integeriisdeclaredaglobalvariable,andalsodeclaredasavariablelocaltofunctionf.Whenfisexecuting,theenvironmentadjustssothatnameireferstothe1.6.PROGRAMMINGLANGUAGEBASICS27\u0001\u0001\u0001inti;/*globali*/\u0001\u0001\u0001voidf(\u0001\u0001\u0001){inti;/*locali*/\u0001\u0001\u0001i=3;/*useoflocali*/\u0001\u0001\u0001}\u0001\u0001\u0001x=i+1;/*useofglobali*/Figure1.9:Twodeclarationsofthenameilocationreservedfortheithatislocaltof,andanyuseofi,suchastheassignmenti=3shownexplicitly,referstothatlocation.Typically,thelocaliisgivenaplaceontherun-timestack.Wheneverafunctiongotherthanfisexecuting,usesoficannotrefertotheithatislocaltof.Usesofnameiingmustbewithinthescopeofsomeotherdeclarationofi.Anexampleistheexplicitlyshownstatementx=i+1,whichisinsidesomeprocedurewhosede\fnitionisnotshown.Theiini+1presumablyreferstotheglobali.Asinmostlanguages,declarationsinCmustprecedetheiruse,soafunctionthatcomesbeforetheglobalicannotrefertoit.2TheenvironmentandstatemappingsinFig.1.8aredynamic,butthereareafewexceptions:1.Staticversusdynamicbindingofnamestolocations.Mostbindingofnamestolocationsisdynamic,andwediscussseveralapproachestothisbindingthroughoutthesection.Somedeclarations,suchastheglobaliinFig.1.9,canbegivenalocationinthestoreonceandforall,asthecompilergeneratesobjectcode.22.Staticversusdynamicbindingoflocationstovalues.Thebindingoflo-cationstovalues(thesecondstageinFig.1.8),isgenerallydynamicaswell,sincewecannottellthevalueinalocationuntilweruntheprogram.Declaredconstantsareanexception.Forinstance,theCde\fnition#defineARRAYSIZE100028CHAPTER1.INTRODUCTION1.6.PROGRAMMINGLANGUAGEBASICS2930CHAPTER1.INTRODUCTIONAnequivalentwaytoexpressthisruleistofocusonauseofanamex.LetB1;B2;:::;Bkbealltheblocksthatsurroundthisuseofx,withBkthesmallest,nestedwithinBk\u00001,whichisnestedwithinBk\u00002,andsoon.SearchforthelargestisuchthatthereisadeclarationofxbelongingtoBi.ThisuseofxreferstothedeclarationinBi.Alternatively,thisuseofxiswithinthescopeofthedeclarationinBi.B4B3B2B1}cout<<a<<b;}cout<<a<<b;}cout<<a<<b;intb=4;{}cout<<a<<b;inta=3;{intb=2;{intb=1;inta=1;main(){Figure1.10:BlocksinaC++programExample1.6:TheC++programinFig.1.10hasfourblocks,withseveralde\fnitionsofvariablesaandb.Asamemoryaid,eachdeclarationinitializesitsvariabletothenumberoftheblocktowhichitbelongs.Forinstance,considerthedeclarationinta=1inblockB1.ItsscopeisallofB1,exceptforthoseblocksnested(perhapsdeeply)withinB1thathavetheirowndeclarationofa.B2,nestedimmediatelywithinB1,doesnothaveadeclarationofa,butB3does.B4doesnothaveadeclarationofa,soblockB3istheonlyplaceintheentireprogramthatisoutsidethescopeofthedeclarationofthenameathatbelongstoB1.Thatis,thisscopeincludesB4andallofB2exceptforthepartofB2thatiswithinB3.Thescopesofall\fvedeclarationsaresummarizedinFig.1.11.Fromanotherpointofview,letusconsidertheoutputstatementinblockB4andbindthevariablesaandbusedtheretotheproperdeclarations.Thelistofsurroundingblocks,inorderofincreasingsize,isB4;B2;B1.NotethatB3doesnotsurroundthepointinquestion.B4hasadeclarationofb,soitistothisdeclarationthatthisuseofbrefers,andthevalueofbprintedis4.However,B4doesnothaveadeclarationofa,sowenextlookatB2.Thatblockdoesnothaveadeclarationofaeither,soweproceedtoB1.Fortunately,1.6.PROGRAMMINGLANGUAGEBASICS3132CHAPTER1.INTRODUCTION1.6.PROGRAMMINGLANGUAGEBASICS3334CHAPTER1.INTRODUCTIONCall-by-ValueIncall-by-value,theactualparameterisevaluated(ifitisanexpression)orcopied(ifitisavariable).Thevalueisplacedinthelocationbelongingtothecorrespondingformalparameterofthecalledprocedure.ThismethodisusedinCandJava,andisacommonoptioninC++,aswellasinmostotherlanguages.Call-by-valuehasthee\u000bectthatallcomputationinvolvingtheformalparametersdonebythecalledprocedureislocaltothatprocedure,andtheactualparametersthemselvescannotbechanged.Note,however,thatinCwecanpassapointertoavariabletoallowthatvariabletobechangedbythecallee.Likewise,arraynamespassedasparam-etersinC,C++,orJavagivethecalledprocedurewhatisine\u000bectapointerorreferencetothearrayitself.Thus,ifaisthenameofanarrayofthecallingprocedure,anditispassedbyvaluetocorrespondingformalparameterx,thenanassignmentsuchasx[i]=2reallychangesthearrayelementa[i]to2.Thereasonisthat,althoughxgetsacopyofthevalueofa,thatvalueisreallyapointertothebeginningoftheareaofthestorewherethearraynamedaislocated.Similarly,inJava,manyvariablesarereallyreferences,orpointers,tothethingstheystandfor.Thisobservationappliestoarrays,strings,andobjectsofallclasses.EventhoughJavausescall-by-valueexclusively,wheneverwepassthenameofanobjecttoacalledprocedure,thevaluereceivedbythatprocedureisine\u000bectapointertotheobject.Thus,thecalledprocedureisabletoa\u000bectthevalueoftheobjectitself.Call-by-ReferenceIncall-by-reference,theaddressoftheactualparameterispassedtothecalleeasthevalueofthecorrespondingformalparameter.Usesoftheformalparameterinthecodeofthecalleeareimplementedbyfollowingthispointertothelocationindicatedbythecaller.Changestotheformalparameterthusappearaschangestotheactualparameter.Iftheactualparameterisanexpression,however,thentheexpressionisevaluatedbeforethecall,anditsvaluestoredinalocationofitsown.Changestotheformalparameterchangethevalueinthislocation,butcanhavenoe\u000bectonthedataofthecaller.Call-by-referenceisusedfor\\ref\"parametersinC++andisanoptioninmanyotherlanguages.Itisalmostessentialwhentheformalparameterisalargeobject,array,orstructure.Thereasonisthatstrictcall-by-valuerequiresthatthecallercopytheentireactualparameterintothespacebelongingtothecorrespondingformalparameter.Thiscopyinggetsexpensivewhentheparameterislarge.Aswenotedwhendiscussingcall-by-value,languagessuchasJavasolvetheproblemofpassingarrays,strings,orotherobjectsbycopyingonlyareferencetothoseobjects.Thee\u000bectisthatJavabehavesasifitusedcall-by-referenceforanythingotherthanabasictypesuchasanintegerorreal.1.6.PROGRAMMINGLANGUAGEBASICS35Call-by-NameAthirdmechanism|call-by-name|wasusedintheearlyprogramminglanguageAlgol60.Itrequiresthatthecalleeexecuteasiftheactualparameterweresubstitutedliterallyfortheformalparameterinthecodeofthecallee,asiftheformalparameterwereamacrostandingfortheactualparameter(withrenamingoflocalnamesinthecalledprocedure,tokeepthemdistinct).Whentheactualparameterisanexpressionratherthanavariable,someunintuitivebehaviorsoccur,whichisonereasonthismechanismisnotfavoredtoday.1.6.7AliasingThereisaninterestingconsequenceofcall-by-referenceparameterpassingoritssimulation,asinJava,wherereferencestoobjectsarepassedbyvalue.Itispossiblethattwoformalparameterscanrefertothesamelocation;suchvariablesaresaidtobealiasesofoneanother.Asaresult,anytwovariables,whichmayappeartotaketheirvaluesfromtwodistinctformalparameters,canbecomealiasesofeachother,aswell.Example1.9:Supposeaisanarraybelongingtoaprocedurep,andpcallsanotherprocedureq(x;y)withacallq(a;a).Supposealsothatparametersarepassedbyvalue,butthatarraynamesarereallyreferencestothelocationwherethearrayisstored,asinCorsimilarlanguages.Now,xandyhavebecomealiasesofeachother.Theimportantpointisthatifwithinqthereisanassignmentx[10]=2,thenthevalueofy[10]alsobecomes2.2Itturnsoutthatunderstandingaliasingandthemechanismsthatcreateitisessentialifacompileristooptimizeaprogram.AsweshallseestartinginChapter9,therearemanysituationswherewecanonlyoptimizecodeifwecanbesurecertainvariablesarenotaliased.Forinstance,wemightdeterminethatx=2istheonlyplacethatvariablexiseverassigned.Ifso,thenwecanreplaceauseofxbyauseof2;forexample,replacea=x+3bythesimplera=5.Butsupposetherewereanothervariableythatwasaliasedtox.Thenanassignmenty=4mighthavetheunexpectede\u000bectofchangingx.Itmightalsomeanthatreplacinga=x+3bya=5wasamistake;thepropervalueofacouldbe7there.1.6.8ExercisesforSection1.6Exercise1.6.1:Fortheblock-structuredCcodeofFig.1.13(a),indicatethevaluesassignedtow,x,y,andz.Exercise1.6.2:RepeatExercise1.6.1forthecodeofFig.1.13(b).Exercise1.6.3:Fortheblock-structuredcodeofFig.1.14,assumingtheusualstaticscopingofdeclarations,givethescopeforeachofthetwelvedeclarations.36CHAPTER1.INTRODUCTION(b)CodeforExercise1.6.2z=i+j;}y=i+j;i=7;{intj=6;x=i+j;}w=i+j;{inti=5;inti=3;intj=4;intw,x,y,z;(a)CodeforExercise1.6.1z=i+j;}y=i+j;{inti=8;x=i+j;}w=i+j;i=6;{intj=7;inti=4;intj=5;intw,x,y,z;Figure1.13:Block-structuredcode{intw,x,y,z;/*BlockB1*/{intx,z;/*BlockB2*/{intw,x;/*BlockB3*/}}{intw,x;/*BlockB4*/{inty,z;/*BlockB5*/}}}Figure1.14:BlockstructuredcodeforExercise1.6.3Exercise1.6.4:WhatisprintedbythefollowingCcode?#definea(x+1)intx=2;voidb(){x=a;printf(\"%d\\n\",x);}voidc(){intx=1;printf(\"%d\\n\",a);}voidmain(){b();c();}1.7SummaryofChapter1 ✦LanguageProcessors.Anintegratedsoftwaredevelopmentenvironmentincludesmanydi\u000berentkindsoflanguageprocessorssuchascompilers,interpreters,assemblers,linkers,loaders,debuggers,pro\flers. ✦CompilerPhases.Acompileroperatesasasequenceofphases,eachofwhichtransformsthesourceprogramfromoneintermediaterepresenta-tiontoanother.1.7.SUMMARYOFCHAPTER137 ✦MachineandAssemblyLanguages.Machinelanguageswerethe\frst-generationprogramminglanguages,followedbyassemblylanguages.Pro-grammingintheselanguageswastimeconsuminganderrorprone. ✦ModelinginCompilerDesign.Compilerdesignisoneoftheplaceswheretheoryhashadthemostimpactonpractice.Modelsthathavebeenfoundusefulincludeautomata,grammars,regularexpressions,trees,andmanyothers. ✦CodeOptimization.Althoughcodecannottrulybe\\optimized,\"thesci-enceofimprovingthee\u000eciencyofcodeisbothcomplexandveryimpor-tant.Itisamajorportionofthestudyofcompilation. ✦Higher-LevelLanguages.Astimegoeson,programminglanguagestakeonprogressivelymoreofthetasksthatformerlywerelefttotheprogram-mer,suchasmemorymanagement,type-consistencychecking,orparallelexecutionofcode. ✦CompilersandComputerArchitecture.Compilertechnologyin\ruencescomputerarchitecture,aswellasbeingin\ruencedbytheadvancesinar-chitecture.Manymoderninnovationsinarchitecturedependoncompilersbeingabletoextractfromsourceprogramstheopportunitiestousethehardwarecapabilitiese\u000bectively. ✦SoftwareProductivityandSoftwareSecurity.Thesametechnologythatallowscompilerstooptimizecodecanbeusedforavarietyofprogram-analysistasks,rangingfromdetectingcommonprogrambugstodiscov-eringthataprogramisvulnerabletooneofthemanykindsofintrusionsthat\\hackers\"havediscovered. ✦ScopeRules.Thescopeofadeclarationofxisthecontextinwhichusesofxrefertothisdeclaration.Alanguageusesstaticscopeorlexicalscopeifitispossibletodeterminethescopeofadeclarationbylookingonlyattheprogram.Otherwise,thelanguageusesdynamicscope. ✦Environments.Theassociationofnameswithlocationsinmemoryandthenwithvaluescanbedescribedintermsofenvironments,whichmapnamestolocationsinstore,andstates,whichmaplocationstotheirvalues. ✦BlockStructure.Languagesthatallowblockstobenestedaresaidtohaveblockstructure.AnamexinanestedblockBisinthescopeofadeclarationDofxinanenclosingblockifthereisnootherdeclarationofxinaninterveningblock. ✦ParameterPassing.Parametersarepassedfromacallingproceduretothecalleeeitherbyvalueorbyreference.Whenlargeobjectsarepassedbyvalue,thevaluespassedarereallyreferencestotheobjectsthemselves,resultinginane\u000bectivecall-by-reference.38CHAPTER1.INTRODUCTION ✦Aliasing.Whenparametersare(e\u000bectively)passedbyreference,twofor-malparameterscanrefertothesameobject.Thispossibilityallowsachangeinonevariabletochangeanother.1.8ReferencesforChapter1Forthedevelopmentofprogramminglanguagesthatwerecreatedandinuseby1967,includingFortran,Algol,Lisp,andSimula,see[7].Forlanguagesthatwerecreatedby1982,includingC,C++,Pascal,andSmalltalk,see[1].TheGNUCompilerCollection,gcc,isapopularsourceofopen-sourcecompilersforC,C++,Fortran,Java,andotherlanguages[2].Phoenixisacompiler-constructiontoolkitthatprovidesanintegratedframeworkforbuild-ingtheprogramanalysis,codegeneration,andcodeoptimizationphasesofcompilersdiscussedinthisbook[3].Formoreinformationaboutprogramminglanguageconcepts,werecom-mend[5,6].Formoreoncomputerarchitectureandhowitimpactscompiling,wesuggest[4].1.Bergin,T.J.andR.G.Gibson,HistoryofProgrammingLanguages,ACMPress,NewYork,1996.2.http://gcc.gnu.org/.3.http://research.microsoft.com/phoenix/default.aspx.4.Hennessy,J.L.andD.A.Patterson,ComputerOrganizationandDe-sign:TheHardware/SoftwareInterface,Morgan-Kaufmann,SanFran-cisco,CA,2004.5.Scott,M.L.,ProgrammingLanguagePragmatics,secondedition,Morgan-Kaufmann,SanFrancisco,CA,2006.6.Sethi,R.,ProgrammingLanguages:ConceptsandConstructs,Addison-Wesley,1996.7.Wexelblat,R.L.,HistoryofProgrammingLanguages,AcademicPress,NewYork,1981.Chapter2ASimpleSyntax-DirectedTranslatorThischapterisanintroductiontothecompilingtechniquesinChapters3through6ofthisbook.ItillustratesthetechniquesbydevelopingaworkingJavaprogramthattranslatesrepresentativeprogramminglanguagestatementsintothree-addresscode,anintermediaterepresentation.Inthischapter,theemphasisisonthefrontendofacompiler,inparticularonlexicalanalysis,parsing,andintermediatecodegeneration.Chapters7and8showhowtogeneratemachineinstructionsfromthree-addresscode.Westartsmallbycreatingasyntax-directedtranslatorthatmapsin\fxarith-meticexpressionsintopost\fxexpressions.WethenextendthistranslatortomapcodefragmentsasshowninFig.2.1intothree-addresscodeoftheforminFig.2.2.TheworkingJavatranslatorappearsinAppendixA.TheuseofJavaisconvenient,butnotessential.Infact,theideasinthischapterpredatethecreationofbothJavaandC.{inti;intj;float[100]a;floatv;floatx;while(true){doi=i+1;while(a[i]<v);doj=j-1;while(a[j]>v);if(i>=j)break;x=a[i];a[i]=a[j];a[j]=x;}}Figure2.1:Acodefragmenttobetranslated3940CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR1:i=i+12:t1=a[i]3:ift1<vgoto14:j=j-15:t2=a[j]6:ift2>vgoto47:ifFalsei>=jgoto98:goto149:x=a[i]10:t3=a[j]11:a[i]=t312:a[j]=x13:goto114:Figure2.2:Simpli\fedintermediatecodefortheprogramfragmentinFig.2.12.1IntroductionTheanalysisphaseofacompilerbreaksupasourceprogramintoconstituentpiecesandproducesaninternalrepresentationforit,calledintermediatecode.Thesynthesisphasetranslatestheintermediatecodeintothetargetprogram.Analysisisorganizedaroundthe\\syntax\"ofthelanguagetobecompiled.Thesyntaxofaprogramminglanguagedescribestheproperformofitspro-grams,whilethesemanticsofthelanguagede\fneswhatitsprogramsmean;thatis,whateachprogramdoeswhenitexecutes.Forspecifyingsyntax,wepresentawidelyusednotation,calledcontext-freegrammarsorBNF(forBackus-NaurForm)inSection2.2.Withthenotationscurrentlyavailable,thesemanticsofalanguageismuchmoredi\u000eculttodescribethanthesyntax.Forspecifyingsemantics,weshallthereforeuseinformaldescriptionsandsuggestiveexamples.Besidesspecifyingthesyntaxofalanguage,acontext-freegrammarcanbeusedtohelpguidethetranslationofprograms.InSection2.3,weintroduceagrammar-orientedcompilingtechniqueknownassyntax-directedtranslation.ParsingorsyntaxanalysisisintroducedinSection2.4.TherestofthischapterisaquicktourthroughthemodelofacompilerfrontendinFig.2.3.Webeginwiththeparser.Forsimplicity,weconsiderthesyntax-directedtranslationofin\fxexpressionstopost\fxform,anotationinwhichoperatorsappearaftertheiroperands.Forexample,thepost\fxformoftheexpression9\u00005+2is95\u00002+.Translationintopost\fxformisrichenoughtoillustratesyntaxanalysis,yetsimpleenoughthatthetranslatorisshowninfullinSection2.5.Thesimpletranslatorhandlesexpressionslike9\u00005+2,consistingofdigitsseparatedbyplusandminussigns.Onereasonforstartingwithsuchsimpleexpressionsisthatthesyntaxanalyzercanworkdirectlywiththeindividualcharactersforoperatorsandoperands.2.1.INTRODUCTION41TableSymbolcodethree-addressGeneratorCodeIntermediatetreesyntaxParsertokensAnalyzerLexicalprogramsourceFigure2.3:AmodelofacompilerfrontendAlexicalanalyzerallowsatranslatortohandlemulticharacterconstructslikeidenti\fers,whicharewrittenassequencesofcharacters,butaretreatedasunitscalledtokensduringsyntaxanalysis;forexample,intheexpressioncount+1,theidenti\fercountistreatedasaunit.ThelexicalanalyzerinSection2.6allowsnumbers,identi\fers,and\\whitespace\"(blanks,tabs,andnewlines)toappearwithinexpressions.Next,weconsiderintermediate-codegeneration.Twoformsofintermedi-atecodeareillustratedinFig.2.4.Oneform,calledabstractsyntaxtreesorsimplysyntaxtrees,representsthehierarchicalsyntacticstructureofthesourceprogram.InthemodelinFig.2.3,theparserproducesasyntaxtree,thatisfurthertranslatedintothree-addresscode.Somecompilerscombineparsingandintermediate-codegenerationintoonecomponent.(a)1:i=i+12:t1=a[i]3:ift1<vgoto1(b)[]do-whilebodyassigni+viai>1Figure2.4:Intermediatecodefor\\doi=i+1;while(a[i]<v);\"TherootoftheabstractsyntaxtreeinFig.2.4(a)representsanentiredo-whileloop.Theleftchildoftherootrepresentsthebodyoftheloop,whichconsistsofonlytheassignmenti=i+1;.Therightchildoftherootrepre-sentstheconditiona[i]<v.AnimplementationofsyntaxtreesappearsinSection2.8.Theothercommonintermediaterepresentation,showninFig.2.4(b),isa42CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORsequenceof\\three-address\"instructions;amorecompleteexampleappearsinFig.2.2.Thisformofintermediatecodetakesitsnamefrominstructionsoftheformx=yopz,whereopisabinaryoperator,yandzaretheaddressesfortheoperands,andxistheaddressfortheresultoftheoperation.Athree-addressinstructioncarriesoutatmostoneoperation,typicallyacomputation,acomparison,orabranch.InAppendixA,weputthetechniquesinthischaptertogethertobuildacompilerfrontendinJava.Thefrontendtranslatesstatementsintoassembly-levelinstructions.2.2SyntaxDe\fnitionInthissection,weintroduceanotation|the\\context-freegrammar,\"or\\grammar\"forshort|thatisusedtospecifythesyntaxofalanguage.Gram-marswillbeusedthroughoutthisbooktoorganizecompilerfrontends.Agrammarnaturallydescribesthehierarchicalstructureofmostprogram-minglanguageconstructs.Forexample,anif-elsestatementinJavacanhavetheformif(expression)statementelsestatementThatis,anif-elsestatementistheconcatenationofthekeywordif,anopen-ingparenthesis,anexpression,aclosingparenthesis,astatement,thekeywordelse,andanotherstatement.Usingthevariableexprtodenoteanexpres-sionandthevariablestmttodenoteastatement,thisstructuringrulecanbeexpressedasstmt!if(expr)stmtelsestmtinwhichthearrowmaybereadas\\canhavetheform.\"Sucharuleiscalledaproduction.Inaproduction,lexicalelementslikethekeywordifandtheparen-thesesarecalledterminals.Variableslikeexprandstmtrepresentsequencesofterminalsandarecallednonterminals.2.2.1De\fnitionofGrammarsAcontext-freegrammarhasfourcomponents:1.Asetofterminalsymbols,sometimesreferredtoas\\tokens.\"Thetermi-nalsaretheelementarysymbolsofthelanguagede\fnedbythegrammar.2.Asetofnonterminals,sometimescalled\\syntacticvariables.\"Eachnon-terminalrepresentsasetofstringsofterminals,inamannerweshalldescribe.3.Asetofproductions,whereeachproductionconsistsofanonterminal,calledtheheadorleftsideoftheproduction,anarrow,andasequenceof2.2.SYNTAXDEFINITION4344CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORThebodiesofthethreeproductionswithnonterminallistasheadequiva-lentlycanbegrouped:list!list+digitjlist-digitjdigitAccordingtoourconventions,theterminalsofthegrammararethesymbols+-0123456789Thenonterminalsaretheitalicizednameslistanddigit,withlistbeingthestartsymbolbecauseitsproductionsaregiven\frst.2Wesayaproductionisforanonterminalifthenonterminalistheheadoftheproduction.Astringofterminalsisasequenceofzeroormoreterminals.Thestringofzeroterminals,writtenas\u000f,iscalledtheemptystring.22.2.2DerivationsAgrammarderivesstringsbybeginningwiththestartsymbolandrepeatedlyreplacinganonterminalbythebodyofaproductionforthatnonterminal.Theterminalstringsthatcanbederivedfromthestartsymbolformthelanguagede\fnedbythegrammar.Example2.2:Thelanguagede\fnedbythegrammarofExample2.1consistsoflistsofdigitsseparatedbyplusandminussigns.Thetenproductionsforthenonterminaldigitallowittostandforanyoftheterminals0;1;:::;9.Fromproduction(2.3),asingledigitbyitselfisalist.Productions(2.1)and(2.2)expresstherulethatanylistfollowedbyaplusorminussignandthenanotherdigitmakesupanewlist.Productions(2.1)to(2.4)areallweneedtode\fnethedesiredlanguage.Forexample,wecandeducethat9-5+2isalistasfollows.a)9isalistbyproduction(2.3),since9isadigit.b)9-5isalistbyproduction(2.2),since9isalistand5isadigit.c)9-5+2isalistbyproduction(2.1),since9-5isalistand2isadigit.2Example2.3:Asomewhatdi\u000berentsortoflististhelistofparametersinafunctioncall.InJava,theparametersareenclosedwithinparentheses,asinthecallmax(x,y)offunctionmaxwithparametersxandy.Onenuanceofsuchlistsisthatanemptylistofparametersmaybefoundbetweentheterminals(and).Wemaystarttodevelopagrammarforsuchsequenceswiththeproductions:2.2.SYNTAXDEFINITION45call!id(optparams)optparams!paramsj\u000fparams!params,paramjparamNotethatthesecondpossiblebodyforoptparams(\\optionalparameterlist\")is\u000f,whichstandsfortheemptystringofsymbols.Thatis,optparamscanbereplacedbytheemptystring,soacallcanconsistofafunctionnamefollowedbythetwo-terminalstring().NoticethattheproductionsforparamsareanalogoustothoseforlistinExample2.1,withcommainplaceofthearithmeticoperator+or-,andparaminplaceofdigit.Wehavenotshowntheproductionsforparam,sinceparametersarereallyarbitraryexpressions.Shortly,weshalldiscusstheappropriateproductionsforthevariouslanguageconstructs,suchasexpressions,statements,andsoon.2Parsingistheproblemoftakingastringofterminalsand\fguringouthowtoderiveitfromthestartsymbolofthegrammar,andifitcannotbederivedfromthestartsymbolofthegrammar,thenreportingsyntaxerrorswithinthestring.Parsingisoneofthemostfundamentalproblemsinallofcompiling;themainapproachestoparsingarediscussedinChapter4.Inthischapter,forsimplicity,webeginwithsourceprogramslike9-5+2inwhicheachcharacterisaterminal;ingeneral,asourceprogramhasmulticharacterlexemesthataregroupedbythelexicalanalyzerintotokens,whose\frstcomponentsaretheterminalsprocessedbytheparser.2.2.3ParseTreesAparsetreepictoriallyshowshowthestartsymbolofagrammarderivesastringinthelanguage.IfnonterminalAhasaproductionA!XYZ,thenaparsetreemayhaveaninteriornodelabeledAwiththreechildrenlabeledX,Y,andZ,fromlefttoright:AXYZFormally,givenacontext-freegrammar,aparsetreeaccordingtothegram-marisatreewiththefollowingproperties:1.Therootislabeledbythestartsymbol.2.Eachleafislabeledbyaterminalorby\u000f.3.Eachinteriornodeislabeledbyanonterminal.4.IfAisthenonterminallabelingsomeinteriornodeandX1;X2;:::;Xnarethelabelsofthechildrenofthatnodefromlefttoright,thentheremustbeaproductionA!X1X2\u0001\u0001\u0001Xn.Here,X1;X2;:::;Xneachstand46CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.2.SYNTAXDEFINITION472digit+5digitlist-9digitlistlistFigure2.5:Parsetreefor9-5+2accordingtothegrammarinExample2.1tree.InFig.2.5,theyieldis9-5+2;forconvenience,alltheleavesareshownatthebottomlevel.Henceforth,weshallnotnecessarilylineuptheleavesinthisway.Anytreeimpartsanaturalleft-to-rightordertoitsleaves,basedontheideathatifXandYaretwochildrenwiththesameparent,andXistotheleftofY,thenalldescendantsofXaretotheleftofdescendantsofY.Anotherde\fnitionofthelanguagegeneratedbyagrammarisasthesetofstringsthatcanbegeneratedbysomeparsetree.Theprocessof\fndingaparsetreeforagivenstringofterminalsiscalledparsingthatstring.2.2.4AmbiguityWehavetobecarefulintalkingaboutthestructureofastringaccordingtoagrammar.Agrammarcanhavemorethanoneparsetreegeneratingagivenstringofterminals.Suchagrammarissaidtobeambiguous.Toshowthatagrammarisambiguous,allweneedtodois\fndaterminalstringthatistheyieldofmorethanoneparsetree.Sinceastringwithmorethanoneparsetreeusuallyhasmorethanonemeaning,weneedtodesignunambiguousgrammarsforcompilingapplications,ortouseambiguousgrammarswithadditionalrulestoresolvetheambiguities.Example2.5:Supposeweusedasinglenonterminalstringanddidnotdis-tinguishbetweendigitsandlists,asinExample2.1.Wecouldhavewrittenthegrammarstring!string+stringjstring-stringj0j1j2j3j4j5j6j7j8j9Mergingthenotionofdigitandlistintothenonterminalstringmakessuper\fcialsense,becauseasingledigitisaspecialcaseofalist.However,Fig.2.6showsthatanexpressionlike9-5+2hasmorethanoneparsetreewiththisgrammar.Thetwotreesfor9-5+2correspondtothetwowaysofparenthesizingtheexpression:(9-5)+2and9-(5+2).Thissecondparenthesizationgivestheexpressiontheunexpectedvalue2ratherthanthecustomaryvalue6.ThegrammarofExample2.1doesnotpermitthisinter-pretation.248CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORstringstring9-string2string5+stringstring2string+5string-9stringstringFigure2.6:Twoparsetreesfor9-5+22.2.5AssociativityofOperatorsByconvention,9+5+2isequivalentto(9+5)+2and9-5-2isequivalentto(9-5)-2.Whenanoperandlike5hasoperatorstoitsleftandright,con-ventionsareneededfordecidingwhichoperatorappliestothatoperand.Wesaythattheoperator+associatestotheleft,becauseanoperandwithplussignsonbothsidesofitbelongstotheoperatortoitsleft.Inmostprogramminglanguagesthefourarithmeticoperators,addition,subtraction,multiplication,anddivisionareleft-associative.Somecommonoperatorssuchasexponentiationareright-associative.Asanotherexample,theassignmentoperator=inCanditsdescendantsisright-associative;thatis,theexpressiona=b=cistreatedinthesamewayastheexpressiona=(b=c).Stringslikea=b=cwitharight-associativeoperatoraregeneratedbythefollowinggrammar:right!letter=rightjletterletter!ajbj\u0001\u0001\u0001jzThecontrastbetweenaparsetreeforaleft-associativeoperatorlike-andaparsetreeforaright-associativeoperatorlike=isshownbyFig.2.7.Notethattheparsetreefor9-5-2growsdowntowardstheleft,whereastheparsetreefora=b=cgrowsdowntowardstheright.2.2.6PrecedenceofOperatorsConsidertheexpression9+5*2.Therearetwopossibleinterpretationsofthisexpression:(9+5)*2or9+(5*2).Theassociativityrulesfor+and*applytooccurrencesofthesameoperator,sotheydonotresolvethisambiguity.Rulesde\fningtherelativeprecedenceofoperatorsareneededwhenmorethanonekindofoperatorispresent.Wesaythat*hashigherprecedencethan+if*takesitsoperandsbefore+does.Inordinaryarithmetic,multiplicationanddivisionhavehigherprecedencethanadditionandsubtraction.Therefore,5istakenby*inboth9+5*2and9*5+2;i.e.,theexpressionsareequivalentto9+(5*2)and(9*5)+2,respectively.2.2.SYNTAXDEFINITION49rightlettera=rightcletterb=rightletterlist2digit-5digit-9digitlistlistFigure2.7:Parsetreesforleft-andright-associativegrammarsExample2.6:Agrammarforarithmeticexpressionscanbeconstructedfromatableshowingtheassociativityandprecedenceofoperators.Westartwiththefourcommonarithmeticoperatorsandaprecedencetable,showingtheoperatorsinorderofincreasingprecedence.Operatorsonthesamelinehavethesameassociativityandprecedence:left-associative:+-left-associative:*/Wecreatetwononterminalsexprandtermforthetwolevelsofprecedence,andanextranonterminalfactorforgeneratingbasicunitsinexpressions.Thebasicunitsinexpressionsarepresentlydigitsandparenthesizedexpressions.factor!digitj(expr)Nowconsiderthebinaryoperators,*and/,thathavethehighestprece-dence.Sincetheseoperatorsassociatetotheleft,theproductionsaresimilartothoseforliststhatassociatetotheleft.term!term*factorjterm/factorjfactorSimilarly,exprgenerateslistsoftermsseparatedbytheadditiveoperators.expr!expr+termjexpr-termjtermTheresultinggrammaristhereforeexpr!expr+termjexpr-termjtermterm!term*factorjterm/factorjfactorfactor!digitj(expr)50CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.2.SYNTAXDEFINITION51stmt!id=expression;jif(expression)stmtjif(expression)stmtelsestmtjwhile(expression)stmtjdostmtwhile(expression);j{stmts}stmts!stmtsstmtj\u000fFigure2.8:AgrammarforasubsetofJavastatements2.2.7ExercisesforSection2.2Exercise2.2.1:Considerthecontext-freegrammarS!SS+jSS*jaa)Showhowthestringaa+a*canbegeneratedbythisgrammar.b)Constructaparsetreeforthisstring.c)Whatlanguagedoesthisgrammargenerate?Justifyyouranswer.Exercise2.2.2:Whatlanguageisgeneratedbythefollowinggrammars?Ineachcasejustifyyouranswer.a)S!0S1j01b)S!+SSj-SSjac)S!S(S)Sj\u000fd)S!aSbSjbSaSj\u000fe)S!ajS+SjSSjS*j(S)Exercise2.2.3:WhichofthegrammarsinExercise2.2.2areambiguous?Exercise2.2.4:Constructunambiguouscontext-freegrammarsforeachofthefollowinglanguages.Ineachcaseshowthatyourgrammariscorrect.a)Arithmeticexpressionsinpost\fxnotation.b)Left-associativelistsofidenti\fersseparatedbycommas.c)Right-associativelistsofidenti\fersseparatedbycommas.d)Arithmeticexpressionsofintegersandidenti\ferswiththefourbinaryoperators+,-,*,/.52CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR!e)Addunaryplusandminustothearithmeticoperatorsof(d).Exercise2.2.5:a)Showthatallbinarystringsgeneratedbythefollowinggrammarhavevaluesdivisibleby3.Hint.Useinductiononthenumberofnodesinaparsetree.num!11j1001jnum0jnumnumb)Doesthegrammargenerateallbinarystringswithvaluesdivisibleby3?Exercise2.2.6:Constructacontext-freegrammarforromannumerals.2.3Syntax-DirectedTranslationSyntax-directedtranslationisdonebyattachingrulesorprogramfragmentstoproductionsinagrammar.Forexample,consideranexpressionexprgeneratedbytheproductionexpr!expr1+termHere,expristhesumofthetwosubexpressionsexpr1andterm.(Thesubscriptinexpr1isusedonlytodistinguishtheinstanceofexprintheproductionbodyfromtheheadoftheproduction).Wecantranslateexprbyexploitingitsstructure,asinthefollowingpseudo-code:translateexpr1;translateterm;handle+;Usingavariantofthispseudocode,weshallbuildasyntaxtreeforexprinSection2.8bybuildingsyntaxtreesforexpr1andtermandthenhandling+byconstructinganodeforit.Forconvenience,theexampleinthissectionisthetranslationofin\fxexpressionsintopost\fxnotation.Thissectionintroducestwoconceptsrelatedtosyntax-directedtranslation:\u000fAttributes.Anattributeisanyquantityassociatedwithaprogrammingconstruct.Examplesofattributesaredatatypesofexpressions,thenum-berofinstructionsinthegeneratedcode,orthelocationofthe\frstin-structioninthegeneratedcodeforaconstruct,amongmanyotherpos-sibilities.Sinceweusegrammarsymbols(nonterminalsandterminals)torepresentprogrammingconstructs,weextendthenotionofattributesfromconstructstothesymbolsthatrepresentthem.2.3.SYNTAX-DIRECTEDTRANSLATION53\u000f(Syntax-directed)translationschemes.Atranslationschemeisanotationforattachingprogramfragmentstotheproductionsofagrammar.Theprogramfragmentsareexecutedwhentheproductionisusedduringsyn-taxanalysis.Thecombinedresultofallthesefragmentexecutions,intheorderinducedbythesyntaxanalysis,producesthetranslationoftheprogramtowhichthisanalysis/synthesisprocessisapplied.Syntax-directedtranslationswillbeusedthroughoutthischaptertotrans-latein\fxexpressionsintopost\fxnotation,toevaluateexpressions,andtobuildsyntaxtreesforprogrammingconstructs.Amoredetaileddiscussionofsyntax-directedformalismsappearsinChapter5.2.3.1Post\fxNotationTheexamplesinthissectiondealwithtranslationintopost\fxnotation.Thepost\fxnotationforanexpressionEcanbede\fnedinductivelyasfollows:1.IfEisavariableorconstant,thenthepost\fxnotationforEisEitself.2.IfEisanexpressionoftheformE1opE2,whereopisanybinaryoperator,thenthepost\fxnotationforEisE01E02op,whereE01andE02arethepost\fxnotationsforE1andE2,respectively.3.IfEisaparenthesizedexpressionoftheform(E1),thenthepost\fxnotationforEisthesameasthepost\fxnotationforE1.Example2.8:Thepost\fxnotationfor(9-5)+2is95-2+.Thatis,thetrans-lationsof9,5,and2aretheconstantsthemselves,byrule(1).Then,thetranslationof9-5is95-byrule(2).Thetranslationof(9-5)isthesamebyrule(3).Havingtranslatedtheparenthesizedsubexpression,wemayapplyrule(2)totheentireexpression,with(9-5)intheroleofE1and2intheroleofE2,togettheresult95-2+.Asanotherexample,thepost\fxnotationfor9-(5+2)is952+-.Thatis,5+2is\frsttranslatedinto52+,andthisexpressionbecomesthesecondargumentoftheminussign.2Noparenthesesareneededinpost\fxnotation,becausethepositionandarity(numberofarguments)oftheoperatorspermitsonlyonedecodingofapost\fxexpression.The\\trick\"istorepeatedlyscanthepost\fxstringfromtheleft,untilyou\fndanoperator.Then,looktotheleftforthepropernumberofoperands,andgroupthisoperatorwithitsoperands.Evaluatetheoperatorontheoperands,andreplacethembytheresult.Thenrepeattheprocess,continuingtotherightandsearchingforanotheroperator.Example2.9:Considerthepost\fxexpression952+-3*.Scanningfromtheleft,we\frstencountertheplussign.Lookingtoitsleftwe\fndoperands5and2.Theirsum,7,replaces52+,andwehavethestring97-3*.Now,theleftmost54CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORoperatoristheminussign,anditsoperandsare9and7.Replacingthesebytheresultofthesubtractionleaves23*.Last,themultiplicationsignappliesto2and3,givingtheresult6.22.3.2SynthesizedAttributesTheideaofassociatingquantitieswithprogrammingconstructs|forexample,valuesandtypeswithexpressions|canbeexpressedintermsofgrammars.Weassociateattributeswithnonterminalsandterminals.Then,weattachrulestotheproductionsofthegrammar;theserulesdescribehowtheattributesarecomputedatthosenodesoftheparsetreewheretheproductioninquestionisusedtorelateanodetoitschildren.Asyntax-directedde\fnitionassociates1.Witheachgrammarsymbol,asetofattributes,and2.Witheachproduction,asetofsemanticrulesforcomputingthevaluesoftheattributesassociatedwiththesymbolsappearingintheproduction.Attributescanbeevaluatedasfollows.Foragiveninputstringx,constructaparsetreeforx.Then,applythesemanticrulestoevaluateattributesateachnodeintheparsetree,asfollows.SupposeanodeNinaparsetreeislabeledbythegrammarsymbolX.WewriteX:atodenotethevalueofattributeaofXatthatnode.Aparsetreeshowingtheattributevaluesateachnodeiscalledanannotatedparsetree.Forexample,Fig.2.9showsanannotatedparsetreefor9-5+2withanattributetassociatedwiththenonterminalsexprandterm.Thevalue95-2+oftheattributeattherootisthepost\fxnotationfor9-5+2.Weshallseeshortlyhowtheseexpressionsarecomputed.9term:t=9expr:t=9-5expr:t=95-2+term:t=5expr:t=95-+2term:t=2Figure2.9:AttributevaluesatnodesinaparsetreeAnattributeissaidtobesynthesizedifitsvalueataparse-treenodeNisde-terminedfromattributevaluesatthechildrenofNandatNitself.Synthesized2.3.SYNTAX-DIRECTEDTRANSLATION55attributeshavethedesirablepropertythattheycanbeevaluatedduringasin-glebottom-uptraversalofaparsetree.InSection5.1.1weshalldiscussanotherimportantkindofattribute:the\\inherited\"attribute.Informally,inheritedat-tributeshavetheirvalueataparse-treenodedeterminedfromattributevaluesatthenodeitself,itsparent,anditssiblingsintheparsetree.Example2.10:TheannotatedparsetreeinFig.2.9isbasedonthesyntax-directedde\fnitioninFig.2.10fortranslatingexpressionsconsistingofdigitsseparatedbyplusorminussignsintopost\fxnotation.Eachnonterminalhasastring-valuedattributetthatrepresentsthepost\fxnotationfortheexpressiongeneratedbythatnonterminalinaparsetree.Thesymboljjinthesemanticruleistheoperatorforstringconcatenation.56CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.3.SYNTAX-DIRECTEDTRANSLATION57Adepth-\frsttraversalstartsattherootandrecursivelyvisitsthechildrenofeachnodeinanyorder,notnecessarilyfromlefttoright.Itiscalled\\depth-\frst\"becauseitvisitsanunvisitedchildofanodewheneveritcan,soitvisitsnodesasfarawayfromtheroot(as\\deep\")asquicklyasitcan.Theprocedurevisit(N)inFig.2.11isadepth\frsttraversalthatvisitsthechildrenofanodeinleft-to-rightorder,asshowninFig.2.12.Inthistraversal,wehaveincludedtheactionofevaluatingtranslationsateachnode,justbeforewe\fnishwiththenode(thatis,aftertranslationsatthechildrenhavesurelybeencomputed).Ingeneral,theactionsassociatedwithatraversalcanbewhateverwechoose,ornothingatall.procedurevisit(nodeN)ffor(eachchildCofN,fromlefttoright)fvisit(C);gevaluatesemanticrulesatnodeN;gFigure2.11:Adepth-\frsttraversalofatreeFigure2.12:Exampleofadepth-\frsttraversalofatreeAsyntax-directedde\fnitiondoesnotimposeanyspeci\fcorderfortheeval-uationofattributesonaparsetree;anyevaluationorderthatcomputesanattributeaafteralltheotherattributesthatadependsonisacceptable.Syn-thesizedattributescanbeevaluatedduringanybottom-uptraversal,thatis,atraversalthatevaluatesattributesatanodeafterhavingevaluatedattributesatitschildren.Ingeneral,withbothsynthesizedandinheritedattributes,thematterofevaluationorderisquitecomplex;seeSection5.2.2.3.5TranslationSchemesThesyntax-directedde\fnitioninFig.2.10buildsupatranslationbyattachingstringsasattributestothenodesintheparsetree.Wenowconsideranalter-nativeapproachthatdoesnotneedtomanipulatestrings;itproducesthesametranslationincrementally,byexecutingprogramfragments.58CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.3.SYNTAX-DIRECTEDTRANSLATION59resttermfprint(0+0)grest1+Figure2.13:Anextraleafisconstructedforasemanticactionactionsembeddedintheproductionbodiestranslatesuchexpressionsintopost-\fxnotation,providedweperformaleft-to-rightdepth-\frsttraversalofthetreeandexecuteeachprintstatementwhenwevisititsleaf.5fprint(050)gfprint(0-0)g+fprint(0+0)gterm2fprint(020)gexprterm-fprint(090)g9termexprexprFigure2.14:Actionstranslating9-5+2into95-2+expr!expr1+termfprint(0+0)gexpr!expr1-termfprint(0-0)gexpr!termterm!0fprint(000)gterm!1fprint(010)g\u0001\u0001\u0001term!9fprint(090)gFigure2.15:Actionsfortranslatingintopost\fxnotationTherootofFig.2.14representsthe\frstproductioninFig.2.15.Inapostordertraversal,we\frstperformalltheactionsintheleftmostsubtreeoftheroot,fortheleftoperand,alsolabeledexprliketheroot.Wethenvisittheleaf+atwhichthereisnoaction.Wenextperformtheactionsinthesubtreefortherightoperandtermand,\fnally,thesemanticactionfprint(0+0)gattheextranode.Sincetheproductionsfortermhaveonlyadigitontherightside,thatdigitisprintedbytheactionsfortheproductions.Nooutputisnecessaryfortheproductionexpr!term,andonlytheoperatorneedstobeprintedinthe60CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORactionforeachofthe\frsttwoproductions.Whenexecutedduringapostordertraversaloftheparsetree,theactionsinFig.2.14print95-2+.2NotethatalthoughtheschemesinFig.2.10andFig.2.15producethesametranslation,theyconstructitdi\u000berently;Fig.2.10attachesstringsasattributestothenodesintheparsetree,whiletheschemeinFig.2.15printsthetranslationincrementally,throughsemanticactions.ThesemanticactionsintheparsetreeinFig.2.14translatethein\fxex-pression9-5+2into95-2+byprintingeachcharacterin9-5+2exactlyonce,withoutusinganystorageforthetranslationofsubexpressions.Whentheout-putiscreatedincrementallyinthisfashion,theorderinwhichthecharactersareprintedissigni\fcant.Theimplementationofatranslationschememustensurethatsemanticac-tionsareperformedintheordertheywouldappearduringapostordertraversalofaparsetree.Theimplementationneednotactuallyconstructaparsetree(oftenitdoesnot),aslongasitensuresthatthesemanticactionsareper-formedasifweconstructedaparsetreeandthenexecutedtheactionsduringapostordertraversal.2.3.6ExercisesforSection2.3Exercise2.3.1:Constructasyntax-directedtranslationschemethattrans-latesarithmeticexpressionsfromin\fxnotationintopre\fxnotationinwhichanoperatorappearsbeforeitsoperands;e.g.,\u0000xyisthepre\fxnotationforx\u0000y.Giveannotatedparsetreesfortheinputs9-5+2and9-5*2.Exercise2.3.2:Constructasyntax-directedtranslationschemethattrans-latesarithmeticexpressionsfrompost\fxnotationintoin\fxnotation.Giveannotatedparsetreesfortheinputs95-2*and952*-.Exercise2.3.3:Constructasyntax-directedtranslationschemethattrans-latesintegersintoromannumerals.!Exercise2.3.4:Constructasyntax-directedtranslationschemethattrans-latesromannumeralsupto2000intointegers.Exercise2.3.5:Constructasyntax-directedtranslationschemetotranslatepost\fxarithmeticexpressionsintoequivalentpre\fxarithmeticexpressions.2.4ParsingParsingistheprocessofdetermininghowastringofterminalscanbegeneratedbyagrammar.Indiscussingthisproblem,itishelpfultothinkofaparsetreebeingconstructed,eventhoughacompilermaynotconstructone,inpractice.However,aparsermustbecapableofconstructingthetreeinprinciple,orelsethetranslationcannotbeguaranteedcorrect.2.4.PARSING61Thissectionintroducesaparsingmethodcalled\\recursivedescent,\"whichcanbeusedbothtoparseandtoimplementsyntax-directedtranslators.Acom-pleteJavaprogram,implementingthetranslationschemeofFig.2.15,appearsinthenextsection.Aviablealternativeistouseasoftwaretooltogenerateatranslatordirectlyfromatranslationscheme.Section4.9describessuchatool|Yacc;itcanimplementthetranslationschemeofFig.2.15withoutmodi\fcation.Foranycontext-freegrammarthereisaparserthattakesatmostO(n3)timetoparseastringofnterminals.Butcubictimeisgenerallytooexpen-sive.Fortunately,forrealprogramminglanguages,wecangenerallydesignagrammarthatcanbeparsedquickly.Linear-timealgorithmssu\u000ecetoparseessentiallyalllanguagesthatariseinpractice.Programming-languageparsersalmostalwaysmakeasingleleft-to-rightscanovertheinput,lookingaheadoneterminalatatime,andconstructingpiecesoftheparsetreeastheygo.Mostparsingmethodsfallintooneoftwoclasses,calledthetop-downandbottom-upmethods.Thesetermsrefertotheorderinwhichnodesintheparsetreeareconstructed.Intop-downparsers,constructionstartsattherootandproceedstowardstheleaves,whileinbottom-upparsers,constructionstartsattheleavesandproceedstowardstheroot.Thepopularityoftop-downparsersisduetothefactthate\u000ecientparserscanbeconstructedmoreeasilybyhandusingtop-downmethods.Bottom-upparsing,however,canhandlealargerclassofgrammarsandtranslationschemes,sosoftwaretoolsforgeneratingparsersdirectlyfromgrammarsoftenusebottom-upmethods.2.4.1Top-DownParsingWeintroducetop-downparsingbyconsideringagrammarthatiswell-suitedforthisclassofmethods.Laterinthissection,weconsidertheconstructionoftop-downparsersingeneral.ThegrammarinFig.2.16generatesasubsetofthestatementsofCorJava.Weusetheboldfaceterminalsifandforforthekeywords\\if\"and\\for\",respectively,toemphasizethatthesecharactersequencesaretreatedasunits,i.e.,assingleterminalsymbols.Further,theterminalexprrepresentsexpressions;amorecompletegrammarwoulduseanonterminalexprandhaveproductionsfornonterminalexpr.Similarly,otherisaterminalrepresentingotherstatementconstructs.Thetop-downconstructionofaparsetreeliketheoneinFig.2.17,isdonebystartingwiththeroot,labeledwiththestartingnonterminalstmt,andre-peatedlyperformingthefollowingtwosteps.1.AtnodeN,labeledwithnonterminalA,selectoneoftheproductionsforAandconstructchildrenatNforthesymbolsintheproductionbody.2.Findthenextnodeatwhichasubtreeistobeconstructed,typicallytheleftmostunexpandednonterminalofthetree.Forsomegrammars,theabovestepscanbeimplementedduringasingleleft-to-rightscanoftheinputstring.Thecurrentterminalbeingscannedinthe62CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORstmt!expr;jif(expr)stmtjfor(optexpr;optexpr;optexpr)stmtjotheroptexpr!\u000fjexprFigure2.16:AgrammarforsomestatementsinCandJavaotherstmt)exproptexpr;exprstmtoptexpr;\u000foptexpr(forFigure2.17:AparsetreeaccordingtothegrammarinFig.2.16inputisfrequentlyreferredtoasthelookaheadsymbol.Initially,thelookaheadsymbolisthe\frst,i.e.,leftmost,terminaloftheinputstring.Figure2.18illustratestheconstructionoftheparsetreeinFig.2.17fortheinputstringfor(;expr;expr)otherInitially,theterminalforisthelookaheadsymbol,andtheknownpartoftheparsetreeconsistsoftheroot,labeledwiththestartingnonterminalstmtinFig.2.18(a).Theobjectiveistoconstructtheremainderoftheparsetreeinsuchawaythatthestringgeneratedbytheparsetreematchestheinputstring.Foramatchtooccur,thenonterminalstmtinFig.2.18(a)mustderiveastringthatstartswiththelookaheadsymbolfor.InthegrammarofFig.2.16,thereisjustoneproductionforstmtthatcanderivesuchastring,soweselectit,andconstructthechildrenoftherootlabeledwiththesymbolsintheproductionbody.ThisexpansionoftheparsetreeisshowninFig.2.18(b).EachofthethreesnapshotsinFig.2.18hasarrowsmarkingthelookaheadsymbolintheinputandthenodeintheparsetreethatisbeingconsidered.Oncechildrenareconstructedatanode,wenextconsidertheleftmostchild.InFig.2.18(b),childrenhavejustbeenconstructedattheroot,andtheleftmostchildlabeledwithforisbeingconsidered.Whenthenodebeingconsideredintheparsetreeisforaterminal,andtheterminalmatchesthelookaheadsymbol,thenweadvanceinboththeparsetreeandtheinput.Thenextterminalintheinputbecomesthenewlookaheadsymbol,andthenextchildintheparsetreeisconsidered.InFig.2.18(c),thearrowintheparsetreehasadvancedtothenextchildoftheroot,andthearrow2.4.PARSING63(;expr;forINPUT(a)TREEstmtother)expr;expr;(forINPUT(c)TREEPARSEother)expr;expr;(forINPUT(b)TREEPARSEother)exprPARSEstmt)optexpr;stmtoptexpr)optexpr;optexpr;optexpr(forstmtstmtfor(optexpr;Figure2.18:Top-downparsingwhilescanningtheinputfromlefttorightintheinputhasadvancedtothenextterminal,whichis(.Afurtheradvancewilltakethearrowintheparsetreetothechildlabeledwithnonterminaloptexprandtakethearrowintheinputtotheterminal;.Atthenonterminalnodelabeledoptexpr,werepeattheprocessofselectingaproductionforanonterminal.Productionswith\u000fasthebody(\\\u000f-productions\")requirespecialtreatment.Forthemoment,weusethemasadefaultwhennootherproductioncanbeused;wereturntotheminSection2.4.3.Withnonterminaloptexprandlookahead;,the\u000f-productionisused,since;doesnotmatchtheonlyotherproductionforoptexpr,whichhasterminalexprasitsbody.Ingeneral,theselectionofaproductionforanonterminalmayinvolvetrial-and-error;thatis,wemayhavetotryaproductionandbacktracktotryanotherproductionifthe\frstisfoundtobeunsuitable.Aproductionisunsuitableif,afterusingtheproduction,wecannotcompletethetreetomatchtheinput64CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORstring.Backtrackingisnotneeded,however,inanimportantspecialcasecalledpredictiveparsing,whichwediscussnext.2.4.2PredictiveParsingRecursive-descentparsingisatop-downmethodofsyntaxanalysisinwhichasetofrecursiveproceduresisusedtoprocesstheinput.Oneprocedureisassociatedwitheachnonterminalofagrammar.Here,weconsiderasimpleformofrecursive-descentparsing,calledpredictiveparsing,inwhichthelookaheadsymbolunambiguouslydeterminesthe\rowofcontrolthroughtheprocedurebodyforeachnonterminal.Thesequenceofprocedurecallsduringtheanalysisofaninputstringimplicitlyde\fnesaparsetreefortheinput,andcanbeusedtobuildanexplicitparsetree,ifdesired.ThepredictiveparserinFig.2.19consistsofproceduresforthenontermi-nalsstmtandoptexprofthegrammarinFig.2.16andanadditionalprocedurematch,usedtosimplifythecodeforstmtandoptexpr.Procedurematch(t)com-paresitsargumenttwiththelookaheadsymbolandadvancestothenextinputterminaliftheymatch.Thusmatchchangesthevalueofvariablelookahead,aglobalvariablethatholdsthecurrentlyscannedinputterminal.Parsingbeginswithacalloftheprocedureforthestartingnonterminalstmt.WiththesameinputasinFig.2.18,lookaheadisinitiallythe\frstterminalfor.Procedurestmtexecutescodecorrespondingtotheproductionstmt!for(optexpr;optexpr;optexpr)stmtInthecodefortheproductionbody|thatis,theforcaseofprocedurestmt|eachterminalismatchedwiththelookaheadsymbol,andeachnonterminalleadstoacallofitsprocedure,inthefollowingsequenceofcalls:match(for);match(0(0);optexpr();match(0;0);optexpr();match(0;0);optexpr();match(0)0);stmt();Predictiveparsingreliesoninformationaboutthe\frstsymbolsthatcanbegeneratedbyaproductionbody.Moreprecisely,let\u000bbeastringofgrammarsymbols(terminalsand/ornonterminals).Wede\fneFIRST(\u000b)tobethesetofterminalsthatappearasthe\frstsymbolsofoneormorestringsofterminalsgeneratedfrom\u000b.If\u000bis\u000forcangenerate\u000f,then\u000fisalsoinFIRST(\u000b).ThedetailsofhowonecomputesFIRST(\u000b)areinSection4.4.2.Here,weshalljustuseadhocreasoningtodeducethesymbolsinFIRST(\u000b);typically,\u000bwilleitherbeginwithaterminal,whichisthereforetheonlysymbolinFIRST(\u000b),or\u000bwillbeginwithanonterminalwhoseproductionbodiesbeginwithtermi-nals,inwhichcasetheseterminalsaretheonlymembersofFIRST(\u000b).Forexample,withrespecttothegrammarofFig.2.16,thefollowingarecorrectcalculationsofFIRST.2.4.PARSING65voidstmt()fswitch(lookahead)fcaseexpr:match(expr);match(0;0);break;caseif:match(if);match(0(0);match(expr);match(0)0);stmt();break;casefor:match(for);match(0(0);optexpr();match(0;0);optexpr();match(0;0);optexpr();match(0)0);stmt();break;caseother;match(other);break;default:report(\"syntaxerror\");ggvoidoptexpr()fif(lookahead==expr)match(expr);gvoidmatch(terminalt)fif(lookahead==t)lookahead=nextTerminal;elsereport(\"syntaxerror\");gFigure2.19:PseudocodeforapredictiveparserFIRST(stmt)=fexpr;if;for;othergFIRST(expr;)=fexprgTheFIRSTsetsmustbeconsiderediftherearetwoproductionsA!\u000bandA!\f.Ignoring\u000f-productionsforthemoment,predictiveparsingrequiresFIRST(\u000b)andFIRST(\f)tobedisjoint.Thelookaheadsymbolcanthenbeusedtodecidewhichproductiontouse;ifthelookaheadsymbolisinFIRST(\u000b),then\u000bisused.Otherwise,ifthelookaheadsymbolisinFIRST(\f),then\fisused.2.4.3WhentoUse\u000f-ProductionsOurpredictiveparserusesan\u000f-productionasadefaultwhennootherproduc-tioncanbeused.WiththeinputofFig.2.18,aftertheterminalsforand(arematched,thelookaheadsymbolis;.Atthispointprocedureoptexpriscalled,andthecode66CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORif(lookahead==expr)match(expr);initsbodyisexecuted.Nonterminaloptexprhastwoproductions,withbodiesexprand\u000f.Thelookaheadsymbol\\;\"doesnotmatchtheterminalexpr,sotheproductionwithbodyexprcannotapply.Infact,theprocedurereturnswithoutchangingthelookaheadsymbolordoinganythingelse.Doingnothingcorrespondstoapplyingan\u000f-production.Moregenerally,consideravariantoftheproductionsinFig.2.16whereoptexprgeneratesanexpressionnonterminalinsteadoftheterminalexpr:optexpr!exprj\u000fThus,optexpreithergeneratesanexpressionusingnonterminalexproritgen-erates\u000f.Whileparsingoptexpr,ifthelookaheadsymbolisnotinFIRST(expr),thenthe\u000f-productionisused.Formoreonwhentouse\u000f-productions,seethediscussionofLL(1)grammarsinSection4.4.3.2.4.4DesigningaPredictiveParserWecangeneralizethetechniqueintroducedinformallyinSection2.4.2,toapplytoanygrammarthathasdisjointFIRSTsetsfortheproductionbodiesbelongingtoanynonterminal.Weshallalsoseethatwhenwehaveatranslationscheme|thatis,agrammarwithembeddedactions|itispossibletoexecutethoseactionsaspartoftheproceduresdesignedfortheparser.Recallthatapredictiveparserisaprogramconsistingofaprocedureforeverynonterminal.TheprocedurefornonterminalAdoestwothings.1.ItdecideswhichA-productiontousebyexaminingthelookaheadsymbol.Theproductionwithbody\u000b(where\u000bisnot\u000f,theemptystring)isusedifthelookaheadsymbolisinFIRST(\u000b).Ifthereisacon\rictbetweentwononemptybodiesforanylookaheadsymbol,thenwecannotusethisparsingmethodonthisgrammar.Inaddition,the\u000f-productionforA,ifitexists,isusedifthelookaheadsymbolisnotintheFIRSTsetforanyotherproductionbodyforA.2.Theprocedurethenmimicsthebodyofthechosenproduction.Thatis,thesymbolsofthebodyare\\executed\"inturn,fromtheleft.Anonterminalis\\executed\"byacalltotheprocedureforthatnonterminal,andaterminalmatchingthelookaheadsymbolis\\executed\"byreadingthenextinputsymbol.Ifatsomepointtheterminalinthebodydoesnotmatchthelookaheadsymbol,asyntaxerrorisreported.Figure2.19istheresultofapplyingtheserulestothegrammarinFig.2.16.2.4.PARSING67Justasatranslationschemeisformedbyextendingagrammar,asyntax-directedtranslatorcanbeformedbyextendingapredictiveparser.Analgo-rithmforthispurposeisgiveninSection5.4.Thefollowinglimitedconstructionsu\u000ecesforthepresent:1.Constructapredictiveparser,ignoringtheactionsinproductions.2.Copytheactionsfromthetranslationschemeintotheparser.IfanactionappearsaftergrammarsymbolXinproductionp,thenitiscopiedaftertheimplementationofXinthecodeforp.Otherwise,ifitappearsatthebeginningoftheproduction,thenitiscopiedjustbeforethecodefortheproductionbody.WeshallconstructsuchatranslatorinSection2.5.2.4.5LeftRecursionItispossibleforarecursive-descentparsertoloopforever.Aproblemariseswith\\left-recursive\"productionslikeexpr!expr+termwheretheleftmostsymbolofthebodyisthesameasthenonterminalattheheadoftheproduction.Supposetheprocedureforexprdecidestoapplythisproduction.Thebodybeginswithexprsotheprocedureforexpriscalledrecursively.Sincethelookaheadsymbolchangesonlywhenaterminalinthebodyismatched,nochangetotheinputtookplacebetweenrecursivecallsofexpr.Asaresult,thesecondcalltoexprdoesexactlywhatthe\frstcalldid,whichmeansathirdcalltoexpr,andsoon,forever.Aleft-recursiveproductioncanbeeliminatedbyrewritingtheo\u000bendingproduction.ConsideranonterminalAwithtwoproductionsA!A\u000bj\fwhere\u000band\faresequencesofterminalsandnonterminalsthatdonotstartwithA.Forexample,inexpr!expr+termjtermnonterminalA=expr,string\u000b=+term,andstring\f=term.ThenonterminalAanditsproductionaresaidtobeleftrecursive,becausetheproductionA!A\u000bhasAitselfastheleftmostsymbolontherightside.4Repeatedapplicationofthisproductionbuildsupasequenceof\u000b'stotherightofA,asinFig.2.20(a).WhenAis\fnallyreplacedby\f,wehavea\ffollowedbyasequenceofzeroormore\u000b's.Thesamee\u000bectcanbeachieved,asinFig.2.20(b),byrewritingthepro-ductionsforAinthefollowingmanner,usinganewnonterminalR:68CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR\u000b\u0001\u0001\u0001\u000b\u000b\f(b)\u000b\u0001\u0001\u0001\u000b\u000b\f(a)A\u0001\u0001\u0001AAAARR\u0001\u0001\u0001RR\u000fFigure2.20:Left-andright-recursivewaysofgeneratingastringA!\fRR!\u000bRj\u000fNonterminalRanditsproductionR!\u000bRarerightrecursivebecausethispro-ductionforRhasRitselfasthelastsymbolontherightside.Right-recursiveproductionsleadtotreesthatgrowdowntowardstheright,asinFig.2.20(b).Treesgrowingdowntotherightmakeithardertotranslateexpressionscon-tainingleft-associativeoperators,suchasminus.InSection2.5.2,however,weshallseethatthepropertranslationofexpressionsintopost\fxnotationcanstillbeattainedbyacarefuldesignofthetranslationscheme.InSection4.3.3,weshallconsidermoregeneralformsofleftrecursionandshowhowallleftrecursioncanbeeliminatedfromagrammar.2.4.6ExercisesforSection2.4Exercise2.4.1:Constructrecursive-descentparsers,startingwiththefollow-inggrammars:a)S!+SSj-SSjab)S!S(S)Sj\u000fc)S!0S1j012.5ATranslatorforSimpleExpressionsUsingthetechniquesofthelastthreesections,wenowconstructasyntax-directedtranslator,intheformofaworkingJavaprogram,thattranslatesarithmeticexpressionsintopost\fxform.Tokeeptheinitialprogrammanage-ablysmall,westartwithexpressionsconsistingofdigitsseparatedbybinaryplusandminussigns.WeextendtheprograminSection2.6totranslateex-pressionsthatincludenumbersandotheroperators.Itisworthstudyingthe2.5.ATRANSLATORFORSIMPLEEXPRESSIONS69translationofexpressionsindetail,sincetheyappearasaconstructinsomanylanguages.Asyntax-directedtranslationschemeoftenservesasthespeci\fcationforatranslator.TheschemeinFig.2.21(repeatedfromFig.2.15)de\fnesthetranslationtobeperformedhere.expr!expr+termfprint(0+0)gjexpr-termfprint(0-0)gjtermterm!0fprint(000)gj1fprint(010)g\u0001\u0001\u0001j9fprint(090)gFigure2.21:Actionsfortranslatingintopost\fxnotationOften,theunderlyinggrammarofagivenschemehastobemodi\fedbeforeitcanbeparsedwithapredictiveparser.Inparticular,thegrammarunderlyingtheschemeinFig.2.21isleftrecursive,andaswesawinthelastsection,apredictiveparsercannothandlealeft-recursivegrammar.Weappeartohaveacon\rict:ontheonehandweneedagrammarthatfacilitatestranslation,ontheotherhandweneedasigni\fcantlydi\u000berentgram-marthatfacilitatesparsing.Thesolutionistobeginwiththegrammarforeasytranslationandcarefullytransformittofacilitateparsing.ByeliminatingtheleftrecursioninFig.2.21,wecanobtainagrammarsuitableforuseinapredictiverecursive-descenttranslator.2.5.1AbstractandConcreteSyntaxAusefulstartingpointfordesigningatranslatorisadatastructurecalledanabstractsyntaxtree.Inanabstractsyntaxtreeforanexpression,eachinteriornoderepresentsanoperator;thechildrenofthenoderepresenttheoperandsoftheoperator.Moregenerally,anyprogrammingconstructcanbehandledbymakingupanoperatorfortheconstructandtreatingasoperandsthesemanticallymeaningfulcomponentsofthatconstruct.Intheabstractsyntaxtreefor9-5+2inFig.2.22,therootrepresentstheoperator+.Thesubtreesoftherootrepresentthesubexpressions9-5and2.Thegroupingof9-5asanoperandre\rectstheleft-to-rightevaluationofoperatorsatthesameprecedencelevel.Since-and+havethesameprecedence,9-5+2isequivalentto(9-5)+2.Abstractsyntaxtrees,orsimplysyntaxtrees,resembleparsetreestoanextent.However,inthesyntaxtree,interiornodesrepresentprogrammingconstructswhileintheparsetree,theinteriornodesrepresentnonterminals.Manynonterminalsofagrammarrepresentprogrammingconstructs,butothers70CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR+-952Figure2.22:Syntaxtreefor9-5+2are\\helpers\"ofonesortofanother,suchasthoserepresentingterms,factors,orothervariationsofexpressions.Inthesyntaxtree,thesehelperstypicallyarenotneededandarehencedropped.Toemphasizethecontrast,aparsetreeissometimescalledaconcretesyntaxtree,andtheunderlyinggrammariscalledaconcretesyntaxforthelanguage.InthesyntaxtreeinFig.2.22,eachinteriornodeisassociatedwithanoperator,withno\\helper\"nodesforsingleproductions(aproductionwhosebodyconsistsofasinglenonterminal,andnothingelse)likeexpr!termorfor\u000f-productionslikerest!\u000f.Itisdesirableforatranslationschemetobebasedonagrammarwhoseparsetreesareasclosetosyntaxtreesaspossible.ThegroupingofsubexpressionsbythegrammarinFig.2.21issimilartotheirgroupinginsyntaxtrees.Forexample,subexpressionsoftheadditionoperatoraregivenbyexprandtermintheproductionbodyexpr+term.2.5.2AdaptingtheTranslationSchemeTheleft-recursion-eliminationtechniquesketchedinFig.2.20canalsobeap-pliedtoproductionscontainingsemanticactions.First,thetechniqueextendstomultipleproductionsforA.Inourexample,Aisexpr,andtherearetwoleft-recursiveproductionsforexprandonethatisnotleftrecursive.ThetechniquetransformstheproductionsA!A\u000bjA\fj\rintoA!\rRR!\u000bRj\fRj\u000fSecond,weneedtotransformproductionsthathaveembeddedactions,notjustterminalsandnonterminals.Semanticactionsembeddedintheproductionsaresimplycarriedalonginthetransformation,asiftheywereterminals.Example2.13:ConsiderthetranslationschemeofFig.2.21.LetA=expr\u000b=+termfprint(0+0)g\f=-termfprint(0-0)g\r=term2.5.ATRANSLATORFORSIMPLEEXPRESSIONS71Thentheleft-recursion-eliminatingtransformationproducesthetranslationschemeinFig.2.23.TheexprproductionsinFig.2.21havebeentransformedintooneproductionforexpr,andanewnonterminalrestplaystheroleofR.TheproductionsfortermarerepeatedfromFig.2.21.Figure2.24showshow9-5+2istranslatedusingthegrammarinFig.2.23.2expr!termrestrest!+termfprint(0+0)grestj-termfprint(0-0)grestj\u000fterm!0fprint(000)gj1fprint(010)g\u0001\u0001\u0001j9fprint(090)gFigure2.23:Translationschemeafterleft-recursioneliminationfprint(0-0)gfprint(0+0)g\u000frestfprint(020)g2term+rest9fprint(050)g5term-restfprint(090)gtermexprFigure2.24:Translationof9-5+2to95-2+Left-recursioneliminationmustbedonecarefully,toensurethatwepreservetheorderingofsemanticactions.Forexample,thetransformedschemeinFig.2.23hastheactionsfprint(0+0)gandfprint(0-0)ginthemiddleofaproductionbody,ineachcasebetweennonterminalstermandrest.Iftheactionsweretobemovedtotheend,afterrest,thenthetranslationswouldbecomeincorrect.Weleaveittothereadertoshowthat9-5+2wouldthenbetranslatedincorrectlyinto952+-,thepost\fxnotationfor9-(5+2),insteadofthedesired95-2+,thepost\fxnotationfor(9-5)+2.72CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.5.3ProceduresfortheNonterminalsFunctionsexpr,rest,andterminFig.2.25implementthesyntax-directedtrans-lationschemeinFig.2.23.Thesefunctionsmimictheproductionbodiesofthecorrespondingnonterminals.Functionexprimplementstheproductionexpr!termrestbythecallsterm()followedbyrest().voidexpr()fterm();rest();gvoidrest()fif(lookahead==0+0)fmatch(0+0);term();print(0+0);rest();gelseif(lookahead==0-0)fmatch(0-0);term();print(0-0);rest();gelsefg=\u0003donothingwiththeinput\u0003=;gvoidterm()fif(lookaheadisadigit)ft=lookahead;match(lookahead);print(t);gelsereport(\"syntaxerror\");gFigure2.25:Pseudocodefornonterminalsexpr,rest,andterm.FunctionrestimplementsthethreeproductionsfornonterminalrestinFig.2.23.Itappliesthe\frstproductionifthelookaheadsymbolisaplussign,thesecondproductionifthelookaheadsymbolisaminussign,andtheproductionrest!\u000finallothercases.The\frsttwoproductionsforrestareimplementedbythe\frsttwobranchesoftheif-statementinprocedurerest.Ifthelookaheadsymbolis+,theplussignismatchedbythecallmatch(0+0).Afterthecallterm(),thesemanticactionisimplementedbywritingapluscharacter.Thesecondproductionissimilar,with-insteadof+.Sincethethirdproductionforresthas\u000fasitsrightside,thelastelse-clauseinfunctionrestdoesnothing.Thetenproductionsfortermgeneratethetendigits.Sinceeachoftheseproductionsgeneratesadigitandprintsit,thesamecodeinFig.2.25imple-mentsthemall.Ifthetestsucceeds,variabletsavesthedigitrepresentedbylookaheadsoitcanbewrittenafterthecalltomatch.Notethatmatchchanges2.5.ATRANSLATORFORSIMPLEEXPRESSIONS73thelookaheadsymbol,sothedigitneedstobesavedforlaterprinting.52.5.4SimplifyingtheTranslatorBeforeshowingacompleteprogram,weshallmaketwosimplifyingtransfor-mationstothecodeinFig.2.25.Thesimpli\fcationswillfoldprocedurerestintoprocedureexpr.Whenexpressionswithmultiplelevelsofprecedencearetranslated,suchsimpli\fcationsreducethenumberofproceduresneeded.First,certainrecursivecallscanbereplacedbyiterations.Whenthelaststatementexecutedinaprocedurebodyisarecursivecalltothesameproce-dure,thecallissaidtobetailrecursive.Forexample,infunctionrest,thecallsofrest()withlookahead+and-aretailrecursivebecauseineachofthesebranches,therecursivecalltorestisthelaststatementexecutedbythegivencallofrest.Foraprocedurewithoutparameters,atail-recursivecallcanbereplacedsimplybyajumptothebeginningoftheprocedure.ThecodeforrestcanberewrittenasthepseudocodeofFig.2.26.Aslongasthelookaheadsymbolisaplusoraminussign,procedurerestmatchesthesign,callstermtomatchadigit,andcontinuestheprocess.Otherwise,itbreaksoutofwhileloopandreturnsfromrest.voidrest()fwhile(true)fif(lookahead==0+0)fmatch(0+0);term();print(0+0);continue;gelseif(lookahead==0-0)fmatch(0-0);term();print(0-0);continue;gbreak;ggFigure2.26:EliminatingtailrecursionintheprocedurerestofFig.2.25.Second,thecompleteJavaprogramwillincludeonemorechange.Oncethetail-recursivecallstorestinFig.2.25arereplacedbyiterations,theonlyremainingcalltorestisfromwithinprocedureexpr.Thetwoprocedurescanthereforebeintegratedintoone,byreplacingthecallrest()bythebodyofprocedurerest.74CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.5.5TheCompleteProgramThecompleteJavaprogramforourtranslatorappearsinFig.2.27.The\frstlineofFig.2.27,beginningwithimport,providesaccesstothepackagejava.ioforsysteminputandoutput.TherestofthecodeconsistsofthetwoclassesParserandPostfix.ClassParsercontainsvariablelookaheadandfunctionsParser,expr,term,andmatch.Executionbeginswithfunctionmain,whichisde\fnedinclassPostfix.FunctionmaincreatesaninstanceparseofclassParserandcallsitsfunctionexprtoparseanexpression.ThefunctionParser,withthesamenameasitsclass,isaconstructor;itiscalledautomaticallywhenanobjectoftheclassiscreated.Noticefromitsde\fnitionatthebeginningofclassParserthattheconstructorParserinitializesvariablelookaheadbyreadingatoken.Tokens,consistingofsinglecharacters,aresuppliedbythesysteminputroutineread,whichreadsthenextcharacterfromtheinput\fle.Notethatlookaheadisdeclaredtobeaninteger,ratherthanacharacter,toanticipatethefactthatadditionaltokensotherthansinglecharacterswillbeintroducedinlatersections.Functionexpristheresultofthesimpli\fcationsdiscussedinSection2.5.4;itimplementsnonterminalsexprandrestinFig.2.23.ThecodeforexprinFig.2.27callstermandthenhasawhile-loopthatforevertestswhetherlookaheadmatcheseither'+'or'-'.Controlexitsfromthiswhile-loopwhenitreachesthereturnstatement.Withintheloop,theinput/outputfacilitiesoftheSystemclassareusedtowriteacharacter.FunctiontermusestheroutineisDigitfromtheJavaclassCharactertotestifthelookaheadsymbolisadigit.TheroutineisDigitexpectstobeappliedtoacharacter;however,lookaheadisdeclaredtobeaninteger,anticipatingfutureextensions.Theconstruction(char)lookaheadcastsorcoerceslookaheadtobeacharacter.InasmallchangefromFig.2.25,thesemanticactionofwritingthelookaheadcharacteroccursbeforethecalltomatch.Thefunctionmatchchecksterminals;itreadsthenextinputterminalifthelookaheadsymbolismatchedandsignalsanerrorotherwisebyexecutingthrownewError(\"syntaxerror\");ThiscodecreatesanewexceptionofclassErrorandsuppliesitthestringsyntaxerrorasanerrormessage.JavadoesnotrequireErrorexceptionstobedeclaredinathrowsclause,sincetheyaremeanttobeusedonlyforabnormaleventsthatshouldneveroccur.62.5.ATRANSLATORFORSIMPLEEXPRESSIONS75importjava.io.*;classParser{staticintlookahead;publicParser()throwsIOException{lookahead=System.in.read();}voidexpr()throwsIOException{term();while(true){if(lookahead=='+'){match('+');term();System.out.write('+');}elseif(lookahead=='-'){match('-');term();System.out.write('-');}elsereturn;}}voidterm()throwsIOException{if(Character.isDigit((char)lookahead)){System.out.write((char)lookahead);match(lookahead);}elsethrownewError(\"syntaxerror\");}voidmatch(intt)throwsIOException{if(lookahead==t)lookahead=System.in.read();elsethrownewError(\"syntaxerror\");}}publicclassPostfix{publicstaticvoidmain(String[]args)throwsIOException{Parserparse=newParser();parse.expr();System.out.write('\\n');}}Figure2.27:Javaprogramtotranslatein\fxexpressionsintopost\fxform76CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.6.LEXICALANALYSIS77shalltakethisopportunitytoallowmultiplicationanddivisionaswell.TheextendedtranslationschemeappearsinFig.2.28.expr!expr+termfprint(0+0)gjexpr-termfprint(0-0)gjtermterm!term*factorfprint(0*0)gjterm/factorfprint(0/0)gjfactorfactor!(expr)jnumfprint(num:value)gjidfprint(id:lexeme)gFigure2.28:Actionsfortranslatingintopost\fxnotationInFig.2.28,theterminalnumisassumedtohaveanattributenum.value,whichgivestheintegervaluecorrespondingtothisoccurrenceofnum.Termi-nalidhasastring-valuedattributewrittenasid.lexeme;weassumethisstringistheactuallexemecomprisingthisinstanceofthetokenid.Thepseudocodefragmentsusedtoillustratetheworkingsofalexicalana-lyzerwillbeassembledintoJavacodeattheendofthissection.Theapproachinthissectionissuitableforhand-writtenlexicalanalyzers.Section3.5de-scribesatoolcalledLexthatgeneratesalexicalanalyzerfromaspeci\fcation.Symboltablesordatastructuresforholdinginformationaboutidenti\fersareconsideredinSection2.7.2.6.1RemovalofWhiteSpaceandCommentsTheexpressiontranslatorinSection2.5seeseverycharacterintheinput,soextraneouscharacters,suchasblanks,willcauseittofail.Mostlanguagesallowarbitraryamountsofwhitespacetoappearbetweentokens.Commentsarelikewiseignoredduringparsing,sotheymayalsobetreatedaswhitespace.Ifwhitespaceiseliminatedbythelexicalanalyzer,theparserwillneverhavetoconsiderit.Thealternativeofmodifyingthegrammartoincorporatewhitespaceintothesyntaxisnotnearlyaseasytoimplement.ThepseudocodeinFig.2.29skipswhitespacebyreadinginputcharactersaslongasitseesablank,atab,oranewline.Variablepeekholdsthenextinputcharacter.Linenumbersandcontextareusefulwithinerrormessagestohelppinpointerrors;thecodeusesvariablelinetocountnewlinecharactersintheinput.78CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORfor(;;peek=nextinputcharacter)fif(peekisablankoratab)donothing;elseif(peekisanewline)line=line+1;elsebreak;gFigure2.29:Skippingwhitespace2.6.2ReadingAheadAlexicalanalyzermayneedtoreadaheadsomecharactersbeforeitcandecideonthetokentobereturnedtotheparser.Forexample,alexicalanalyzerforCorJavamustreadaheadafteritseesthecharacter>.Ifthenextcharacteris=,then>ispartofthecharactersequence>=,thelexemeforthetokenforthe\\greaterthanorequalto\"operator.Otherwise>itselfformsthe\\greaterthan\"operator,andthelexicalanalyzerhasreadonecharactertoomany.Ageneralapproachtoreadingaheadontheinput,istomaintainaninputbu\u000berfromwhichthelexicalanalyzercanreadandpushbackcharacters.Inputbu\u000berscanbejusti\fedone\u000eciencygroundsalone,sincefetchingablockofcharactersisusuallymoree\u000ecientthanfetchingonecharacteratatime.Apointerkeepstrackoftheportionoftheinputthathasbeenanalyzed;pushingbackacharacterisimplementedbymovingbackthepointer.Techniquesforinputbu\u000beringarediscussedinSection3.2.One-characterread-aheadusuallysu\u000eces,soasimplesolutionistouseavariable,saypeek,toholdthenextinputcharacter.Thelexicalanalyzerinthissectionreadsaheadonecharacterwhileitcollectsdigitsfornumbersorcharactersforidenti\fers;e.g.,itreadspast1todistinguishbetween1and10,anditreadspastttodistinguishbetweentandtrue.Thelexicalanalyzerreadsaheadonlywhenitmust.Anoperatorlike*canbeidenti\fedwithoutreadingahead.Insuchcases,peekissettoablank,whichwillbeskippedwhenthelexicalanalyzeriscalledto\fndthenexttoken.Theinvariantassertioninthissectionisthatwhenthelexicalanalyzerreturnsatoken,variablepeekeitherholdsthecharacterbeyondthelexemeforthecurrenttoken,oritholdsablank.2.6.3ConstantsAnytimeasingledigitappearsinagrammarforexpressions,itseemsreasonabletoallowanarbitraryintegerconstantinitsplace.Integerconstantscanbeallowedeitherbycreatingaterminalsymbol,saynum,forsuchconstantsorbyincorporatingthesyntaxofintegerconstantsintothegrammar.Thejobofcollectingcharactersintointegersandcomputingtheircollectivenumericalvalueisgenerallygiventoalexicalanalyzer,sonumberscanbetreatedassingleunitsduringparsingandtranslation.2.6.LEXICALANALYSIS79Whenasequenceofdigitsappearsintheinputstream,thelexicalanalyzerpassestotheparseratokenconsistingoftheterminalnumalongwithaninteger-valuedattributecomputedfromthedigits.Ifwewritetokensastuplesenclosedbetweenhi,theinput31+28+59istransformedintothesequencehnum;31ih+ihnum;28ih+ihnum;59iHere,theterminalsymbol+hasnoattributes,soitstupleissimplyh+i.ThepseudocodeinFig.2.30readsthedigitsinanintegerandaccumulatesthevalueoftheintegerusingvariablev.if(peekholdsadigit)fv=0;dofv=v\u000310+integervalueofdigitpeek;peek=nextinputcharacter;gwhile(peekholdsadigit);returntokenhnum;vi;gFigure2.30:Groupingdigitsintointegers2.6.4RecognizingKeywordsandIdenti\fersMostlanguagesuse\fxedcharacterstringssuchasfor,do,andif,aspunctua-tionmarksortoidentifyconstructs.Suchcharacterstringsarecalledkeywords.Characterstringsarealsousedasidenti\ferstonamevariables,arrays,func-tions,andthelike.Grammarsroutinelytreatidenti\fersasterminalstosim-plifytheparser,whichcanthenexpectthesameterminal,sayid,eachtimeanyidenti\ferappearsintheinput.Forexample,oninputcount=count+increment;(2.6)theparserworkswiththeterminalstreamid=id+id.Thetokenforidhasanattributethatholdsthelexeme.Writingtokensastuples,weseethatthetuplesfortheinputstream(2.6)arehid,\"count\"ih=ihid,\"count\"ih+ihid,\"increment\"ih;i.Keywordsgenerallysatisfytherulesforformingidenti\fers,soamechanismisneededfordecidingwhenalexemeformsakeywordandwhenitformsanidenti\fer.Theproblemiseasiertoresolveifkeywordsarereserved;i.e.,iftheycannotbeusedasidenti\fers.Then,acharacterstringformsanidenti\feronlyifitisnotakeyword.80CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORThelexicalanalyzerinthissectionsolvestwoproblemsbyusingatabletoholdcharacterstrings:\u000fSingleRepresentation.Astringtablecaninsulatetherestofthecompilerfromtherepresentationofstrings,sincethephasesofthecompilercanworkwithreferencesorpointerstothestringinthetable.Referencescanalsobemanipulatedmoree\u000ecientlythanthestringsthemselves.\u000fReservedWords.Reservedwordscanbeimplementedbyinitializingthestringtablewiththereservedstringsandtheirtokens.Whenthelexicalanalyzerreadsastringorlexemethatcouldformanidenti\fer,it\frstcheckswhetherthelexemeisinthestringtable.Ifso,itreturnsthetokenfromthetable;otherwise,itreturnsatokenwithterminalid.InJava,astringtablecanbeimplementedasahashtableusingaclasscalledHashtable.ThedeclarationHashtablewords=newHashtable();setsupwordsasadefaulthashtablethatmapskeystovalues.Weshalluseittomaplexemestotokens.ThepseudocodeinFig.2.31usestheoperationgettolookupreservedwords.if(peekholdsaletter)fcollectlettersordigitsintoabu\u000berb;s=stringformedfromthecharactersinb;w=tokenreturnedbywords.get(s);if(wisnotnull)returnw;elsefEnterthekey-valuepair(s;hid;si)intowordsreturntokenhid;si;ggFigure2.31:Distinguishingkeywordsfromidenti\fersThispseudocodecollectsfromtheinputastringsconsistingoflettersanddigitsbeginningwithaletter.Weassumethatsismadeaslongaspossible;i.e.,thelexicalanalyzerwillcontinuereadingfromtheinputaslongasitencounterslettersanddigits.Whensomethingotherthanaletterordigit,e.g.,whitespace,isencountered,thelexemeiscopiedintoabu\u000berb.Ifthetablehasanentryfors,thenthetokenretrievedbywords.getisreturned.Here,scouldbeeitherakeyword,withwhichthewordstablewasinitiallyseeded,oritcouldbeanidenti\ferthatwaspreviouslyenteredintothetable.Otherwise,tokenidandattributesareinstalledinthetableandreturned.2.6.LEXICALANALYSIS812.6.5ALexicalAnalyzerThepseudocodefragmentssofarinthissection\fttogethertoformafunctionscanthatreturnstokenobjects,asfollows:Tokenscan()fskipwhitespace,asinSection2.6.1;handlenumbers,asinSection2.6.3;handlereservedwordsandidenti\fers,asinSection2.6.4;/\u0003ifwegethere,treatread-aheadcharacterpeekasatoken\u0003/Tokent=newToken(peek);peek=blank/\u0003initialization,asdiscussedinSection2.6.2\u0003/;returnt;gTherestofthissectionimplementsfunctionscanaspartofaJavapackageforlexicalanalysis.Thepackage,calledlexerhasclassesfortokensandaclassLexercontainingfunctionscan.Theclassesfortokensandtheir\feldsareillustratedinFig.2.32;theirmethodsarenotshown.ClassTokenhasa\feldtagthatisusedforparsingdecisions.SubclassNumaddsa\feldvalueforanintegervalue.SubclassWordaddsa\feldlexemethatisusedforreservedwordsandidenti\fers.classTokeninttagclassNumintvalueclassWordstringlexemeFigure2.32:ClassTokenandsubclassesNumandWordEachclassisina\flebyitself.The\fleforclassTokenisasfollows:1)packagelexer;//FileToken.java2)publicclassToken{3)publicfinalinttag;4)publicToken(intt){tag=t;}5)}Line1identi\festhepackagelexer.Fieldtagisdeclaredonline3tobefinalsoitcannotbechangedonceitisset.TheconstructorTokenonline4isusedtocreatetokenobjects,asinnewToken('+')whichcreatesanewobjectofclassTokenandsetsits\feldtagtoanintegerrepresentationof'+'.(Forbrevity,weomitthecustomarymethodtoString,whichwouldreturnastringsuitableforprinting.)82CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORWherethepseudocodehadterminalslikenumandid,theJavacodeusesintegerconstants.ClassTagimplementssuchconstants:1)packagelexer;//FileTag.java2)publicclassTag{3)publicfinalstaticint4)NUM=256,ID=257,TRUE=258,FALSE=259;5)}Inadditiontotheinteger-valued\feldsNUMandID,thisclassde\fnestwoaddi-tional\felds,TRUEandFALSE,forfutureuse;theywillbeusedtoillustratethetreatmentofreservedkeywords.7The\feldsinclassTagarepublic,sotheycanbeusedoutsidethepackage.Theyarestatic,sothereisjustoneinstanceorcopyofthese\felds.The\feldsarefinal,sotheycanbesetjustonce.Ine\u000bect,these\feldsrepresentconstants.Asimilare\u000bectisachievedinCbyusingde\fne-statementstoallownamessuchasNUMtobeusedassymbolicconstants,e.g.:#defineNUM256TheJavacodereferstoTag.NUMandTag.IDinplaceswherethepseudocodereferredtoterminalsnumandid.TheonlyrequirementisthatTag.NUMandTag.IDmustbeinitializedwithdistinctvaluesthatdi\u000berfromeachotherandfromtheconstantsrepresentingsingle-charactertokens,suchas'+'or'*'.1)packagelexer;//FileNum.java2)publicclassNumextendsToken{3)publicfinalintvalue;4)publicNum(intv){super(Tag.NUM);value=v;}5)}1)packagelexer;//FileWord.java2)publicclassWordextendsToken{3)publicfinalStringlexeme;4)publicWord(intt,Strings){5)super(t);lexeme=newString(s);6)}7)}Figure2.33:SubclassesNumandWordofTokenClassesNumandWordappearinFig.2.33.ClassNumextendsTokenbydeclaringaninteger\feldvalueonline3.TheconstructorNumonline4callssuper(Tag.NUM),whichsets\feldtaginthesuperclassTokentoTag.NUM.2.6.LEXICALANALYSIS831)packagelexer;//FileLexer.java2)importjava.io.*;importjava.util.*;3)publicclassLexer{4)publicintline=1;5)privatecharpeek='';6)privateHashtablewords=newHashtable();7)voidreserve(Wordt){words.put(t.lexeme,t);}8)publicLexer(){9)reserve(newWord(Tag.TRUE,\"true\"));10)reserve(newWord(Tag.FALSE,\"false\"));11)}12)publicTokenscan()throwsIOException{13)for(;;peek=(char)System.in.read()){14)if(peek==''||peek=='\\t')continue;15)elseif(peek=='\\n')line=line+1;16)elsebreak;17)}/\u0003continuesinFig.2.35\u0003/Figure2.34:Codeforalexicalanalyzer,part1of2ClassWordisusedforbothreservedwordsandidenti\fers,sotheconstructorWordonline4expectstwoparameters:alexemeandacorrespondingintegervaluefortag.AnobjectforthereservedwordtruecanbecreatedbyexecutingnewWord(Tag.TRUE,\"true\")whichcreatesanewobjectwith\feldtagsettoTag.TRUEand\feldlexemesettothestring\"true\".ClassLexerforlexicalanalysisappearsinFigs.2.34and2.35.Theintegervariablelineonline4countsinputlines,andcharactervariablepeekonline5holdsthenextinputcharacter.Reservedwordsarehandledonlines6through11.Thetablewordsisdeclaredonline6.Thehelperfunctionreserveonline7putsastring-wordpairinthetable.Lines9and10intheconstructorLexerinitializethetable.TheyusetheconstructorWordtocreatewordobjects,whicharepassedtothehelperfunctionreserve.Thetableisthereforeinitializedwithreservedwords\"true\"and\"false\"beforethe\frstcallofscan.ThecodeforscaninFig.2.34{2.35implementsthepseudocodefragmentsinthissection.Thefor-statementonlines13through17skipsblank,tab,andnewlinecharacters.Controlleavesthefor-statementwithpeekholdinganon-white-spacecharacter.Thecodeforreadingasequenceofdigitsisonlines18through25.ThefunctionisDigitisfromthebuilt-inJavaclassCharacter.Itisusedonline18tocheckwhetherpeekisadigit.Ifso,thecodeonlines19through2484CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR18)if(Character.isDigit(peek)){19)intv=0;20)do{21)v=10*v+Character.digit(peek,10);22)peek=(char)System.in.read();23)}while(Character.isDigit(peek));24)returnnewNum(v);25)}26)if(Character.isLetter(peek)){27)StringBufferb=newStringBuffer();28)do{29)b.append(peek);30)peek=(char)System.in.read();31)}while(Character.isLetterOrDigit(peek));32)Strings=b.toString();33)Wordw=(Word)words.get(s);34)if(w!=null)returnw;35)w=newWord(Tag.ID,s);36)words.put(s,w);37)returnw;38)}39)Tokent=newToken(peek);40)peek='';41)returnt;42)}43)}Figure2.35:Codeforalexicalanalyzer,part2of2accumulatestheintegervalueofthesequenceofdigitsintheinputandreturnsanewNumobject.Lines26through38analyzereservedwordsandidenti\fers.Keywordstrueandfalsehavealreadybeenreservedonlines9and10.Therefore,line35isreachedifstringsisnotreserved,soitmustbethelexemeforanidenti\fer.Line35thereforereturnsanewwordobjectwithlexemesettosandtagsettoTag.ID.Finally,lines39through41returnthecurrentcharacterasatokenandsetpeektoablankthatwillbestrippedthenexttimescaniscalled.2.6.6ExercisesforSection2.6Exercise2.6.1:ExtendthelexicalanalyzerinSection2.6.5toremovecom-ments,de\fnedasfollows:2.7.SYMBOLTABLES85a)Acommentbeginswith//andincludesallcharactersuntiltheendofthatline.b)Acommentbeginswith/*andincludesallcharactersthroughthenextoccurrenceofthecharactersequence*/.Exercise2.6.2:ExtendthelexicalanalyzerinSection2.6.5torecognizetherelationaloperators<,<=,==,!=,>=,>.Exercise2.6.3:ExtendthelexicalanalyzerinSection2.6.5torecognize\roat-ingpointnumberssuchas2.,3.14,and.5.2.7SymbolTablesSymboltablesaredatastructuresthatareusedbycompilerstoholdinformationaboutsource-programconstructs.Theinformationiscollectedincrementallybytheanalysisphasesofacompilerandusedbythesynthesisphasestogeneratethetargetcode.Entriesinthesymboltablecontaininformationaboutanidenti\fersuchasitscharacterstring(orlexeme),itstype,itspositioninstorage,andanyotherrelevantinformation.Symboltablestypicallyneedtosupportmultipledeclarationsofthesameidenti\ferwithinaprogram.FromSection1.6.1,thescopeofadeclarationistheportionofaprogramtowhichthedeclarationapplies.Weshallimplementscopesbysettingupaseparatesymboltableforeachscope.Aprogramblockwithdeclarations8willhaveitsownsymboltablewithanentryforeachdeclarationintheblock.Thisapproachalsoworksforotherconstructsthatsetupscopes;forexample,aclasswouldhaveitsowntable,withanentryforeach\feldandmethod.Thissectioncontainsasymbol-tablemodulesuitableforusewiththeJavatranslatorfragmentsinthischapter.ThemodulewillbeusedasiswhenweputtogetherthetranslatorinAppendixA.Meanwhile,forsimplicity,themainexampleofthissectionisastripped-downlanguagewithjustthekeyconstructsthattouchsymboltables;namely,blocks,declarations,andfactors.Alloftheotherstatementandexpressionconstructsareomittedsowecanfocusonthesymbol-tableoperations.Aprogramconsistsofblockswithoptionaldeclara-tionsand\\statements\"consistingofsingleidenti\fers.Eachsuchstatementrepresentsauseoftheidenti\fer.Hereisasampleprograminthislanguage:{intx;chary;{booly;x;y;}x;y;}(2.7)TheexamplesofblockstructureinSection1.6.3dealtwiththede\fnitionsandusesofnames;theinput(2.7)consistssolelyofde\fnitionsandusesofnames.Thetaskweshallperformistoprintarevisedprogram,inwhichthedecla-rationshavebeenremovedandeach\\statement\"hasitsidenti\ferfollowedbyacolonanditstype.86CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR2.7.SYMBOLTABLES8788CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORThemost-closelynestedruleforblockscanbeimplementedbychainingsymboltables.Thatis,thetableforanestedblockpointstothetableforitsenclosingblock.Example2.16:Figure2.36showssymboltablesforthepseudocodeinExam-ple2.15.B1isfortheblockstartingonline1andB2isfortheblockstartingatline2.Atthetopofthe\fgureisanadditionalsymboltableB0foranyglobalordefaultdeclarationsprovidedbythelanguage.Duringthetimethatweareanalyzinglines2through4,theenvironmentisrepresentedbyareferencetothelowestsymboltable|theoneforB2.Whenwemovetoline5,thesymboltableforB2becomesinaccessible,andtheenvironmentrefersinsteadtothesymboltableforB1,fromwhichwecanreachtheglobalsymboltable,butnotthetableforB2.2B0:w\u0001\u0001\u0001B1:xintyintB2:wintyboolzintFigure2.36:ChainedsymboltablesforExample2.15TheJavaimplementationofchainedsymboltablesinFig.2.37de\fnesaclassEnv,shortforenvironment.9ClassEnvsupportsthreeoperations:\u000fCreateanewsymboltable.TheconstructorEnv(p)onlines6through8ofFig.2.37createsanEnvobjectwithahashtablenamedtable.Theobjectischainedtotheenvironment-valuedparameterpbysetting\feldprevtop.AlthoughitistheEnvobjectsthatformachain,itisconvenienttotalkofthetablesbeingchained.\u000fPutanewentryinthecurrenttable.Thehashtableholdskey-valuepairs,where:{Thekeyisastring,orratherareferencetoastring.Wecouldalternativelyusereferencestotokenobjectsforidenti\fersaskeys.{ThevalueisanentryofclassSymbol.Thecodeonlines9through11doesnotneedtoknowthestructureofanentry;thatis,thecodeisindependentofthe\feldsandmethodsinclassSymbol.2.7.SYMBOLTABLES891)packagesymbols;//FileEnv.java2)importjava.util.*;3)publicclassEnv{4)privateHashtabletable;5)protectedEnvprev;6)publicEnv(Envp){7)table=newHashtable();prev=p;8)}9)publicvoidput(Strings,Symbolsym){10)table.put(s,sym);11)}12)publicSymbolget(Strings){13)for(Enve=this;e!=null;e=e.prev){14)Symbolfound=(Symbol)(e.table.get(s));15)if(found!=null)returnfound;16)}17)returnnull;18)}19)}Figure2.37:ClassEnvimplementschainedsymboltables\u000fGetanentryforanidenti\ferbysearchingthechainoftables,startingwiththetableforthecurrentblock.Thecodeforthisoperationonlines12through18returnseitherasymbol-tableentryornull.Chainingofsymboltablesresultsinatreestructure,sincemorethanoneblockcanbenestedinsideanenclosingblock.ThedottedlinesinFig.2.36areareminderthatchainedsymboltablescanformatree.2.7.2TheUseofSymbolTablesIne\u000bect,theroleofasymboltableistopassinformationfromdeclarationstouses.Asemanticaction\\puts\"informationaboutidenti\ferxintothesymboltable,whenthedeclarationofxisanalyzed.Subsequently,asemanticactionassociatedwithaproductionsuchasfactor!id\\gets\"informationabouttheidenti\ferfromthesymboltable.SincethetranslationofanexpressionE1opE2,foratypicaloperatorop,dependsonlyonthetranslationsofE1andE2,anddoesnotdirectlydependonthesymboltable,wecanaddanynumberofoperatorswithoutchangingthebasic\rowofinformationfromdeclarationstouses,throughthesymboltable.Example2.17:ThetranslationschemeinFig.2.38illustrateshowclassEnvcanbeused.Thetranslationschemeconcentratesonscopes,declarations,and90CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORuses.ItimplementsthetranslationdescribedinExample2.14.Asnotedearlier,oninputprogram!ftop=null;gblockblock!0{0fsaved=top;top=newEnv(top);print(\"{\");gdeclsstmts0}0ftop=saved;print(\"}\");gdecls!declsdeclj\u000fdecl!typeid;fs=newSymbol;s.type=type.lexemetop.put(id.lexeme,s);gstmts!stmtsstmtj\u000fstmt!blockjfactor;fprint(\";\");gfactor!idfs=top.get(id.lexeme);print(id.lexeme);print(\":\");gprint(s.type);Figure2.38:Theuseofsymboltablesfortranslatingalanguagewithblocks{intx;chary;{booly;x;y;}x;y;}thetranslationschemestripsthedeclarationsandproduces{{x:int;y:bool;}x:int;y:char;}NoticethatthebodiesoftheproductionshavebeenalignedinFig.2.38sothatallthegrammarsymbolsappearinonecolumn,andalltheactionsinasecondcolumn.Asaresult,componentsofthebodyareoftenspreadoverseverallines.Now,considerthesemanticactions.Thetranslationschemecreatesanddiscardssymboltablesuponblockentryandexit,respectively.Variabletopdenotesthetoptable,attheheadofachainoftables.The\frstproductionof2.8.INTERMEDIATECODEGENERATION91theunderlyinggrammarisprogram!block.Thesemanticactionbeforeblockinitializestoptonull,withnoentries.Thesecondproduction,block!0{0declsstmts0}0,hasactionsuponblockentryandexit.Onblockentry,beforedecls,asemanticactionsavesareferencetothecurrenttableusingalocalvariablesaved.Eachuseofthisproductionhasitsownlocalvariablesaved,distinctfromthelocalvariableforanyotheruseofthisproduction.Inarecursive-descentparser,savedwouldbelocaltotheprocedureforblock.ThetreatmentoflocalvariablesofarecursivefunctionisdiscussedinSection7.2.Thecodetop=newEnv(top);setsvariabletoptoanewlycreatednewtablethatischainedtothepreviousvalueoftopjustbeforeblockentry.VariabletopisanobjectofclassEnv;thecodefortheconstructorEnvappearsinFig.2.37.Onblockexit,after0}0,asemanticactionrestorestoptoitsvaluesavedonblockentry.Ine\u000bect,thetablesformastack;restoringtoptoitssavedvaluepopsthee\u000bectofthedeclarationsintheblock.10Thus,thedeclarationsintheblockarenotvisibleoutsidetheblock.Adeclarationdecl!typeidresultsinanewentryforthedeclarediden-ti\fer.Weassumethattokenstypeandideachhaveanassociatedattribute,whichisthetypeandlexeme,respectively,ofthedeclaredidenti\fer.Weshallnotgointoallthe\feldsofasymbolobjects,butweassumethatthereisa\feldtypethatgivesthetypeofthesymbol.Wecreateanewsymbolobjectsandassignitstypeproperlybys:type=type:lexeme.Thecompleteentryisputintothetopsymboltablebytop.put(id.lexeme,s).Thesemanticactionintheproductionfactor!idusesthesymboltabletogettheentryfortheidenti\fer.Thegetoperationsearchesforthe\frstentryinthechainoftables,startingwithtop.Theretrievedentrycontainsanyinformationneededabouttheidenti\fer,suchasthetypeoftheidenti\fer.22.8IntermediateCodeGenerationThefrontendofacompilerconstructsanintermediaterepresentationofthesourceprogramfromwhichthebackendgeneratesthetargetprogram.Inthissection,weconsiderintermediaterepresentationsforexpressionsandstate-ments,andgivetutorialexamplesofhowtoproducesuchrepresentations.2.8.1TwoKindsofIntermediateRepresentationsAswassuggestedinSection2.1andespeciallyFig.2.4,thetwomostimportantintermediaterepresentationsare:92CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR\u000fTrees,includingparsetreesand(abstract)syntaxtrees.\u000fLinearrepresentations,especially\\three-addresscode.\"Abstract-syntaxtrees,orsimplysyntaxtrees,wereintroducedinSection2.5.1,andinSection5.3.1theywillbereexaminedmoreformally.Duringparsing,syntax-treenodesarecreatedtorepresentsigni\fcantprogrammingconstructs.Asanalysisproceeds,informationisaddedtothenodesintheformofattributesassociatedwiththenodes.Thechoiceofattributesdependsonthetranslationtobeperformed.Three-addresscode,ontheotherhand,isasequenceofelementaryprogramsteps,suchastheadditionoftwovalues.Unlikethetree,thereisnohierarchicalstructure.AsweshallseeinChapter9,weneedthisrepresentationifwearetodoanysigni\fcantoptimizationofcode.Inthatcase,webreakthelongsequenceofthree-addressstatementsthatformaprograminto\\basicblocks,\"whicharesequencesofstatementsthatarealwaysexecutedone-after-the-other,withnobranching.Inadditiontocreatinganintermediaterepresentation,acompilerfrontendchecksthatthesourceprogramfollowsthesyntacticandsemanticrulesofthesourcelanguage.Thischeckingiscalledstaticchecking;ingeneral\\static\"means\\donebythecompiler.\"11Staticcheckingassuresthatcertainkindsofprogrammingerrors,includingtypemismatches,aredetectedandreportedduringcompilation.Itispossiblethatacompilerwillconstructasyntaxtreeatthesametimeitemitsstepsofthree-addresscode.However,itiscommonforcompilerstoemitthethree-addresscodewhiletheparser\\goesthroughthemotions\"ofconstructingasyntaxtree,withoutactuallyconstructingthecompletetreedatastructure.Rather,thecompilerstoresnodesandtheirattributesneededforsemanticcheckingorotherpurposes,alongwiththedatastructureusedforparsing.Bysodoing,thosepartsofthesyntaxtreethatareneededtoconstructthethree-addresscodeareavailablewhenneeded,butdisappearwhennolongerneeded.WetakeupthedetailsofthisprocessinChapter5.2.8.2ConstructionofSyntaxTreesWeshall\frstgiveatranslationschemethatconstructssyntaxtrees,andlater,inSection2.8.4,showhowtheschemecanbemodi\fedtoemitthree-addresscode,alongwith,orinsteadof,thesyntaxtree.RecallfromSection2.5.1thatthesyntaxtree2.8.INTERMEDIATECODEGENERATION93opE1E2representsanexpressionformedbyapplyingtheoperatoroptothesubexpres-sionsrepresentedbyE1andE2.Syntaxtreescanbecreatedforanyconstruct,notjustexpressions.Eachconstructisrepresentedbyanode,withchildrenforthesemanticallymeaningfulcomponentsoftheconstruct.Forexample,thesemanticallymeaningfulcomponentsofaCwhile-statement:while(expr)stmtaretheexpressionexprandthestatementstmt.12Thesyntax-treenodeforsuchawhile-statementhasanoperator,whichwecallwhile,andtwochildren|thesyntaxtreesfortheexprandthestmt.ThetranslationschemeinFig.2.39constructssyntaxtreesforarepre-sentative,butverylimited,languageofexpressionsandstatements.Allthenonterminalsinthetranslationschemehaveanattributen,whichisanodeofthesyntaxtree.NodesareimplementedasobjectsofclassNode.ClassNodehastwoimmediatesubclasses:Exprforallkindsofexpressions,andStmtforallkindsofstatements.EachtypeofstatementhasacorrespondingsubclassofStmt;forexample,operatorwhilecorrespondstosubclassWhile.Asyntax-treenodeforoperatorwhilewithchildrenxandyiscreatedbythepseudocodenewWhile(x;y)whichcreatesanobjectofclassWhilebycallingconstructorfunctionWhile,withthesamenameastheclass.Justasconstructorscorrespondtooperators,constructorparameterscorrespondtooperandsintheabstractsyntax.WhenwestudythedetailedcodeinAppendixA,weshallseehowmethodsareplacedwheretheybelonginthishierarchyofclasses.Inthissection,weshalldiscussonlyafewofthemethods,informally.WeshallconsidereachoftheproductionsandrulesofFig.2.39,inturn.First,theproductionsde\fningdi\u000berenttypesofstatementsareexplained,fol-lowedbytheproductionsthatde\fneourlimitedtypesofexpressions.SyntaxTreesforStatementsForeachstatementconstruct,wede\fneanoperatorintheabstractsyntax.Forconstructsthatbeginwithakeyword,weshallusethekeywordfortheoperator.Thus,thereisanoperatorwhileforwhile-statementsandanoperatordofordo-whilestatements.Conditionalscanbehandledbyde\fningtwooperators94CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORprogram!blockfreturnblock.n;gblock!0{0stmts0}0fblock.n=stmts.n;gstmts!stmts1stmtfstmts:n=newSeq(stmts1:n;stmt:n);gj\u000ffstmts:n=null;gstmt!expr;fstmt:n=newEval(expr:n);gjif(expr)stmt1fstmt:n=newIf(expr:n;stmt1:n);gjwhile(expr)stmt1fstmt:n=newWhile(expr:n;stmt1:n);gjdostmt1while(expr);fstmt:n=newDo(stmt1:n;expr:n);gjblockfstmt:n=block.n;gexpr!rel=expr1fexpr:n=newAssign(0=0;rel:n;expr1:n);gjrelfexpr:n=rel.n;grel!rel1<addfrel:n=newRel(0<0;rel1:n;add:n);gjrel1<=addfrel:n=newRel(0\u00140;rel1:n;add:n);gjaddfrel.n=add.n;gadd!add1+termfadd:n=newOp(0+0;add1:n;term:n);gjtermfadd:n=term:n;gterm!term1*factorfterm:n=newOp(0\u00030;term1:n;factor:n);gjfactorfterm:n=factor:n;gfactor!(expr)ffactor:n=expr:n;gjnumffactor:n=newNum(num:value);gFigure2.39:Constructionofsyntaxtreesforexpressionsandstatements2.8.INTERMEDIATECODEGENERATION95ifelseandifforif-statementswithandwithoutanelsepart,respectively.Inoursimpleexamplelanguage,wedonotuseelse,andsohaveonlyanif-statement.Addingelsepresentssomeparsingissues,whichwediscussinSection4.8.2.Eachstatementoperatorhasacorrespondingclassofthesamename,withacapital\frstletter;e.g.,classIfcorrespondstoif.Inaddition,wede\fnethesubclassSeq,whichrepresentsasequenceofstatements.Thissubclasscorrespondstothenonterminalstmtsofthegrammar.EachoftheseclassesaresubclassesofStmt,whichinturnisasubclassofNode.ThetranslationschemeinFig.2.39illustratestheconstructionofsyntax-treenodes.Atypicalruleistheoneforif-statements:stmt!if(expr)stmt1fstmt:n=newIf(expr:n;stmt1:n);gThemeaningfulcomponentsoftheif-statementareexprandstmt1.These-manticactionde\fnesthenodestmt:nasanewobjectofsubclassIf.ThecodefortheconstructorIfisnotshown.Itcreatesanewnodelabeledifwiththenodesexpr:nandstmt1:naschildren.Expressionstatementsdonotbeginwithakeyword,sowede\fneanewop-eratorevalandclassEval,whichisasubclassofStmt,torepresentexpressionsthatarestatements.Therelevantruleis:stmt!expr;fstmt:n=newEval(expr:n);gRepresentingBlocksinSyntaxTreesTheremainingstatementconstructinFig.2.39istheblock,consistingofasequenceofstatements.Considertherules:stmt!blockfstmt.n=block.n;gblock!0{0stmts0}0fblock.n=stmts.n;gThe\frstsaysthatwhenastatementisablock,ithasthesamesyntaxtreeastheblock.Thesecondrulesaysthatthesyntaxtreefornonterminalblockissimplythesyntaxtreeforthesequenceofstatementsintheblock.Forsimplicity,thelanguageinFig.2.39doesnotincludedeclarations.EvenwhendeclarationsareincludedinAppendixA,weshallseethatthesyntaxtreeforablockisstillthesyntaxtreeforthestatementsintheblock.Sinceinformationfromdeclarationsisincorporatedintothesymboltable,theyarenotneededinthesyntaxtree.Blocks,withorwithoutdeclarations,thereforeappeartobejustanotherstatementconstructinintermediatecode.Asequenceofstatementsisrepresentedbyusingaleafnullforanemptystatementandaoperatorseqforasequenceofstatements,asinstmts!stmts1stmtfstmts:n=newSeq(stmts1:n;stmt:n);g96CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORExample2.18:InFig.2.40weseepartofasyntaxtreerepresentingablockorstatementlist.Therearetwostatementsinthelist,the\frstanif-statementandthesecondawhile-statement.Wedonotshowtheportionofthetreeabovethisstatementlist,andweshowonlyasatriangleeachofthenecessarysubtrees:twoexpressiontreesfortheconditionsoftheif-andwhile-statements,andtwostatementtreesfortheirsubstatements.2treeforanexpressionsometreeforastatementsomestatementtreeforasomeexpressiontreeforansomeifnullseqseqwhileseqFigure2.40:Partofasyntaxtreeforastatementlistconsistingofanif-statementandawhile-statementSyntaxTreesforExpressionsPreviously,wehandledthehigherprecedenceof*over+byusingthreenon-terminalsexpr,term,andfactor.Thenumberofnonterminalsispreciselyoneplusthenumberoflevelsofprecedenceinexpressions,aswesuggestedinSec-tion2.2.6.InFig.2.39,wehavetwocomparisonoperators,<and<=atoneprecedencelevel,aswellastheusual+and*operators,sowehaveaddedoneadditionalnonterminal,calledadd.Abstractsyntaxallowsustogroup\\similar\"operatorstoreducethenumberofcasesandsubclassesofnodesinanimplementationofexpressions.Inthischapter,wetake\\similar\"tomeanthatthetype-checkingandcode-generationrulesfortheoperatorsaresimilar.Forexample,typicallytheoperators+and*canbegrouped,sincetheycanbehandledinthesameway|theirrequirementsregardingthetypesofoperandsarethesame,andtheyeachresultinasinglethree-addressinstructionthatappliesoneoperatortotwovalues.Ingeneral,thegroupingofoperatorsintheabstractsyntaxisbasedontheneedsofthelaterphasesofthecompiler.ThetableinFig.2.41speci\festhecorrespondencebetweentheconcreteandabstractsyntaxforseveraloftheoperatorsofJava.Intheconcretesyntax,alloperatorsareleftassociative,excepttheassign-mentoperator=,whichisrightassociative.Theoperatorsonalinehavethe2.8.INTERMEDIATECODEGENERATION97CONCRETESYNTAXABSTRACTSYNTAX=assign||cond&&cond==!=rel<<=>=>rel+-op*/%op!not-unaryminus[]accessFigure2.41:ConcreteandabstractsyntaxforseveralJavaoperatorssameprecedence;thatis,==and!=havethesameprecedence.Thelinesareinorderofincreasingprecedence;e.g.,==hashigherprecedencethantheoper-ators&&and=.Thesubscriptunaryin-unaryissolelytodistinguishaleadingunaryminussign,asin-2,fromabinaryminussign,asin2-a.Theoperator[]representsarrayaccess,asina[i].Theabstract-syntaxcolumnspeci\festhegroupingofoperators.Theassign-mentoperator=isinagroupbyitself.Thegroupcondcontainstheconditionalbooleanoperators&&and||.Thegrouprelcontainstherelationalcomparisonoperatorsonthelinesfor==and<.Thegroupopcontainsthearithmeticoperatorslike+and*.Unaryminus,booleannegation,andarrayaccessareingroupsbythemselves.ThemappingbetweenconcreteandabstractsyntaxinFig.2.41canbeimplementedbywritingatranslationscheme.Theproductionsfornonterminalsexpr,rel,add,term,andfactorinFig.2.39specifytheconcretesyntaxforarepresentativesubsetoftheoperatorsinFig.2.41.Thesemanticactionsintheseproductionscreatesyntax-treenodes.Forexample,theruleterm!term1*factorfterm:n=newOp(0\u00030;term1:n;factor:n);gcreatesanodeofclassOp,whichimplementstheoperatorsgroupedunderopinFig.2.41.TheconstructorOphasaparameter0\u00030toidentifytheactualoperator,inadditiontothenodesterm1:nandfactor:nforthesubexpressions.2.8.3StaticCheckingStaticchecksareconsistencychecksthataredoneduringcompilation.Notonlydotheyassurethataprogramcanbecompiledsuccessfully,buttheyalsohavethepotentialforcatchingprogrammingerrorsearly,beforeaprogramisrun.Staticcheckingincludes:\u000fSyntacticChecking.Thereismoretosyntaxthangrammars.Forex-ample,constraintssuchasanidenti\ferbeingdeclaredatmostonceina98CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORscope,orthatabreakstatementmusthaveanenclosinglooporswitchstatement,aresyntactic,althoughtheyarenotencodedin,orenforcedby,agrammarusedforparsing.\u000fTypeChecking.Thetyperulesofalanguageassurethatanoperatororfunctionisappliedtotherightnumberandtypeofoperands.Ifconversionbetweentypesisnecessary,e.g.,whenanintegerisaddedtoa\roat,thenthetype-checkercaninsertanoperatorintothesyntaxtreetorepresentthatconversion.Wediscusstypeconversion,usingthecommonterm\\coercion,\"below.L-valuesandR-valuesWenowconsidersomesimplestaticchecksthatcanbedoneduringthecon-structionofasyntaxtreeforasourceprogram.Ingeneral,complexstaticchecksmayneedtobedoneby\frstconstructinganintermediaterepresentationandthenanalyzingit.Thereisadistinctionbetweenthemeaningofidenti\fersontheleftandrightsidesofanassignment.Ineachoftheassignmentsi=5;i=i+1;therightsidespeci\fesanintegervalue,whiletheleftsidespeci\feswherethevalueistobestored.Thetermsl-valueandr-valuerefertovaluesthatareappropriateontheleftandrightsidesofanassignment,respectively.Thatis,r-valuesarewhatweusuallythinkofas\\values,\"whilel-valuesarelocations.Staticcheckingmustassurethattheleftsideofanassignmentdenotesanl-value.Anidenti\ferlikeihasanl-value,asdoesanarrayaccesslikea[2].Butaconstantlike2isnotappropriateontheleftsideofanassignment,sinceithasanr-value,butnotanl-value.TypeCheckingTypecheckingassuresthatthetypeofaconstructmatchesthatexpectedbyitscontext.Forexample,intheif-statementif(expr)stmttheexpressionexprisexpectedtohavetypeboolean.Typecheckingrulesfollowtheoperator/operandstructureoftheabstractsyntax.Assumetheoperatorrelrepresentsrelationaloperatorssuchas<=.Thetyperulefortheoperatorgrouprelisthatitstwooperandsmusthavethesametype,andtheresulthastypeboolean.Usingattributetypeforthetypeofanexpression,letEconsistofrelappliedtoE1andE2.ThetypeofEcanbecheckedwhenitsnodeisconstructed,byexecutingcodelikethefollowing:2.8.INTERMEDIATECODEGENERATION99if(E1.type==E2.type)E.type=boolean;elseerror;Theideaofmatchingactualwithexpectedtypescontinuestoapply,eveninthefollowingsituations:\u000fCoercions.Acoercionoccursifthetypeofanoperandisautomaticallyconvertedtothetypeexpectedbytheoperator.Inanexpressionlike2*3.14,theusualtransformationistoconverttheinteger2intoanequivalent\roating-pointnumber,2.0,andthenperforma\roating-pointoperationontheresultingpairof\roating-pointoperands.Thelanguagede\fnitionspeci\festheallowablecoercions.Forexample,theactualruleforreldiscussedabovemightbethatE1.typeandE2.typeareconvertibletothesametype.Inthatcase,itwouldbelegaltocompare,say,anintegerwitha\roat.\u000fOverloading.Theoperator+inJavarepresentsadditionwhenappliedtointegers;itmeansconcatenationwhenappliedtostrings.Asymbolissaidtobeoverloadedifithasdi\u000berentmeaningsdependingonitscontext.Thus,+isoverloadedinJava.Themeaningofanoverloadedoperatorisdeterminedbyconsideringtheknowntypesofitsoperandsandresults.Forexample,weknowthatthe+inz=x+yisconcatenationifweknowthatanyofx,y,orzisoftypestring.However,ifwealsoknowthatanotheroneoftheseisoftypeinteger,thenwehaveatypeerrorandthereisnomeaningtothisuseof+.2.8.4Three-AddressCodeOncesyntaxtreesareconstructed,furtheranalysisandsynthesiscanbedonebyevaluatingattributesandexecutingcodefragmentsatnodesinthetree.Weillustratethepossibilitiesbywalkingsyntaxtreestogeneratethree-addresscode.Speci\fcally,weshowhowtowritefunctionsthatprocessthesyntaxtreeand,asaside-e\u000bect,emitthenecessarythree-addresscode.Three-AddressInstructionsThree-addresscodeisasequenceofinstructionsoftheformx=yopzwherex,y,andzarenames,constants,orcompiler-generatedtemporaries;andopstandsforanoperator.Arrayswillbehandledbyusingthefollowingtwovariantsofinstructions:x[y]=zx=y[z]100CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORThe\frstputsthevalueofzinthelocationx[y],andthesecondputsthevalueofy[z]inthelocationx.Three-addressinstructionsareexecutedinnumericalsequenceunlessforcedtodootherwisebyaconditionalorunconditionaljump.Wechoosethefollowinginstructionsforcontrol\row:ifFalsexgotoLifxisfalse,nextexecutetheinstructionlabeledLifTruexgotoLifxistrue,nextexecutetheinstructionlabeledLgotoLnextexecutetheinstructionlabeledLAlabelLcanbeattachedtoanyinstructionbyprependingapre\fxL:.Aninstructioncanhavemorethanonelabel.Finally,weneedinstructionsthatcopyavalue.Thefollowingthree-addressinstructioncopiesthevalueofyintox:x=yTranslationofStatementsStatementsaretranslatedintothree-addresscodebyusingjumpinstructionstoimplementthe\rowofcontrolthroughthestatement.ThelayoutinFig.2.42illustratesthetranslationofifexprthenstmt1.ThejumpinstructioninthelayoutifFalsexgotoafterjumpsoverthetranslationofstmt1ifexprevaluatestofalse.Otherstatementconstructsaresimilarlytranslatedusingappropriatejumpsaroundthecodefortheircomponents.aftercodeforstmt1ifFalsexgotoafterexprintoxcodetocomputeFigure2.42:Codelayoutforif-statementsForconcreteness,weshowthepseudocodeforclassIfinFig.2.43.ClassIfisasubclassofStmt,asaretheclassesfortheotherstatementconstructs.EachsubclassofStmthasaconstructor|Ifinthiscase|andafunctiongenthatiscalledtogeneratethree-addresscodeforthiskindofstatement.2.8.INTERMEDIATECODEGENERATION101classIfextendsStmtfExprE;StmtS;publicIf(Exprx,Stmty)fE=x;S=y;after=newlabel();gpublicvoidgen()fExprn=E.rvalue();emit(\\ifFalse\"+n.toString()+\\goto\"+after);S.gen();emit(after+\\:\");ggFigure2.43:FunctiongeninclassIfgeneratesthree-addresscodeTheconstructorIfinFig.2.43createssyntax-treenodesforif-statements.Itiscalledwithtwoparameters,anexpressionnodexandastatementnodey,whichitsavesasattributesEandS.Theconstructoralsoassignsattributeafterauniquenewlabel,bycallingfunctionnewlabel().ThelabelwillbeusedaccordingtothelayoutinFig.2.42.Oncetheentiresyntaxtreeforasourceprogramisconstructed,thefunctiongeniscalledattherootofthesyntaxtree.Sinceaprogramisablockinoursimplelanguage,therootofthesyntaxtreerepresentsthesequenceofstatementsintheblock.Allstatementclassescontainafunctiongen.ThepseudocodeforfunctiongenofclassIfinFig.2.43isrepresentative.ItcallsE:rvalue()totranslatetheexpressionE(theboolean-valuedexpressionthatispartoftheif-statements)andsavestheresultnodereturnedbyE.Translationofexpressionswillbediscussedshortly.FunctiongenthenemitsaconditionaljumpandcallsS.gen()totranslatethesubstatementS.TranslationofExpressionsWenowillustratethetranslationofexpressionsbyconsideringexpressionscon-tainingbinaryoperatorsop,arrayaccesses,andassignments,inadditiontoconstantsandidenti\fers.Forsimplicity,inanarrayaccessy[z],werequirethatybeanidenti\fer.13Foradetaileddiscussionofintermediatecodegenerationforexpressions,seeSection6.4.Weshalltakethesimpleapproachofgeneratingonethree-addressinstruc-tionforeachoperatornodeinthesyntaxtreeforanexpression.Nocodeisgeneratedforidenti\fersandconstants,sincetheycanappearasaddressesininstructions.IfanodexofclassExprhasoperatorop,thenaninstructionisemittedtocomputethevalueatnodexintoacompilergenerated\\temporary\"name,sayt.Thus,i-j+ktranslatesintotwoinstructions102CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORt1=i-jt2=t1+kWitharrayaccessesandassignmentscomestheneedtodistinguishbetweenl-valuesandr-values.Forexample,2*a[i]canbetranslatedbycomputingther-valueofa[i]intoatemporary,asint1=a[i]t2=2*t1But,wecannotsimplyuseatemporaryinplaceofa[i],ifa[i]appearsontheleftsideofanassignment.Thesimpleapproachusesthetwofunctionslvalueandrvalue,whichappearinFig.2.44and2.45,respectively.Whenfunctionrvalueisappliedtoanonleafnodex,itgeneratesinstructionstocomputexintoatemporary,andreturnsanewnoderepresentingthetemporary.Whenfunctionlvalueisappliedtoanonleaf,italsogeneratesinstructionstocomputethesubtreesbelowx,andreturnsanoderepresentingthe\\address\"forx.Wedescribefunctionlvalue\frst,sinceithasfewercases.Whenappliedtoanodex,functionlvaluesimplyreturnsxifitisthenodeforanidenti\fer(i.e.,ifxisofclassId).Inoursimplelanguage,theonlyothercasewhereanexpressionhasanl-valueoccurswhenxrepresentsanarrayaccess,suchasa[i].Inthiscase,xwillhavetheformAccess(y;z),whereclassAccessisasubclassofExpr,yrepresentsthenameoftheaccessedarray,andzrepresentstheo\u000bset(index)ofthechosenelementinthatarray.Fromthepseudo-codeinFig.2.44,functionlvaluecallsrvalue(z)togenerateinstructions,ifneeded,tocomputether-valueofz.ItthenconstructsandreturnsanewAccessnodewithchildrenforthearraynameyandther-valueofz.Exprlvalue(x:Expr)fif(xisanIdnode)returnx;elseif(xisanAccess(y;z)nodeandyisanIdnode)freturnnewAccess(y;rvalue(z));gelseerror;gFigure2.44:PseudocodeforfunctionlvalueExample2.19:Whennodexrepresentsthearrayaccessa[2*k],thecalllvalue(x)generatesaninstructiont=2*kandreturnsanewnodex0representingthel-valuea[t],wheretisanewtemporaryname.Indetail,thecodefragment2.8.INTERMEDIATECODEGENERATION103returnnewAccess(y;rvalue(z));isreachedwithybeingthenodeforaandzbeingthenodeforexpression2*k.Thecallrvalue(z)generatescodefortheexpression2*k(i.e.,thethree-addressstatementt=2*k)andreturnsthenewnodez0representingthetemporarynamet.Thatnodez0becomesthevalueofthesecond\feldinthenewAccessnodex0thatiscreated.2Exprrvalue(x:Expr)fif(xisanIdoraConstantnode)returnx;elseif(xisanOp(op;y;z)oraRel(op;y;z)node)ft=newtemporary;emitstringfort=rvalue(y)oprvalue(z);returnanewnodefort;gelseif(xisanAccess(y;z)node)ft=newtemporary;calllvalue(x),whichreturnsAccess(y;z0);emitstringfort=Access(y;z0);returnanewnodefort;gelseif(xisanAssign(y;z)node)fz0=rvalue(z);emitstringforlvalue(y)=z0;returnz0;ggFigure2.45:PseudocodeforfunctionrvalueFunctionrvalueinFig.2.45generatesinstructionsandreturnsapossiblynewnode.Whenxrepresentsanidenti\feroraconstant,rvaluereturnsxitself.Inallothercases,itreturnsanIdnodeforanewtemporaryt.Thecasesareasfollows:\u000fWhenxrepresentsyopz,thecode\frstcomputesy0=rvalue(y)andz0=rvalue(z).Itcreatesanewtemporarytandgeneratesaninstruc-tiont=y0opz0(moreprecisely,aninstructionformedfromthestringrepresentationsoft,y0,op,andz0).Itreturnsanodeforidenti\fert.\u000fWhenxrepresentsanarrayaccessy[z],wecanreusefunctionlvalue.Thecalllvalue(x)returnsanaccessy[z0],wherez0representsanidenti\ferholdingtheo\u000bsetforthearrayaccess.Thecodecreatesanewtemporaryt,generatesaninstructionbasedont=y[z0],andreturnsanodefort.104CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATOR\u000fWhenxrepresentsy=z,thenthecode\frstcomputesz0=rvalue(z).Itgeneratesaninstructionbasedonlvalue(y)=z0andreturnsthenodez0.Example2.20:Whenappliedtothesyntaxtreefora[i]=2*a[j-k]functionrvaluegeneratest3=j-kt2=a[t3]t1=2*t2a[i]=t1Thatis,therootisanAssignnodewith\frstargumenta[i]andsecondar-gument2*a[j-k].Thus,thethirdcaseapplies,andfunctionrvaluerecursivelyevaluates2*a[j-k].TherootofthissubtreeistheOpnodefor*,whichcausesanewtemporaryt1tobecreated,beforetheleftoperand,2isevaluated,andthentherightoperand.Theconstant2generatesnothree-addresscode,anditsr-valueisreturnedasaConstantnodewithvalue2.Therightoperanda[j-k]isanAccessnode,whichcausesanewtemporaryt2tobecreated,beforefunctionlvalueiscalledonthisnode.Recursively,rvalueiscalledontheexpressionj-k.Asaside-e\u000bectofthiscall,thethree-addressstatementt3=j-kisgenerated,afterthenewtemporaryt3iscreated.Then,returningtothecalloflvalueona[j-k],thetemporaryt2isassignedther-valueoftheentireaccess-expression,thatis,t2=a[t3].Now,wereturntothecallofrvalueontheOpnode2*a[j-k],whichearliercreatedtemporaryt1.Athree-addressstatementt1=2*t2isgeneratedasaside-e\u000bect,toevaluatethismultiplication-expression.Last,thecalltorvalueonthewholeexpressioncompletesbycallinglvalueontheleftsidea[i]andthengeneratingathree-addressinstructiona[i]=t1,inwhichtherightsideoftheassignmentisassignedtotheleftside.2BetterCodeforExpressionsWecanimproveonfunctionrvalueinFig.2.45andgeneratefewerthree-addressinstructions,inseveralways:\u000fReducethenumberofcopyinstructionsinasubsequentoptimizationphase.Forexample,thepairofinstructionst=i+1andi=tcanbecombinedintoi=i+1,iftherearenosubsequentusesoft.\u000fGeneratefewerinstructionsinthe\frstplacebytakingcontextintoac-count.Forexample,iftheleftsideofathree-addressassignmentisanarrayaccessa[t],thentherightsidemustbeaname,aconstant,oratemporary,allofwhichusejustoneaddress.Butiftheleftsideisanamex,thentherightsidecanbeanoperationyopzthatusestwoaddresses.2.9.SUMMARYOFCHAPTER2105Wecanavoidsomecopyinstructionsbymodifyingthetranslationfunctionstogenerateapartialinstructionthatcomputes,sayj+k,butdoesnotcommittowheretheresultistobeplaced,signi\fedbyanulladdressfortheresult:null=j+k(2.8)Thenullresultaddressislaterreplacedbyeitheranidenti\feroratemporary,asappropriate.Itisreplacedbyanidenti\ferifj+kisontherightsideofanassignment,asini=j+k;,inwhichcase(2.8)becomesi=j+kBut,ifj+kisasubexpression,asinj+k+l,thenthenullresultaddressin(2.8)isreplacedbyanewtemporaryt,andanewpartialinstructionisgeneratedt=j+knull=t+lManycompilersmakeeverye\u000borttogeneratecodethatisasgoodasorbet-terthanhand-writtenassemblycodeproducedbyexperts.Ifcode-optimizationtechniques,suchastheonesinChapter9areused,thenane\u000bectivestrategymaywellbetouseasimpleapproachforintermediatecodegeneration,andrelyonthecodeoptimizertoeliminateunnecessaryinstructions.2.8.5ExercisesforSection2.8Exercise2.8.1:For-statementsinCandJavahavetheform:for(expr1;expr2;expr3)stmtThe\frstexpressionisexecutedbeforetheloop;itistypicallyusedforinitializ-ingtheloopindex.Thesecondexpressionisatestmadebeforeeachiterationoftheloop;theloopisexitediftheexpressionbecomes0.Theloopitselfcanbethoughtofasthestatement{stmtexpr3;}.Thethirdexpressionisexecutedattheendofeachiteration;itistypicallyusedtoincrementtheloopindex.Themeaningofthefor-statementissimilartoexpr1;while(expr2){stmtexpr3;}De\fneaclassForforfor-statements,similartoclassIfinFig.2.43.Exercise2.8.2:TheprogramminglanguageCdoesnothaveabooleantype.ShowhowaCcompilermighttranslateanif-statementintothree-addresscode.2.9SummaryofChapter2Thesyntax-directedtechniquesinthischaptercanbeusedtoconstructcompilerfrontends,suchasthoseillustratedinFig.2.46.106CHAPTER2.ASIMPLESYNTAX-DIRECTEDTRANSLATORhid;\"line\"ihassignihid;\"line\"ih+ihnum;1ih;i4:line=line+13:ifFalsepeek==t1goto42:t1=(int)'\\n'if(peek=='\\n')line=line+1;LexicalAnalyzerhifih(ihid;\"peek\"iheqihconst;'\\n'ih)i1:Syntax-DirectedTranslatoror1line+lineassigneq'\\n'(int)peekifFigure2.46:Twopossibletranslationsofastatement ✦Thestartingpointforasyntax-directedtranslatorisagrammarforthesourcelanguage.Agrammardescribesthehierarchicalstructureofpro-grams.Itisde\fnedintermsofelementarysymbolscalledterminalsandvariablesymbolscallednonterminals.Thesesymbolsrepresentlanguageconstructs.Therulesorproductionsofagrammarconsistofanonterminalcalledtheheadorleftsideofaproductionandasequenceofterminalsandnonterminalscalledthebodyorrightsideoftheproduction.Onenonterminalisdesignatedasthestartsymbol. ✦Inspecifyingatranslator,itishelpfultoattachattributestoprogrammingconstruct,whereanattributeisanyquantityassociatedwithaconstruct.Sinceconstructsarerepresentedbygrammarsymbols,theconceptofattributesextendstogrammarsymbols.Examplesofattributesincludeanintegervalueassociatedwithaterminalnumrepresentingnumbers,andastringassociatedwithaterminalidrepresentingidenti\fers. ✦Alexicalanalyzerreadstheinputonecharacteratatimeandproducesasoutputastreamoftokens,whereatokenconsistsofaterminalsymbolalongwithadditionalinformationintheformofattributevalues.InFig.2.46,tokensarewrittenastuplesenclosedbetweenhi.Thetokenhid;\"peek\"iconsistsoftheterminalidandapointertothesymbol-tableentrycontainingthestring\"peek\".Thetranslatorusesthetabletokeep2.9.SUMMARYOFCHAPTER2107trackofreservedwordsandidenti\fersthathavealreadybeenseen. ✦Parsingistheproblemof\fguringouthowastringofterminalscanbederivedfromthestartsymbolofthegrammarbyrepeatedlyreplacinganonterminalbythebodyofoneofitsproductions.Conceptually,aparserbuildsaparsetreeinwhichtherootislabeledwiththestartsymbol,eachnonleafcorrespondstoaproduction,andeachleafislabeledwithaterminalortheemptystring\u000f.Theparsetreederivesthestringofterminalsattheleaves,readfromlefttoright. ✦E\u000ecientparserscanbebuiltbyhand,usingatop-down(fromtheroottotheleavesofaparsetree)methodcalledpredictiveparsing.Apredictiveparserhasaprocedureforeachnonterminal;procedurebodiesmimictheproductionsfornonterminals;and,the\rowofcontrolthroughthepro-cedurebodiescanbedeterminedunambiguouslybylookingonesymbolaheadintheinputstream.SeeChapter4forotherapproachestoparsing. ✦Syntax-directedtranslationisdonebyattachingeitherrulesorprogramfragmentstoproductionsinagrammar.Inthischapter,wehaveconsid-eredonlysynthesizedattributes|thevalueofasynthesizedattributeatanynodexcandependonlyonattributesatthechildrenofx,ifany.Asyntax-directedde\fnitionattachesrulestoproductions;therulescomputeattributevalues.Atranslationschemeembedsprogramfragmentscalledsemanticactionsinproductionbodies.Theactionsareexecutedintheorderthatproductionsareusedduringsyntaxanalysis. ✦Theresultofsyntaxanalysisisarepresentationofthesourceprogram,calledintermediatecode.Twoprimaryformsofintermediatecodeareil-lustratedinFig.2.46.Anabstractsyntaxtreehasnodesforprogrammingconstructs;thechildrenofanodegivethemeaningfulsubconstructs.Al-ternatively,three-addresscodeisasequenceofinstructionsinwhicheachinstructioncarriesoutasingleoperation. ✦Symboltablesaredatastructuresthatholdinformationaboutidenti\fers.Informationisputintothesymboltablewhenthedeclarationofaniden-ti\ferisanalyzed.Asemanticactiongetsinformationfromthesymboltablewhentheidenti\ferissubsequentlyused,forexample,asafactorinanexpression. This page intentionally left blank Chapter3LexicalAnalysisInthischapterweshowhowtoconstructalexicalanalyzer.Toimplementalexicalanalyzerbyhand,ithelpstostartwithadiagramorotherdescriptionforthelexemesofeachtoken.Wecanthenwritecodetoidentifyeachoccurrenceofeachlexemeontheinputandtoreturninformationaboutthetokenidenti\fed.Wecanalsoproducealexicalanalyzerautomaticallybyspecifyingthelex-emepatternstoalexical-analyzergeneratorandcompilingthosepatternsintocodethatfunctionsasalexicalanalyzer.Thisapproachmakesiteasiertomod-ifyalexicalanalyzer,sincewehaveonlytorewritethea\u000bectedpatterns,nottheentireprogram.Italsospeedsuptheprocessofimplementingthelexicalanalyzer,sincetheprogrammerspeci\festhesoftwareattheveryhighlevelofpatternsandreliesonthegeneratortoproducethedetailedcode.WeshallintroduceinSection3.5alexical-analyzergeneratorcalledLex(orFlexinamorerecentembodiment).Webeginthestudyoflexical-analyzergeneratorsbyintroducingregularexpressions,aconvenientnotationforspecifyinglexemepatterns.Weshowhowthisnotationcanbetransformed,\frstintonondeterministicautomataandthenintodeterministicautomata.Thelattertwonotationscanbeusedasinputtoa\\driver,\"thatis,codewhichsimulatestheseautomataandusesthemasaguidetodeterminingthenexttoken.Thisdriverandthespeci\fcationoftheautomatonformthenucleusofthelexicalanalyzer.3.1TheRoleoftheLexicalAnalyzerAsthe\frstphaseofacompiler,themaintaskofthelexicalanalyzeristoreadtheinputcharactersofthesourceprogram,groupthemintolexemes,andproduceasoutputasequenceoftokensforeachlexemeinthesourceprogram.Thestreamoftokensissenttotheparserforsyntaxanalysis.Itiscommonforthelexicalanalyzertointeractwiththesymboltableaswell.Whenthelexicalanalyzerdiscoversalexemeconstitutinganidenti\fer,itneedstoenterthatlexemeintothesymboltable.Insomecases,informationregardingthe109110CHAPTER3.LEXICALANALYSISkindofidenti\fermaybereadfromthesymboltablebythelexicalanalyzertoassistitindeterminingthepropertokenitmustpasstotheparser.TheseinteractionsaresuggestedinFig.3.1.Commonly,theinteractionisimplementedbyhavingtheparsercallthelexicalanalyzer.Thecall,suggestedbythegetNextTokencommand,causesthelexicalanalyzertoreadcharactersfromitsinputuntilitcanidentifythenextlexemeandproduceforitthenexttoken,whichitreturnstotheparser. source analysis to semantic getNextToken token Table Symbol program Parser Analyzer LexicalFigure3.1:InteractionsbetweenthelexicalanalyzerandtheparserSincethelexicalanalyzeristhepartofthecompilerthatreadsthesourcetext,itmayperformcertainothertasksbesidesidenti\fcationoflexemes.Onesuchtaskisstrippingoutcommentsandwhitespace(blank,newline,tab,andperhapsothercharactersthatareusedtoseparatetokensintheinput).Anothertaskiscorrelatingerrormessagesgeneratedbythecompilerwiththesourceprogram.Forinstance,thelexicalanalyzermaykeeptrackofthenumberofnewlinecharactersseen,soitcanassociatealinenumberwitheacherrormessage.Insomecompilers,thelexicalanalyzermakesacopyofthesourceprogramwiththeerrormessagesinsertedattheappropriatepositions.Ifthesourceprogramusesamacro-preprocessor,theexpansionofmacrosmayalsobeperformedbythelexicalanalyzer.Sometimes,lexicalanalyzersaredividedintoacascadeoftwoprocesses:a)Scanningconsistsofthesimpleprocessesthatdonotrequiretokenizationoftheinput,suchasdeletionofcommentsandcompactionofconsecutivewhitespacecharactersintoone.b)Lexicalanalysisproperisthemorecomplexportion,whichproducesto-kensfromtheoutputofthescanner.3.1.1LexicalAnalysisVersusParsingThereareanumberofreasonswhytheanalysisportionofacompilerisnormallyseparatedintolexicalanalysisandparsing(syntaxanalysis)phases.3.1.THEROLEOFTHELEXICALANALYZER1111.Simplicityofdesignisthemostimportantconsideration.Theseparationoflexicalandsyntacticanalysisoftenallowsustosimplifyatleastoneofthesetasks.Forexample,aparserthathadtodealwithcommentsandwhitespaceassyntacticunitswouldbeconsiderablymorecomplexthanonethatcanassumecommentsandwhitespacehavealreadybeenremovedbythelexicalanalyzer.Ifwearedesigninganewlanguage,separatinglexicalandsyntacticconcernscanleadtoacleaneroveralllanguagedesign.2.Compilere\u000eciencyisimproved.Aseparatelexicalanalyzerallowsustoapplyspecializedtechniquesthatserveonlythelexicaltask,notthejobofparsing.Inaddition,specializedbu\u000beringtechniquesforreadinginputcharacterscanspeedupthecompilersigni\fcantly.3.Compilerportabilityisenhanced.Input-device-speci\fcpeculiaritiescanberestrictedtothelexicalanalyzer.3.1.2Tokens,Patterns,andLexemesWhendiscussinglexicalanalysis,weusethreerelatedbutdistinctterms:\u000fAtokenisapairconsistingofatokennameandanoptionalattributevalue.Thetokennameisanabstractsymbolrepresentingakindoflexicalunit,e.g.,aparticularkeyword,orasequenceofinputcharactersdenotinganidenti\fer.Thetokennamesaretheinputsymbolsthattheparserprocesses.Inwhatfollows,weshallgenerallywritethenameofatokeninboldface.Wewilloftenrefertoatokenbyitstokenname.\u000fApatternisadescriptionoftheformthatthelexemesofatokenmaytake.Inthecaseofakeywordasatoken,thepatternisjustthesequenceofcharactersthatformthekeyword.Foridenti\fersandsomeothertokens,thepatternisamorecomplexstructurethatismatchedbymanystrings.\u000fAlexemeisasequenceofcharactersinthesourceprogramthatmatchesthepatternforatokenandisidenti\fedbythelexicalanalyzerasaninstanceofthattoken.Example3.1:Figure3.2givessometypicaltokens,theirinformallydescribedpatterns,andsomesamplelexemes.Toseehowtheseconceptsareusedinpractice,intheCstatementprintf(\"Total=%d\\n\",score);bothprintfandscorearelexemesmatchingthepatternfortokenid,and\"Total=%d\\n\"isalexemematchingliteral.2Inmanyprogramminglanguages,thefollowingclassescovermostorallofthetokens:112CHAPTER3.LEXICALANALYSIS3.1.THEROLEOFTHELEXICALANALYZER113114CHAPTER3.LEXICALANALYSISfi(a==f(x))...alexicalanalyzercannottellwhetherfiisamisspellingofthekeywordiforanundeclaredfunctionidenti\fer.Sincefiisavalidlexemeforthetokenid,thelexicalanalyzermustreturnthetokenidtotheparserandletsomeotherphaseofthecompiler|probablytheparserinthiscase|handleanerrorduetotranspositionoftheletters.However,supposeasituationarisesinwhichthelexicalanalyzerisunabletoproceedbecausenoneofthepatternsfortokensmatchesanypre\fxoftheremaininginput.Thesimplestrecoverystrategyis\\panicmode\"recovery.Wedeletesuccessivecharactersfromtheremaininginput,untilthelexicalanalyzercan\fndawell-formedtokenatthebeginningofwhatinputisleft.Thisrecoverytechniquemayconfusetheparser,butinaninteractivecomputingenvironmentitmaybequiteadequate.Otherpossibleerror-recoveryactionsare:1.Deleteonecharacterfromtheremaininginput.2.Insertamissingcharacterintotheremaininginput.3.Replaceacharacterbyanothercharacter.4.Transposetwoadjacentcharacters.Transformationslikethesemaybetriedinanattempttorepairtheinput.Thesimplestsuchstrategyistoseewhetherapre\fxoftheremaininginputcanbetransformedintoavalidlexemebyasingletransformation.Thisstrategymakessense,sinceinpracticemostlexicalerrorsinvolveasinglecharacter.Amoregeneralcorrectionstrategyisto\fndthesmallestnumberoftransforma-tionsneededtoconvertthesourceprogramintoonethatconsistsonlyofvalidlexemes,butthisapproachisconsideredtooexpensiveinpracticetobeworththee\u000bort.3.1.5ExercisesforSection3.1Exercise3.1.1:DividethefollowingC++program:floatlimitedSquare(x)floatx;{/*returnsx-squared,butnevermorethan100*/return(x<=-10.0||x>=10.0)?100:x*x;}intoappropriatelexemes,usingthediscussionofSection3.1.2asaguide.Whichlexemesshouldgetassociatedlexicalvalues?Whatshouldthosevaluesbe?!Exercise3.1.2:TaggedlanguageslikeHTMLorXMLaredi\u000berentfromcon-ventionalprogramminglanguagesinthatthepunctuation(tags)areeitherverynumerous(asinHTML)orauser-de\fnableset(asinXML).Further,tagscanoftenhaveparameters.SuggesthowtodividethefollowingHTMLdocument:3.2.INPUTBUFFERING115Hereisaphotoof<B>myhouse</B>:<P><IMGSRC=\"house.gif\"><BR>See<AHREF=\"morePix.html\">MorePictures</A>ifyoulikedthatone.<P>intoappropriatelexemes.Whichlexemesshouldgetassociatedlexicalvalues,andwhatshouldthosevaluesbe?3.2InputBu\u000beringBeforediscussingtheproblemofrecognizinglexemesintheinput,letusexaminesomewaysthatthesimplebutimportanttaskofreadingthesourceprogramcanbespeeded.Thistaskismadedi\u000ecultbythefactthatweoftenhavetolookoneormorecharactersbeyondthenextlexemebeforewecanbesurewehavetherightlexeme.Theboxon\\TrickyProblemsWhenRecognizingTokens\"inSection3.1gaveanextremeexample,buttherearemanysituationswhereweneedtolookatleastoneadditionalcharacterahead.Forinstance,wecannotbesurewe'veseentheendofanidenti\feruntilweseeacharacterthatisnotaletterordigit,andthereforeisnotpartofthelexemeforid.InC,single-characteroperatorslike-,=,or<couldalsobethebeginningofatwo-characteroperatorlike->,==,or<=.Thus,weshallintroduceatwo-bu\u000berschemethathandleslargelookaheadssafely.Wethenconsideranimprovementinvolving\\sentinels\"thatsavestimecheckingfortheendsofbu\u000bers.3.2.1Bu\u000berPairsBecauseoftheamountoftimetakentoprocesscharactersandthelargenumberofcharactersthatmustbeprocessedduringthecompilationofalargesourceprogram,specializedbu\u000beringtechniqueshavebeendevelopedtoreducetheamountofoverheadrequiredtoprocessasingleinputcharacter.Animpor-tantschemeinvolvestwobu\u000bersthatarealternatelyreloaded,assuggestedinFig.3.3. E = M*C**2 eof lexemeBegin forwardFigure3.3:Usingapairofinputbu\u000bersEachbu\u000berisofthesamesizeN,andNisusuallythesizeofadiskblock,e.g.,4096bytes.UsingonesystemreadcommandwecanreadNcharactersintoabu\u000ber,ratherthanusingonesystemcallpercharacter.IffewerthanNcharactersremainintheinput\fle,thenaspecialcharacter,representedbyeof,116CHAPTER3.LEXICALANALYSISmarkstheendofthesource\fleandisdi\u000berentfromanypossiblecharacterofthesourceprogram.Twopointerstotheinputaremaintained:1.PointerlexemeBegin,marksthebeginningofthecurrentlexeme,whoseextentweareattemptingtodetermine.2.Pointerforwardscansaheaduntilapatternmatchisfound;theexactstrategywherebythisdeterminationismadewillbecoveredinthebalanceofthischapter.Oncethenextlexemeisdetermined,forwardissettothecharacteratitsrightend.Then,afterthelexemeisrecordedasanattributevalueofatokenreturnedtotheparser,lexemeBeginissettothecharacterimmediatelyafterthelexemejustfound.InFig.3.3,weseeforwardhaspassedtheendofthenextlexeme,**(theFortranexponentiationoperator),andmustberetractedonepositiontoitsleft.Advancingforwardrequiresthatwe\frsttestwhetherwehavereachedtheendofoneofthebu\u000bers,andifso,wemustreloadtheotherbu\u000berfromtheinput,andmoveforwardtothebeginningofthenewlyloadedbu\u000ber.Aslongasweneverneedtolooksofaraheadoftheactuallexemethatthesumofthelexeme'slengthplusthedistancewelookaheadisgreaterthanN,weshallneveroverwritethelexemeinitsbu\u000berbeforedeterminingit.3.2.2SentinelsIfweusetheschemeofSection3.2.1asdescribed,wemustcheck,eachtimeweadvanceforward,thatwehavenotmovedo\u000boneofthebu\u000bers;ifwedo,thenwemustalsoreloadtheotherbu\u000ber.Thus,foreachcharacterread,wemaketwotests:onefortheendofthebu\u000ber,andonetodeterminewhatcharacterisread(thelattermaybeamultiwaybranch).Wecancombinethebu\u000ber-endtestwiththetestforthecurrentcharacterifweextendeachbu\u000bertoholdasentinelcharacterattheend.Thesentinelisaspecialcharacterthatcannotbepartofthesourceprogram,andanaturalchoiceisthecharactereof.Figure3.4showsthesamearrangementasFig.3.3,butwiththesentinelsadded.Notethateofretainsitsuseasamarkerfortheendoftheentireinput.Anyeofthatappearsotherthanattheendofabu\u000bermeansthattheinputisatanend.Figure3.5summarizesthealgorithmforadvancingforward.Noticehowthe\frsttest,whichcanbepartofamultiwaybranchbasedonthecharacterpointedtobyforward,istheonlytestwemake,exceptinthecasewhereweactuallyareattheendofabu\u000berortheendoftheinput.3.3Speci\fcationofTokensRegularexpressionsareanimportantnotationforspecifyinglexemepatterns.Whiletheycannotexpressallpossiblepatterns,theyareverye\u000bectiveinspec-3.3.SPECIFICATIONOFTOKENS117118CHAPTER3.LEXICALANALYSISswitch(*forward++)fcaseeof:if(forwardisatendof\frstbu\u000ber)freloadsecondbu\u000ber;forward=beginningofsecondbu\u000ber;gelseif(forwardisatendofsecondbu\u000ber)freload\frstbu\u000ber;forward=beginningof\frstbu\u000ber;gelse/*eofwithinabu\u000bermarkstheendofinput*/terminatelexicalanalysis;break;CasesfortheothercharactersgFigure3.5:Lookaheadcodewithsentinels3.3.SPECIFICATIONOFTOKENS119120CHAPTER3.LEXICALANALYSIS3.3.SPECIFICATIONOFTOKENS121establishedtostandforanydigit,thenwecoulddescribethelanguageofCidenti\fersby:letter122CHAPTER3.LEXICALANALYSISc)jhaslowestprecedenceandisleftassociative.Undertheseconventions,forexample,wemayreplacetheregularexpression(a)j((b)\u0003(c))byajb\u0003c.Bothexpressionsdenotethesetofstringsthatareeitherasingleaorarezeroormoreb'sfollowedbyonec.Example3.4:Let\u0006=fa;bg.1.Theregularexpressionajbdenotesthelanguagefa;bg.2.(ajb)(ajb)denotesfaa;ab;ba;bbg,thelanguageofallstringsoflengthtwooverthealphabet\u0006.Anotherregularexpressionforthesamelanguageisaajabjbajbb.3.a\u0003denotesthelanguageconsistingofallstringsofzeroormorea's,thatis,f\u000f;a;aa;aaa;:::g.4.(ajb)\u0003denotesthesetofallstringsconsistingofzeroormoreinstancesofaorb,thatis,allstringsofa'sandb's:f\u000f;a;b;aa;ab;ba;bb;aaa;:::g.Anotherregularexpressionforthesamelanguageis(a\u0003b\u0003)\u0003.5.aja\u0003bdenotesthelanguagefa;b;ab;aab;aaab;:::g,thatis,thestringaandallstringsconsistingofzeroormorea'sandendinginb.2Alanguagethatcanbede\fnedbyaregularexpressioniscalledaregularset.Iftworegularexpressionsrandsdenotethesameregularset,wesaytheyareequivalentandwriter=s.Forinstance,(ajb)=(bja).Thereareanumberofalgebraiclawsforregularexpressions;eachlawassertsthatexpressionsoftwodi\u000berentformsareequivalent.Figure3.7showssomeofthealgebraiclawsthatholdforarbitraryregularexpressionsr,s,andt.3.3.SPECIFICATIONOFTOKENS1233.3.4RegularDe\fnitionsFornotationalconvenience,wemaywishtogivenamestocertainregularex-pressionsandusethosenamesinsubsequentexpressions,asifthenameswerethemselvessymbols.If\u0006isanalphabetofbasicsymbols,thenaregularde\f-nitionisasequenceofde\fnitionsoftheform:d1!r1d2!r2\u0001\u0001\u0001dn!rnwhere:1.Eachdiisanewsymbol,notin\u0006andnotthesameasanyotherofthed's,and2.Eachriisaregularexpressionoverthealphabet\u0006[fd1;d2;:::;di\u00001g.Byrestrictingrito\u0006andthepreviouslyde\fnedd's,weavoidrecursivede\fni-tions,andwecanconstructaregularexpressionover\u0006alone,foreachri.Wedosoby\frstreplacingusesofd1inr2(whichcannotuseanyofthed'sexceptford1),thenreplacingusesofd1andd2inr3byr1and(thesubstituted)r2,andsoon.Finally,inrnwereplaceeachdi,fori=1;2;:::;n\u00001,bythesubstitutedversionofri,eachofwhichhasonlysymbolsof\u0006.Example3.5:Cidenti\fersarestringsofletters,digits,andunderscores.Hereisaregularde\fnitionforthelanguageofCidenti\fers.Weshallconventionallyuseitalicsforthesymbolsde\fnedinregularde\fnitions.letter124CHAPTER3.LEXICALANALYSIS3.3.5ExtensionsofRegularExpressionsSinceKleeneintroducedregularexpressionswiththebasicoperatorsforunion,concatenation,andKleeneclosureinthe1950s,manyextensionshavebeenaddedtoregularexpressionstoenhancetheirabilitytospecifystringpatterns.Herewementionafewnotationalextensionsthatwere\frstincorporatedintoUnixutilitiessuchasLexthatareparticularlyusefulinthespeci\fcationlexicalanalyzers.Thereferencestothischaptercontainadiscussionofsomeregular-expressionvariantsinusetoday.1.Oneormoreinstances.Theunary,post\fxoperator+representsthepositiveclosureofaregularexpressionanditslanguage.Thatis,ifrisaregularexpression,then(r)+denotesthelanguage\u0000L(r)\u0001+.Theoperator+hasthesameprecedenceandassociativityastheoperator\u0003.Twousefulalgebraiclaws,r\u0003=r+j\u000fandr+=rr\u0003=r\u0003rrelatetheKleeneclosureandpositiveclosure.2.Zerooroneinstance.Theunarypost\fxoperator?means\\zerooroneoccurrence.\"Thatis,r?isequivalenttorj\u000f,orputanotherway,L(r?)=L(r)[f\u000fg.The?operatorhasthesameprecedenceandassociativityas\u0003and+.3.Characterclasses.Aregularexpressiona1ja2j\u0001\u0001\u0001jan,wheretheai'sareeachsymbolsofthealphabet,canbereplacedbytheshorthand[a1a2\u0001\u0001\u0001an].Moreimportantly,whena1;a2;:::;anformalogicalse-quence,e.g.,consecutiveuppercaseletters,lowercaseletters,ordigits,wecanreplacethembya1-an,thatis,justthe\frstandlastseparatedbyahyphen.Thus,[abc]isshorthandforajbjc,and[a-z]isshorthandforajbj\u0001\u0001\u0001jz.Example3.7:Usingtheseshorthands,wecanrewritetheregularde\fnitionofExample3.5as:letter3.3.SPECIFICATIONOFTOKENS1253.3.6ExercisesforSection3.3Exercise3.3.1:Consultthelanguagereferencemanualstodetermine(i)thesetsofcharactersthatformtheinputalphabet(excludingthosethatmayonlyappearincharacterstringsorcomments),(ii)thelexicalformofnumericalconstants,and(iii)thelexicalformofidenti\fers,foreachofthefollowinglanguages:(a)C(b)C++(c)C#(d)Fortran(e)Java(f)Lisp(g)SQL.!Exercise3.3.2:Describethelanguagesdenotedbythefollowingregularex-pressions:a)a(ajb)\u0003a.b)((\u000fja)b\u0003)\u0003.c)(ajb)\u0003a(ajb)(ajb).d)a\u0003ba\u0003ba\u0003ba\u0003.!!e)(aajbb)\u0003((abjba)(aajbb)\u0003(abjba)(aajbb)\u0003)\u0003.Exercise3.3.3:Inastringoflengthn,howmanyofthefollowingarethere?a)Pre\fxes.b)Su\u000exes.c)Properpre\fxes.!d)Substrings.!e)Subsequences.Exercise3.3.4:Mostlanguagesarecasesensitive,sokeywordscanbewrittenonlyoneway,andtheregularexpressionsdescribingtheirlexemesareverysimple.However,somelanguages,likeSQL,arecaseinsensitive,soakeywordcanbewritteneitherinlowercaseorinuppercase,orinanymixtureofcases.Thus,theSQLkeywordSELECTcanalsobewrittenselect,Select,orsElEcT,forinstance.Showhowtowritearegularexpressionforakeywordinacase-insensitivelanguage.Illustratetheideabywritingtheexpressionfor\\select\"inSQL.!Exercise3.3.5:Writeregularde\fnitionsforthefollowinglanguages:a)Allstringsoflowercaselettersthatcontainthe\fvevowelsinorder.b)Allstringsoflowercaselettersinwhichthelettersareinascendinglexi-cographicorder.c)Comments,consistingofastringsurroundedby/*and*/,withoutanintervening*/,unlessitisinsidedouble-quotes(\").126CHAPTER3.LEXICALANALYSIS!!d)Allstringsofdigitswithnorepeateddigits.Hint:Trythisproblem\frstwithafewdigits,suchasf0;1;2g.!!e)Allstringsofdigitswithatmostonerepeateddigit.!!f)Allstringsofa'sandb'swithanevennumberofa'sandanoddnumberofb's.g)ThesetofChessmoves,intheinformalnotation,suchasp-k4orkbp\u0002qn.!!h)Allstringsofa'sandb'sthatdonotcontainthesubstringabb.i)Allstringsofa'sandb'sthatdonotcontainthesubsequenceabb.Exercise3.3.6:Writecharacterclassesforthefollowingsetsofcharacters:a)The\frsttenletters(upto\\j\")ineitherupperorlowercase.b)Thelowercaseconsonants.c)The\\digits\"inahexadecimalnumber(chooseeitherupperorlowercaseforthe\\digits\"above9).d)ThecharactersthatcanappearattheendofalegitimateEnglishsentence(e.g.,exclamationpoint).Thefollowingexercises,uptoandincludingExercise3.3.10,discusstheextendedregular-expressionnotationfromLex(thelexical-analyzergeneratorthatweshalldiscussextensivelyinSection3.5).TheextendednotationislistedinFig.3.8.Exercise3.3.7:Notethattheseregularexpressionsgiveallofthefollowingsymbols(operatorcharacters)aspecialmeaning:\\\".^$[]*+?{}|/Theirspecialmeaningmustbeturnedo\u000biftheyareneededtorepresentthem-selvesinacharacterstring.Wecandosobyquotingthecharacterwithinastringoflengthoneormore;e.g.,theregularexpression\"**\"matchesthestring**.Wecanalsogettheliteralmeaningofanoperatorcharacterbyprecedingitbyabackslash.Thus,theregularexpression\\*\\*alsomatchesthestring**.Writearegularexpressionthatmatchesthestring\"\\.Exercise3.3.8:InLex,acomplementedcharacterclassrepresentsanychar-acterexcepttheoneslistedinthecharacterclass.Wedenoteacomplementedclassbyusing^asthe\frstcharacter;thissymbol(caret)isnotitselfpartoftheclassbeingcomplemented,unlessitislistedwithintheclassitself.Thus,[^A-Za-z]matchesanycharacterthatisnotanuppercaseorlowercaseletter,and[^\\^]representsanycharacterbutthecaret(ornewline,sincenewlinecannotbeinanycharacterclass).Showthatforeveryregularexpressionwithcomplementedcharacterclasses,thereisanequivalentregularexpressionwith-outcomplementedcharacterclasses.3.3.SPECIFICATIONOFTOKENS127128CHAPTER3.LEXICALANALYSIS3.4.RECOGNITIONOFTOKENS129Forrelop,weusethecomparisonoperatorsoflanguageslikePascalorSQL,where=is\\equals\"and<>is\\notequals,\"becauseitpresentsaninterestingstructureoflexemes.Theterminalsofthegrammar,whichareif,then,else,relop,id,andnumber,arethenamesoftokensasfarasthelexicalanalyzerisconcerned.Thepatternsforthesetokensaredescribedusingregularde\fnitions,asinFig.3.11.ThepatternsforidandnumberaresimilartowhatwesawinExample3.7.digit![0-9]digits!digit+number!digits(.digits)?(E[+-]?digits)?letter![A-Za-z]id!letter(letterjdigit)\u0003if!ifthen!thenelse!elserelop!<j>j<=j>=j=j<>Figure3.11:PatternsfortokensofExample3.8Forthislanguage,thelexicalanalyzerwillrecognizethekeywordsif,then,andelse,aswellaslexemesthatmatchthepatternsforrelop,id,andnumber.Tosimplifymatters,wemakethecommonassumptionthatkeywordsarealsoreservedwords:thatis,theyarenotidenti\fers,eventhoughtheirlexemesmatchthepatternforidenti\fers.Inaddition,weassignthelexicalanalyzerthejobofstrippingoutwhite-space,byrecognizingthe\\token\"wsde\fnedby:ws!(blankjtabjnewline)+Here,blank,tab,andnewlineareabstractsymbolsthatweusetoexpresstheASCIIcharactersofthesamenames.Tokenwsisdi\u000berentfromtheothertokensinthat,whenwerecognizeit,wedonotreturnittotheparser,butratherrestartthelexicalanalysisfromthecharacterthatfollowsthewhitespace.Itisthefollowingtokenthatgetsreturnedtotheparser.OurgoalforthelexicalanalyzerissummarizedinFig.3.12.Thattableshows,foreachlexemeorfamilyoflexemes,whichtokennameisreturnedtotheparserandwhatattributevalue,asdiscussedinSection3.1.3,isreturned.Notethatforthesixrelationaloperators,symbolicconstantsLT,LE,andsoonareusedastheattributevalue,inordertoindicatewhichinstanceofthetokenrelopwehavefound.Theparticularoperatorfoundwillin\ruencethecodethatisoutputfromthecompiler.2130CHAPTER3.LEXICALANALYSIS3.4.RECOGNITIONOFTOKENS131indicateanacceptingstatebyadoublecircle,andifthereisanactiontobetaken|typicallyreturningatokenandanattributevaluetotheparser|weshallattachthatactiontotheacceptingstate.2.Inaddition,ifitisnecessarytoretracttheforwardpointeroneposition(i.e.,thelexemedoesnotincludethesymbolthatgotustotheacceptingstate),thenweshalladditionallyplacea*nearthatacceptingstate.Inourexample,itisnevernecessarytoretractforwardbymorethanoneposition,butifitwere,wecouldattachanynumberof*'stotheacceptingstate.3.Onestateisdesignatedthestartstate,orinitialstate;itisindicatedbyanedge,labeled\\start,\"enteringfromnowhere.Thetransitiondiagramalwaysbeginsinthestartstatebeforeanyinputsymbolshavebeenread.Example3.9:Figure3.13isatransitiondiagramthatrecognizesthelexemesmatchingthetokenrelop.Webegininstate0,thestartstate.Ifwesee<asthe\frstinputsymbol,thenamongthelexemesthatmatchthepatternforrelopwecanonlybelookingat<,<>,or<=.Wethereforegotostate1,andlookatthenextcharacter.Ifitis=,thenwerecognizelexeme<=,enterstate2,andreturnthetokenrelopwithattributeLE,thesymbolicconstantrepresentingthisparticularcomparisonoperator.Ifinstate1thenextcharacteris>,theninsteadwehavelexeme<>,andenterstate3toreturnanindicationthatthenot-equalsoperatorhasbeenfound.Onanyothercharacter,thelexemeis<,andweenterstate4toreturnthatinformation.Note,however,thatstate4hasa*toindicatethatwemustretracttheinputoneposition. return ( relop,) return ( relop,) return ( relop,) return ( relop,) return ( relop,) return ( relop,) 012 3 4 5 67 8 start <= > = > = other GT GE EQ LT NE LE * *otherFigure3.13:TransitiondiagramforrelopOntheotherhand,ifinstate0the\frstcharacterweseeis=,thenthisonecharactermustbethelexeme.Weimmediatelyreturnthatfactfromstate5.132CHAPTER3.LEXICALANALYSISTheremainingpossibilityisthatthe\frstcharacteris>.Then,wemustenterstate6anddecide,onthebasisofthenextcharacter,whetherthelexemeis>=(ifwenextseethe=sign),orjust>(onanyothercharacter).Notethatif,instate0,weseeanycharacterbesides<,=,or>,wecannotpossiblybeseeingareloplexeme,sothistransitiondiagramwillnotbeused.23.4.2RecognitionofReservedWordsandIdenti\fersRecognizingkeywordsandidenti\ferspresentsaproblem.Usually,keywordslikeiforthenarereserved(astheyareinourrunningexample),sotheyarenotidenti\ferseventhoughtheylooklikeidenti\fers.Thus,althoughwetypicallyuseatransitiondiagramlikethatofFig.3.14tosearchforidenti\ferlexemes,thisdiagramwillalsorecognizethekeywordsif,then,andelseofourrunningexample. start or letter other return letter digit 910 11 (getToken( ), installID ( )) *Figure3.14:Atransitiondiagramforid'sandkeywordsTherearetwowaysthatwecanhandlereservedwordsthatlooklikeiden-ti\fers:1.Installthereservedwordsinthesymboltableinitially.A\feldofthesymbol-tableentryindicatesthatthesestringsareneverordinaryidenti-\fers,andtellswhichtokentheyrepresent.WehavesupposedthatthismethodisinuseinFig.3.14.Whenwe\fndanidenti\fer,acalltoinstallIDplacesitinthesymboltableifitisnotalreadythereandreturnsapointertothesymbol-tableentryforthelexemefound.Ofcourse,anyidenti\fernotinthesymboltableduringlexicalanalysiscannotbeareservedword,soitstokenisid.ThefunctiongetTokenexaminesthesymboltableentryforthelexemefound,andreturnswhatevertokennamethesymboltablesaysthislexemerepresents|eitheridoroneofthekeywordtokensthatwasinitiallyinstalledinthetable.2.Createseparatetransitiondiagramsforeachkeyword;anexampleforthekeywordthenisshowninFig.3.15.Notethatsuchatransitiondiagramconsistsofstatesrepresentingthesituationaftereachsuccessiveletterofthekeywordisseen,followedbyatestfora\\nonletter-or-digit,\"i.e.,anycharacterthatcannotbethecontinuationofanidenti\fer.Itisnecessarytocheckthattheidenti\ferhasended,orelsewewouldreturntokentheninsituationswherethecorrecttokenwasid,withalexemelikethenextvaluethathasthenasaproperpre\fx.Ifweadoptthisapproach,thenwemustprioritizethetokenssothatthereserved-word3.4.RECOGNITIONOFTOKENS133tokensarerecognizedinpreferencetoid,whenthelexemematchesbothpatterns.Wedonotusethisapproachinourexample,whichiswhythestatesinFig.3.15areunnumbered. start *th ne nonlet/digFigure3.15:Hypotheticaltransitiondiagramforthekeywordthen3.4.3CompletionoftheRunningExampleThetransitiondiagramforid'sthatwesawinFig.3.14hasasimplestructure.Startinginstate9,itchecksthatthelexemebeginswithaletterandgoestostate10ifso.Westayinstate10aslongastheinputcontainslettersanddigits.Whenwe\frstencounteranythingbutaletterordigit,wegotostate11andacceptthelexemefound.Sincethelastcharacterisnotpartoftheidenti\fer,wemustretracttheinputoneposition,andasdiscussedinSection3.4.2,weenterwhatwehavefoundinthesymboltableanddeterminewhetherwehaveakeywordoratrueidenti\fer.ThetransitiondiagramfortokennumberisshowninFig.3.16,andissofarthemostcomplexdiagramwehaveseen.Beginninginstate12,ifweseeadigit,wegotostate13.Inthatstate,wecanreadanynumberofadditionaldigits.However,ifweseeanythingbutadigit,dot,orE,wehaveseenanumberintheformofaninteger;123isanexample.Thatcaseishandledbyenteringstate20,wherewereturntokennumberandapointertoatableofconstantswherethefoundlexemeisentered.Thesemechanicsarenotshownonthediagrambutareanalogoustothewaywehandledidenti\fers. digitdigit 12 13 14 15 16 17 18 19 20 21 digit digit digit digit digit other other other .E E +−or ** *startFigure3.16:AtransitiondiagramforunsignednumbersIfweinsteadseeadotinstate13,thenwehavean\\optionalfraction.\"State14isentered,andwelookforoneormoreadditionaldigits;state15isusedforthatpurpose.IfweseeanE,thenwehavean\\optionalexponent,\"whoserecognitionisthejobofstates16through19.Shouldwe,instate15,insteadseeanythingbutEoradigit,thenwehavecometotheendofthefraction,thereisnoexponent,andwereturnthelexemefound,viastate21.134CHAPTER3.LEXICALANALYSISThe\fnaltransitiondiagram,showninFig.3.17,isforwhitespace.Inthatdiagram,welookforoneormore\\whitespace\"characters,representedbydeliminthatdiagram|typicallythesecharacterswouldbeblank,tab,newline,andperhapsothercharactersthatarenotconsideredbythelanguagedesigntobepartofanytoken. 22 23 24 start *delim delim otherFigure3.17:AtransitiondiagramforwhitespaceNotethatinstate24,wehavefoundablockofconsecutivewhitespacecharacters,followedbyanonwhitespacecharacter.Weretracttheinputtobeginatthenonwhitespace,butwedonotreturntotheparser.Rather,wemustrestarttheprocessoflexicalanalysisafterthewhitespace.3.4.4ArchitectureofaTransition-Diagram-BasedLexicalAnalyzerThereareseveralwaysthatacollectionoftransitiondiagramscanbeusedtobuildalexicalanalyzer.Regardlessoftheoverallstrategy,eachstateisrepresentedbyapieceofcode.Wemayimagineavariablestateholdingthenumberofthecurrentstateforatransitiondiagram.Aswitchbasedonthevalueofstatetakesustocodeforeachofthepossiblestates,wherewe\fndtheactionofthatstate.Often,thecodeforastateisitselfaswitchstatementormultiwaybranchthatdeterminesthenextstatebyreadingandexaminingthenextinputcharacter.Example3.10:InFig.3.18weseeasketchofgetRelop(),aC++functionwhosejobistosimulatethetransitiondiagramofFig.3.13andreturnanobjectoftypeTOKEN,thatis,apairconsistingofthetokenname(whichmustberelopinthiscase)andanattributevalue(thecodeforoneofthesixcomparisonoperatorsinthiscase).getRelop()\frstcreatesanewobjectretTokenandinitializesits\frstcomponenttoRELOP,thesymboliccodefortokenrelop.Weseethetypicalbehaviorofastateincase0,thecasewherethecurrentstateis0.AfunctionnextChar()obtainsthenextcharacterfromtheinputandassignsittolocalvariablec.Wethencheckcforthethreecharactersweexpectto\fnd,makingthestatetransitiondictatedbythetransitiondiagramofFig.3.13ineachcase.Forexample,ifthenextinputcharacteris=,wegotostate5.Ifthenextinputcharacterisnotonethatcanbeginacomparisonoperator,thenafunctionfail()iscalled.Whatfail()doesdependsontheglobalerror-recoverystrategyofthelexicalanalyzer.ItshouldresettheforwardpointertolexemeBegin,inordertoallowanothertransitiondiagramtobeappliedto3.4.RECOGNITIONOFTOKENS135TOKENgetRelop(){TOKENretToken=new(RELOP);while(1){/*repeatcharacterprocessinguntilareturnorfailureoccurs*/switch(state){case0:c=nextChar();if(c=='<')state=1;elseif(c=='=')state=5;elseif(c=='>')state=6;elsefail();/*lexemeisnotarelop*/break;case1:......case8:retract();retToken.attribute=GT;return(retToken);}}}Figure3.18:Sketchofimplementationofreloptransitiondiagramthetruebeginningoftheunprocessedinput.Itmightthenchangethevalueofstatetobethestartstateforanothertransitiondiagram,whichwillsearchforanothertoken.Alternatively,ifthereisnoothertransitiondiagramthatremainsunused,fail()couldinitiateanerror-correctionphasethatwilltrytorepairtheinputand\fndalexeme,asdiscussedinSection3.1.4.Wealsoshowtheactionforstate8inFig.3.18.Becausestate8bearsa*,wemustretracttheinputpointeroneposition(i.e.,putcbackontheinputstream).Thattaskisaccomplishedbythefunctionretract().Sincestate8representstherecognitionoflexeme>,wesetthesecondcomponentofthereturnedobject,whichwesupposeisnamedattribute,toGT,thecodeforthisoperator.2Toplacethesimulationofonetransitiondiagraminperspective,letusconsiderthewayscodelikeFig.3.18could\ftintotheentirelexicalanalyzer.1.Wecouldarrangeforthetransitiondiagramsforeachtokentobetriedse-quentially.Then,thefunctionfail()ofExample3.10resetsthepointerforwardandstartsthenexttransitiondiagram,eachtimeitiscalled.Thismethodallowsustousetransitiondiagramsfortheindividualkey-words,liketheonesuggestedinFig.3.15.Wehaveonlytousethesebeforeweusethediagramforid,inorderforthekeywordstobereservedwords.136CHAPTER3.LEXICALANALYSIS2.Wecouldrunthevarioustransitiondiagrams\\inparallel,\"feedingthenextinputcharactertoallofthemandallowingeachonetomakewhat-evertransitionsitrequired.Ifweusethisstrategy,wemustbecarefultoresolvethecasewhereonediagram\fndsalexemethatmatchesitspattern,whileoneormoreotherdiagramsarestillabletoprocessinput.Thenormalstrategyistotakethelongestpre\fxoftheinputthatmatchesanypattern.Thatruleallowsustopreferidenti\ferthenexttokeywordthen,ortheoperator->to-,forexample.3.Thepreferredapproach,andtheoneweshalltakeupinthefollowingsections,istocombineallthetransitiondiagramsintoone.Weallowthetransitiondiagramtoreadinputuntilthereisnopossiblenextstate,andthentakethelongestlexemethatmatchedanypattern,aswediscussedinitem(2)above.Inourrunningexample,thiscombinationiseasy,becausenotwotokenscanstartwiththesamecharacter;i.e.,the\frstcharacterimmediatelytellsuswhichtokenwearelookingfor.Thus,wecouldsimplycombinestates0,9,12,and22intoonestartstate,leavingothertransitionsintact.However,ingeneral,theproblemofcombiningtransitiondiagramsforseveraltokensismorecomplex,asweshallseeshortly.3.4.5ExercisesforSection3.4Exercise3.4.1:ProvidetransitiondiagramstorecognizethesamelanguagesaseachoftheregularexpressionsinExercise3.3.2.Exercise3.4.2:ProvidetransitiondiagramstorecognizethesamelanguagesaseachoftheregularexpressionsinExercise3.3.5.Thefollowingexercises,uptoExercise3.4.12,introducetheAho-Corasickalgorithmforrecognizingacollectionofkeywordsinatextstringintimepro-portionaltothelengthofthetextandthesumofthelengthofthekeywords.Thisalgorithmusesaspecialformoftransitiondiagramcalledatrie.Atrieisatree-structuredtransitiondiagramwithdistinctlabelsontheedgesleadingfromanodetoitschildren.Leavesofthetrierepresentrecognizedkeywords.Knuth,Morris,andPrattpresentedanalgorithmforrecognizingasinglekeywordb1b2\u0001\u0001\u0001bninatextstring.Herethetrieisatransitiondiagramwithn+1states,0throughn.State0istheinitialstate,andstatenrepresentsacceptance,thatis,discoveryofthekeyword.Fromeachstatesfrom0throughn\u00001,thereisatransitiontostates+1,labeledbysymbolbs+1.Forexample,thetrieforthekeywordababaais: 01234 65 ababaaInordertoprocesstextstringsrapidlyandsearchthosestringsforakey-word,itisusefultode\fne,forkeywordb1b2\u0001\u0001\u0001bnandpositionsinthatkeyword(correspondingtostatesofitstrie),afailurefunction,f(s),computedasin3.4.RECOGNITIONOFTOKENS137Fig.3.19.Theobjectiveisthatb1b2\u0001\u0001\u0001bf(s)isthelongestproperpre\fxofb1b2\u0001\u0001\u0001bsthatisalsoasu\u000exofb1b2\u0001\u0001\u0001bs.Thereasonf(s)isimportantisthatifwearetryingtomatchatextstringforb1b2\u0001\u0001\u0001bn,andwehavematchedthe\frstspositions,butwethenfail(i.e.,thenextpositionofthetextstringdoesnotholdbs+1),thenf(s)isthelongestpre\fxofb1b2\u0001\u0001\u0001bnthatcouldpossiblymatchthetextstringuptothepointweareat.Ofcourse,thenextcharacterofthetextstringmustbebf(s)+1,orelsewestillhaveproblemsandmustconsiderayetshorterpre\fx,whichwillbebf(f(s)).1)t=0;2)f(1)=0;3)for(s=1;s<n;s++)f4)while(t>0&&bs+1!=bt+1)t=f(t);5)if(bs+1==bt+1)f6)t=t+1;7)f(s+1)=t;g8)elsef(s+1)=0;gFigure3.19:Algorithmtocomputethefailurefunctionforkeywordb1b2\u0001\u0001\u0001bnAsanexample,thefailurefunctionforthetrieconstructedaboveforababaais:138CHAPTER3.LEXICALANALYSISHavingcomputedthefailurefunctionforakeywordb1b2\u0001\u0001\u0001bn,wecanscanastringa1a2\u0001\u0001\u0001amintimeO(m)totellwhetherthekeywordoccursinthestring.Thealgorithm,showninFig.3.20,slidesthekeywordalongthestring,tryingtomakeprogressbymatchingthenextcharacterofthekeywordwiththenextcharacterofthestring.Ifitcannotdosoaftermatchingscharacters,thenit\\slides\"thekeywordrights\u0000f(s)positions,soonlythe\frstf(s)charactersofthekeywordareconsideredmatchedwiththestring.1)s=0;2)for(i=1;i\u0014m;i++)f3)while(s>0&&ai!=bs+1)s=f(s);4)if(ai==bs+1)s=s+1;5)if(s==n)return\\yes\";g6)return\\no\";Figure3.20:TheKMPalgorithmtestswhetherstringa1a2\u0001\u0001\u0001amcontainsasinglekeywordb1b2\u0001\u0001\u0001bnasasubstringinO(m+n)timeExercise3.4.6:ApplyAlgorithmKMPtotestwhetherkeywordababaaisasubstringof:a)abababaab.b)abababbaa.!!Exercise3.4.7:ShowthatthealgorithmofFig.3.20correctlytellswhetherthekeywordisasubstringofthegivenstring.Hint:proceedbyinductiononi.Showthatforalli,thevalueofsafterline(4)isthelengthofthelongestpre\fxofthekeywordthatisasu\u000exofa1a2\u0001\u0001\u0001ai.!!Exercise3.4.8:ShowthatthealgorithmofFig.3.20runsintimeO(m+n),assumingthatfunctionfisalreadycomputedanditsvaluesstoredinanarrayindexedbys.Exercise3.4.9:TheFibonaccistringsarede\fnedasfollows:1.s1=b.2.s2=a.3.sk=sk\u00001sk\u00002fork>2.Forexample,s3=ab,s4=aba,ands5=abaab.a)Whatisthelengthofsn?3.4.RECOGNITIONOFTOKENS139b)Constructthefailurefunctionfors6.c)Constructthefailurefunctionfors7.!!d)Showthatthefailurefunctionforanysncanbeexpressedbyf(1)=f(2)=0,andfor2<j\u0014jsnj,f(j)isj\u0000jsk\u00001j,wherekisthelargestintegersuchthatjskj\u0014j+1.!!e)IntheKMPalgorithm,whatisthelargestnumberofconsecutiveapplica-tionsofthefailurefunction,whenwetrytodeterminewhetherkeywordskappearsintextstringsk+1?AhoandCorasickgeneralizedtheKMPalgorithmtorecognizeanyofasetofkeywordsinatextstring.Inthiscase,thetrieisatruetree,withbranchingfromtheroot.Thereisonestateforeverystringthatisapre\fx(notnecessarilyproper)ofanykeyword.Theparentofastatecorrespondingtostringb1b2\u0001\u0001\u0001bkisthestatethatcorrespondstob1b2\u0001\u0001\u0001bk\u00001.Astateisacceptingifitcorrespondstoacompletekeyword.Forexample,Fig.3.21showsthetrieforthekeywordshe,she,his,andhers. 01289 67 345 hers i s s heFigure3.21:Trieforkeywordshe,she,his,hersThefailurefunctionforthegeneraltrieisde\fnedasfollows.Supposesisthestatethatcorrespondstostringb1b2\u0001\u0001\u0001bn.Thenf(s)isthestatethatcorrespondstothelongestpropersu\u000exofb1b2\u0001\u0001\u0001bnthatisalsoapre\fxofsomekeyword.Forexample,thefailurefunctionforthetrieofFig.3.21is:140CHAPTER3.LEXICALANALYSISthosetransitionscouldleadtoastatethatrepresentsthelongestsu\u000exthatisalsoapre\fx.Exercise3.4.11:Constructthetriesandcomputethefailurefunctionforthefollowingsetsofkeywords:a)aaa,abaaa,andababaaa.b)all,fall,fatal,llama,andlame.c)pipe,pet,item,temper,andperpetual.!Exercise3.4.12:ShowthatyouralgorithmfromExercise3.4.10stillrunsintimethatislinearinthesumofthelengthsofthekeywords.3.5TheLexical-AnalyzerGeneratorLexInthissection,weintroduceatoolcalledLex,orinamorerecentimplemen-tationFlex,thatallowsonetospecifyalexicalanalyzerbyspecifyingregularexpressionstodescribepatternsfortokens.TheinputnotationfortheLextoolisreferredtoastheLexlanguageandthetoolitselfistheLexcompiler.Behindthescenes,theLexcompilertransformstheinputpatternsintoatransitiondiagramandgeneratescode,ina\flecalledlex.yy.c,thatsimulatesthistran-sitiondiagram.Themechanicsofhowthistranslationfromregularexpressionstotransitiondiagramsoccursisthesubjectofthenextsections;hereweonlylearntheLexlanguage.3.5.1UseofLexFigure3.22suggestshowLexisused.Aninput\fle,whichwecalllex.l,iswrittenintheLexlanguageanddescribesthelexicalanalyzertobegenerated.TheLexcompilertransformslex.ltoaCprogram,ina\flethatisalwaysnamedlex.yy.c.Thelatter\fleiscompiledbytheCcompilerintoa\flecalleda.out,asalways.TheC-compileroutputisaworkinglexicalanalyzerthatcantakeastreamofinputcharactersandproduceastreamoftokens.ThenormaluseofthecompiledCprogram,referredtoasa.outinFig.3.22,isasasubroutineoftheparser.ItisaCfunctionthatreturnsaninteger,whichisacodeforoneofthepossibletokennames.Theattributevalue,whetheritbeanothernumericcode,apointertothesymboltable,ornothing,isplacedinaglobalvariableyylval,2whichissharedbetweenthelexicalanalyzerandparser,therebymakingitsimpletoreturnboththenameandanattributevalueofatoken.3.5.THELEXICAL-ANALYZERGENERATORLEX141 compiler C compiler Lex source program lex.l Input stream a.out Sequence of tokens lex.yy.cLex a.out lex.yy.cFigure3.22:CreatingalexicalanalyzerwithLex3.5.2StructureofLexProgramsALexprogramhasthefollowingform:declarations%%translationrules%%auxiliaryfunctionsThedeclarationssectionincludesdeclarationsofvariables,manifestconstants(identi\fersdeclaredtostandforaconstant,e.g.,thenameofatoken),andregularde\fnitions,inthestyleofSection3.3.4.ThetranslationruleseachhavetheformPatternfActiongEachpatternisaregularexpression,whichmayusetheregularde\fnitionsofthedeclarationsection.Theactionsarefragmentsofcode,typicallywritteninC,althoughmanyvariantsofLexusingotherlanguageshavebeencreated.Thethirdsectionholdswhateveradditionalfunctionsareusedintheactions.Alternatively,thesefunctionscanbecompiledseparatelyandloadedwiththelexicalanalyzer.ThelexicalanalyzercreatedbyLexbehavesinconcertwiththeparserasfollows.Whencalledbytheparser,thelexicalanalyzerbeginsreadingitsremaininginput,onecharacteratatime,untilit\fndsthelongestpre\fxoftheinputthatmatchesoneofthepatternsPi.ItthenexecutestheassociatedactionAi.Typically,Aiwillreturntotheparser,butifitdoesnot(e.g.,becausePidescribeswhitespaceorcomments),thenthelexicalanalyzerproceedsto\fndadditionallexemes,untiloneofthecorrespondingactionscausesareturntotheparser.Thelexicalanalyzerreturnsasinglevalue,thetokenname,totheparser,butusestheshared,integervariableyylvaltopassadditionalinformationaboutthelexemefound,ifneeded.142CHAPTER3.LEXICALANALYSISExample3.11:Figure3.23isaLexprogramthatrecognizesthetokensofFig.3.12andreturnsthetokenfound.AfewobservationsaboutthiscodewillintroduceustomanyoftheimportantfeaturesofLex.Inthedeclarationssectionweseeapairofspecialbrackets,%{and%}.Anythingwithinthesebracketsiscopieddirectlytothe\flelex.yy.c,andisnottreatedasaregularde\fnition.Itiscommontoplacetherethede\fnitionsofthemanifestconstants,usingC#definestatementstoassociateuniqueintegercodeswitheachofthemanifestconstants.Inourexample,wehavelistedinacommentthenamesofthemanifestconstants,LT,IF,andsoon,buthavenotshownthemde\fnedtobeparticularintegers.3Alsointhedeclarationssectionisasequenceofregularde\fnitions.TheseusetheextendednotationforregularexpressionsdescribedinSection3.3.5.Regularde\fnitionsthatareusedinlaterde\fnitionsorinthepatternsofthetranslationrulesaresurroundedbycurlybraces.Thus,forinstance,delimisde\fnedtobeashorthandforthecharacterclassconsistingoftheblank,thetab,andthenewline;thelattertwoarerepresented,asinallUNIXcommands,bybackslashfollowedbytorn,respectively.Then,wsisde\fnedtobeoneormoredelimiters,bytheregularexpression{delim}+.Noticethatinthede\fnitionofidandnumber,parenthesesareusedasgroupingmetasymbolsanddonotstandforthemselves.Incontrast,Einthede\fnitionofnumberstandsforitself.IfwewishtouseoneoftheLexmeta-symbols,suchasanyoftheparentheses,+,*,or?,tostandforthemselves,wemayprecedethemwithabackslash.Forinstance,wesee\\.inthede\fnitionofnumber,torepresentthedot,sincethatcharacterisametasymbolrepresenting\\anycharacter,\"asusualinUNIXregularexpressions.Intheauxiliary-functionsection,weseetwosuchfunctions,installID()andinstallNum().Liketheportionofthedeclarationsectionthatappearsbetween%{...%},everythingintheauxiliarysectioniscopieddirectlyto\flelex.yy.c,butmaybeusedintheactions.Finally,letusexaminesomeofthepatternsandrulesinthemiddlesectionofFig.3.23.First,ws,anidenti\ferdeclaredinthe\frstsection,hasanassociatedemptyaction.Ifwe\fndwhitespace,wedonotreturntotheparser,butlookforanotherlexeme.Thesecondtokenhasthesimpleregularexpressionpatternif.Shouldweseethetwolettersifontheinput,andtheyarenotfollowedbyanotherletterordigit(whichwouldcausethelexicalanalyzerto\fndalongerpre\fxoftheinputmatchingthepatternforid),thenthelexicalanalyzerconsumesthesetwolettersfromtheinputandreturnsthetokennameIF,thatis,theintegerforwhichthemanifestconstantIFstands.Keywordsthenandelsearetreatedsimilarly.The\ffthtokenhasthepatternde\fnedbyid.Notethat,althoughkeywordslikeifmatchthispatternaswellasanearlierpattern,Lexchooseswhichever3.5.THELEXICAL-ANALYZERGENERATORLEX143%{/*definitionsofmanifestconstantsLT,LE,EQ,NE,GT,GE,IF,THEN,ELSE,ID,NUMBER,RELOP*/%}/*regulardefinitions*/delim[\\t\\n]ws{delim}+letter[A-Za-z]digit[0-9]id{letter}({letter}|{digit})*number{digit}+(\\.{digit}+)?(E[+-]?{digit}+)?%%{ws}{/*noactionandnoreturn*/}if{return(IF);}then{return(THEN);}else{return(ELSE);}{id}{yylval=(int)installID();return(ID);}{number}{yylval=(int)installNum();return(NUMBER);}\"<\"{yylval=LT;return(RELOP);}\"<=\"{yylval=LE;return(RELOP);}\"=\"{yylval=EQ;return(RELOP);}\"<>\"{yylval=NE;return(RELOP);}\">\"{yylval=GT;return(RELOP);}\">=\"{yylval=GE;return(RELOP);}%%intinstallID(){/*functiontoinstallthelexeme,whosefirstcharacterispointedtobyyytext,andwhoselengthisyyleng,intothesymboltableandreturnapointerthereto*/}intinstallNum(){/*similartoinstallID,butputsnumer-icalconstantsintoaseparatetable*/}Figure3.23:LexprogramforthetokensofFig.3.12144CHAPTER3.LEXICALANALYSISpatternislisted\frstinsituationswherethelongestmatchingpre\fxmatchestwoormorepatterns.Theactiontakenwhenidismatchedisthreefold:1.FunctioninstallID()iscalledtoplacethelexemefoundinthesymboltable.2.Thisfunctionreturnsapointertothesymboltable,whichisplacedinglobalvariableyylval,whereitcanbeusedbytheparseroralatercomponentofthecompiler.NotethatinstallID()hasavailabletoittwovariablesthataresetautomaticallybythelexicalanalyzerthatLexgenerates:(a)yytextisapointertothebeginningofthelexeme,analogoustolexemeBegininFig.3.3.(b)yylengisthelengthofthelexemefound.3.ThetokennameIDisreturnedtotheparser.Theactiontakenwhenalexemematchingthepatternnumberissimilar,usingtheauxiliaryfunctioninstallNum().23.5.3Con\rictResolutioninLexWehavealludedtothetworulesthatLexusestodecideontheproperlexemetoselect,whenseveralpre\fxesoftheinputmatchoneormorepatterns:1.Alwayspreferalongerpre\fxtoashorterpre\fx.2.Ifthelongestpossiblepre\fxmatchestwoormorepatterns,preferthepatternlisted\frstintheLexprogram.Example3.12:The\frstruletellsustocontinuereadinglettersanddigitsto\fndthelongestpre\fxofthesecharacterstogroupasanidenti\fer.Italsotellsustotreat<=asasinglelexeme,ratherthanselecting<asonelexemeand=asthenextlexeme.Thesecondrulemakeskeywordsreserved,ifwelistthekeywordsbeforeidintheprogram.Forinstance,ifthenisdeterminedtobethelongestpre\fxoftheinputthatmatchesanypattern,andthepatternthenprecedes{id},asitdoesinFig.3.23,thenthetokenTHENisreturned,ratherthanID.23.5.4TheLookaheadOperatorLexautomaticallyreadsonecharacteraheadofthelastcharacterthatformstheselectedlexeme,andthenretractstheinputsoonlythelexemeitselfisconsumedfromtheinput.However,sometimes,wewantacertainpatterntobematchedtotheinputonlywhenitisfollowedbyacertainothercharacters.Ifso,wemayusetheslashinapatterntoindicatetheendofthepartofthe3.5.THELEXICAL-ANALYZERGENERATORLEX145patternthatmatchesthelexeme.Whatfollows/isadditionalpatternthatmustbematchedbeforewecandecidethatthetokeninquestionwasseen,butwhatmatchesthissecondpatternisnotpartofthelexeme.Example3.13:InFortranandsomeotherlanguages,keywordsarenotre-served.Thatsituationcreatesproblems,suchasastatementIF(I,J)=3whereIFisthenameofanarray,notakeyword.ThisstatementcontrastswithstatementsoftheformIF(condition)THEN...whereIFisakeyword.Fortunately,wecanbesurethatthekeywordIFisalwaysfollowedbyaleftparenthesis,sometext|thecondition|thatmaycontainparentheses,arightparenthesisandaletter.Thus,wecouldwriteaLexruleforthekeywordIFlike:IF/\\(.*\\){letter}ThisrulesaysthatthepatternthelexemematchesisjustthetwolettersIF.Theslashsaysthatadditionalpatternfollowsbutdoesnotmatchthelexeme.Inthispattern,the\frstcharacteristheleftparentheses.SincethatcharacterisaLexmetasymbol,itmustbeprecededbyabackslashtoindicatethatithasitsliteralmeaning.Thedotandstarmatch\\anystringwithoutanewline.\"NotethatthedotisaLexmetasymbolmeaning\\anycharacterexceptnewline.\"Itisfollowedbyarightparenthesis,againwithabackslashtogivethatcharacteritsliteralmeaning.Theadditionalpatternisfollowedbythesymbolletter,whichisaregularde\fnitionrepresentingthecharacterclassofallletters.Notethatinorderforthispatterntobefoolproof,wemustpreprocesstheinputtodeletewhitespace.Wehaveinthepatternneitherprovisionforwhitespace,norcanwedealwiththepossibilitythattheconditionextendsoverlines,sincethedotwillnotmatchanewlinecharacter.Forinstance,supposethispatternisaskedtomatchapre\fxofinput:IF(A<(B+C)*D)THEN...the\frsttwocharactersmatchIF,thenextcharactermatches\\(,thenextninecharactersmatch.*,andthenexttwomatch\\)andletter.Notethefactthatthe\frstrightparenthesis(afterC)isnotfollowedbyaletterisirrelevant;weonlyneedto\fndsomewayofmatchingtheinputtothepattern.WeconcludethatthelettersIFconstitutethelexeme,andtheyareaninstanceoftokenif.2146CHAPTER3.LEXICALANALYSIS3.5.5ExercisesforSection3.5Exercise3.5.1:Describehowtomakethefollowingmodi\fcationstotheLexprogramofFig.3.23:a)Addthekeywordwhile.b)ChangethecomparisonoperatorstobetheCoperatorsofthatkind.c)Allowtheunderscore(3.6.FINITEAUTOMATA1473.6FiniteAutomataWeshallnowdiscoverhowLexturnsitsinputprogramintoalexicalanalyzer.Attheheartofthetransitionistheformalismknownas\fniteautomata.Theseareessentiallygraphs,liketransitiondiagrams,withafewdi\u000berences:1.Finiteautomataarerecognizers;theysimplysay\\yes\"or\\no\"abouteachpossibleinputstring.2.Finiteautomatacomeintwo\ravors:(a)Nondeterministic\fniteautomata(NFA)havenorestrictionsonthelabelsoftheiredges.Asymbolcanlabelseveraledgesoutofthesamestate,and\u000f,theemptystring,isapossiblelabel.(b)Deterministic\fniteautomata(DFA)have,foreachstate,andforeachsymbolofitsinputalphabetexactlyoneedgewiththatsymbolleavingthatstate.Bothdeterministicandnondeterministic\fniteautomataarecapableofrec-ognizingthesamelanguages.Infacttheselanguagesareexactlythesamelanguages,calledtheregularlanguages,thatregularexpressionscandescribe.43.6.1NondeterministicFiniteAutomataAnondeterministic\fniteautomaton(NFA)consistsof:1.A\fnitesetofstatesS.2.Asetofinputsymbols\u0006,theinputalphabet.Weassumethat\u000f,whichstandsfortheemptystring,isneveramemberof\u0006.3.Atransitionfunctionthatgives,foreachstate,andforeachsymbolin\u0006[f\u000fgasetofnextstates.4.Astates0fromSthatisdistinguishedasthestartstate(orinitialstate).5.AsetofstatesF,asubsetofS,thatisdistinguishedastheacceptingstates(or\fnalstates).WecanrepresenteitheranNFAorDFAbyatransitiongraph,wherethenodesarestatesandthelabelededgesrepresentthetransitionfunction.Thereisanedgelabeledafromstatestostatetifandonlyiftisoneofthenextstatesforstatesandinputa.Thisgraphisverymuchlikeatransitiondiagram,except:148CHAPTER3.LEXICALANALYSISa)Thesamesymbolcanlabeledgesfromonestatetoseveraldi\u000berentstates,andb)Anedgemaybelabeledby\u000f,theemptystring,insteadof,orinadditionto,symbolsfromtheinputalphabet.Example3.14:ThetransitiongraphforanNFArecognizingthelanguageofregularexpression(ajb)\u0003abbisshowninFig.3.24.Thisabstractexample,describingallstringsofa'sandb'sendingintheparticularstringabb,willbeusedthroughoutthissection.Itissimilartoregularexpressionsthatdescribelanguagesofrealinterest,however.Forinstance,anexpressiondescribingall\fleswhosenameendsin.oisany\u0003.o,whereanystandsforanyprintablecharacter. a b abb 0123 startFigure3.24:Anondeterministic\fniteautomatonFollowingourconventionfortransitiondiagrams,thedoublecirclearoundstate3indicatesthatthisstateisaccepting.Noticethattheonlywaystogetfromthestartstate0totheacceptingstateistofollowsomepaththatstaysinstate0forawhile,thengoestostates1,2,and3byreadingabbfromtheinput.Thus,theonlystringsgettingtotheacceptingstatearethosethatendinabb.23.6.2TransitionTablesWecanalsorepresentanNFAbyatransitiontable,whoserowscorrespondtostates,andwhosecolumnscorrespondtotheinputsymbolsand\u000f.Theentryforagivenstateandinputisthevalueofthetransitionfunctionappliedtothosearguments.Ifthetransitionfunctionhasnoinformationaboutthatstate-inputpair,weput;inthetableforthepair.Example3.15:ThetransitiontablefortheNFAofFig.3.24isshowninFig.3.25.2Thetransitiontablehastheadvantagethatwecaneasily\fndthetransitionsonagivenstateandinput.Itsdisadvantageisthatittakesalotofspace,whentheinputalphabetislarge,yetmoststatesdonothaveanymovesonmostoftheinputsymbols.3.6.FINITEAUTOMATA149150CHAPTER3.LEXICALANALYSIS start 0 12 34 a b ε ε a bFigure3.26:NFAacceptingaa\u0003jbb\u00031.Therearenomovesoninput\u000f,and2.Foreachstatesandinputsymbola,thereisexactlyoneedgeoutofslabeleda.IfweareusingatransitiontabletorepresentaDFA,theneachentryisasinglestate.Wemaythereforerepresentthisstatewithoutthecurlybracesthatweusetoformsets.WhiletheNFAisanabstractrepresentationofanalgorithmtorecognizethestringsofacertainlanguage,theDFAisasimple,concretealgorithmforrecognizingstrings.ItisfortunateindeedthateveryregularexpressionandeveryNFAcanbeconvertedtoaDFAacceptingthesamelanguage,becauseitistheDFAthatwereallyimplementorsimulatewhenbuildinglexicalanalyzers.ThefollowingalgorithmshowshowtoapplyaDFAtoastring.Algorithm3.18:SimulatingaDFA.INPUT:Aninputstringxterminatedbyanend-of-\flecharactereof.ADFADwithstartstates0,acceptingstatesF,andtransitionfunctionmove.OUTPUT:Answer\\yes\"ifDacceptsx;\\no\"otherwise.METHOD:ApplythealgorithminFig.3.27totheinputstringx.Thefunctionmove(s;c)givesthestatetowhichthereisanedgefromstatesoninputc.ThefunctionnextCharreturnsthenextcharacteroftheinputstringx.2Example3.19:InFig.3.28weseethetransitiongraphofaDFAacceptingthelanguage(ajb)\u0003abb,thesameasthatacceptedbytheNFAofFig.3.24.Giventheinputstringababb,thisDFAentersthesequenceofstates0;1;2;1;2;3andreturns\\yes.\"23.6.FINITEAUTOMATA151s=s0;c=nextChar();while(c!=eof)fs=move(s;c);c=nextChar();gif(sisinF)return\"yes\";elsereturn\"no\";Figure3.27:SimulatingaDFA abb 0123 start b b a a aFigure3.28:DFAaccepting(ajb)\u0003abb3.6.5ExercisesforSection3.6!Exercise3.6.1:Figure3.19intheexercisesofSection3.4computesthefailurefunctionfortheKMPalgorithm.Showhow,giventhatfailurefunction,wecanconstruct,fromakeywordb1b2\u0001\u0001\u0001bnann+1-stateDFAthatrecognizes:\u0003b1b2\u0001\u0001\u0001bn,wherethedotstandsfor\\anycharacter.\"Moreover,thisDFAcanbeconstructedinO(n)time.Exercise3.6.2:Design\fniteautomata(deterministicornondeterministic)foreachofthelanguagesofExercise3.3.5.Exercise3.6.3:FortheNFAofFig.3.29,indicateallthepathslabeledaabb.DoestheNFAacceptaabb? a, b a, b a, b ab 0123 start a εFigure3.29:NFAforExercise3.6.3152CHAPTER3.LEXICALANALYSIS abb 0123 start ε εεε aFigure3.30:NFAforExercise3.6.4Exercise3.6.4:RepeatExercise3.6.3fortheNFAofFig.3.30.Exercise3.6.5:GivethetransitiontablesfortheNFAof:a)Exercise3.6.3.b)Exercise3.6.4.c)Figure3.26.3.7FromRegularExpressionstoAutomataTheregularexpressionisthenotationofchoicefordescribinglexicalanalyzersandotherpattern-processingsoftware,aswasre\rectedinSection3.5.How-ever,implementationofthatsoftwarerequiresthesimulationofaDFA,asinAlgorithm3.18,orperhapssimulationofanNFA.BecauseanNFAoftenhasachoiceofmoveonaninputsymbol(asFig.3.24doesoninputafromstate0)oron\u000f(asFig.3.26doesfromstate0),orevenachoiceofmakingatransitionon\u000foronarealinputsymbol,itssimulationislessstraightforwardthanforaDFA.ThusoftenitisimportanttoconvertanNFAtoaDFAthatacceptsthesamelanguage.Inthissectionweshall\frstshowhowtoconvertNFA'stoDFA's.Then,weusethistechnique,knownas\\thesubsetconstruction,\"togiveausefulalgo-rithmforsimulatingNFA'sdirectly,insituations(otherthanlexicalanalysis)wheretheNFA-to-DFAconversiontakesmoretimethanthedirectsimulation.Next,weshowhowtoconvertregularexpressionstoNFA's,fromwhichaDFAcanbeconstructedifdesired.Weconcludewithadiscussionofthetime-spacetradeo\u000bsinherentinthevariousmethodsforimplementingregularexpressions,andseehowtochoosetheappropriatemethodforyourapplication.3.7.1ConversionofanNFAtoaDFAThegeneralideabehindthesubsetconstructionisthateachstateoftheconstructedDFAcorrespondstoasetofNFAstates.Afterreadinginput3.7.FROMREGULAREXPRESSIONSTOAUTOMATA153a1a2\u0001\u0001\u0001an,theDFAisinthatstatewhichcorrespondstothesetofstatesthattheNFAcanreach,fromitsstartstate,followingpathslabeleda1a2\u0001\u0001\u0001an.ItispossiblethatthenumberofDFAstatesisexponentialinthenumberofNFAstates,whichcouldleadtodi\u000ecultieswhenwetrytoimplementthisDFA.However,partofthepoweroftheautomaton-basedapproachtolexicalanalysisisthatforreallanguages,theNFAandDFAhaveapproximatelythesamenumberofstates,andtheexponentialbehaviorisnotseen.Algorithm3.20:ThesubsetconstructionofaDFAfromanNFA.INPUT:AnNFAN.OUTPUT:ADFADacceptingthesamelanguageasN.METHOD:OuralgorithmconstructsatransitiontableDtranforD.EachstateofDisasetofNFAstates,andweconstructDtransoDwillsimulate\\inparallel\"allpossiblemovesNcanmakeonagiveninputstring.Our\frstproblemistodealwith\u000f-transitionsofNproperly.InFig.3.31weseethede\fnitionsofseveralfunctionsthatdescribebasiccomputationsonthestatesofNthatareneededinthealgorithm.NotethatsisasinglestateofN,whileTisasetofstatesofN.154CHAPTER3.LEXICALANALYSISinitially,\u000f-closure(s0)istheonlystateinDstates,anditisunmarked;while(thereisanunmarkedstateTinDstates)fmarkT;for(eachinputsymbola)fU=\u000f-closure\u0000move(T;a)\u0001;if(UisnotinDstates)addUasanunmarkedstatetoDstates;Dtran[T;a]=U;ggFigure3.32:Thesubsetconstruction\u000f-closure(T)iscomputedforanysetofNFAstatesT.Thisprocess,showninFig.3.33,isastraightforwardsearchinagraphfromasetofstates.Inthiscase,imaginethatonlythe\u000f-labelededgesareavailableinthegraph.2pushallstatesofTontostack;initialize\u000f-closure(T)toT;while(stackisnotempty)fpopt,thetopelement,o\u000bstack;for(eachstateuwithanedgefromttoulabeled\u000f)if(uisnotin\u000f-closure(T))fadduto\u000f-closure(T);pushuontostack;ggFigure3.33:Computing\u000f-closure(T)Example3.21:Figure3.34showsanotherNFAaccepting(ajb)\u0003abb;ithap-penstobetheoneweshallconstructdirectlyfromthisregularexpressioninSection3.7.LetusapplyAlgorithm3.20toFig.3.34.ThestartstateAoftheequivalentDFAis\u000f-closure(0),orA=f0;1;2;4;7g,sincetheseareexactlythestatesreachablefromstate0viaapathallofwhoseedgeshavelabel\u000f.Notethatapathcanhavezeroedges,sostate0isreachablefromitselfbyan\u000f-labeledpath.Theinputalphabetisfa;bg.Thus,our\frststepistomarkAandcomputeDtran[A;a]=\u000f-closure\u0000move(A;a)\u0001andDtran[A;b]=\u000f-closure\u0000move(A;b)\u0001.Amongthestates0,1,2,4,and7,only2and7havetransitionsona,to3and8,respectively.Thus,move(A;a)=f3;8g.Also,\u000f-closure(f3;8g)=f1;2;3;4;6;7;8g,soweconclude3.7.FROMREGULAREXPRESSIONSTOAUTOMATA155 start 01 23 45 678910 a b abbε ε ε ε ε ε ε εFigure3.34:NFANfor(ajb)\u0003abbDtran[A;a]=\u000f-closure\u0000move(A;a)\u0001=\u000f-closure(f3;8g)=f1;2;3;4;6;7;8gLetuscallthissetB,soDtran[A;a]=B.Now,wemustcomputeDtran[A;b].AmongthestatesinA,only4hasatransitiononb,anditgoesto5.Thus,Dtran[A;b]=\u000f-closure(f5g)=f1;2;4;5;6;7gLetuscalltheabovesetC,soDtran[A;b]=C.156CHAPTER3.LEXICALANALYSIS start AB C DE b a a bb a a b b aFigure3.36:ResultofapplyingthesubsetconstructiontoFig.3.343.7.2SimulationofanNFAAstrategythathasbeenusedinanumberoftext-editingprogramsistocon-structanNFAfromaregularexpressionandthensimulatetheNFAusingsomethinglikeanon-the-\rysubsetconstruction.Thesimulationisoutlinedbelow.Algorithm3.22:SimulatinganNFA.INPUT:Aninputstringxterminatedbyanend-of-\flecharactereof.AnNFANwithstartstates0,acceptingstatesF,andtransitionfunctionmove.OUTPUT:Answer\\yes\"ifNacceptsx;\\no\"otherwise.METHOD:ThealgorithmkeepsasetofcurrentstatesS,thosethatarereachedfroms0followingapathlabeledbytheinputsreadsofar.Ifcisthenextinputcharacter,readbythefunctionnextChar(),thenwe\frstcomputemove(S;c)andthenclosethatsetusing\u000f-closure().ThealgorithmissketchedinFig.3.37.21)S=\u000f-closure(s0);2)c=nextChar();3)while(c!=eof)f4)S=\u000f-closure\u0000move(S;c)\u0001;5)c=nextChar();6)g7)if(S\\F!=;)return\"yes\";8)elsereturn\"no\";Figure3.37:SimulatinganNFA3.7.FROMREGULAREXPRESSIONSTOAUTOMATA1573.7.3E\u000eciencyofNFASimulationIfcarefullyimplemented,Algorithm3.22canbequitee\u000ecient.Astheideasinvolvedareusefulinanumberofsimilaralgorithmsinvolvingsearchofgraphs,weshalllookatthisimplementationinadditionaldetail.Thedatastructuresweneedare:1.Twostacks,eachofwhichholdsasetofNFAstates.Oneofthesestacks,oldStates,holdsthe\\current\"setofstates,i.e.,thevalueofSontherightsideofline(4)inFig.3.37.Thesecond,newStates,holdsthe\\next\"setofstates|Sontheleftsideofline(4).Unseenisastepwhere,aswegoaroundtheloopoflines(3)through(6),newStatesistransferredtooldStates.2.AbooleanarrayalreadyOn,indexedbytheNFAstates,toindicatewhichstatesareinnewStates.Whilethearrayandstackholdthesameinfor-mation,itismuchfastertointerrogatealreadyOn[s]thantosearchforstatesonthestacknewStates.Itisforthise\u000eciencythatwemaintainbothrepresentations.3.Atwo-dimensionalarraymove[s;a]holdingthetransitiontableoftheNFA.Theentriesinthistable,whicharesetsofstates,arerepresentedbylinkedlists.Toimplementline(1)ofFig.3.37,weneedtoseteachentryinarrayal-readyOntoFALSE,thenforeachstatesin\u000f-closure(s0),pushsontooldStatesandsetalreadyOn[s]toTRUE.Thisoperationonstates,andtheimplementationofline(4)aswell,arefacilitatedbyafunctionweshallcalladdState(s).ThisfunctionpushesstatesontonewStates,setsalreadyOn[s]toTRUE,andcallsitselfrecursivelyonthestatesinmove[s;\u000f]inordertofurtherthecomputationof\u000f-closure(s).However,toavoidduplicatingwork,wemustbecarefulnevertocalladdStateonastatethatisalreadyonthestacknewStates.Figure3.38sketchesthisfunction.9)addState(s)f10)pushsontonewStates;11)alreadyOn[s]=TRUE;12)for(tonmove[s;\u000f])13)if(!alreadyOn[t])14)addState(t);15)gFigure3.38:Addinganewstates,whichisknownnottobeonnewStatesWeimplementline(4)ofFig.3.37bylookingateachstatesonoldStates.We\frst\fndthesetofstatesmove[s;c],wherecisthenextinput,andforeach158CHAPTER3.LEXICALANALYSISofthosestatesthatisnotalreadyonnewStates,weapplyaddStatetoit.NotethataddStatehasthee\u000bectofcomputingthe\u000f-closureandaddingallthosestatestonewStatesaswell,iftheywerenotalreadyon.ThissequenceofstepsissummarizedinFig.3.39.16)for(sonoldStates)f17)for(tonmove[s;c])18)if(!alreadyOn[t])19)addState(t);20)popsfromoldStates;21)g22)for(sonnewStates)f23)popsfromnewStates;24)pushsontooldStates;25)alreadyOn[s]=FALSE;26)gFigure3.39:Implementationofstep(4)ofFig.3.37Now,supposethattheNFANhasnstatesandmtransitions;i.e.,misthesumoverallstatesofthenumberofsymbols(or\u000f)onwhichthestatehasatransitionout.NotcountingthecalltoaddStateatline(19)ofFig.3.39,thetimespentintheloopoflines(16)through(21)isO(n).Thatis,wecangoaroundtheloopatmostntimes,andeachstepofthelooprequiresconstantwork,exceptforthetimespentinaddState.Thesameistrueoftheloopoflines(22)through(26).DuringoneexecutionofFig.3.39,i.e.,ofstep(4)ofFig.3.37,itisonlypossibletocalladdStateonagivenstateonce.ThereasonisthatwheneverwecalladdState(s),wesetalreadyOn[s]toTRUEatline(11)ofFig.3.38.OncealreadyOn[s]isTRUE,thetestsatline(13)ofFig.3.38andline(18)ofFig.3.39preventanothercall.ThetimespentinonecalltoaddState,exclusiveofthetimespentinrecur-sivecallsatline(14),isO(1)forlines(10)and(11).Forlines(12)and(13),thetimedependsonhowmany\u000f-transitionsthereareoutofstates.Wedonotknowthisnumberforagivenstate,butweknowthatthereareatmostmtransitionsintotal,outofallstates.Asaresult,theaggregatetimespentinlines(12)and(13)overallcallstoaddStateduringoneexecutionofthecodeofFig.3.39isO(m).TheaggregatefortherestofthestepsofaddStateisO(n),sinceitisaconstantpercall,andthereareatmostncalls.Weconcludethat,implementedproperly,thetimetoexecuteline(4)ofFig.3.37isO(n+m).Therestofthewhile-loopoflines(3)through(6)takesO(1)timeperiteration.Iftheinputxisoflengthk,thenthetotalworkinthatloopisO\u0000k(n+m)\u0001.Line(1)ofFig.3.37canbeexecutedinO(n+m)time,sinceitisessentiallythestepsofFig.3.39witholdStatescontainingonly3.7.FROMREGULAREXPRESSIONSTOAUTOMATA159160CHAPTER3.LEXICALANALYSISwhereagainiandfarenewstates,thestartandacceptingstates,respectively.Notethatinbothofthebasisconstructions,weconstructadistinctNFA,withnewstates,foreveryoccurrenceof\u000forsomeaasasubexpressionofr.INDUCTION:SupposeN(s)andN(t)areNFA'sforregularexpressionssandt,respectively.a)Supposer=sjt.ThenN(r),theNFAforr,isconstructedasinFig.3.40.Here,iandfarenewstates,thestartandacceptingstatesofN(r),respectively.Thereare\u000f-transitionsfromitothestartstatesofN(s)andN(t),andeachoftheiracceptingstateshave\u000f-transitionstotheacceptingstatef.NotethattheacceptingstatesofN(s)andN(t)arenotacceptinginN(r).SinceanypathfromitofmustpassthrougheitherN(s)orN(t)exclusively,andsincethelabelofthatpathisnotchangedbythe\u000f'sleavingiorenteringf,weconcludethatN(r)acceptsL(s)[L(t),whichisthesameasL(r).Thatis,Fig.3.40isacorrectconstructionfortheunionoperator. start if N N (s) (t ) ε ε ε εFigure3.40:NFAfortheunionoftworegularexpressionsb)Supposer=st.ThenconstructN(r)asinFig.3.41.ThestartstateofN(s)becomesthestartstateofN(r),andtheacceptingstateofN(t)istheonlyacceptingstateofN(r).TheacceptingstateofN(s)andthestartstateofN(t)aremergedintoasinglestate,withallthetransitionsinoroutofeitherstate.ApathfromitofinFig.3.41mustgo\frstthroughN(s),andthereforeitslabelwillbeginwithsomestringinL(s).ThepaththencontinuesthroughN(t),sothepath'slabel\fnisheswithastringinL(t).Asweshallsoonargue,acceptingstatesneverhaveedgesoutandstartstatesneverhaveedgesin,soitisnotpossibleforapathtore-enterN(s)afterleavingit.Thus,N(r)acceptsexactlyL(s)L(t),andisacorrectNFAforr=st. N (t )N (s) fi startFigure3.41:NFAfortheconcatenationoftworegularexpressions3.7.FROMREGULAREXPRESSIONSTOAUTOMATA161c)Supposer=s\u0003.ThenforrweconstructtheNFAN(r)showninFig.3.42.Here,iandfarenewstates,thestartstateandloneacceptingstateofN(r).Togetfromitof,wecaneitherfollowtheintroducedpathlabeled\u000f,whichtakescareoftheonestringinL(s)0,orwecangotothestartstateofN(s),throughthatNFA,thenfromitsacceptingstatebacktoitsstartstatezeroormoretimes.TheseoptionsallowN(r)toacceptallthestringsinL(s)1,L(s)2,andsoon,sotheentiresetofstringsacceptedbyN(r)isL(s\u0003). start N (s) fi ε εε εFigure3.42:NFAfortheclosureofaregularexpressiond)Finally,supposer=(s).ThenL(r)=L(s),andwecanusetheNFAN(s)asN(r).2ThemethoddescriptioninAlgorithm3.23containshintsastowhytheinductiveconstructionworksasitshould.Weshallnotgiveaformalcorrectnessproof,butweshalllistseveralpropertiesoftheconstructedNFA's,inadditiontotheall-importantfactthatN(r)acceptslanguageL(r).Thesepropertiesareinterestingintheirownright,andhelpfulinmakingaformalproof.1.N(r)hasatmosttwiceasmanystatesasthereareoperatorsandoperandsinr.Thisboundfollowsfromthefactthateachstepofthealgorithmcreatesatmosttwonewstates.2.N(r)hasonestartstateandoneacceptingstate.Theacceptingstatehasnooutgoingtransitions,andthestartstatehasnoincomingtransitions.3.EachstateofN(r)otherthantheacceptingstatehaseitheroneoutgoingtransitiononasymbolin\u0006ortwooutgoingtransitions,bothon\u000f.Example3.24:LetususeAlgorithm3.23toconstructanNFAforr=(ajb)\u0003abb.Figure3.43showsaparsetreeforrthatisanalogoustotheparsetreesconstructedforarithmeticexpressionsinSection2.2.3.Forsubexpressionr1,the\frsta,weconstructtheNFA:162CHAPTER3.LEXICALANALYSIS 5 *r4 )( r r 3 r2 b 1 a | 9 r11 r10 b r r8 b r7 r6 a rFigure3.43:Parsetreefor(ajb)\u0003abb start 23 aStatenumbershavebeenchosenforconsistencywithwhatfollows.Forr2weconstruct:start 45 bWecannowcombineN(r1)andN(r2),usingtheconstructionofFig.3.40toobtaintheNFAforr3=r1jr2;thisNFAisshowninFig.3.44. start 1 23 45 6 a b ε ε ε εFigure3.44:NFAforr3TheNFAforr4=(r3)isthesameasthatforr3.TheNFAforr5=(r3)\u0003isthenasshowninFig.3.45.WehaveusedtheconstructioninFig.3.42tobuildthisNFAfromtheNFAinFig.3.44.Now,considersubexpressionr6,whichisanothera.Weusethebasiscon-structionforaagain,butwemustusenewstates.Itisnotpermissibletoreuse3.7.FROMREGULAREXPRESSIONSTOAUTOMATA163 start 01 23 45 67 a b ε ε ε ε ε ε ε εFigure3.45:NFAforr5theNFAweconstructedforr1,eventhoughr1andr6arethesameexpression.TheNFAforr6is:start 7’ 8 aToobtaintheNFAforr7=r5r6,weapplytheconstructionofFig.3.41.Wemergestates7and70,yieldingtheNFAofFig.3.46.ContinuinginthisfashionwithnewNFA'sforthetwosubexpressionsbcalledr8andr10,weeventuallyconstructtheNFAfor(ajb)\u0003abbthatwe\frstmetinFig.3.34.2 start 01 23 45 678 a b ε ε ε ε ε ε ε ε aFigure3.46:NFAforr73.7.5E\u000eciencyofString-ProcessingAlgorithmsWeobservedthatAlgorithm3.18processesastringxintimeO(jxj),whileinSection3.7.3weconcludedthatwecouldsimulateanNFAintimeproportionaltotheproductofjxjandthesizeoftheNFA'stransitiongraph.Obviously,it164CHAPTER3.LEXICALANALYSISisfastertohaveaDFAtosimulatethananNFA,sowemightwonderwhetheritevermakessensetosimulateanNFA.OneissuethatmayfavoranNFAisthatthesubsetconstructioncan,intheworstcase,exponentiatethenumberofstates.Whileinprinciple,thenumberofDFAstatesdoesnotin\ruencetherunningtimeofAlgorithm3.18,shouldthenumberofstatesbecomesolargethatthetransitiontabledoesnot\ftinmainmemory,thenthetruerunningtimewouldhavetoincludediskI/Oandthereforerisenoticeably.Example3.25:Considerthefamilyoflanguagesdescribedbyregularexpres-sionsoftheformLn=(ajb)\u0003a(ajb)n\u00001,thatis,eachlanguageLnconsistsofstringsofa'sandb'ssuchthatthenthcharactertotheleftoftherightendholdsa.Ann+1-stateNFAiseasytoconstruct.Itstaysinitsinitialstateunderanyinput,butalsohastheoption,oninputa,ofgoingtostate1.Fromstate1,itgoestostate2onanyinput,andsoon,untilinstatenitaccepts.Figure3.47suggeststhisNFA. 12 start n0 a b a a, b a, b a, b. . .a, bFigure3.47:AnNFAthathasmanyfewerstatesthanthesmallestequivalentDFAHowever,anyDFAforthelanguageLnmusthaveatleast2nstates.Weshallnotprovethisfact,buttheideaisthatiftwostringsoflengthncangettheDFAtothesamestate,thenwecanexploitthelastpositionwherethestringsdi\u000ber(andthereforeonemusthavea,theotherb)tocontinuethestringsidentically,untiltheyarethesameinthelastn\u00001positions.TheDFAwillthenbeinastatewhereitmustbothacceptandnotaccept.Fortunately,aswementioned,itisrareforlexicalanalysistoinvolvepatternsofthistype,andwedonotexpecttoencounterDFA'swithoutlandishnumbersofstatesinpractice.2However,lexical-analyzergeneratorsandotherstring-processingsystemsoftenstartwitharegularexpression.WearefacedwithachoiceofconvertingtheregularexpressiontoanNFAorDFA.TheadditionalcostofgoingtoaDFAisthusthecostofexecutingAlgorithm3.20ontheNFA(onecouldgodirectlyfromaregularexpressiontoaDFA,buttheworkisessentiallythesame).Ifthestring-processorisonethatwillbeexecutedmanytimes,asisthecaseforlexicalanalysis,thenanycostofconvertingtoaDFAisworthwhile.However,inotherstring-processingapplications,suchasgrep,wheretheuserspeci\fesoneregularexpressionandoneorseveral\flestobesearchedforthepattern3.7.FROMREGULAREXPRESSIONSTOAUTOMATA165ofthatexpression,itmaybemoree\u000ecienttoskipthestepofconstructingaDFA,andsimulatetheNFAdirectly.LetusconsiderthecostofconvertingaregularexpressionrtoanNFAbyAlgorithm3.23.Akeystepisconstructingtheparsetreeforr.InChapter4weshallseeseveralmethodsthatarecapableofconstructingthisparsetreeinlineartime,thatis,intimeO(jrj),wherejrjstandsforthesizeofr|thesumofthenumberofoperatorsandoperandsinr.ItisalsoeasytocheckthateachofthebasisandinductiveconstructionsofAlgorithm3.23takesconstanttime,sotheentiretimespentbytheconversiontoanNFAisO(jrj).Moreover,asweobservedinSection3.7.4,theNFAweconstructhasatmost2jrjstatesandatmost4jrjtransitions.Thatis,intermsoftheanalysisinSection3.7.3,wehaven\u00142jrjandm\u00144jrj.Thus,simulatingthisNFAonaninputstringxtakestimeO(jrj\u0002jxj).ThistimedominatesthetimetakenbytheNFAconstruction,whichisO(jrj),andtherefore,weconcludethatitispossibletotakearegularexpressionrandstringx,andtellwhetherxisinL(r)intimeO(jrj\u0002jxj).Thetimetakenbythesubsetconstructionishighlydependentonthenum-berofstatestheresultingDFAhas.Tobegin,noticethatinthesubsetcon-structionofFig.3.32,thekeystep,theconstructionofasetofstatesUfromasetofstatesTandaninputsymbola,isverymuchliketheconstructionofanewsetofstatesfromtheoldsetofstatesintheNFAsimulationofAlgo-rithm3.22.Wealreadyconcludedthat,properlyimplemented,thissteptakestimeatmostproportionaltothenumberofstatesandtransitionsoftheNFA.SupposewestartwitharegularexpressionrandconvertittoanNFA.ThisNFAhasatmost2jrjstatesandatmost4jrjtransitions.Moreover,thereareatmostjrjinputsymbols.Thus,foreveryDFAstateconstructed,wemustconstructatmostjrjnewstates,andeachonetakesatmostO(jrj)time.ThetimetoconstructaDFAofsstatesisthusO(jrj2s).Inthecommoncasewheresisaboutjrj,thesubsetconstructiontakestimeO(jrj3).However,intheworstcase,asinExample3.25,thistimeisO(jrj22jrj).Figure3.48summarizestheoptionswhenoneisgivenaregularexpressionrandwantstoproducearecognizerthatwilltellwhetheroneormorestringsxareinL(r).166CHAPTER3.LEXICALANALYSISweclearlyprefertheDFA.However,incommandslikegrep,whereweruntheautomatonononlyonestring,wegenerallyprefertheNFA.Itisnotuntiljxjapproachesjrj3thatwewouldeventhinkaboutconvertingtoaDFA.Thereis,however,amixedstrategythatisaboutasgoodasthebetteroftheNFAandtheDFAstrategyforeachexpressionrandstringx.Starto\u000bsimulatingtheNFA,butrememberthesetsofNFAstates(i.e.,theDFAstates)andtheirtransitions,aswecomputethem.BeforeprocessingthecurrentsetofNFAstatesandthecurrentinputsymbol,checktoseewhetherwehavealreadycomputedthistransition,andusetheinformationifso.3.7.6ExercisesforSection3.7Exercise3.7.1:ConverttoDFA'stheNFA'sof:a)Fig.3.26.b)Fig.3.29.c)Fig.3.30.Exercise3.7.2:useAlgorithm3.22tosimulatetheNFA's:a)Fig.3.29.b)Fig.3.30.oninputaabb.Exercise3.7.3:Convertthefollowingregularexpressionstodeterministic\fniteautomata,usingalgorithms3.23and3.20:a)(ajb)\u0003.b)(a\u0003jb\u0003)\u0003.c)\u0000(\u000fja)b\u0003\u0001\u0003.d)(ajb)\u0003abb(ajb)\u0003.3.8DesignofaLexical-AnalyzerGeneratorInthissectionweshallapplythetechniquespresentedinSection3.7toseehowalexical-analyzergeneratorsuchasLexisarchitected.Wediscusstwoapproaches,basedonNFA'sandDFA's;thelatterisessentiallytheimplemen-tationofLex.3.8.DESIGNOFALEXICAL-ANALYZERGENERATOR1673.8.1TheStructureoftheGeneratedAnalyzerFigure3.49overviewsthearchitectureofalexicalanalyzergeneratedbyLex.Theprogramthatservesasthelexicalanalyzerincludesa\fxedprogramthatsimulatesanautomaton;atthispointweleaveopenwhetherthatautomatonisdeterministicornondeterministic.TherestofthelexicalanalyzerconsistsofcomponentsthatarecreatedfromtheLexprogrambyLexitself. compiler Lex Input buffer Automaton simulator Transition Actions table lexeme forwardlexemeBegin Lex programFigure3.49:ALexprogramisturnedintoatransitiontableandactions,whichareusedbya\fnite-automatonsimulatorThesecomponentsare:1.Atransitiontablefortheautomaton.2.ThosefunctionsthatarepasseddirectlythroughLextotheoutput(seeSection3.5.2).3.Theactionsfromtheinputprogram,whichappearasfragmentsofcodetobeinvokedattheappropriatetimebytheautomatonsimulator.Toconstructtheautomaton,webeginbytakingeachregular-expressionpatternintheLexprogramandconvertingit,usingAlgorithm3.23,toanNFA.Weneedasingleautomatonthatwillrecognizelexemesmatchinganyofthepatternsintheprogram,sowecombinealltheNFA'sintoonebyintroducinganewstartstatewith\u000f-transitionstoeachofthestartstatesoftheNFA'sNiforpatternpi.ThisconstructionisshowninFig.3.50.Example3.26:Weshallillustratetheideasofthissectionwiththefollowingsimple,abstractexample:168CHAPTER3.LEXICALANALYSIS N ( ( ( p p 0 n ) ) ) ε ε ε . . . p 1 2N s NFigure3.50:AnNFAconstructedfromaLexprogramafactionA1forpatternp1gabbfactionA2forpatternp2ga\u0003b+factionA3forpatternp3gNotethatthesethreepatternspresentsomecon\rictsofthetypediscussedinSection3.5.3.Inparticular,stringabbmatchesboththesecondandthirdpatterns,butweshallconsideritalexemeforpatternp2,sincethatpatternislisted\frstintheaboveLexprogram.Then,inputstringssuchasaabbb\u0001\u0001\u0001havemanypre\fxesthatmatchthethirdpattern.TheLexruleistotakethelongest,sowecontinuereadingb's,untilanotheraismet,whereuponwereportthelexemetobetheinitiala'sfollowedbyasmanyb'sasthereare.Figure3.51showsthreeNFA'sthatrecognizethethreepatterns.Thethirdisasimpli\fcationofwhatwouldcomeoutofAlgorithm3.23.Then,Fig.3.52showsthesethreeNFA'scombinedintoasingleNFAbytheadditionofstartstate0andthree\u000f-transitions.23.8.2PatternMatchingBasedonNFA'sIfthelexicalanalyzersimulatesanNFAsuchasthatofFig.3.52,thenitmustreadinputbeginningatthepointonitsinputwhichwehavereferredtoaslexemeBegin.Asitmovesthepointercalledforwardaheadintheinput,itcalculatesthesetofstatesitisinateachpoint,followingAlgorithm3.22.Eventually,theNFAsimulationreachesapointontheinputwheretherearenonextstates.Atthatpoint,thereisnohopethatanylongerpre\fxoftheinputwouldevergettheNFAtoanacceptingstate;rather,thesetofstateswillalwaysbeempty.Thus,wearereadytodecideonthelongestpre\fxthatisalexemematchingsomepattern.3.8.DESIGNOFALEXICAL-ANALYZERGENERATOR169 start start start 12 3456 78 a abb b a bFigure3.51:NFA'sfora,abb,anda\u0003b+ 12 3456 78 a abb b a b start ε ε ε 0Figure3.52:CombinedNFA 0 1 3 7 2 4 7 7 8 none aabaa a* b +Figure3.53:Sequenceofsetsofstatesenteredwhenprocessinginputaaba170CHAPTER3.LEXICALANALYSISWelookbackwardsinthesequenceofsetsofstates,untilwe\fndasetthatincludesoneormoreacceptingstates.Ifthereareseveralacceptingstatesinthatset,picktheoneassociatedwiththeearliestpatternpiinthelistfromtheLexprogram.Movetheforwardpointerbacktotheendofthelexeme,andperformtheactionAiassociatedwithpatternpi.Example3.27:SupposewehavethepatternsofExample3.26andtheinputbeginsaaba.Figure3.53showsthesetsofstatesoftheNFAofFig.3.52thatweenter,startingwith\u000f-closureoftheinitialstate0,whichisf0;1;3;7g,andproceedingfromthere.Afterreadingthefourthinputsymbol,weareinanemptysetofstates,sinceinFig.3.52,therearenotransitionsoutofstate8oninputa.Thus,weneedtobackup,lookingforasetofstatesthatincludesanac-ceptingstate.Noticethat,asindicatedinFig.3.53,afterreadingaweareinasetthatincludesstate2andthereforeindicatesthatthepatternahasbeenmatched.However,afterreadingaab,weareinstate8,whichindicatesthata\u0003b+hasbeenmatched;pre\fxaabisthelongestpre\fxthatgetsustoanacceptingstate.Wethereforeselectaabasthelexeme,andexecuteactionA3,whichshouldincludeareturntotheparserindicatingthatthetokenwhosepatternisp3=a\u0003b+hasbeenfound.23.8.3DFA'sforLexicalAnalyzersAnotherarchitecture,resemblingtheoutputofLex,istoconverttheNFAforallthepatternsintoanequivalentDFA,usingthesubsetconstructionofAlgorithm3.20.WithineachDFAstate,ifthereareoneormoreacceptingNFAstates,determinethe\frstpatternwhoseacceptingstateisrepresented,andmakethatpatterntheoutputoftheDFAstate.Example3.28:Figure3.54showsatransitiondiagrambasedontheDFAthatisconstructedbythesubsetconstructionfromtheNFAinFig.3.52.Theacceptingstatesarelabeledbythepatternthatisidenti\fedbythatstate.Forinstance,thestatef6;8ghastwoacceptingstates,correspondingtopatternsabbanda\u0003b+.Sincetheformerislisted\frst,thatisthepatternassociatedwithstatef6;8g.2WeusetheDFAinalexicalanalyzermuchaswedidtheNFA.WesimulatetheDFAuntilatsomepointthereisnonextstate(orstrictlyspeaking,thenextstateis;,thedeadstatecorrespondingtotheemptysetofNFAstates).Atthatpoint,webackupthroughthesequenceofstatesweenteredand,assoonaswemeetanacceptingDFAstate,weperformtheactionassociatedwiththepatternforthatstate.Example3.29:SupposetheDFAofFig.3.54isgiveninputabba.These-quenceofstatesenteredis0137;247;58;68,andatthe\fnalathereisnotran-sitionoutofstate68.Thus,weconsiderthesequencefromtheend,andinthiscase,68itselfisanacceptingstatethatreportspatternp2=abb.23.8.DESIGNOFALEXICAL-ANALYZERGENERATOR171 a*b +a*b + 0137 247 58688 start 7 b a a b a b bb b a abbFigure3.54:TransitiongraphforDFAhandlingthepatternsa,abb,anda\u0003b+3.8.4ImplementingtheLookaheadOperatorRecallfromSection3.5.4thattheLexlookaheadoperator/inaLexpatternr1=r2issometimesnecessary,becausethepatternr1foraparticulartokenmayneedtodescribesometrailingcontextr2inordertocorrectlyidentifytheactuallexeme.Whenconvertingthepatternr1=r2toanNFA,wetreatthe/asifitwere\u000f,sowedonotactuallylookfora/ontheinput.However,iftheNFArecognizesapre\fxxyoftheinputbu\u000berasmatchingthisregularexpression,theendofthelexemeisnotwheretheNFAentereditsacceptingstate.RathertheendoccurswhentheNFAentersastatessuchthat1.shasan\u000f-transitiononthe(imaginary)/,2.ThereisapathfromthestartstateoftheNFAtostatesthatspellsoutx.3.Thereisapathfromstatestotheacceptingstatethatspellsouty.4.xisaslongaspossibleforanyxysatisfyingconditions1-3.Ifthereisonlyone\u000f-transitionstateontheimaginary=intheNFA,thentheendofthelexemeoccurswhenthisstateisenteredforthelasttimeasthefollowingexampleillustrates.IftheNFAhasmorethanone\u000f-transitionstateontheimaginary=,thenthegeneralproblemof\fndingthecorrectstatesismuchmoredi\u000ecult.Example3.30:AnNFAforthepatternfortheFortranIFwithlookahead,fromExample3.13,isshowninFig.3.55.Noticethatthe\u000f-transitionfromstate2tostate3representsthelookaheadoperator.State6indicatesthepres-enceofthekeywordIF.However,we\fndthelexemeIFbyscanningbackwardstothelastoccurrenceofstate2,wheneverstate6isentered.2172CHAPTER3.LEXICALANALYSIS3.9.OPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS173expressionswouldthenhavesmaller\\DFA's\"thantheydounderthestandardde\fnitionofaDFA.Giveanexampleofonesuchregularexpression.!!Exercise3.8.4:DesignanalgorithmtorecognizeLex-lookaheadpatternsoftheformr1=r2,wherer1andr2areregularexpressions.Showhowyouralgo-rithmworksonthefollowinginputs:a)(abcdjabc)=db)(ajab)=bac)aa\u0003=a\u00033.9OptimizationofDFA-BasedPatternMatchersInthissectionwepresentthreealgorithmsthathavebeenusedtoimplementandoptimizepatternmatchersconstructedfromregularexpressions.1.The\frstalgorithmisusefulinaLexcompiler,becauseitconstructsaDFAdirectlyfromaregularexpression,withoutconstructinganinterme-diateNFA.TheresultingDFAalsomayhavefewerstatesthantheDFAconstructedviaanNFA.2.ThesecondalgorithmminimizesthenumberofstatesofanyDFA,bycombiningstatesthathavethesamefuturebehavior.Thealgorithmitselfisquitee\u000ecient,runningintimeO(nlogn),wherenisthenumberofstatesoftheDFA.3.Thethirdalgorithmproducesmorecompactrepresentationsoftransitiontablesthanthestandard,two-dimensionaltable.3.9.1ImportantStatesofanNFATobeginourdiscussionofhowtogodirectlyfromaregularexpressiontoaDFA,wemust\frstdissecttheNFAconstructionofAlgorithm3.23andconsidertherolesplayedbyvariousstates.WecallastateofanNFAimportantifithasanon-\u000fout-transition.Noticethatthesubsetconstruction(Algorithm3.20)usesonlytheimportantstatesinasetTwhenitcomputes\u000f-closure\u0000move(T;a)\u0001,thesetofstatesreachablefromToninputa.Thatis,thesetofstatesmove(s;a)isnonemptyonlyifstatesisimportant.Duringthesubsetconstruction,twosetsofNFAstatescanbeidenti\fed(treatedasiftheywerethesameset)ifthey:1.Havethesameimportantstates,and2.Eitherbothhaveacceptingstatesorneitherdoes.174CHAPTER3.LEXICALANALYSISWhentheNFAisconstructedfromaregularexpressionbyAlgorithm3.23,wecansaymoreabouttheimportantstates.Theonlyimportantstatesarethoseintroducedasinitialstatesinthebasispartforaparticularsymbolposi-tionintheregularexpression.Thatis,eachimportantstatecorrespondstoaparticularoperandintheregularexpression.TheconstructedNFAhasonlyoneacceptingstate,butthisstate,havingnoout-transitions,isnotanimportantstate.Byconcatenatingauniquerightendmarker#toaregularexpressionr,wegivetheacceptingstateforratransitionon#,makingitanimportantstateoftheNFAfor(r)#.Inotherwords,byusingtheaugmentedregularexpression(r)#,wecanforgetaboutacceptingstatesasthesubsetconstructionproceeds;whentheconstructioniscomplete,anystatewithatransitionon#mustbeanacceptingstate.TheimportantstatesoftheNFAcorresponddirectlytothepositionsintheregularexpressionthatholdsymbolsofthealphabet.Itisuseful,asweshallsee,topresenttheregularexpressionbyitssyntaxtree,wheretheleavescorrespondtooperandsandtheinteriornodescorrespondtooperators.Aninteriornodeiscalledacat-node,or-node,orstar-nodeifitislabeledbytheconcatenationoperator(dot),unionoperatorj,orstaroperator\u0003,respectively.WecanconstructasyntaxtreeforaregularexpressionjustaswedidforarithmeticexpressionsinSection2.5.1.Example3.31:Figure3.56showsthesyntaxtreefortheregularexpressionofourrunningexample.Cat-nodesarerepresentedbycircles.2 a 3 * 1 | b 2 a # 4 b 5 b 6 Figure3.56:Syntaxtreefor(ajb)\u0003abb#Leavesinasyntaxtreearelabeledby\u000forbyanalphabetsymbol.Toeachleafnotlabeled\u000f,weattachauniqueinteger.WerefertothisintegerastheOPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS175positionoftheleafandalsoasapositionofitssymbol.Notethatasymbolcanhaveseveralpositions;forinstance,ahaspositions1and3inFig.3.56.ThepositionsinthesyntaxtreecorrespondtotheimportantstatesoftheconstructedNFA.Example3.32:Figure3.57showstheNFAforthesameregularexpressionasFig.3.56,withtheimportantstatesnumberedandotherstatesrepresentedbyletters.ThenumberedstatesintheNFAandthepositionsinthesyntaxtreecorrespondinawayweshallsoonsee.2 AB 1 C 2 D E 3456 a b abbε ε ε ε ε ε ε ε start # FFigure3.57:NFAconstructedbyAlgorithm3.23for(ajb)\u0003abb#3.9.2FunctionsComputedFromtheSyntaxTreeToconstructaDFAdirectlyfromaregularexpression,weconstructitssyntaxtreeandthencomputefourfunctions:nullable,\frstpos,lastpos,andfollowpos,de\fnedasfollows.Eachde\fnitionreferstothesyntaxtreeforaparticularaugmentedregularexpression(r)#.1.nullable(n)istrueforasyntax-treenodenifandonlyifthesubexpressionrepresentedbynhas\u000finitslanguage.Thatis,thesubexpressioncanbe\\madenull\"ortheemptystring,eventhoughtheremaybeotherstringsitcanrepresentaswell.2.\frstpos(n)isthesetofpositionsinthesubtreerootedatnthatcorre-spondtothe\frstsymbolofatleastonestringinthelanguageofthesubexpressionrootedatn.3.lastpos(n)isthesetofpositionsinthesubtreerootedatnthatcorre-spondtothelastsymbolofatleastonestringinthelanguageofthesubexpressionrootedatn.176CHAPTER3.LEXICALANALYSIS4.followpos(p),forapositionp,isthesetofpositionsqintheentiresyntaxtreesuchthatthereissomestringx=a1a2\u0001\u0001\u0001aninL\u0000(r)#\u0001suchthatforsomei,thereisawaytoexplainthemembershipofxinL\u0000(r)#\u0001bymatchingaitopositionpofthesyntaxtreeandai+1topositionq.Example3.33:Considerthecat-nodeninFig.3.56thatcorrespondstotheexpression(ajb)\u0003a.Weclaimnullable(n)isfalse,sincethisnodegeneratesallstringsofa'sandb'sendinginana;itdoesnotgenerate\u000f.Ontheotherhand,thestar-nodebelowitisnullable;itgenerates\u000falongwithallotherstringsofa'sandb's.\frstpos(n)=f1;2;3g.Inatypicalgeneratedstringlikeaa,the\frstpositionofthestringcorrespondstoposition1ofthetree,andinastringlikeba,the\frstpositionofthestringcomesfromposition2ofthetree.However,whenthestringgeneratedbytheexpressionofnodenisjusta,thenthisacomesfromposition3.lastpos(n)=f3g.Thatis,nomatterwhatstringisgeneratedfromtheexpressionofnoden,thelastpositionistheafromposition3ofthetree.followposistrickiertocompute,butweshallseetherulesfordoingsoshortly.Hereisanexampleofthereasoning:followpos(1)=f1;2;3g.Considerastring\u0001\u0001\u0001ac\u0001\u0001\u0001,wheretheciseitheraorb,andtheacomesfromposition1.Thatis,thisaisoneofthosegeneratedbytheainexpression(ajb)\u0003.Thisacouldbefollowedbyanotheraorbcomingfromthesamesubexpression,inwhichcaseccomesfromposition1or2.Itisalsopossiblethatthisaisthelastinthestringgeneratedby(ajb)\u0003,inwhichcasethesymbolcmustbetheathatcomesfromposition3.Thus,1,2,and3areexactlythepositionsthatcanfollowposition1.23.9.3Computingnullable,\frstpos,andlastposWecancomputenullable,\frstpos,andlastposbyastraightforwardrecursionontheheightofthetree.Thebasisandinductiverulesfornullableand\frstposaresummarizedinFig.3.58.Therulesforlastposareessentiallythesameasfor\frstpos,buttherolesofchildrenc1andc2mustbeswappedintheruleforacat-node.Example3.34:OfallthenodesinFig.3.56onlythestar-nodeisnullable.WenotefromthetableofFig.3.58thatnoneoftheleavesarenullable,becausetheyeachcorrespondtonon-\u000foperands.Theor-nodeisnotnullable,becauseneitherofitschildrenis.Thestar-nodeisnullable,becauseeverystar-nodeisnullable.Finally,eachofthecat-nodes,havingatleastonenonnullablechild,isnotnullable.Thecomputationof\frstposandlastposforeachofthenodesisshowninFig.3.59,with\frstpos(n)totheleftofnoden,andlastpos(n)toitsright.Eachoftheleaveshasonlyitselffor\frstposandlastpos,asrequiredbytherulefornon-\u000fleavesinFig.3.58.Fortheor-node,wetaketheunionof\frstposattheOPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS177178CHAPTER3.LEXICALANALYSIS * | ab a b b # {2}{1}{1}{2} {1,2} {1,2} {1,2}{1,2} {1,2,3} {1,2,3} {1,2,3} {1,2,3} {3} {3} {3} {4} {4} {4} {5} {6} {5} {5} {6} {6}Figure3.59:\frstposandlastposfornodesinthesyntaxtreefor(ajb)\u0003abb#Wemustalsoapplyrule2tothestar-node.Thatruletellsuspositions1and2areinbothfollowpos(1)andfollowpos(2),sinceboth\frstposandlastposforthisnodearef1;2g.ThecompletesetsfollowposaresummarizedinFig.3.60.2OPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS179 1 2 3456Figure3.61:Directedgraphforthefunctionfollowpos3.Makethepositionassociatedwithendmarker#betheonlyacceptingstate.3.9.5ConvertingaRegularExpressionDirectlytoaDFAAlgorithm3.36:ConstructionofaDFAfromaregularexpressionr.INPUT:Aregularexpressionr.OUTPUT:ADFADthatrecognizesL(r).METHOD:1.ConstructasyntaxtreeTfromtheaugmentedregularexpression(r)#.2.Computenullable,\frstpos,lastpos,andfollowposforT,usingthemethodsofSections3.9.3and3.9.4.3.ConstructDstates,thesetofstatesofDFAD,andDtran,thetransitionfunctionforD,bytheprocedureofFig.3.62.ThestatesofDaresetsofpositionsinT.Initially,eachstateis\\unmarked,\"andastatebecomes\\marked\"justbeforeweconsideritsout-transitions.ThestartstateofDis\frstpos(n0),wherenoden0istherootofT.Theacceptingstatesarethosecontainingthepositionfortheendmarkersymbol#.2Example3.37:WecannowputtogetherthestepsofourrunningexampletoconstructaDFAfortheregularexpressionr=(ajb)\u0003abb.Thesyntaxtreefor(r)#appearedinFig.3.56.Weobservedthatforthistree,nullableistrueonlyforthestar-node,andweexhibited\frstposandlastposinFig.3.59.ThevaluesoffollowposappearinFig.3.60.Thevalueof\frstposfortherootofthetreeisf1;2;3g,sothissetisthestartstateofD.CallthissetofstatesA.WemustcomputeDtran[A;a]andDtran[A;b].AmongthepositionsofA,1and3correspondtoa,while2correspondstob.Thus,Dtran[A;a]=followpos(1)[followpos(3)=f1;2;3;4g,180CHAPTER3.LEXICALANALYSISinitializeDstatestocontainonlytheunmarkedstate\frstpos(n0),wheren0istherootofsyntaxtreeTfor(r)#;while(thereisanunmarkedstateSinDstates)fmarkS;for(eachinputsymbola)fletUbetheunionoffollowpos(p)forallpinSthatcorrespondtoa;if(UisnotinDstates)addUasanunmarkedstatetoDstates;Dtran[S;a]=U;ggFigure3.62:ConstructionofaDFAdirectlyfromaregularexpressionandDtran[A;b]=followpos(2)=f1;2;3g.ThelatterisstateA,andsodoesnothavetobeaddedtoDstates,buttheformer,B=f1;2;3;4g,isnew,soweaddittoDstatesandproceedtocomputeitstransitions.ThecompleteDFAisshowninFig.3.63.2 123 1234 1235 1236 start b b ab a a a bFigure3.63:DFAconstructedfromFig.3.573.9.6MinimizingtheNumberofStatesofaDFATherecanbemanyDFA'sthatrecognizethesamelanguage.Forinstance,notethattheDFA'sofFigs.3.36and3.63bothrecognizelanguageL\u0000(ajb)\u0003abb\u0001.Notonlydotheseautomatahavestateswithdi\u000berentnames,buttheydon'tevenhavethesamenumberofstates.IfweimplementalexicalanalyzerasaDFA,wewouldgenerallypreferaDFAwithasfewstatesaspossible,sinceeachstaterequiresentriesinthetablethatdescribesthelexicalanalyzer.Thematterofthenamesofstatesisminor.Weshallsaythattwoautomataarethesameuptostatenamesifonecanbetransformedintotheotherbydoingnothingmorethanchangingthenamesofstates.Figures3.36and3.63arenotthesameuptostatenames.However,thereisacloserelationshipbetweentheOPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS181statesofeach.StatesAandCofFig.3.36areactuallyequivalent,inthesensethatneitherisanacceptingstate,andonanyinputtheytransfertothesamestate|toBoninputaandtoConinputb.Moreover,bothstatesAandCbehavelikestate123ofFig.3.63.Likewise,stateBofFig.3.36behaveslikestate1234ofFig.3.63,stateDbehaveslikestate1235,andstateEbehaveslikestate1236.Itturnsoutthatthereisalwaysaunique(uptostatenames)minimumstateDFAforanyregularlanguage.Moreover,thisminimum-stateDFAcanbeconstructedfromanyDFAforthesamelanguagebygroupingsetsofequivalentstates.InthecaseofL\u0000(ajb)\u0003abb\u0001,Fig.3.63istheminimum-stateDFA,anditcanbeconstructedbypartitioningthestatesofFig.3.36asfA;CgfBgfDgfEg.InordertounderstandthealgorithmforcreatingthepartitionofstatesthatconvertsanyDFAintoitsminimum-stateequivalentDFA,weneedtoseehowinputstringsdistinguishstatesfromoneanother.Wesaythatstringxdistinguishesstatesfromstatetifexactlyoneofthestatesreachedfromsandtbyfollowingthepathwithlabelxisanacceptingstate.Statesisdistinguishablefromstatetifthereissomestringthatdistinguishesthem.Example3.38:Theemptystringdistinguishesanyacceptingstatefromanynonacceptingstate.InFig.3.36,thestringbbdistinguishesstateAfromstateB,sincebbtakesAtoanonacceptingstateC,buttakesBtoacceptingstateE.2Thestate-minimizationalgorithmworksbypartitioningthestatesofaDFAintogroupsofstatesthatcannotbedistinguished.Eachgroupofstatesisthenmergedintoasinglestateoftheminimum-stateDFA.Thealgorithmworksbymaintainingapartition,whosegroupsaresetsofstatesthathavenotyetbeendistinguished,whileanytwostatesfromdi\u000berentgroupsareknowntobedistinguishable.Whenthepartitioncannotbere\fnedfurtherbybreakinganygroupintosmallergroups,wehavetheminimum-stateDFA.Initially,thepartitionconsistsoftwogroups:theacceptingstatesandthenonacceptingstates.Thefundamentalstepistotakesomegroupofthecurrentpartition,sayA=fs1;s2;:::;skg,andsomeinputsymbola,andseewhetheracanbeusedtodistinguishbetweenanystatesingroupA.Weexaminethetransitionsfromeachofs1;s2;:::;skoninputa,andifthestatesreachedfallintotwoormoregroupsofthecurrentpartition,wesplitAintoacollectionofgroups,sothatsiandsjareinthesamegroupifandonlyiftheygotothesamegrouponinputa.Werepeatthisprocessofsplittinggroups,untilfornogroup,andfornoinputsymbol,canthegroupbesplitfurther.Theideaisformalizedinthenextalgorithm.Algorithm3.39:MinimizingthenumberofstatesofaDFA.INPUT:ADFADwithsetofstatesS,inputalphabet\u0006,startstates0,andsetofacceptingstatesF.OUTPUT:ADFAD0acceptingthesamelanguageasDandhavingasfewstatesaspossible.182CHAPTER3.LEXICALANALYSISOPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS183184CHAPTER3.LEXICALANALYSISInthenextround,wecansplitfA;B;CgintofA;CgfBg,sinceAandCeachgotoamemberoffA;B;Cgoninputb,whileBgoestoamemberofanothergroup,fDg.Thus,afterthesecondround,\u0005new=fA;CgfBgfDgfEg.Forthethirdround,wecannotsplittheoneremaininggroupwithmorethanonestate,sinceAandCeachgotothesamestate(andthereforetothesamegroup)oneachinput.Weconcludethat\u0005\fnal=fA;CgfBgfDgfEg.Now,weshallconstructtheminimum-stateDFA.Ithasfourstates,corre-spondingtothefourgroupsof\u0005\fnal,andletuspickA,B,D,andEastherepresentativesofthesegroups.TheinitialstateisA,andtheonlyacceptingstateisE.Figure3.65showsthetransitionfunctionfortheDFA.Forinstance,thetransitionfromstateEoninputbistoA,sinceintheoriginalDFA,EgoestoConinputb,andAistherepresentativeofC'sgroup.Forthesamereason,thetransitiononbfromstateAistoAitself,whileallothertransitionsareasinFig.3.36.2OPTIMIZATIONOFDFA-BASEDPATTERNMATCHERS185recognizingitsthreetokens.RecallthataDFAservingasalexicalanalyzerwillnormallydropthedeadstate,whilewetreatmissingtransitionsasasignaltoendtokenrecognition.23.9.8TradingTimeforSpaceinDFASimulationThesimplestandfastestwaytorepresentthetransitionfunctionofaDFAisatwo-dimensionaltableindexedbystatesandcharacters.Givenastateandnextinputcharacter,weaccessthearrayto\fndthenextstateandanyspecialactionwemusttake,e.g.,returningatokentotheparser.SinceatypicallexicalanalyzerhasseveralhundredstatesinitsDFAandinvolvestheASCIIalphabetof128inputcharacters,thearrayconsumeslessthanamegabyte.However,compilersarealsoappearinginverysmalldevices,whereevenamegabyteofstoragemaybetoomuch.Forsuchsituations,therearemanymethodsthatcanbeusedtocompactthetransitiontable.Forinstance,wecanrepresenteachstatebyalistoftransitions|thatis,character-statepairs|endedbyadefaultstatethatistobechosenforanyinputcharacternotonthelist.Ifwechooseasthedefaultthemostfrequentlyoccurringnextstate,wecanoftenreducetheamountofstorageneededbyalargefactor.Thereisamoresubtledatastructurethatallowsustocombinethespeedofarrayaccesswiththecompressionoflistswithdefaults.Wemaythinkofthisstructureasfourarrays,assuggestedinFig.3.66.5Thebasearrayisusedtodeterminethebaselocationoftheentriesforstates,whicharelocatedinthenextandcheckarrays.Thedefaultarrayisusedtodetermineanalternativebaselocationifthecheckarraytellsustheonegivenbybase[s]isinvalid. default base next check sq a rtFigure3.66:DatastructureforrepresentingtransitiontablesTocomputenextState(s;a),thetransitionforstatesoninputa,weexaminethenextandcheckentriesinlocationl=base[s]+a,wherecharacteraistreatedasaninteger,presumablyintherange0to127.Ifcheck[l]=s,thenthisentry186CHAPTER3.LEXICALANALYSISisvalid,andthenextstateforstatesoninputaisnext[l].Ifcheck[l]6=s,thenwedetermineanotherstatet=default[s]andrepeattheprocessasiftwerethecurrentstate.Moreformally,thefunctionnextStateisde\fnedasfollows:intnextState(s;a)fif(check[base[s]+a]==s)returnnext[base[s]+a];elsereturnnextState(default[s];a);gTheintendeduseofthestructureofFig.3.66istomakethenext-checkarraysshortbytakingadvantageofthesimilaritiesamongstates.Forinstance,statet,thedefaultforstates,mightbethestatethatsays\\weareworkingonanidenti\fer,\"likestate10inFig.3.14.Perhapsstatesisenteredafterseeingthelettersth,whichareapre\fxofkeywordthenaswellaspotentiallybeingthepre\fxofsomelexemeforanidenti\fer.Oninputcharactere,wemustgofromstatestoaspecialstatethatrememberswehaveseenthe,butotherwise,statesbehavesastdoes.Thus,wesetcheck[base[s]+e]tos(tocon\frmthatthisentryisvalidfors)andwesetnext[base[s]+e]tothestatethatremembersthe.Also,default[s]issettot.Whilewemaynotbeabletochoosebasevaluessothatnonext-checkentriesremainunused,experiencehasshownthatthesimplestrategyofassigningbasevaluestostatesinturn,andassigningeachbase[s]valuethelowestintegersothatthespecialentriesforstatesarenotpreviouslyoccupiedutilizeslittlemorespacethantheminimumpossible.3.9.9ExercisesforSection3.9Exercise3.9.1:ExtendthetableofFig.3.58toincludetheoperators(a)?and(b)+.Exercise3.9.2:UseAlgorithm3.36toconverttheregularexpressionsofEx-ercise3.7.3directlytodeterministic\fniteautomata.!Exercise3.9.3:Wecanprovethattworegularexpressionsareequivalentbyshowingthattheirminimum-stateDFA'sarethesameuptorenamingofstates.Showinthiswaythatthefollowingregularexpressions:(ajb)\u0003,(a\u0003jb\u0003)\u0003,and\u0000(\u000fja)b\u0003\u0001\u0003areallequivalent.Note:YoumayhaveconstructedtheDFA'sfortheseexpressionsinresponsetoExercise3.7.3.!Exercise3.9.4:Constructtheminimum-stateDFA'sforthefollowingregularexpressions:a)(ajb)\u0003a(ajb).b)(ajb)\u0003a(ajb)(ajb).c)(ajb)\u0003a(ajb)(ajb)(ajb).3.10.SUMMARYOFCHAPTER3187Doyouseeapattern?!!Exercise3.9.5:TomakeformaltheinformalclaimofExample3.25,showthatanydeterministic\fniteautomatonfortheregularexpression(ajb)\u0003a(ajb)(ajb)\u0001\u0001\u0001(ajb)where(ajb)appearsn\u00001timesattheend,musthaveatleast2nstates.Hint:ObservethepatterninExercise3.9.4.Whatconditionregardingthehistoryofinputsdoeseachstaterepresent?3.10SummaryofChapter3 ✦Tokens.Thelexicalanalyzerscansthesourceprogramandproducesasoutputasequenceoftokens,whicharenormallypassed,oneatatimetotheparser.Sometokensmayconsistonlyofatokennamewhileothersmayalsohaveanassociatedlexicalvaluethatgivesinformationabouttheparticularinstanceofthetokenthathasbeenfoundontheinput. ✦Lexemes.Eachtimethelexicalanalyzerreturnsatokentotheparser,ithasanassociatedlexeme|thesequenceofinputcharactersthatthetokenrepresents. ✦Bu\u000bering.Becauseitisoftennecessarytoscanaheadontheinputinordertoseewherethenextlexemeends,itisusuallynecessaryforthelexicalanalyzertobu\u000beritsinput.Usingapairofbu\u000berscycliclyandendingeachbu\u000ber'scontentswithasentinelthatwarnsofitsendaretwotechniquesthatacceleratetheprocessofscanningtheinput. ✦Patterns.Eachtokenhasapatternthatdescribeswhichsequencesofcharacterscanformthelexemescorrespondingtothattoken.Thesetofwords,orstringsofcharacters,thatmatchagivenpatterniscalledalanguage. ✦RegularExpressions.Theseexpressionsarecommonlyusedtodescribepatterns.Regularexpressionsarebuiltfromsinglecharacters,usingunion,concatenation,andtheKleeneclosure,orany-number-of,oper-ator. ✦RegularDe\fnitions.Complexcollectionsoflanguages,suchasthepat-ternsthatdescribethetokensofaprogramminglanguage,areoftende-\fnedbyaregularde\fnition,whichisasequenceofstatementsthateachde\fneonevariabletostandforsomeregularexpression.Theregularex-pressionforonevariablecanusepreviouslyde\fnedvariablesinitsregularexpression.188CHAPTER3.LEXICALANALYSIS ✦ExtendedRegular-ExpressionNotation.Anumberofadditionalopera-torsmayappearasshorthandsinregularexpressions,tomakeiteasiertoexpresspatterns.Examplesincludethe+operator(one-or-more-of),?(zero-or-one-of),andcharacterclasses(theunionofthestringseachconsistingofoneofthecharacters). ✦TransitionDiagrams.Thebehaviorofalexicalanalyzercanoftenbedescribedbyatransitiondiagram.Thesediagramshavestates,eachofwhichrepresentssomethingaboutthehistoryofthecharactersseenduringthecurrentsearchforalexemethatmatchesoneofthepossiblepatterns.Therearearrows,ortransitions,fromonestatetoanother,eachofwhichindicatesthepossiblenextinputcharactersthatcausethelexicalanalyzertomakethatchangeofstate. ✦FiniteAutomata.Theseareaformalizationoftransitiondiagramsthatincludeadesignationofastartstateandoneormoreacceptingstates,aswellasthesetofstates,inputcharacters,andtransitionsamongstates.Acceptingstatesindicatethatthelexemeforsometokenhasbeenfound.Unliketransitiondiagrams,\fniteautomatacanmaketransitionsonemptyinputaswellasoninputcharacters. ✦DeterministicFiniteAutomata.ADFAisaspecialkindof\fniteau-tomatonthathasexactlyonetransitionoutofeachstateforeachinputsymbol.Also,transitionsonemptyinputaredisallowed.TheDFAiseasilysimulatedandmakesagoodimplementationofalexicalanalyzer,similartoatransitiondiagram. ✦NondeterministicFiniteAutomata.AutomatathatarenotDFA'sarecallednondeterministic.NFA'softenareeasiertodesignthanareDFA's.AnotherpossiblearchitectureforalexicalanalyzeristotabulateallthestatesthatNFA'sforeachofthepossiblepatternscanbein,aswescantheinputcharacters. ✦ConversionAmongPatternRepresentations.ItispossibletoconvertanyregularexpressionintoanNFAofaboutthesamesize,recognizingthesamelanguageastheregularexpressionde\fnes.Further,anyNFAcanbeconvertedtoaDFAforthesamepattern,althoughintheworstcase(neverencounteredincommonprogramminglanguages)thesizeoftheautomatoncangrowexponentially.Itisalsopossibletoconvertanynon-deterministicordeterministic\fniteautomatonintoaregularexpressionthatde\fnesthesamelanguagerecognizedbythe\fniteautomaton. ✦Lex.Thereisafamilyofsoftwaresystems,includingLexandFlex,thatarelexical-analyzergenerators.Theuserspeci\festhepatternsfortokensusinganextendedregular-expressionnotation.Lexconvertstheseexpressionsintoalexicalanalyzerthatisessentiallyadeterministic\fniteautomatonthatrecognizesanyofthepatterns.3.11.REFERENCESFORCHAPTER3189 ✦MinimizationofFiniteAutomata.ForeveryDFAthereisaminimum-stateDFAacceptingthesamelanguage.Moreover,theminimum-stateDFAforagivenlanguageisuniqueexceptforthenamesgiventothevariousstates.3.11ReferencesforChapter3Regularexpressionswere\frstdevelopedbyKleeneinthe1950's[9].KleenewasinterestedindescribingtheeventsthatcouldberepresentedbyMcCulloughandPitts'[12]\fnite-automatonmodelofneuralactivity.Sincethattimeregularexpressionsand\fniteautomatahavebecomewidelyusedincomputerscience.RegularexpressionsinvariousformswereusedfromtheoutsetinmanypopularUnixutilitiessuchasawk,ed,egrep,grep,lex,sed,sh,andvi.TheIEEE1003andISO/IEC9945standardsdocumentsforthePortableOperatingSystemInterface(POSIX)de\fnethePOSIXextendedregularexpressionswhicharesimilartotheoriginalUnixregularexpressionswithafewexceptionssuchasmnemonicrepresentationsforcharacterclasses.ManyscriptinglanguagessuchasPerl,Python,andTclhaveadoptedregularexpressionsbutoftenwithincompatibleextensions.Thefamiliar\fnite-automatonmodelandtheminimizationof\fniteau-tomata,asinAlgorithm3.39,comefromHu\u000bman[6]andMoore[14].Non-deterministic\fniteautomatawere\frstproposedbyRabinandScott[15];thesubsetconstructionofAlgorithm3.20,showingtheequivalenceofdeterministicandnondeterministic\fniteautomata,isfromthere.McNaughtonandYamada[13]\frstgaveanalgorithmtoconvertregularexpressionsdirectlytodeterministic\fniteautomata.Algorithm3.36describedinSection3.9was\frstusedbyAhoincreatingtheUnixregular-expressionmatchingtoolegrep.Thisalgorithmwasalsousedintheregular-expressionpatternmatchingroutinesinawk[3].TheapproachofusingnondeterministicautomataasanintermediaryisdueThompson[17].Thelatterpaperalsocon-tainsthealgorithmforthedirectsimulationofnondeterministic\fniteautomata(Algorithm3.22),whichwasusedbyThompsoninthetexteditorQED.Leskdevelopedthe\frstversionofLexandthenLeskandSchmidtcreatedasecondversionusingAlgorithm3.36[10].ManyvariantsofLexhavebeensubsequentlyimplemented.TheGNUversion,Flex,canbedownloaded,alongwithdocumentationat[4].PopularJavaversionsofLexincludeJFlex[7]andJLex[8].TheKMPalgorithm,discussedintheexercisestoSection3.4justpriortoExercise3.4.3,isfrom[11].Itsgeneralizationtomanykeywordsappearsin[2]andwasusedbyAhointhe\frstimplementationoftheUnixutilityfgrep.Thetheoryof\fniteautomataandregularexpressionsiscoveredin[5].Asurveyofstring-matchingtechniquesisin[1].1.Aho,A.V.,\\Algorithmsfor\fndingpatternsinstrings,\"inHandbookofTheoreticalComputerScience(J.vanLeeuwen,ed.),Vol.A,Ch.5,MIT190CHAPTER3.LEXICALANALYSISPress,Cambridge,1990.2.Aho,A.V.andM.J.Corasick,\\E\u000ecientstringmatching:anaidtobibliographicsearch,\"Comm.ACM18:6(1975),pp.333{340.3.Aho,A.V.,B.W.Kernighan,andP.J.Weinberger,TheAWKProgram-mingLanguage,Addison-Wesley,Boston,MA,1988.4.Flexhomepagehttp://www.gnu.org/software/flex/,FreeSoftwareFoundation.5.Hopcroft,J.E.,R.Motwani,andJ.D.Ullman,IntroductiontoAutomataTheory,Languages,andComputation,Addison-Wesley,BostonMA,2006.6.Hu\u000bman,D.A.,\\Thesynthesisofsequentialmachines,\"J.FranklinInst.257(1954),pp.3{4,161,190,275{303.7.JFlexhomepagehttp://jflex.de/.8.http://www.cs.princeton.edu/~appel/modern/java/JLex.9.Kleene,S.C.,\\Representationofeventsinnervenets,\"in[16],pp.3{40.10.Lesk,M.E.,\\Lex{alexicalanalyzergenerator,\"ComputingScienceTech.Report39,BellLaboratories,MurrayHill,NJ,1975.AsimilardocumentwiththesametitlebutwithE.Schmidtasacoauthor,appearsinVol.2oftheUnixProgrammer'sManual,Belllaboratories,MurrayHillNJ,1975;seehttp://dinosaur.compilertools.net/lex/index.html.11.Knuth,D.E.,J.H.Morris,andV.R.Pratt,\\Fastpatternmatchinginstrings,\"SIAMJ.Computing6:2(1977),pp.323{350.12.McCullough,W.S.andW.Pitts,\\Alogicalcalculusoftheideasimma-nentinnervousactivity,\"Bull.Math.Biophysics5(1943),pp.115{133.13.McNaughton,R.andH.Yamada,\\Regularexpressionsandstategraphsforautomata,\"IRETrans.onElectronicComputersEC-9:1(1960),pp.38{47.14.Moore,E.F.,\\Gedankenexperimentsonsequentialmachines,\"in[16],pp.129{153.15.Rabin,M.O.andD.Scott,\\Finiteautomataandtheirdecisionprob-lems,\"IBMJ.Res.andDevel.3:2(1959),pp.114{125.16.Shannon,C.andJ.McCarthy(eds.),AutomataStudies,PrincetonUniv.Press,1956.17.Thompson,K.,\\Regularexpressionsearchalgorithm,\"Comm.ACM11:6(1968),pp.419{422.Chapter4SyntaxAnalysisThischapterisdevotedtoparsingmethodsthataretypicallyusedincompilers.We\frstpresentthebasicconcepts,thentechniquessuitableforhandimplemen-tation,and\fnallyalgorithmsthathavebeenusedinautomatedtools.Sinceprogramsmaycontainsyntacticerrors,wediscussextensionsoftheparsingmethodsforrecoveryfromcommonerrors.Bydesign,everyprogramminglanguagehaspreciserulesthatprescribethesyntacticstructureofwell-formedprograms.InC,forexample,aprogramismadeupoffunctions,afunctionoutofdeclarationsandstatements,astatementoutofexpressions,andsoon.Thesyntaxofprogramminglanguageconstructscanbespeci\fedbycontext-freegrammarsorBNF(Backus-NaurForm)nota-tion,introducedinSection2.2.Grammarso\u000bersigni\fcantbene\ftsforbothlanguagedesignersandcompilerwriters.\u000fAgrammargivesaprecise,yeteasy-to-understand,syntacticspeci\fcationofaprogramminglanguage.\u000fFromcertainclassesofgrammars,wecanconstructautomaticallyane\u000e-cientparserthatdeterminesthesyntacticstructureofasourceprogram.Asasidebene\ft,theparser-constructionprocesscanrevealsyntacticambiguitiesandtroublespotsthatmighthaveslippedthroughtheinitialdesignphaseofalanguage.\u000fThestructureimpartedtoalanguagebyaproperlydesignedgrammarisusefulfortranslatingsourceprogramsintocorrectobjectcodeandfordetectingerrors.\u000fAgrammarallowsalanguagetobeevolvedordevelopediteratively,byaddingnewconstructstoperformnewtasks.Thesenewconstructscanbeintegratedmoreeasilyintoanimplementationthatfollowsthegram-maticalstructureofthelanguage.191192CHAPTER4.SYNTAXANALYSIS4.1IntroductionInthissection,weexaminethewaytheparser\ftsintoatypicalcompiler.Wethenlookattypicalgrammarsforarithmeticexpressions.Grammarsforex-pressionssu\u000eceforillustratingtheessenceofparsing,sinceparsingtechniquesforexpressionscarryovertomostprogrammingconstructs.Thissectionendswithadiscussionoferrorhandling,sincetheparsermustrespondgracefullyto\fndingthatitsinputcannotbegeneratedbyitsgrammar.4.1.1TheRoleoftheParserInourcompilermodel,theparserobtainsastringoftokensfromthelexicalanalyzer,asshowninFig.4.1,andveri\festhatthestringoftokennamescanbegeneratedbythegrammarforthesourcelanguage.Weexpecttheparsertoreportanysyntaxerrorsinanintelligiblefashionandtorecoverfromcommonlyoccurringerrorstocontinueprocessingtheremainderoftheprogram.Conceptually,forwell-formedprograms,theparserconstructsaparsetreeandpassesittotherestofthecompilerforfurtherprocessing.Infact,theparsetreeneednotbeconstructedexplicitly,sincecheckingandtranslationactionscanbeinterspersedwithparsing,asweshallsee.Thus,theparserandtherestofthefrontendcouldwellbeimplementedbyasinglemodule.sourceprogramLexicalAnalyzertokengetnexttokenParserparsetreeRestofFrontEndintermediaterepresentationSymbolTableFigure4.1:PositionofparserincompilermodelTherearethreegeneraltypesofparsersforgrammars:universal,top-down,andbottom-up.UniversalparsingmethodssuchastheCocke-Younger-KasamialgorithmandEarley'salgorithmcanparseanygrammar(seethebibliographicnotes).Thesegeneralmethodsare,however,tooine\u000ecienttouseinproductioncompilers.Themethodscommonlyusedincompilerscanbeclassi\fedasbeingeithertop-downorbottom-up.Asimpliedbytheirnames,top-downmethodsbuildparsetreesfromthetop(root)tothebottom(leaves),whilebottom-upmethodsstartfromtheleavesandworktheirwayuptotheroot.Ineithercase,theinputtotheparserisscannedfromlefttoright,onesymbolatatime.4.1.INTRODUCTION193Themoste\u000ecienttop-downandbottom-upmethodsworkonlyforsub-classesofgrammars,butseveraloftheseclasses,particularly,LLandLRgram-mars,areexpressiveenoughtodescribemostofthesyntacticconstructsinmodernprogramminglanguages.ParsersimplementedbyhandoftenuseLLgrammars;forexample,thepredictive-parsingapproachofSection2.4.2worksforLLgrammars.ParsersforthelargerclassofLRgrammarsareusuallyconstructedusingautomatedtools.Inthischapter,weassumethattheoutputoftheparserissomerepresent-ationoftheparsetreeforthestreamoftokensthatcomesfromthelexicalanalyzer.Inpractice,thereareanumberoftasksthatmightbeconductedduringparsing,suchascollectinginformationaboutvarioustokensintothesymboltable,performingtypecheckingandotherkindsofsemanticanalysis,andgeneratingintermediatecode.Wehavelumpedalloftheseactivitiesintothe\\restofthefrontend\"boxinFig.4.1.Theseactivitieswillbecoveredindetailinsubsequentchapters.4.1.2RepresentativeGrammarsSomeofthegrammarsthatwillbeexaminedinthischapterarepresentedhereforeaseofreference.Constructsthatbeginwithkeywordslikewhileorint,arerelativelyeasytoparse,becausethekeywordguidesthechoiceofthegrammarproductionthatmustbeappliedtomatchtheinput.Wethereforeconcentrateonexpressions,whichpresentmoreofchallenge,becauseoftheassociativityandprecedenceofoperators.Associativityandprecedencearecapturedinthefollowinggrammar,whichissimilartoonesusedinChapter2fordescribingexpressions,terms,andfactors.Erepresentsexpressionsconsistingoftermsseparatedby+signs,Trepresentstermsconsistingoffactorsseparatedby*signs,andFrepresentsfactorsthatcanbeeitherparenthesizedexpressionsoridenti\fers:E!E+TjTT!T\u0003FjFF!(E)jid(4.1)Expressiongrammar(4.1)belongstotheclassofLRgrammarsthataresuitableforbottom-upparsing.Thisgrammarcanbeadaptedtohandleadditionaloperatorsandadditionallevelsofprecedence.However,itcannotbeusedfortop-downparsingbecauseitisleftrecursive.Thefollowingnon-left-recursivevariantoftheexpressiongrammar(4.1)willbeusedfortop-downparsing:E!TE0E0!+TE0j\u000fT!FT0T0!\u0003FT0j\u000fF!(E)jid(4.2)194CHAPTER4.SYNTAXANALYSISThefollowinggrammartreats+and\u0003alike,soitisusefulforillustratingtechniquesforhandlingambiguitiesduringparsing:E!E+EjE\u0003Ej(E)jid(4.3)Here,Erepresentsexpressionsofalltypes.Grammar(4.3)permitsmorethanoneparsetreeforexpressionslikea+b\u0003c.4.1.3SyntaxErrorHandlingTheremainderofthissectionconsidersthenatureofsyntacticerrorsandgen-eralstrategiesforerrorrecovery.Twoofthesestrategies,calledpanic-modeandphrase-levelrecovery,arediscussedinmoredetailinconnectionwithspeci\fcparsingmethods.Ifacompilerhadtoprocessonlycorrectprograms,itsdesignandimplemen-tationwouldbesimpli\fedgreatly.However,acompilerisexpectedtoassisttheprogrammerinlocatingandtrackingdownerrorsthatinevitablycreepintoprograms,despitetheprogrammer'sbeste\u000borts.Strikingly,fewlanguageshavebeendesignedwitherrorhandlinginmind,eventhougherrorsaresocommon-place.Ourcivilizationwouldberadicallydi\u000berentifspokenlanguageshadthesamerequirementsforsyntacticaccuracyascomputerlanguages.Mostprogramminglanguagespeci\fcationsdonotdescribehowacompilershouldrespondtoerrors;errorhandlingislefttothecompilerdesigner.Planningtheerrorhandlingrightfromthestartcanbothsimplifythestructureofacompilerandimproveitshandlingoferrors.Commonprogrammingerrorscanoccuratmanydi\u000berentlevels.\u000fLexicalerrorsincludemisspellingsofidenti\fers,keywords,oroperators|e.g.,theuseofanidenti\ferelipseSizeinsteadofellipseSize|andmissingquotesaroundtextintendedasastring.\u000fSyntacticerrorsincludemisplacedsemicolonsorextraormissingbraces;thatis,\\{\"or\\}.\"Asanotherexample,inCorJava,theappearanceofacasestatementwithoutanenclosingswitchisasyntacticerror(however,thissituationisusuallyallowedbytheparserandcaughtlaterintheprocessing,asthecompilerattemptstogeneratecode).\u000fSemanticerrorsincludetypemismatchesbetweenoperatorsandoperands,e.g.,thereturnofavalueinaJavamethodwithresulttypevoid.\u000fLogicalerrorscanbeanythingfromincorrectreasoningonthepartoftheprogrammertotheuseinaCprogramoftheassignmentoperator=insteadofthecomparisonoperator==.Theprogramcontaining=maybewellformed;however,itmaynotre\recttheprogrammer'sintent.Theprecisionofparsingmethodsallowssyntacticerrorstobedetectedverye\u000eciently.Severalparsingmethods,suchastheLLandLRmethods,detect4.1.INTRODUCTION195anerrorassoonaspossible;thatis,whenthestreamoftokensfromthelexicalanalyzercannotbeparsedfurtheraccordingtothegrammarforthelanguage.Moreprecisely,theyhavetheviable-pre\fxproperty,meaningthattheydetectthatanerrorhasoccurredassoonastheyseeapre\fxoftheinputthatcannotbecompletedtoformastringinthelanguage.Anotherreasonforemphasizingerrorrecoveryduringparsingisthatmanyerrorsappearsyntactic,whatevertheircause,andareexposedwhenparsingcannotcontinue.Afewsemanticerrors,suchastypemismatches,canalsobedetectede\u000eciently;however,accuratedetectionofsemanticandlogicalerrorsatcompiletimeisingeneraladi\u000eculttask.Theerrorhandlerinaparserhasgoalsthataresimpletostatebutchal-lengingtorealize:\u000fReportthepresenceoferrorsclearlyandaccurately.\u000fRecoverfromeacherrorquicklyenoughtodetectsubsequenterrors.\u000fAddminimaloverheadtotheprocessingofcorrectprograms.Fortunately,commonerrorsaresimpleones,andarelativelystraightforwarderror-handlingmechanismoftensu\u000eces.Howshouldanerrorhandlerreportthepresenceofanerror?Attheveryleast,itmustreporttheplaceinthesourceprogramwhereanerrorisdetected,becausethereisagoodchancethattheactualerroroccurredwithinthepreviousfewtokens.Acommonstrategyistoprinttheo\u000bendinglinewithapointertothepositionatwhichanerrorisdetected.4.1.4Error-RecoveryStrategiesOnceanerrorisdetected,howshouldtheparserrecover?Althoughnostrategyhasprovenitselfuniversallyacceptable,afewmethodshavebroadapplicabil-ity.Thesimplestapproachisfortheparsertoquitwithaninformativeerrormessagewhenitdetectsthe\frsterror.Additionalerrorsareoftenuncoverediftheparsercanrestoreitselftoastatewhereprocessingoftheinputcancon-tinuewithreasonablehopesthatthefurtherprocessingwillprovidemeaningfuldiagnosticinformation.Iferrorspileup,itisbetterforthecompilertogiveupafterexceedingsomeerrorlimitthantoproduceanannoyingavalancheof\\spurious\"errors.Thebalanceofthissectionisdevotedtothefollowingrecoverystrategies:panic-mode,phrase-level,error-productions,andglobal-correction.Panic-ModeRecoveryWiththismethod,ondiscoveringanerror,theparserdiscardsinputsymbolsoneatatimeuntiloneofadesignatedsetofsynchronizingtokensisfound.Thesynchronizingtokensareusuallydelimiters,suchassemicolonor},whoseroleinthesourceprogramisclearandunambiguous.Thecompilerdesigner196CHAPTER4.SYNTAXANALYSISmustselectthesynchronizingtokensappropriateforthesourcelanguage.Whilepanic-modecorrectionoftenskipsaconsiderableamountofinputwithoutcheck-ingitforadditionalerrors,ithastheadvantageofsimplicity,and,unlikesomemethodstobeconsideredlater,isguaranteednottogointoanin\fniteloop.Phrase-LevelRecoveryOndiscoveringanerror,aparsermayperformlocalcorrectionontheremaininginput;thatis,itmayreplaceapre\fxoftheremaininginputbysomestringthatallowstheparsertocontinue.Atypicallocalcorrectionistoreplaceacommabyasemicolon,deleteanextraneoussemicolon,orinsertamissingsemicolon.Thechoiceofthelocalcorrectionislefttothecompilerdesigner.Ofcourse,wemustbecarefultochoosereplacementsthatdonotleadtoin\fniteloops,aswouldbethecase,forexample,ifwealwaysinsertedsomethingontheinputaheadofthecurrentinputsymbol.Phrase-levelreplacementhasbeenusedinseveralerror-repairingcompilers,asitcancorrectanyinputstring.Itsmajordrawbackisthedi\u000ecultyithasincopingwithsituationsinwhichtheactualerrorhasoccurredbeforethepointofdetection.ErrorProductionsByanticipatingcommonerrorsthatmightbeencountered,wecanaugmentthegrammarforthelanguageathandwithproductionsthatgeneratetheerroneousconstructs.Aparserconstructedfromagrammaraugmentedbytheseerrorproductionsdetectstheanticipatederrorswhenanerrorproductionisusedduringparsing.Theparsercanthengenerateappropriateerrordiagnosticsabouttheerroneousconstructthathasbeenrecognizedintheinput.GlobalCorrectionIdeally,wewouldlikeacompilertomakeasfewchangesaspossibleinprocessinganincorrectinputstring.Therearealgorithmsforchoosingaminimalsequenceofchangestoobtainagloballyleast-costcorrection.GivenanincorrectinputstringxandgrammarG,thesealgorithmswill\fndaparsetreeforarelatedstringy,suchthatthenumberofinsertions,deletions,andchangesoftokensrequiredtotransformxintoyisassmallaspossible.Unfortunately,thesemethodsareingeneraltoocostlytoimplementintermsoftimeandspace,sothesetechniquesarecurrentlyonlyoftheoreticalinterest.Donotethataclosestcorrectprogrammaynotbewhattheprogrammerhadinmind.Nevertheless,thenotionofleast-costcorrectionprovidesayardstickforevaluatingerror-recoverytechniques,andhasbeenusedfor\fndingoptimalreplacementstringsforphrase-levelrecovery.4.2.CONTEXT-FREEGRAMMARS1974.2Context-FreeGrammarsGrammarswereintroducedinSection2.2tosystematicallydescribethesyntaxofprogramminglanguageconstructslikeexpressionsandstatements.Usingasyntacticvariablestmttodenotestatementsandvariableexprtodenoteexpressions,theproductionstmt!if(expr)stmtelsestmt(4.4)speci\festhestructureofthisformofconditionalstatement.Otherproductionsthende\fnepreciselywhatanexprisandwhatelseastmtcanbe.Thissectionreviewsthede\fnitionofacontext-freegrammarandintroducesterminologyfortalkingaboutparsing.Inparticular,thenotionofderivationsisveryhelpfulfordiscussingtheorderinwhichproductionsareappliedduringparsing.4.2.1TheFormalDe\fnitionofaContext-FreeGrammarFromSection2.2,acontext-freegrammar(grammarforshort)consistsofter-minals,nonterminals,astartsymbol,andproductions.1.Terminalsarethebasicsymbolsfromwhichstringsareformed.Theterm\\tokenname\"isasynonymfor\\terminal\"andfrequentlywewillusetheword\\token\"forterminalwhenitisclearthatwearetalkingaboutjustthetokenname.Weassumethattheterminalsarethe\frstcomponentsofthetokensoutputbythelexicalanalyzer.In(4.4),theterminalsarethekeywordsifandelseandthesymbols\\(\"and\\).\"2.Nonterminalsaresyntacticvariablesthatdenotesetsofstrings.In(4.4),stmtandexprarenonterminals.Thesetsofstringsdenotedbynontermi-nalshelpde\fnethelanguagegeneratedbythegrammar.Nonterminalsimposeahierarchicalstructureonthelanguagethatiskeytosyntaxanalysisandtranslation.3.Inagrammar,onenonterminalisdistinguishedasthestartsymbol,andthesetofstringsitdenotesisthelanguagegeneratedbythegrammar.Conventionally,theproductionsforthestartsymbolarelisted\frst.4.Theproductionsofagrammarspecifythemannerinwhichthetermi-nalsandnonterminalscanbecombinedtoformstrings.Eachproductionconsistsof:(a)Anonterminalcalledtheheadorleftsideoftheproduction;thisproductionde\fnessomeofthestringsdenotedbythehead.(b)Thesymbol!.Sometimes::=hasbeenusedinplaceofthearrow.(c)Abodyorrightsideconsistingofzeroormoreterminalsandnon-terminals.Thecomponentsofthebodydescribeonewayinwhichstringsofthenonterminalattheheadcanbeconstructed.198CHAPTER4.SYNTAXANALYSISExample4.5:ThegrammarinFig.4.2de\fnessimplearithmeticexpressions.Inthisgrammar,theterminalsymbolsareid+-*/()Thenonterminalsymbolsareexpression,termandfactor,andexpressionisthestartsymbol2expression!expression+termexpression!expression-termexpression!termterm!term*factorterm!term/factorterm!factorfactor!(expression)factor!idFigure4.2:Grammarforsimplearithmeticexpressions4.2.2NotationalConventionsToavoidalwayshavingtostatethat\\thesearetheterminals,\"\\thesearethenonterminals,\"andsoon,thefollowingnotationalconventionsforgrammarswillbeusedthroughouttheremainderofthisbook.1.Thesesymbolsareterminals:(a)Lowercaselettersearlyinthealphabet,suchasa,b,c.(b)Operatorsymbolssuchas+,\u0003,andsoon.(c)Punctuationsymbolssuchasparentheses,comma,andsoon.(d)Thedigits0;1;:::;9.(e)Boldfacestringssuchasidorif,eachofwhichrepresentsasingleterminalsymbol.2.Thesesymbolsarenonterminals:(a)Uppercaselettersearlyinthealphabet,suchasA,B,C.(b)TheletterS,which,whenitappears,isusuallythestartsymbol.(c)Lowercase,italicnamessuchasexprorstmt.(d)Whendiscussingprogrammingconstructs,uppercaselettersmaybeusedtorepresentnonterminalsfortheconstructs.Forexample,non-terminalsforexpressions,terms,andfactorsareoftenrepresentedbyE,T,andF,respectively.4.2.CONTEXT-FREEGRAMMARS1993.Uppercaseletterslateinthealphabet,suchasX,Y,Z,representgrammarsymbols;thatis,eithernonterminalsorterminals.4.Lowercaseletterslateinthealphabet,chie\ryu;v;:::;z,represent(pos-siblyempty)stringsofterminals.5.LowercaseGreekletters,\u000b,\f,\rforexample,represent(possiblyempty)stringsofgrammarsymbols.Thus,agenericproductioncanbewrittenasA!\u000b,whereAistheheadand\u000bthebody.6.AsetofproductionsA!\u000b1;A!\u000b2;:::;A!\u000bkwithacommonheadA(callthemA-productions),maybewrittenA!\u000b1j\u000b2j\u0001\u0001\u0001j\u000bk.Call\u000b1;\u000b2;:::;\u000bkthealternativesforA.7.Unlessstatedotherwise,theheadofthe\frstproductionisthestartsym-bol.Example4.6:Usingtheseconventions,thegrammarofExample4.5canberewrittenconciselyasE!E+TjE\u0000TjTT!T\u0003FjT=FjFF!(E)jidThenotationalconventionstellusthatE,T,andFarenonterminals,withEthestartsymbol.Theremainingsymbolsareterminals.24.2.3DerivationsTheconstructionofaparsetreecanbemadeprecisebytakingaderivationalview,inwhichproductionsaretreatedasrewritingrules.Beginningwiththestartsymbol,eachrewritingstepreplacesanonterminalbythebodyofoneofitsproductions.Thisderivationalviewcorrespondstothetop-downconstructionofaparsetree,buttheprecisiona\u000bordedbyderivationswillbeespeciallyhelpfulwhenbottom-upparsingisdiscussed.Asweshallsee,bottom-upparsingisrelatedtoaclassofderivationsknownas\\rightmost\"derivations,inwhichtherightmostnonterminalisrewrittenateachstep.Forexample,considerthefollowinggrammar,withasinglenonterminalE,whichaddsaproductionE!\u0000Etothegrammar(4.3):E!E+EjE\u0003Ej\u0000Ej(E)jid(4.7)TheproductionE!\u0000Esigni\festhatifEdenotesanexpression,then\u0000Emustalsodenoteanexpression.ThereplacementofasingleEby\u0000EwillbedescribedbywritingE)\u0000E200CHAPTER4.SYNTAXANALYSISwhichisread,\\Ederives\u0000E.\"TheproductionE!(E)canbeappliedtoreplaceanyinstanceofEinanystringofgrammarsymbolsby(E),e.g.,E\u0003E)(E)\u0003EorE\u0003E)E\u0003(E).WecantakeasingleEandrepeatedlyapplyproductionsinanyordertogetasequenceofreplacements.Forexample,E)\u0000E)\u0000(E))\u0000(id)Wecallsuchasequenceofreplacementsaderivationof\u0000(id)fromE.Thisderivationprovidesaproofthatthestring\u0000(id)isoneparticularinstanceofanexpression.Forageneralde\fnitionofderivation,consideranonterminalAinthemiddleofasequenceofgrammarsymbols,asin\u000bA\f,where\u000band\farearbitrarystringsofgrammarsymbols.SupposeA!\risaproduction.Then,wewrite\u000bA\f)\u000b\r\f.Thesymbol)means,\\derivesinonestep.\"Whenasequenceofderivationsteps\u000b1)\u000b2)\u0001\u0001\u0001)\u000bnrewrites\u000b1to\u000bn,wesay\u000b1derives\u000bn.Often,wewishtosay,\\derivesinzeroormoresteps.\"Forthispurpose,wecanusethesymbol)\u0003.Thus,1.\u000b)\u0003\u000b,foranystring\u000b,and2.If\u000b)\u0003\fand\f)\r,then\u000b)\u0003\r.Likewise,)+means,\\derivesinoneormoresteps.\"IfS)\u0003\u000b,whereSisthestartsymbolofagrammarG,wesaythat\u000bisasententialformofG.Notethatasententialformmaycontainbothterminalsandnonterminals,andmaybeempty.AsentenceofGisasententialformwithnononterminals.Thelanguagegeneratedbyagrammarisitssetofsentences.Thus,astringofterminalswisinL(G),thelanguagegeneratedbyG,ifandonlyifwisasentenceofG(orS)\u0003w).Alanguagethatcanbegeneratedbyagrammarissaidtobeacontext-freelanguage.Iftwogrammarsgeneratethesamelanguage,thegrammarsaresaidtobeequivalent.Thestring\u0000(id+id)isasentenceofgrammar(4.7)becausethereisaderivationE)\u0000E)\u0000(E))\u0000(E+E))\u0000(id+E))\u0000(id+id)(4.8)ThestringsE;\u0000E;\u0000(E);:::;\u0000(id+id)areallsententialformsofthisgram-mar.WewriteE)\u0003\u0000(id+id)toindicatethat\u0000(id+id)canbederivedfromE.Ateachstepinaderivation,therearetwochoicestobemade.Weneedtochoosewhichnonterminaltoreplace,andhavingmadethischoice,wemustpickaproductionwiththatnonterminalashead.Forexample,thefollowingalternativederivationof\u0000(id+id)di\u000bersfromderivation(4.8)inthelasttwosteps:E)\u0000E)\u0000(E))\u0000(E+E))\u0000(E+id))\u0000(id+id)(4.9)4.2.CONTEXT-FREEGRAMMARS201Eachnonterminalisreplacedbythesamebodyinthetwoderivations,buttheorderofreplacementsisdi\u000berent.Tounderstandhowparserswork,weshallconsiderderivationsinwhichthenonterminaltobereplacedateachstepischosenasfollows:1.Inleftmostderivations,theleftmostnonterminalineachsententialisal-wayschosen.If\u000b)\fisastepinwhichtheleftmostnonterminalin\u000bisreplaced,wewrite\u000b)lm\f.2.Inrightmostderivations,therightmostnonterminalisalwayschosen;wewrite\u000b)rm\finthiscase.Derivation(4.8)isleftmost,soitcanberewrittenasE)lm\u0000E)lm\u0000(E))lm\u0000(E+E))lm\u0000(id+E))lm\u0000(id+id)Notethat(4.9)isarightmostderivation.Usingournotationalconventions,everyleftmoststepcanbewrittenaswA\r)lmw\u000e\r,wherewconsistsofterminalsonly,A!\u000eistheproductionapplied,and\risastringofgrammarsymbols.Toemphasizethat\u000bderives\fbyaleftmostderivation,wewrite\u000b)\u0003lm\f.IfS)\u0003lm\u000b,thenwesaythat\u000bisaleft-sententialformofthegrammarathand.Analogousde\fnitionsholdforrightmostderivations.Rightmostderivationsaresometimescalledcanonicalderivations.4.2.4ParseTreesandDerivationsAparsetreeisagraphicalrepresentationofaderivationthat\fltersouttheorderinwhichproductionsareappliedtoreplacenonterminals.Eachinteriornodeofaparsetreerepresentstheapplicationofaproduction.TheinteriornodeislabeledwiththenonterminalAintheheadoftheproduction;thechildrenofthenodearelabeled,fromlefttoright,bythesymbolsinthebodyoftheproductionbywhichthisAwasreplacedduringthederivation.Forexample,theparsetreefor\u0000(id+id)inFig.4.3,resultsfromthederivation(4.8)aswellasderivation(4.9).Theleavesofaparsetreearelabeledbynonterminalsorterminalsand,readfromlefttoright,constituteasententialform,calledtheyieldorfrontierofthetree.Toseetherelationshipbetweenderivationsandparsetrees,consideranyderivation\u000b1)\u000b2)\u0001\u0001\u0001)\u000bn,where\u000b1isasinglenonterminalA.Foreachsententialform\u000biinthederivation,wecanconstructaparsetreewhoseyieldis\u000bi.Theprocessisaninductiononi.BASIS:Thetreefor\u000b1=AisasinglenodelabeledA.202CHAPTER4.SYNTAXANALYSIS)idE+idEEE(E\u0000Figure4.3:Parsetreefor\u0000(id+id)INDUCTION:Supposewealreadyhaveconstructedaparsetreewithyield\u000bi\u00001=X1X2\u0001\u0001\u0001Xk(notethataccordingtoournotationalconventions,eachgrammarsymbolXiiseitheranonterminaloraterminal).Suppose\u000biisderivedfrom\u000bi\u00001byreplacingXj,anonterminal,by\f=Y1Y2\u0001\u0001\u0001Ym.Thatis,attheithstepofthederivation,productionXj!\fisappliedto\u000bi\u00001toderive\u000bi=X1X2\u0001\u0001\u0001Xj\u00001\fXj+1\u0001\u0001\u0001Xk.Tomodelthisstepofthederivation,\fndthejthnon-\u000fleaffromtheleftinthecurrentparsetree.ThisleafislabeledXj.Givethisleafmchildren,labeledY1;Y2;:::;Ym,fromtheleft.Asaspecialcase,ifm=0,then\f=\u000f,andwegivethejthleafonechildlabeled\u000f.Example4.10:Thesequenceofparsetreesconstructedfromthederivation(4.8)isshowninFig.4.4.Inthe\frststepofthederivation,E)\u0000E.Tomodelthisstep,addtwochildren,labeled\u0000andE,totherootEoftheinitialtree.Theresultisthesecondtree.Inthesecondstepofthederivation,\u0000E)\u0000(E).Consequently,addthreechildren,labeled(,E,and),totheleaflabeledEofthesecondtree,toobtainthethirdtreewithyield\u0000(E).Continuinginthisfashionweobtainthecompleteparsetreeasthesixthtree.2Sinceaparsetreeignoresvariationsintheorderinwhichsymbolsinsenten-tialformsarereplaced,thereisamany-to-onerelationshipbetweenderivationsandparsetrees.Forexample,bothderivations(4.8)and(4.9),areassociatedwiththesame\fnalparsetreeofFig.4.4.Inwhatfollows,weshallfrequentlyparsebyproducingaleftmostorarightmostderivation,sincethereisaone-to-onerelationshipbetweenparsetreesandeitherleftmostorrightmostderivations.Bothleftmostandrightmostderivationspickaparticularorderforreplacingsymbolsinsententialforms,sotheytoo\flteroutvariationsintheorder.Itisnothardtoshowthateveryparsetreehasassociatedwithitauniqueleftmostandauniquerightmostderivation.4.2.CONTEXT-FREEGRAMMARS203)))))EEid+E)E\u0000E+(EEidEid)\u0000EEE\u0000EEE(E)E\u0000E(E+E)E\u0000E(Figure4.4:Sequenceofparsetreesforderivation(4.8)4.2.5AmbiguityFromSection2.2.4,agrammarthatproducesmorethanoneparsetreeforsomesentenceissaidtobeambiguous.Putanotherway,anambiguousgrammarisonethatproducesmorethanoneleftmostderivationormorethanonerightmostderivationforthesamesentence.Example4.11:Thearithmeticexpressiongrammar(4.3)permitstwodistinctleftmostderivationsforthesentenceid+id\u0003id:E)E+EE)E\u0003E)id+E)E+E\u0003E)id+E\u0003E)id+E\u0003E)id+id\u0003E)id+id\u0003E)id+id\u0003id)id+id\u0003idThecorrespondingparsetreesappearinFig.4.5.NotethattheparsetreeofFig.4.5(a)re\rectsthecommonlyassumedprece-denceof+and*,whilethetreeofFig.4.5(b)doesnot.Thatis,itiscustomarytotreatoperator*ashavinghigherprecedencethan+,correspondingtothefactthatwewouldnormallyevaluateanexpressionlikea+b\u0003casa+(b\u0003c),ratherthanas(a+b)\u0003c.2Formostparsers,itisdesirablethatthegrammarbemadeunambiguous,forifitisnot,wecannotuniquelydeterminewhichparsetreetoselectforasentence.Inothercases,itisconvenienttousecarefullychosenambiguousgrammars,togetherwithdisambiguatingrulesthat\\throwaway\"undesirableparsetrees,leavingonlyonetreeforeachsentence.204CHAPTER4.SYNTAXANALYSIS(a)(b)EEid+EEid\u0003idid\u0003EEidEidEEE+EEFigure4.5:Twoparsetreesforid+id*id4.2.6VerifyingtheLanguageGeneratedbyaGrammarAlthoughcompilerdesignersrarelydosoforacompleteprogramming-languagegrammar,itisusefultobeabletoreasonthatagivensetofproductionsgener-atesaparticularlanguage.Troublesomeconstructscanbestudiedbywritingaconcise,abstractgrammarandstudyingthelanguagethatitgenerates.Weshallconstructsuchagrammarforconditionalstatementsbelow.AproofthatagrammarGgeneratesalanguageLhastwoparts:showthateverystringgeneratedbyGisinL,andconverselythateverystringinLcanindeedbegeneratedbyG.Example4.12:Considerthefollowinggrammar:S!(S)Sj\u000f(4.13)Itmaynotbeinitiallyapparent,butthissimplegrammargeneratesallstringsofbalancedparentheses,andonlysuchstrings.Toseewhy,weshallshow\frstthateverysentencederivablefromSisbalanced,andthenthateverybalancedstringisderivablefromS.ToshowthateverysentencederivablefromSisbalanced,weuseaninductiveproofonthenumberofstepsninaderivation.BASIS:Thebasisisn=1.TheonlystringofterminalsderivablefromSinonestepistheemptystring,whichsurelyisbalanced.INDUCTION:Nowassumethatallderivationsoffewerthannstepsproducebalancedsentences,andconsideraleftmostderivationofexactlynsteps.SuchaderivationmustbeoftheformS)lm(S)S)\u0003lm(x)S)\u0003lm(x)yThederivationsofxandyfromStakefewerthannsteps,sobytheinductivehypothesisxandyarebalanced.Therefore,thestring(x)ymustbebalanced.Thatis,ithasanequalnumberofleftandrightparentheses,andeverypre\fxhasatleastasmanyleftparenthesesasright.4.2.CONTEXT-FREEGRAMMARS205HavingthusshownthatanystringderivablefromSisbalanced,wemustnextshowthateverybalancedstringisderivablefromS.Todoso,useinductiononthelengthofastring.BASIS:Ifthestringisoflength0,itmustbe\u000f,whichisbalanced.INDUCTION:First,observethateverybalancedstringhasevenlength.As-sumethateverybalancedstringoflengthlessthan2nisderivablefromS,andconsiderabalancedstringwoflength2n,n\u00151.Surelywbeginswithaleftparenthesis.Let(x)betheshortestnonemptypre\fxofwhavinganequalnumberofleftandrightparentheses.Thenwcanbewrittenasw=(x)ywherebothxandyarebalanced.Sincexandyareoflengthlessthan2n,theyarederivablefromSbytheinductivehypothesis.Thus,wecan\fndaderivationoftheformS)(S)S)\u0003(x)S)\u0003(x)yprovingthatw=(x)yisalsoderivablefromS.24.2.7Context-FreeGrammarsVersusRegularExpressionsBeforeleavingthissectionongrammarsandtheirproperties,weestablishthatgrammarsareamorepowerfulnotationthanregularexpressions.Everycon-structthatcanbedescribedbyaregularexpressioncanbedescribedbyagram-mar,butnotvice-versa.Alternatively,everyregularlanguageisacontext-freelanguage,butnotvice-versa.Forexample,theregularexpression(ajb)\u0003abbandthegrammarA0!aA0jbA0jaA1A1!bA2A2!bA3A3!\u000fdescribethesamelanguage,thesetofstringsofa'sandb'sendinginabb.Wecanconstructmechanicallyagrammartorecognizethesamelanguageasanondeterministic\fniteautomaton(NFA).Thegrammarabovewascon-structedfromtheNFAinFig.3.24usingthefollowingconstruction:1.ForeachstateioftheNFA,createanonterminalAi.2.Ifstateihasatransitiontostatejoninputa,addtheproductionAi!aAj.Ifstateigoestostatejoninput\u000f,addtheproductionAi!Aj.3.Ifiisanacceptingstate,addAi!\u000f.4.Ifiisthestartstate,makeAibethestartsymbolofthegrammar.206CHAPTER4.SYNTAXANALYSISOntheotherhand,thelanguageL=fanbnjn\u00151gwithanequalnumberofa'sandb'sisaprototypicalexampleofalanguagethatcanbedescribedbyagrammarbutnotbyaregularexpression.Toseewhy,supposeLwerethelanguagede\fnedbysomeregularexpression.WecouldconstructaDFADwitha\fnitenumberofstates,sayk,toacceptL.SinceDhasonlykstates,foraninputbeginningwithmorethanka's,Dmustentersomestatetwice,saysi,asinFig.4.6.Supposethatthepathfromsibacktoitselfislabeledwithasequenceaj\u0000i.Sinceaibiisinthelanguage,theremustbeapathlabeledbifromsitoanacceptingstatef.But,thenthereisalsoapathfromtheinitialstates0throughsitoflabeledajbi,asshowninFig.4.6.Thus,Dalsoacceptsajbi,whichisnotinthelanguage,contradictingtheassumptionthatListhelanguageacceptedbyD.pathlabeledaj\u0000i\u0001\u0001\u0001fpathlabeledbi\u0001\u0001\u0001sipathlabeledai\u0001\u0001\u0001s0Figure4.6:DFADacceptingbothaibiandajbi.Colloquially,wesaythat\\\fniteautomatacannotcount,\"meaningthata\fniteautomatoncannotacceptalanguagelikefanbnjn\u00151gthatwouldrequireittokeepcountofthenumberofa'sbeforeitseestheb's.Likewise,\\agrammarcancounttwoitemsbutnotthree,\"asweshallseewhenweconsidernon-context-freelanguageconstructsinSection4.3.5.4.2.8ExercisesforSection4.2Exercise4.2.1:Considerthecontext-freegrammar:S!SS+jSS\u0003jaandthestringaa+a\u0003.a)Givealeftmostderivationforthestring.b)Givearightmostderivationforthestring.c)Giveaparsetreeforthestring.!d)Isthegrammarambiguousorunambiguous?Justifyyouranswer.!e)Describethelanguagegeneratedbythisgrammar.Exercise4.2.2:RepeatExercise4.2.1foreachofthefollowinggrammarsandstrings:4.2.CONTEXT-FREEGRAMMARS207a)S!0S1j01withstring000111.b)S!+SSj\u0003SSjawithstring+\u0003aaa.!c)S!S(S)Sj\u000fwithstring(()()).!d)S!S+SjSSj(S)jS\u0003jawithstring(a+a)\u0003a.!e)S!(L)jaandL!L;SjSwithstring((a;a);a;(a)).!!f)S!aSbSjbSaSj\u000fwithstringaabbab.!g)Thefollowinggrammarforbooleanexpressions:bexpr!bexprorbtermjbtermbterm!btermandbfactorjbfactorbfactor!notbfactorj(bexpr)jtruejfalseExercise4.2.3:Designgrammarsforthefollowinglanguages:a)Thesetofallstringsof0sand1ssuchthatevery0isimmediatelyfollowedbyatleastone1.!b)Thesetofallstringsof0sand1sthatarepalindromes;thatis,thestringreadsthesamebackwardasforward.!c)Thesetofallstringsof0sand1swithanequalnumberof0sand1s.!!d)Thesetofallstringsof0sand1swithanunequalnumberof0sand1s.!e)Thesetofallstringsof0sand1sinwhich011doesnotappearasasubstring.!!f)Thesetofallstringsof0sand1softheformxy,wherex6=yandxandyareofthesamelength.!Exercise4.2.4:Thereisanextendedgrammarnotationincommonuse.Inthisnotation,squareandcurlybracesinproductionbodiesaremetasymbols(like!orj)withthefollowingmeanings:i)Squarebracesaroundagrammarsymbolorsymbolsdenotesthattheseconstructsareoptional.Thus,productionA!X[Y]Zhasthesamee\u000bectasthetwoproductionsA!XYZandA!XZ.ii)Curlybracesaroundagrammarsymbolorsymbolssaysthatthesesym-bolsmayberepeatedanynumberoftimes,includingzerotimes.Thus,A!XfYZghasthesamee\u000bectasthein\fnitesequenceofproductionsA!X,A!XYZ,A!XYZYZ,andsoon.208CHAPTER4.SYNTAXANALYSISShowthatthesetwoextensionsdonotaddpowertogrammars;thatis,anylanguagethatcanbegeneratedbyagrammarwiththeseextensionscanbegeneratedbyagrammarwithouttheextensions.Exercise4.2.5:UsethebracesdescribedinExercise4.2.4tosimplifythefollowinggrammarforstatementblocksandconditionalstatements:stmt!ifexprthenstmtelsestmtjifstmtthenstmtjbeginstmtListendstmtList!stmt;stmtListjstmt!Exercise4.2.6:ExtendtheideaofExercise4.2.4toallowanyregularexpres-sionofgrammarsymbolsinthebodyofaproduction.Showthatthisextensiondoesnotallowgrammarstode\fneanynewlanguages.!Exercise4.2.7:AgrammarsymbolX(terminalornonterminal)isuselessifthereisnoderivationoftheformS)\u0003wXy)\u0003wxy.Thatis,Xcanneverappearinthederivationofanysentence.a)Giveanalgorithmtoeliminatefromagrammarallproductionscontaininguselesssymbols.b)Applyyouralgorithmtothegrammar:S!0jAA!ABB!1Exercise4.2.8:ThegrammarinFig.4.7generatesdeclarationsforasin-glenumericalidenti\fer;thesedeclarationsinvolvefourdi\u000berent,independentpropertiesofnumbers.stmt!declareidoptionListoptionList!optionListoptionj\u000foption!modejscalejprecisionjbasemode!realjcomplexscale!\fxedj\roatingprecision!singlejdoublebase!binaryjdecimalFigure4.7:Agrammarformulti-attributedeclarationsa)GeneralizethegrammarofFig.4.7byallowingnoptionsAi,forsome\fxednandfori=1;2:::;n,whereAicanbeeitheraiorbi.YourgrammarshoulduseonlyO(n)grammarsymbolsandhaveatotallengthofproductionsthatisO(n).4.3.WRITINGAGRAMMAR209!b)ThegrammarofFig.4.7anditsgeneralizationinpart(a)allowdeclara-tionsthatarecontradictoryand/orredundant,suchas:declarefoorealfixedrealfloatingWecouldinsistthatthesyntaxofthelanguageforbidsuchdeclarations;thatis,everydeclarationgeneratedbythegrammarhasexactlyonevalueforeachofthenoptions.Ifwedo,thenforany\fxednthereisonlya\fnitenumberoflegaldeclarations.Thelanguageoflegaldeclarationsthushasagrammar(andalsoaregularexpression),asany\fnitelanguagedoes.Theobviousgrammar,inwhichthestartsymbolhasaproductionforeverylegaldeclarationhasn!productionsandatotalproductionlengthofO(n\u0002n!).Youmustdobetter:atotalproductionlengththatisO(n2n).!!c)Showthatanygrammarforpart(b)musthaveatotalproductionlengthofatleast2n.d)Whatdoespart(c)sayaboutthefeasibilityofenforcingnonredundancyandnoncontradictionamongoptionsindeclarationsviathesyntaxoftheprogramminglanguage?4.3WritingaGrammarGrammarsarecapableofdescribingmost,butnotall,ofthesyntaxofpro-gramminglanguages.Forinstance,therequirementthatidenti\fersbedeclaredbeforetheyareused,cannotbedescribedbyacontext-freegrammar.Therefore,thesequencesoftokensacceptedbyaparserformasupersetoftheprogram-minglanguage;subsequentphasesofthecompilermustanalyzetheoutputoftheparsertoensurecompliancewithrulesthatarenotcheckedbytheparser.Thissectionbeginswithadiscussionofhowtodivideworkbetweenalexicalanalyzerandaparser.Wethenconsiderseveraltransformationsthatcouldbeappliedtogetagrammarmoresuitableforparsing.Onetechniquecanelim-inateambiguityinthegrammar,andothertechniques|left-recursionelimi-nationandleftfactoring|areusefulforrewritinggrammarssotheybecomesuitablefortop-downparsing.Weconcludethissectionbyconsideringsomeprogramminglanguageconstructsthatcannotbedescribedbyanygrammar.4.3.1LexicalVersusSyntacticAnalysisAsweobservedinSection4.2.7,everythingthatcanbedescribedbyaregularexpressioncanalsobedescribedbyagrammar.Wemaythereforereasonablyask:\\Whyuseregularexpressionstode\fnethelexicalsyntaxofalanguage?\"Thereareseveralreasons.210CHAPTER4.SYNTAXANALYSIS1.Separatingthesyntacticstructureofalanguageintolexicalandnon-lexicalpartsprovidesaconvenientwayofmodularizingthefrontendofacompilerintotwomanageable-sizedcomponents.2.Thelexicalrulesofalanguagearefrequentlyquitesimple,andtodescribethemwedonotneedanotationaspowerfulasgrammars.3.Regularexpressionsgenerallyprovideamoreconciseandeasier-to-under-standnotationfortokensthangrammars.4.Moree\u000ecientlexicalanalyzerscanbeconstructedautomaticallyfromregularexpressionsthanfromarbitrarygrammars.Thereareno\frmguidelinesastowhattoputintothelexicalrules,asop-posedtothesyntacticrules.Regularexpressionsaremostusefulfordescribingthestructureofconstructssuchasidenti\fers,constants,keywords,andwhitespace.Grammars,ontheotherhand,aremostusefulfordescribingnestedstructuressuchasbalancedparentheses,matchingbegin-end's,correspondingif-then-else's,andsoon.Thesenestedstructurescannotbedescribedbyregularexpressions.4.3.2EliminatingAmbiguitySometimesanambiguousgrammarcanberewrittentoeliminatetheambiguity.Asanexample,weshalleliminatetheambiguityfromthefollowing\\dangling-else\"grammar:stmt!ifexprthenstmtjifexprthenstmtelsestmtjother(4.14)Here\\other\"standsforanyotherstatement.Accordingtothisgrammar,thecompoundconditionalstatementifE1thenS1elseifE2thenS2elseS3E1S1E2S2S3stmtstmtelsestmtthenexprififexprstmtelsestmtthenFigure4.8:Parsetreeforaconditionalstatement4.3.WRITINGAGRAMMAR211hastheparsetreeshowninFig.4.8.1Grammar(4.14)isambiguoussincethestringifE1thenifE2thenS1elseS2(4.15)hasthetwoparsetreesshowninFig.4.9.S2S1E2E1S2S1E2E1stmtstmtthenexprifstmtelsestmtthenexprifstmtifexprstmtelsestmtthenexprifthenstmtFigure4.9:TwoparsetreesforanambiguoussentenceInallprogramminglanguageswithconditionalstatementsofthisform,the\frstparsetreeispreferred.Thegeneralruleis,\\Matcheachelsewiththeclosestunmatchedthen.\"2Thisdisambiguatingrulecantheoreticallybein-corporateddirectlyintoagrammar,butinpracticeitisrarelybuiltintotheproductions.Example4.16:Wecanrewritethedangling-elsegrammar(4.14)asthefol-lowingunambiguousgrammar.Theideaisthatastatementappearingbetweenathenandanelsemustbe\\matched\";thatis,theinteriorstatementmustnotendwithanunmatchedoropenthen.Amatchedstatementiseitheranif-then-elsestatementcontainingnoopenstatementsoritisanyotherkindofunconditionalstatement.Thus,wemayusethegrammarinFig.4.10.Thisgrammargeneratesthesamestringsasthedangling-elsegrammar(4.14),butitallowsonlyoneparsingforstring(4.15);namely,theonethatassociateseachelsewiththeclosestpreviousunmatchedthen.2212CHAPTER4.SYNTAXANALYSISstmt!matched4.3.WRITINGAGRAMMAR213A!\f1A0j\f2A0j\u0001\u0001\u0001j\fnA0A0!\u000b1A0j\u000b2A0j\u0001\u0001\u0001j\u000bmA0j\u000fThenonterminalAgeneratesthesamestringsasbeforebutisnolongerleftrecursive.ThisprocedureeliminatesallleftrecursionfromtheAandA0pro-ductions(providedno\u000biis\u000f),butitdoesnoteliminateleftrecursioninvolvingderivationsoftwoormoresteps.Forexample,considerthegrammarS!AajbA!AcjSdj\u000f(4.18)ThenonterminalSisleftrecursivebecauseS)Aa)Sda,butitisnotimmediatelyleftrecursive.Algorithm4.19,below,systematicallyeliminatesleftrecursionfromagram-mar.Itisguaranteedtoworkifthegrammarhasnocycles(derivationsoftheformA)+A)or\u000f-productions(productionsoftheformA!\u000f).Cyclescanbeeliminatedsystematicallyfromagrammar,ascan\u000f-productions(seeExercises4.4.6and4.4.7).Algorithm4.19:Eliminatingleftrecursion.INPUT:GrammarGwithnocyclesor\u000f-productions.OUTPUT:Anequivalentgrammarwithnoleftrecursion.METHOD:ApplythealgorithminFig.4.11toG.Notethattheresultingnon-left-recursivegrammarmayhave\u000f-productions.21)arrangethenonterminalsinsomeorderA1;A2;:::;An.2)for(eachifrom1ton)f3)for(eachjfrom1toi\u00001)f4)replaceeachproductionoftheformAi!Aj\rbytheproductionsAi!\u000e1\rj\u000e2\rj\u0001\u0001\u0001j\u000ek\r,whereAj!\u000e1j\u000e2j\u0001\u0001\u0001j\u000ekareallcurrentAj-productions5)g6)eliminatetheimmediateleftrecursionamongtheAi-productions7)gFigure4.11:AlgorithmtoeliminateleftrecursionfromagrammarTheprocedureinFig.4.11worksasfollows.Inthe\frstiterationfori=1,theouterfor-loopoflines(2)through(7)eliminatesanyimmediateleftrecursionamongA1-productions.AnyremainingA1productionsoftheformA1!Al\u000bmustthereforehavel>1.Afterthei\u00001stiterationoftheouterfor-loop,allnonterminalsAk,wherek<i,are\\cleaned\";thatis,anyproductionAk!Al\u000b,musthavel>k.Asaresult,ontheithiteration,theinnerloop214CHAPTER4.SYNTAXANALYSISoflines(3)through(5)progressivelyraisesthelowerlimitinanyproductionAi!Am\u000b,untilwehavem\u0015i.Then,eliminatingimmediateleftrecursionfortheAiproductionsatline(6)forcesmtobegreaterthani.Example4.20:LetusapplyAlgorithm4.19tothegrammar(4.18).Techni-cally,thealgorithmisnotguaranteedtowork,becauseofthe\u000f-production,butinthiscase,theproductionA!\u000fturnsouttobeharmless.WeorderthenonterminalsS,A.ThereisnoimmediateleftrecursionamongtheS-productions,sonothinghappensduringtheouterloopfori=1.Fori=2,wesubstituteforSinA!SdtoobtainthefollowingA-productions.A!AcjAadjbdj\u000fEliminatingtheimmediateleftrecursionamongtheseA-productionsyieldsthefollowinggrammar.S!AajbA!bdA0jA0A0!cA0jadA0j\u000f24.3.4LeftFactoringLeftfactoringisagrammartransformationthatisusefulforproducingagram-marsuitableforpredictive,ortop-down,parsing.WhenthechoicebetweentwoalternativeA-productionsisnotclear,wemaybeabletorewritethepro-ductionstodeferthedecisionuntilenoughoftheinputhasbeenseenthatwecanmaketherightchoice.Forexample,ifwehavethetwoproductionsstmt!ifexprthenstmtelsestmtjifexprthenstmtonseeingtheinputif,wecannotimmediatelytellwhichproductiontochoosetoexpandstmt.Ingeneral,ifA!\u000b\f1j\u000b\f2aretwoA-productions,andtheinputbeginswithanonemptystringderivedfrom\u000b,wedonotknowwhethertoexpandAto\u000b\f1or\u000b\f2.However,wemaydeferthedecisionbyexpandingAto\u000bA0.Then,afterseeingtheinputderivedfrom\u000b,weexpandA0to\f1orto\f2.Thatis,left-factored,theoriginalproductionsbecomeA!\u000bA0A0!\f1j\f2Algorithm4.21:Leftfactoringagrammar.INPUT:GrammarG.OUTPUT:Anequivalentleft-factoredgrammar.4.3.WRITINGAGRAMMAR215METHOD:ForeachnonterminalA,\fndthelongestpre\fx\u000bcommontotwoormoreofitsalternatives.If\u000b6=\u000f|i.e.,thereisanontrivialcommonpre\fx|replacealloftheA-productionsA!\u000b\f1j\u000b\f2j\u0001\u0001\u0001j\u000b\fnj\r,where\rrepresentsallalternativesthatdonotbeginwith\u000b,byA!\u000bA0j\rA0!\f1j\f2j\u0001\u0001\u0001j\fnHereA0isanewnonterminal.Repeatedlyapplythistransformationuntilnotwoalternativesforanonterminalhaveacommonpre\fx.2Example4.22:Thefollowinggrammarabstractsthe\\dangling-else\"prob-lem:S!iEtSjiEtSeSjaE!b(4.23)Here,i,t,andestandforif,then,andelse;EandSstandfor\\conditionalexpression\"and\\statement.\"Left-factored,thisgrammarbecomes:S!iEtSS0jaS0!eSj\u000fE!b(4.24)Thus,wemayexpandStoiEtSS0oninputi,andwaituntiliEtShasbeenseentodecidewhethertoexpandS0toeSorto\u000f.Ofcourse,thesegrammarsarebothambiguous,andoninpute,itwillnotbeclearwhichalternativeforS0shouldbechosen.Example4.33discussesawayoutofthisdilemma.24.3.5Non-Context-FreeLanguageConstructsAfewsyntacticconstructsfoundintypicalprogramminglanguagescannotbespeci\fedusinggrammarsalone.Here,weconsidertwooftheseconstructs,usingsimpleabstractlanguagestoillustratethedi\u000eculties.Example4.25:Thelanguageinthisexampleabstractstheproblemofcheck-ingthatidenti\fersaredeclaredbeforetheyareusedinaprogram.Thelanguageconsistsofstringsoftheformwcw,wherethe\frstwrepresentsthedeclarationofanidenti\ferw,crepresentsaninterveningprogramfragment,andthesecondwrepresentstheuseoftheidenti\fer.TheabstractlanguageisL1=fwcwjwisin(ajb)\u0003g.L1consistsofallwordscomposedofarepeatedstringofa'sandb'sseparatedbyc,suchasaabcaab.Whileitisbeyondthescopeofthisbooktoproveit,thenon-context-freedomofL1directlyimpliesthenon-context-freedomofprogramminglanguageslikeCandJava,whichrequiredeclarationofidenti\fersbeforetheiruseandwhichallowidenti\fersofarbitrarylength.Forthisreason,agrammarforCorJavadoesnotdistinguishamongidenti-\fersthataredi\u000berentcharacterstrings.Instead,allidenti\fersarerepresented216CHAPTER4.SYNTAXANALYSISbyatokensuchasidinthegrammar.Inacompilerforsuchalanguage,thesemantic-analysisphasechecksthatidenti\fersaredeclaredbeforetheyareused.2Example4.26:Thenon-context-freelanguageinthisexampleabstractstheproblemofcheckingthatthenumberofformalparametersinthedeclarationofafunctionagreeswiththenumberofactualparametersinauseofthefunction.Thelanguageconsistsofstringsoftheformanbmcndm.(Recallanmeansawrittenntimes.)Hereanandbmcouldrepresenttheformal-parameterlistsoftwofunctionsdeclaredtohavenandmarguments,respectively,whilecnanddmrepresenttheactual-parameterlistsincallstothesetwofunctions.TheabstractlanguageisL2=fanbmcndmjn\u00151andm\u00151g.Thatis,L2consistsofstringsinthelanguagegeneratedbytheregularexpressiona\u0003b\u0003c\u0003d\u0003suchthatthenumberofa'sandc'sareequalandthenumberofb'sandd'sareequal.Thislanguageisnotcontextfree.Again,thetypicalsyntaxoffunctiondeclarationsandusesdoesnotconcernitselfwithcountingthenumberofparameters.Forexample,afunctioncallinC-likelanguagemightbespeci\fedbystmt!id(expr4.4.TOP-DOWNPARSING217a)ThegrammarofExercise4.2.1.b)ThegrammarofExercise4.2.2(a).c)ThegrammarofExercise4.2.2(c).d)ThegrammarofExercise4.2.2(e).e)ThegrammarofExercise4.2.2(g).!Exercise4.3.3:Thefollowinggrammarisproposedtoremovethe\\dangling-elseambiguity\"discussedinSection4.3.2:stmt!ifexprthenstmtjmatchedStmtmatchedStmt!ifexprthenmatchedStmtelsestmtjotherShowthatthisgrammarisstillambiguous.4.4Top-DownParsingTop-downparsingcanbeviewedastheproblemofconstructingaparsetreefortheinputstring,startingfromtherootandcreatingthenodesoftheparsetreeinpreorder(depth-\frst,asdiscussedinSection2.3.4).Equivalently,top-downparsingcanbeviewedas\fndingaleftmostderivationforaninputstring.Example4.27:ThesequenceofparsetreesinFig.4.12fortheinputid+id\u0003idisatop-downparseaccordingtogrammar(4.2),repeatedhere:E!TE0E0!+TE0j\u000fT!FT0T0!\u0003FT0j\u000fF!(E)jid(4.28)Thissequenceoftreescorrespondstoaleftmostderivationoftheinput.2Ateachstepofatop-downparse,thekeyproblemisthatofdeterminingtheproductiontobeappliedforanonterminal,sayA.OnceanA-productionischosen,therestoftheparsingprocessconsistsof\\matching\"theterminalsymbolsintheproductionbodywiththeinputstring.Thesectionbeginswithageneralformoftop-downparsing,calledrecursive-descentparsing,whichmayrequirebacktrackingto\fndthecorrectA-produc-tiontobeapplied.Section2.4.2introducedpredictiveparsing,aspecialcaseofrecursive-descentparsing,wherenobacktrackingisrequired.PredictiveparsingchoosesthecorrectA-productionbylookingaheadattheinputa\fxednumberofsymbols,typicallywemaylookonlyatone(thatis,thenextinputsymbol).218CHAPTER4.SYNTAXANALYSIS)lm)lm)lm)lm)lm)lm)lm)lm)lm)lm)lmFidT0\u0003idFT0E0ETFidT\u0003FT0E0T0idFETFidT0\u000fE0+TididT0\u000fE0+TFT0\u0003FidT0\u000fE0\u000fFT0\u000fE0+TFidT0\u0003FidT0\u000fE0ET\u000fTFidT0\u000fE0ETFidT0\u000fE0+TEEETE0ETFT0E0ETFidT0E0E0E0+TFidT0E0ETFidT0\u000fE0+\u000fETFidT0E0+TFT0E0ETFidT0Figure4.12:Top-downparseforid+id\u0003idForexample,considerthetop-downparseinFig.4.12,whichconstructsatreewithtwonodeslabeledE0.Atthe\frstE0node(inpreorder),theproductionE0!+TE0ischosen;atthesecondE0node,theproductionE0!\u000fischosen.ApredictiveparsercanchoosebetweenE0-productionsbylookingatthenextinputsymbol.TheclassofgrammarsforwhichwecanconstructpredictiveparserslookingksymbolsaheadintheinputissometimescalledtheLL(k)class.WediscusstheLL(1)classinSection4.4.3,butintroducecertaincomputations,calledFIRSTandFOLLOW,inapreliminarySection4.4.2.FromtheFIRSTandFOLLOWsetsforagrammar,weshallconstruct\\predictiveparsingtables,\"whichmakeexplicitthechoiceofproductionduringtop-downparsing.Thesesetsarealsousefulduringbottom-upparsing,asweshallsee.InSection4.4.4wegiveanonrecursiveparsingalgorithmthatmaintainsastackexplicitly,ratherthanimplicitlyviarecursivecalls.Finally,inSec-tion4.4.5wediscusserrorrecoveryduringtop-downparsing.4.4.TOP-DOWNPARSING2194.4.1Recursive-DescentParsingvoidA()f1)ChooseanA-production,A!X1X2\u0001\u0001\u0001Xk;2)for(i=1tok)f3)if(Xiisanonterminal)4)callprocedureXi();5)elseif(Xiequalsthecurrentinputsymbola)6)advancetheinputtothenextsymbol;7)else/*anerrorhasoccurred*/;ggFigure4.13:Atypicalprocedureforanonterminalinatop-downparserArecursive-descentparsingprogramconsistsofasetofprocedures,oneforeachnonterminal.Executionbeginswiththeprocedureforthestartsymbol,whichhaltsandannouncessuccessifitsprocedurebodyscanstheentireinputstring.PseudocodeforatypicalnonterminalappearsinFig.4.13.Notethatthispseudocodeisnondeterministic,sinceitbeginsbychoosingtheA-productiontoapplyinamannerthatisnotspeci\fed.Generalrecursive-descentmayrequirebacktracking;thatis,itmayrequirerepeatedscansovertheinput.However,backtrackingisrarelyneededtoparseprogramminglanguageconstructs,sobacktrackingparsersarenotseenfre-quently.Evenforsituationslikenaturallanguageparsing,backtrackingisnotverye\u000ecient,andtabularmethodssuchasthedynamicprogrammingalgo-rithmofExercise4.4.9orthemethodofEarley(seethebibliographicnotes)arepreferred.Toallowbacktracking,thecodeofFig.4.13needstobemodi\fed.First,wecannotchooseauniqueA-productionatline(1),sowemusttryeachofseveralproductionsinsomeorder.Then,failureatline(7)isnotultimatefailure,butsuggestsonlythatweneedtoreturntoline(1)andtryanotherA-production.OnlyiftherearenomoreA-productionstotrydowedeclarethataninputerrorhasbeenfound.InordertotryanotherA-production,weneedtobeabletoresettheinputpointertowhereitwaswhenwe\frstreachedline(1).Thus,alocalvariableisneededtostorethisinputpointerforfutureuse.Example4.29:ConsiderthegrammarS!cAdA!abjaToconstructaparsetreetop-downfortheinputstringw=cad,beginwithatreeconsistingofasinglenodelabeledS,andtheinputpointerpointingtoc,the\frstsymbolofw.Shasonlyoneproduction,soweuseittoexpandSand220CHAPTER4.SYNTAXANALYSISobtainthetreeofFig.4.14(a).Theleftmostleaf,labeledc,matchesthe\frstsymbolofinputw,soweadvancetheinputpointertoa,thesecondsymbolofw,andconsiderthenextleaf,labeledA.(a)(b)(c)ddaAcSadbAcSAcSFigure4.14:Stepsinatop-downparseNow,weexpandAusingthe\frstalternativeA!abtoobtainthetreeofFig.4.14(b).Wehaveamatchforthesecondinputsymbol,a,soweadvancetheinputpointertod,thethirdinputsymbol,andcomparedagainstthenextleaf,labeledb.Sincebdoesnotmatchd,wereportfailureandgobacktoAtoseewhetherthereisanotheralternativeforAthathasnotbeentried,butthatmightproduceamatch.IngoingbacktoA,wemustresettheinputpointertoposition2,thepositionithadwhenwe\frstcametoA,whichmeansthattheprocedureforAmuststoretheinputpointerinalocalvariable.ThesecondalternativeforAproducesthetreeofFig.4.14(c).Theleafamatchesthesecondsymbolofwandtheleafdmatchesthethirdsymbol.Sincewehaveproducedaparsetreeforw,wehaltandannouncesuccessfulcompletionofparsing.2Aleft-recursivegrammarcancausearecursive-descentparser,evenonewithbacktracking,togointoanin\fniteloop.Thatis,whenwetrytoexpandanonterminalA,wemayeventually\fndourselvesagaintryingtoexpandAwithouthavingconsumedanyinput.4.4.2FIRSTandFOLLOWTheconstructionofbothtop-downandbottom-upparsersisaidedbytwofunctions,FIRSTandFOLLOW,associatedwithagrammarG.Duringtop-downparsing,FIRSTandFOLLOWallowustochoosewhichproductiontoapply,basedonthenextinputsymbol.Duringpanic-modeerrorrecovery,setsoftokensproducedbyFOLLOWcanbeusedassynchronizingtokens.De\fneFIRST(\u000b),where\u000bisanystringofgrammarsymbols,tobethesetofterminalsthatbeginstringsderivedfrom\u000b.If\u000b)\u0003\u000f,then\u000fisalsoinFIRST(\u000b).Forexample,inFig.4.15,A)\u0003c\r,socisinFIRST(A).ForapreviewofhowFIRSTcanbeusedduringpredictiveparsing,considertwoA-productionsA!\u000bj\f,whereFIRST(\u000b)andFIRST(\f)aredisjointsets.WecanthenchoosebetweentheseA-productionsbylookingatthenextinput4.4.TOP-DOWNPARSING221\f\r\u000bSAcaFigure4.15:TerminalcisinFIRST(A)andaisinFOLLOW(A)symbola,sinceacanbeinatmostoneofFIRST(\u000b)andFIRST(\f),notboth.Forinstance,ifaisinFIRST(\f)choosetheproductionA!\f.ThisideawillbeexploredwhenLL(1)grammarsarede\fnedinSection4.4.3.De\fneFOLLOW(A),fornonterminalA,tobethesetofterminalsathatcanappearimmediatelytotherightofAinsomesententialform;thatis,thesetofterminalsasuchthatthereexistsaderivationoftheformS)\u0003\u000bAa\f,forsome\u000band\f,asinFig.4.15.NotethattheremayhavebeensymbolsbetweenAanda,atsometimeduringthederivation,butifso,theyderived\u000fanddisappeared.Inaddition,ifAcanbetherightmostsymbolinsomesententialform,then$isinFOLLOW(A);recallthat$isaspecial\\endmarker\"symbolthatisassumednottobeasymbolofanygrammar.TocomputeFIRST(X)forallgrammarsymbolsX,applythefollowingrulesuntilnomoreterminalsor\u000fcanbeaddedtoanyFIRSTset.1.IfXisaterminal,thenFIRST(X)=fXg.2.IfXisanonterminalandX!Y1Y2\u0001\u0001\u0001Ykisaproductionforsomek\u00151,thenplaceainFIRST(X)ifforsomei,aisinFIRST(Yi),and\u000fisinallofFIRST(Y1);:::;FIRST(Yi\u00001);thatis,Y1\u0001\u0001\u0001Yi\u00001)\u0003\u000f.If\u000fisinFIRST(Yj)forallj=1;2;:::;k,thenadd\u000ftoFIRST(X).Forexample,everythinginFIRST(Y1)issurelyinFIRST(X).IfY1doesnotderive\u000f,thenweaddnothingmoretoFIRST(X),butifY1)\u0003\u000f,thenweaddFIRST(Y2),andsoon.3.IfX!\u000fisaproduction,thenadd\u000ftoFIRST(X).Now,wecancomputeFIRSTforanystringX1X2\u0001\u0001\u0001Xnasfollows.AddtoFIRST(X1X2\u0001\u0001\u0001Xn)allnon-\u000fsymbolsofFIRST(X1).Alsoaddthenon-\u000fsym-bolsofFIRST(X2),if\u000fisinFIRST(X1);thenon-\u000fsymbolsofFIRST(X3),if\u000fisinFIRST(X1)andFIRST(X2);andsoon.Finally,add\u000ftoFIRST(X1X2\u0001\u0001\u0001Xn)if,foralli,\u000fisinFIRST(Xi).TocomputeFOLLOW(A)forallnonterminalsA,applythefollowingrulesuntilnothingcanbeaddedtoanyFOLLOWset.1.Place$inFOLLOW(S),whereSisthestartsymbol,and$istheinputrightendmarker.222CHAPTER4.SYNTAXANALYSIS2.IfthereisaproductionA!\u000bB\f,theneverythinginFIRST(\f)except\u000fisinFOLLOW(B).3.IfthereisaproductionA!\u000bB,oraproductionA!\u000bB\f,whereFIRST(\f)contains\u000f,theneverythinginFOLLOW(A)isinFOLLOW(B).Example4.30:Consideragainthenon-left-recursivegrammar(4.28).Then:1.FIRST(F)=FIRST(T)=FIRST(E)=f(;idg.Toseewhy,notethatthetwoproductionsforFhavebodiesthatstartwiththesetwoterminalsymbols,idandtheleftparenthesis.Thasonlyoneproduction,anditsbodystartswithF.SinceFdoesnotderive\u000f,FIRST(T)mustbethesameasFIRST(F).ThesameargumentcoversFIRST(E).2.FIRST(E0)=f+;\u000fg.ThereasonisthatoneofthetwoproductionsforE0hasabodythatbeginswithterminal+,andtheother'sbodyis\u000f.When-everanonterminalderives\u000f,weplace\u000finFIRSTforthatnonterminal.3.FIRST(T0)=f\u0003;\u000fg.ThereasoningisanalogoustothatforFIRST(E0).4.FOLLOW(E)=FOLLOW(E0)=f);$g.SinceEisthestartsymbol,FOLLOW(E)mustcontain$.Theproductionbody(E)explainswhytherightparenthesisisinFOLLOW(E).ForE0,notethatthisnonterminalappearsonlyattheendsofbodiesofE-productions.Thus,FOLLOW(E0)mustbethesameasFOLLOW(E).5.FOLLOW(T)=FOLLOW(T0)=f+;);$g.NoticethatTappearsinbodiesonlyfollowedbyE0.Thus,everythingexcept\u000fthatisinFIRST(E0)mustbeinFOLLOW(T);thatexplainsthesymbol+.However,sinceFIRST(E0)contains\u000f(i.e.,E0)\u0003\u000f),andE0istheentirestringfollowingTinthebodiesoftheE-productions,everythinginFOLLOW(E)mustalsobeinFOLLOW(T).Thatexplainsthesymbols$andtherightparenthesis.AsforT0,sinceitappearsonlyattheendsoftheT-productions,itmustbethatFOLLOW(T0)=FOLLOW(T).6.FOLLOW(F)=f+;\u0003;);$g.ThereasoningisanalogoustothatforTinpoint(5).24.4.3LL(1)GrammarsPredictiveparsers,thatis,recursive-descentparsersneedingnobacktracking,canbeconstructedforaclassofgrammarscalledLL(1).The\frst\\L\"inLL(1)standsforscanningtheinputfromlefttoright,thesecond\\L\"forproducingaleftmostderivation,andthe\\1\"forusingoneinputsymboloflookaheadateachsteptomakeparsingactiondecisions.4.4.TOP-DOWNPARSING223224CHAPTER4.SYNTAXANALYSIST1E02E0:3+4T5E06\u000fE:0T3+\u000f6(a)(b)0E:Figure4.16:TransitiondiagramsfornonterminalsEandE0ofgrammar4.28The\frsttwoconditionsareequivalenttothestatementthatFIRST(\u000b)andFIRST(\f)aredisjointsets.Thethirdconditionisequivalenttostatingthatif\u000fisinFIRST(\f),thenFIRST(\u000b)andFOLLOW(A)aredisjointsets,andlikewiseif\u000fisinFIRST(\u000b).PredictiveparserscanbeconstructedforLL(1)grammarssincetheproperproductiontoapplyforanonterminalcanbeselectedbylookingonlyatthecurrentinputsymbol.Flow-of-controlconstructs,withtheirdistinguishingkey-words,generallysatisfytheLL(1)constraints.Forinstance,ifwehavetheproductionsstmt!if(expr)stmtelsestmtjwhile(expr)stmtj{stmt4.4.TOP-DOWNPARSING225If,afterperformingtheabove,thereisnoproductionatallinM[A;a],thensetM[A;a]toerror(whichwenormallyrepresentbyanemptyentryinthetable).2Example4.32:Fortheexpressiongrammar(4.28),Algorithm4.31producestheparsingtableinFig.4.17.Blanksareerrorentries;nonblanksindicateaproductionwithwhichtoexpandanonterminal.226CHAPTER4.SYNTAXANALYSIS4.4.TOP-DOWNPARSING227a+b$InputPredictiveParsingProgramXYZ$StackParsingTableMOutputFigure4.19:Modelofatable-drivenpredictiveparserMETHOD:Initially,theparserisinacon\fgurationwithw$intheinputbu\u000berandthestartsymbolSofGontopofthestack,above$.TheprograminFig.4.20usesthepredictiveparsingtableMtoproduceapredictiveparsefortheinput.2letabethe\frstsymbolofw;letXbethetopstacksymbol;while(X6=$)f/*stackisnotempty*/if(X=a)popthestackandletabethenextsymbolofw;elseif(Xisaterminal)error();elseif(M[X;a]isanerrorentry)error();elseif(M[X;a]=X!Y1Y2\u0001\u0001\u0001Yk)foutputtheproductionX!Y1Y2\u0001\u0001\u0001Yk;popthestack;pushYk;Yk\u00001;:::;Y1ontothestack,withY1ontop;gletXbethetopstacksymbol;gFigure4.20:PredictiveparsingalgorithmExample4.35:Considergrammar(4.28);wehavealreadyseenitstheparsingtableinFig.4.17.Oninputid+id\u0003id,thenonrecursivepredictiveparserofAlgorithm4.34makesthesequenceofmovesinFig.4.21.Thesemovescorrespondtoaleftmostderivation(seeFig.4.12forthefullderivation):E)lmTE0)lmFT0E0)lmidT0E0)lmidE0)lmid+TE0)lm\u0001\u0001\u0001228CHAPTER4.SYNTAXANALYSIS4.4.TOP-DOWNPARSING229e\u000bectivenessdependsonthechoiceofsynchronizingset.Thesetsshouldbechosensothattheparserrecoversquicklyfromerrorsthatarelikelytooccurinpractice.Someheuristicsareasfollows:1.Asastartingpoint,placeallsymbolsinFOLLOW(A)intothesynchro-nizingsetfornonterminalA.IfweskiptokensuntilanelementofFOLLOW(A)isseenandpopAfromthestack,itislikelythatparsingcancontinue.2.ItisnotenoughtouseFOLLOW(A)asthesynchronizingsetforA.Forexample,ifsemicolonsterminatestatements,asinC,thenkeywordsthatbeginstatementsmaynotappearintheFOLLOWsetofthenontermi-nalrepresentingexpressions.Amissingsemicolonafteranassignmentmaythereforeresultinthekeywordbeginningthenextstatementbe-ingskipped.Often,thereisahierarchicalstructureonconstructsinalanguage;forexample,expressionsappearwithinstatements,whichap-pearwithinblocks,andsoon.Wecanaddtothesynchronizingsetofalower-levelconstructthesymbolsthatbeginhigher-levelconstructs.Forexample,wemightaddkeywordsthatbeginstatementstothesynchro-nizingsetsforthenonterminalsgeneratingexpressions.3.IfweaddsymbolsinFIRST(A)tothesynchronizingsetfornonterminalA,thenitmaybepossibletoresumeparsingaccordingtoAifasymbolinFIRST(A)appearsintheinput.4.Ifanonterminalcangeneratetheemptystring,thentheproductionde-riving\u000fcanbeusedasadefault.Doingsomaypostponesomeerrordetection,butcannotcauseanerrortobemissed.Thisapproachreducesthenumberofnonterminalsthathavetobeconsideredduringerrorre-covery.5.Ifaterminalontopofthestackcannotbematched,asimpleideaistopoptheterminal,issueamessagesayingthattheterminalwasinserted,andcontinueparsing.Ine\u000bect,thisapproachtakesthesynchronizingsetofatokentoconsistofallothertokens.Example4.36:UsingFIRSTandFOLLOWsymbolsassynchronizingtokensworksreasonablywellwhenexpressionsareparsedaccordingtotheusualgram-mar(4.28).TheparsingtableforthisgrammarinFig.4.17isrepeatedinFig.4.22,with\\synch\"indicatingsynchronizingtokensobtainedfromtheFOLLOWsetofthenonterminalinquestion.TheFOLLOWsetsforthenon-terminalsareobtainedfromExample4.30.ThetableinFig.4.22istobeusedasfollows.IftheparserlooksupentryM[A;a]and\fndsthatitisblank,thentheinputsymbolaisskipped.Iftheentryis\\synch,\"thenthenonterminalontopofthestackispoppedinanattempttoresumeparsing.Ifatokenontopofthestackdoesnotmatchtheinputsymbol,thenwepopthetokenfromthestack,asmentionedabove.230CHAPTER4.SYNTAXANALYSIS4.4.TOP-DOWNPARSING231Phrase-levelRecoveryPhrase-levelerrorrecoveryisimplementedby\fllingintheblankentriesinthepredictiveparsingtablewithpointerstoerrorroutines.Theseroutinesmaychange,insert,ordeletesymbolsontheinputandissueappropriateerrormessages.Theymayalsopopfromthestack.Alterationofstacksymbolsorthepushingofnewsymbolsontothestackisquestionableforseveralreasons.First,thestepscarriedoutbytheparsermightthennotcorrespondtothederivationofanywordinthelanguageatall.Second,wemustensurethatthereisnopossibilityofanin\fniteloop.Checkingthatanyrecoveryactioneventuallyresultsinaninputsymbolbeingconsumed(orthestackbeingshortenediftheendoftheinputhasbeenreached)isagoodwaytoprotectagainstsuchloops.4.4.6ExercisesforSection4.4Exercise4.4.1:Foreachofthefollowinggrammars,devisepredictiveparsersandshowtheparsingtables.Youmayleft-factorand/oreliminateleft-recursionfromyourgrammars\frst.a)ThegrammarofExercise4.2.2(a).b)ThegrammarofExercise4.2.2(b).c)ThegrammarofExercise4.2.2(c).d)ThegrammarofExercise4.2.2(d).e)ThegrammarofExercise4.2.2(e).f)ThegrammarofExercise4.2.2(g).!!Exercise4.4.2:Isitpossible,bymodifyingthegrammarinanyway,tocon-structapredictiveparserforthelanguageofExercise4.2.1(post\fxexpressionswithoperanda)?Exercise4.4.3:ComputeFIRSTandFOLLOWforthegrammarofExercise4.2.1.Exercise4.4.4:ComputeFIRSTandFOLLOWforeachofthegrammarsofExercise4.2.2.Exercise4.4.5:ThegrammarS!aSajaageneratesalleven-lengthstringsofa's.Wecandevisearecursive-descentparserwithbacktrackforthisgrammar.IfwechoosetoexpandbyproductionS!aa\frst,thenweshallonlyrecognizethestringaa.Thus,anyreasonablerecursive-descentparserwilltryS!aSa\frst.a)Showthatthisrecursive-descentparserrecognizesinputsaa,aaaa,andaaaaaaaa,butnotaaaaaa.232CHAPTER4.SYNTAXANALYSIS!!b)Whatlanguagedoesthisrecursive-descentparserrecognize?Thefollowingexercisesareusefulstepsintheconstructionofa\\ChomskyNormalForm\"grammarfromarbitrarygrammars,asde\fnedinExercise4.4.8.!Exercise4.4.6:Agrammaris\u000f-freeifnoproductionbodyis\u000f(calledan\u000f-production).a)Giveanalgorithmtoconvertanygrammarintoan\u000f-freegrammarthatgeneratesthesamelanguage(withthepossibleexceptionoftheemptystring|no\u000f-freegrammarcangenerate\u000f).Hint:First\fndallthenonterminalsthatarenullable,meaningthattheygenerate\u000f,perhapsbyalongderivation.b)ApplyyouralgorithmtothegrammarS!aSbSjbSaSj\u000f.!Exercise4.4.7:Asingleproductionisaproductionwhosebodyisasinglenonterminal,i.e.,aproductionoftheformA!B.a)Giveanalgorithmtoconvertanygrammarintoan\u000f-freegrammar,withnosingleproductions,thatgeneratesthesamelanguage(withthepossibleexceptionoftheemptystring)Hint:Firsteliminate\u000f-productions,andthen\fndforwhichpairsofnonterminalsAandBdoesA)\u0003Bbyasequenceofsingleproductions.b)Applyyouralgorithmtothegrammar(4.1)inSection4.1.2.c)Showthat,asaconsequenceofpart(a),wecanconvertagrammarintoanequivalentgrammarthathasnocycles(derivationsofoneormorestepsinwhichA)\u0003AforsomenonterminalA).!!Exercise4.4.8:AgrammarissaidtobeinChomskyNormalForm(CNF)ifeveryproductioniseitheroftheformA!BCoroftheformA!a,whereA,B,andCarenonterminals,andaisaterminal.ShowhowtoconvertanygrammarintoaCNFgrammarforthesamelanguage(withthepossibleexceptionoftheemptystring|noCNFgrammarcangenerate\u000f).!Exercise4.4.9:Everylanguagethathasacontext-freegrammarcanberec-ognizedinatmostO(n3)timeforstringsoflengthn.Asimplewaytodoso,calledtheCocke-Younger-Kasami(orCYK)algorithmisbasedondynamicpro-gramming.Thatis,givenastringa1a2\u0001\u0001\u0001an,weconstructann-by-ntableTsuchthatTijisthesetofnonterminalsthatgeneratethesubstringaiai+1\u0001\u0001\u0001aj.IftheunderlyinggrammarisinCNF(seeExercise4.4.8),thenonetableentrycanbe\flledininO(n)time,providedwe\flltheentriesintheproperorder:lowestvalueofj\u0000i\frst.Writeanalgorithmthatcorrectly\fllsintheentriesofthetable,andshowthatyouralgorithmtakesO(n3)time.Having\flledinthetable,howdoyoudeterminewhethera1a2\u0001\u0001\u0001anisinthelanguage?4.5.BOTTOM-UPPARSING233!Exercise4.4.10:Showhow,having\flledinthetableasinExercise4.4.9,wecaninO(n)timerecoveraparsetreefora1a2\u0001\u0001\u0001an.Hint:modifythetablesoitrecords,foreachnonterminalAineachtableentryTij,somepairofnonterminalsinothertableentriesthatjusti\fedputtingAinTij.!Exercise4.4.11:ModifyyouralgorithmofExercise4.4.9sothatitwill\fnd,foranystring,thesmallestnumberofinsert,delete,andmutateerrors(eacherrorasinglecharacter)neededtoturnthestringintoastringinthelanguageoftheunderlyinggrammar.stmt!ifethenstmtstmtTailjwhileedostmtjbeginlistendjsstmtTail!elsestmtj\u000flist!stmtlistTaillistTail!;listj\u000fFigure4.24:Agrammarforcertainkindsofstatements!Exercise4.4.12:InFig.4.24isagrammarforcertainstatements.Youmaytakeeandstobeterminalsstandingforconditionalexpressionsand\\otherstatements,\"respectively.Ifweresolvethecon\rictregardingexpansionoftheoptional\\else\"(nonterminalstmtTail)bypreferringtoconsumeanelsefromtheinputwheneverweseeone,wecanbuildapredictiveparserforthisgrammar.UsingtheideaofsynchronizingsymbolsdescribedinSection4.4.5:a)Buildanerror-correctingpredictiveparsingtableforthegrammar.b)Showthebehaviorofyourparseronthefollowinginputs:(i)ifethens;ifethensend(ii)whileedobegins;ifethens;end4.5Bottom-UpParsingAbottom-upparsecorrespondstotheconstructionofaparsetreeforaninputstringbeginningattheleaves(thebottom)andworkinguptowardstheroot(thetop).Itisconvenienttodescribeparsingastheprocessofbuildingparsetrees,althoughafrontendmayinfactcarryoutatranslationdirectlywithoutbuildinganexplicittree.ThesequenceoftreesnapshotsinFig.4.25illustrates234CHAPTER4.SYNTAXANALYSISidF\u0003idTFTid\u0003ETTFidFididid\u0003idF\u0003idTFid\u0003idTFid\u0003FFigure4.25:Abottom-upparseforid*idabottom-upparseofthetokenstreamid\u0003id,withrespecttotheexpressiongrammar(4.1).Thissectionintroducesageneralstyleofbottom-upparsingknownasshift-reduceparsing.Thelargestclassofgrammarsforwhichshift-reduceparserscanbebuilt,theLRgrammars,willbediscussedinSections4.6and4.7.AlthoughitistoomuchworktobuildanLRparserbyhand,toolscalledautomaticparsergeneratorsmakeiteasytoconstructe\u000ecientLRparsersfromsuitablegram-mars.Theconceptsinthissectionarehelpfulforwritingsuitablegrammarstomakee\u000bectiveuseofanLRparsergenerator.AlgorithmsforimplementingparsergeneratorsappearinSection4.7.4.5.1ReductionsWecanthinkofbottom-upparsingastheprocessof\\reducing\"astringwtothestartsymbolofthegrammar.Ateachreductionstep,aspeci\fcsubstringmatchingthebodyofaproductionisreplacedbythenonterminalattheheadofthatproduction.Thekeydecisionsduringbottom-upparsingareaboutwhentoreduceandaboutwhatproductiontoapply,astheparseproceeds.Example4.37:ThesnapshotsinFig.4.25illustrateasequenceofreductions;thegrammaristheexpressiongrammar(4.1).Thereductionswillbediscussedintermsofthesequenceofstringsid\u0003id;F\u0003id;T\u0003id;T\u0003F;T;EThestringsinthissequenceareformedfromtherootsofallthesubtreesinthesnapshots.Thesequencestartswiththeinputstringid\u0003id.The\frstreductionproducesF\u0003idbyreducingtheleftmostidtoF,usingtheproductionF!id.ThesecondreductionproducesT\u0003idbyreducingFtoT.Now,wehaveachoicebetweenreducingthestringT,whichisthebodyofE!T,andthestringconsistingofthesecondid,whichisthebodyofF!id.RatherthanreduceTtoE,thesecondidisreducedtoF,resultinginthestringT\u0003F.ThisstringthenreducestoT.TheparsecompleteswiththereductionofTtothestartsymbolE.24.5.BOTTOM-UPPARSING235Byde\fnition,areductionisthereverseofastepinaderivation(recallthatinaderivation,anonterminalinasententialformisreplacedbythebodyofoneofitsproductions).Thegoalofbottom-upparsingisthereforetoconstructaderivationinreverse.ThefollowingcorrespondstotheparseinFig.4.25:E)T)T\u0003F)T\u0003id)F\u0003id)id\u0003idThisderivationisinfactarightmostderivation.4.5.2HandlePruningBottom-upparsingduringaleft-to-rightscanoftheinputconstructsaright-mostderivationinreverse.Informally,a\\handle\"isasubstringthatmatchesthebodyofaproduction,andwhosereductionrepresentsonestepalongthereverseofarightmostderivation.Forexample,addingsubscriptstothetokensidforclarity,thehandlesduringtheparseofid1\u0003id2accordingtotheexpressiongrammar(4.1)areasinFig.4.26.AlthoughTisthebodyoftheproductionE!T,thesymbolTisnotahandleinthesententialformT\u0003id2.IfTwereindeedreplacedbyE,wewouldgetthestringE\u0003id2,whichcannotbederivedfromthestartsymbolE.Thus,theleftmostsubstringthatmatchesthebodyofsomeproductionneednotbeahandle.236CHAPTER4.SYNTAXANALYSISS\u000bwA\fFigure4.27:AhandleA!\fintheparsetreefor\u000b\fwofthegrammarathand,thenletw=\rn,where\rnisthenthright-sententialformofsomeasyetunknownrightmostderivationS=\r0)rm\r1)rm\r2)rm\u0001\u0001\u0001)rm\rn\u00001)rm\rn=wToreconstructthisderivationinreverseorder,welocatethehandle\fnin\rnandreplace\fnbytheheadoftherelevantproductionAn!\fntoobtainthepreviousright-sententialform\rn\u00001.Notethatwedonotyetknowhowhandlesaretobefound,butweshallseemethodsofdoingsoshortly.Wethenrepeatthisprocess.Thatis,welocatethehandle\fn\u00001in\rn\u00001andreducethishandletoobtaintheright-sententialform\rn\u00002.Ifbycontinuingthisprocessweproducearight-sententialformconsistingonlyofthestartsymbolS,thenwehaltandannouncesuccessfulcompletionofparsing.Thereverseofthesequenceofproductionsusedinthereductionsisarightmostderivationfortheinputstring.4.5.3Shift-ReduceParsingShift-reduceparsingisaformofbottom-upparsinginwhichastackholdsgrammarsymbolsandaninputbu\u000berholdstherestofthestringtobeparsed.Asweshallsee,thehandlealwaysappearsatthetopofthestackjustbeforeitisidenti\fedasthehandle.Weuse$tomarkthebottomofthestackandalsotherightendoftheinput.Conventionally,whendiscussingbottom-upparsing,weshowthetopofthestackontheright,ratherthanontheleftaswedidfortop-downparsing.Initially,thestackisempty,andthestringwisontheinput,asfollows:STACKINPUT$w$Duringaleft-to-rightscanoftheinputstring,theparsershiftszeroormoreinputsymbolsontothestack,untilitisreadytoreduceastring\fofgrammarsymbolsontopofthestack.Itthenreduces\ftotheheadoftheappropriateproduction.Theparserrepeatsthiscycleuntilithasdetectedanerrororuntilthestackcontainsthestartsymbolandtheinputisempty:4.5.BOTTOM-UPPARSING237STACKINPUT$S$Uponenteringthiscon\fguration,theparserhaltsandannouncessuccessfulcompletionofparsing.Figure4.28stepsthroughtheactionsashift-reduceparsermighttakeinparsingtheinputstringid1\u0003id2accordingtotheexpressiongrammar(4.1).238CHAPTER4.SYNTAXANALYSISSAB\u000b\f\ryzCase(1)SAB\u000b\rxyzCase(2)Figure4.29:CasesfortwosuccessivestepsofarightmostderivationConsidercase(1)inreverse,whereashift-reduceparserhasjustreachedthecon\fgurationSTACKINPUT$\u000b\f\ryz$Theparserreducesthehandle\rtoBtoreachthecon\fguration$\u000b\fByz$Theparsercannowshiftthestringyontothestackbyasequenceofzeroormoreshiftmovestoreachthecon\fguration$\u000b\fByz$withthehandle\fByontopofthestack,anditgetsreducedtoA.Nowconsidercase(2).Incon\fguration$\u000b\rxyz$thehandle\risontopofthestack.Afterreducingthehandle\rtoB,theparsercanshiftthestringxytogetthenexthandleyontopofthestack,readytobereducedtoA:$\u000bBxyz$Inbothcases,aftermakingareductiontheparserhadtoshiftzeroormoresymbolstogetthenexthandleontothestack.Itneverhadtogointothestackto\fndthehandle.4.5.4Con\rictsDuringShift-ReduceParsingTherearecontext-freegrammarsforwhichshift-reduceparsingcannotbeused.Everyshift-reduceparserforsuchagrammarcanreachacon\fgurationinwhichtheparser,knowingtheentirestackandalsothenextkinputsymbols,cannotdecidewhethertoshiftortoreduce(ashift/reducecon\rict),orcannotdecide4.5.BOTTOM-UPPARSING239whichofseveralreductionstomake(areduce/reducecon\rict).Wenowgivesomeexamplesofsyntacticconstructsthatgiverisetosuchgrammars.Techni-cally,thesegrammarsarenotintheLR(k)classofgrammarsde\fnedinSection4.7;werefertothemasnon-LRgrammars.ThekinLR(k)referstothenumberofsymbolsoflookaheadontheinput.GrammarsusedincompilingusuallyfallintheLR(1)class,withonesymboloflookaheadatmost.Example4.38:AnambiguousgrammarcanneverbeLR.Forexample,con-siderthedangling-elsegrammar(4.14)ofSection4.3:stmt!ifexprthenstmtjifexprthenstmtelsestmtjotherIfwehaveashift-reduceparserincon\fgurationSTACKINPUT\u0001\u0001\u0001ifexprthenstmtelse\u0001\u0001\u0001$wecannottellwhetherifexprthenstmtisthehandle,nomatterwhatappearsbelowitonthestack.Herethereisashift/reducecon\rict.Dependingonwhatfollowstheelseontheinput,itmightbecorrecttoreduceifexprthenstmttostmt,oritmightbecorrecttoshiftelseandthentolookforanotherstmttocompletethealternativeifexprthenstmtelsestmt.Notethatshift-reduceparsingcanbeadaptedtoparsecertainambigu-ousgrammars,suchastheif-then-elsegrammarabove.Ifweresolvetheshift/reducecon\rictonelseinfavorofshifting,theparserwillbehaveasweexpect,associatingeachelsewiththepreviousunmatchedthen.WediscussparsersforsuchambiguousgrammarsinSection4.8.2Anothercommonsettingforcon\rictsoccurswhenweknowwehaveahan-dle,butthestackcontentsandthenextinputsymbolareinsu\u000ecienttode-terminewhichproductionshouldbeusedinareduction.Thenextexampleillustratesthissituation.Example4.39:Supposewehavealexicalanalyzerthatreturnsthetokennameidforallnames,regardlessoftheirtype.Supposealsothatourlan-guageinvokesproceduresbygivingtheirnames,withparameterssurroundedbyparentheses,andthatarraysarereferencedbythesamesyntax.Sincethetranslationofindicesinarrayreferencesandparametersinprocedurecallsaredi\u000berent,wewanttousedi\u000berentproductionstogeneratelistsofactualparametersandindices.Ourgrammarmightthereforehave(amongothers)productionssuchasthoseinFig.4.30.Astatementbeginningwithp(i,j)wouldappearasthetokenstreamid(id;id)totheparser.Aftershiftingthe\frstthreetokensontothestack,ashift-reduceparserwouldbeincon\fguration240CHAPTER4.SYNTAXANALYSIS(1)stmt!id(parameter4.6.INTRODUCTIONTOLRPARSING:SIMPLELR241a)SSS+a\u0003+.b)SS+a\u0003a+.c)aaa\u0003a++.Exercise4.5.3:Givebottom-upparsesforthefollowinginputstringsandgrammars:a)Theinput000111accordingtothegrammarofExercise4.5.1.b)Theinputaaa\u0003a++accordingtothegrammarofExercise4.5.2.4.6IntroductiontoLRParsing:SimpleLRThemostprevalenttypeofbottom-upparsertodayisbasedonaconceptcalledLR(k)parsing;the\\L\"isforleft-to-rightscanningoftheinput,the\\R\"forconstructingarightmostderivationinreverse,andthekforthenumberofinputsymbolsoflookaheadthatareusedinmakingparsingdecisions.Thecasesk=0ork=1areofpracticalinterest,andweshallonlyconsiderLRparserswithk\u00141here.When(k)isomitted,kisassumedtobe1.ThissectionintroducesthebasicconceptsofLRparsingandtheeasiestmethodforconstructingshift-reduceparsers,called\\simpleLR\"(orSLR,forshort).SomefamiliaritywiththebasicconceptsishelpfuleveniftheLRparseritselfisconstructedusinganautomaticparsergenerator.Webeginwith\\items\"and\\parserstates;\"thediagnosticoutputfromanLRparsergeneratortypicallyincludesparserstates,whichcanbeusedtoisolatethesourcesofparsingcon\ricts.Section4.7introducestwo,morecomplexmethods|canonical-LRandLALR|thatareusedinthemajorityofLRparsers.4.6.1WhyLRParsers?LRparsersaretable-driven,muchlikethenonrecursiveLLparsersofSec-tion4.4.4.AgrammarforwhichwecanconstructaparsingtableusingoneofthemethodsinthissectionandthenextissaidtobeanLRgrammar.Intu-itively,foragrammartobeLRitissu\u000ecientthataleft-to-rightshift-reduceparserbeabletorecognizehandlesofright-sententialformswhentheyappearontopofthestack.LRparsingisattractiveforavarietyofreasons:\u000fLRparserscanbeconstructedtorecognizevirtuallyallprogramming-languageconstructsforwhichcontext-freegrammarscanbewritten.Non-LRcontext-freegrammarsexist,butthesecangenerallybeavoidedfortypicalprogramming-languageconstructs.242CHAPTER4.SYNTAXANALYSIS\u000fTheLR-parsingmethodisthemostgeneralnonbacktrackingshift-reduceparsingmethodknown,yetitcanbeimplementedase\u000ecientlyasother,moreprimitiveshift-reducemethods(seethebibliographicnotes).\u000fAnLRparsercandetectasyntacticerrorassoonasitispossibletodosoonaleft-to-rightscanoftheinput.\u000fTheclassofgrammarsthatcanbeparsedusingLRmethodsisapropersupersetoftheclassofgrammarsthatcanbeparsedwithpredictiveorLLmethods.ForagrammartobeLR(k),wemustbeabletorecognizetheoccurrenceoftherightsideofaproductioninaright-sententialform,withkinputsymbolsoflookahead.ThisrequirementisfarlessstringentthanthatforLL(k)grammarswherewemustbeabletorecognizetheuseofaproductionseeingonlythe\frstksymbolsofwhatitsrightsidederives.Thus,itshouldnotbesurprisingthatLRgrammarscandescribemorelanguagesthanLLgrammars.TheprincipaldrawbackoftheLRmethodisthatitistoomuchworktoconstructanLRparserbyhandforatypicalprogramming-languagegrammar.Aspecializedtool,anLRparsergenerator,isneeded.Fortunately,manysuchgeneratorsareavailable,andweshalldiscussoneofthemostcommonlyusedones,Yacc,inSection4.9.Suchageneratortakesacontext-freegrammarandautomaticallyproducesaparserforthatgrammar.Ifthegrammarcontainsambiguitiesorotherconstructsthataredi\u000eculttoparseinaleft-to-rightscanoftheinput,thentheparsergeneratorlocatestheseconstructsandprovidesdetaileddiagnosticmessages.4.6.2ItemsandtheLR(0)AutomatonHowdoesashift-reduceparserknowwhentoshiftandwhentoreduce?Forexample,withstackcontents$Tandnextinputsymbol\u0003inFig.4.28,howdoestheparserknowthatTonthetopofthestackisnotahandle,sotheappropriateactionistoshiftandnottoreduceTtoE?AnLRparsermakesshift-reducedecisionsbymaintainingstatestokeeptrackofwhereweareinaparse.Statesrepresentsetsof\\items.\"AnLR(0)item(itemforshort)ofagrammarGisaproductionofGwithadotatsomepositionofthebody.Thus,productionA!XYZyieldsthefouritemsA!\u0001XYZA!X\u0001YZA!XY\u0001ZA!XYZ\u0001TheproductionA!\u000fgeneratesonlyoneitem,A!\u0001.Intuitively,anitemindicateshowmuchofaproductionwehaveseenatagivenpointintheparsingprocess.Forexample,theitemA!\u0001XYZindicatesthatwehopetoseeastringderivablefromXYZnextontheinput.Item4.6.INTRODUCTIONTOLRPARSING:SIMPLELR243244CHAPTER4.SYNTAXANALYSIS!I7!T\u0001\u0003FT!ET\u0001EE+T\u0001!I2T\u0001\u0003F!TT!I4id\u0001F!I5T\u0003F\u0001T!I10\u0001idF!\u0001(E)F!T\u0003\u0001FI9!E\u0001E0!I1\u0001idF!\u0001(E)F!\u0001FT!\u0001T\u0003FTE\u0001idF!\u0001(E)F!\u0001FT!\u0001T\u0003FT!E+\u0001TE!I6E\u0001+T!FidTT(E\u0003accept$+idF(TT\u0003)++((idFFF((ididE\u0001(E)F!\u0001FT!\u0001T\u0003FT!\u0001TE!\u0001E+TE(\u0001E)F!F\u0001T!I3(E)\u0001F!I11(E\u0001)F!E\u0001+TE!I8\u0001idFEI0!E0\u0001E!E\u0001E+T!\u0001T!Figure4.31:LR(0)automatonfortheexpressiongrammar(4.1)Intuitively,A!\u000b\u0001B\finCLOSURE(I)indicatesthat,atsomepointintheparsingprocess,wethinkwemightnextseeasubstringderivablefromB\fasinput.ThesubstringderivablefromB\fwillhaveapre\fxderivablefromBbyapplyingoneoftheB-productions.WethereforeadditemsforalltheB-productions;thatis,ifB!\risaproduction,wealsoincludeB!\u0001\rinCLOSURE(I).Example4.40:Considertheaugmentedexpressiongrammar:E0!EE!E+TjTT!T\u0003FjFF!(E)jidIfIisthesetofoneitemf[E0!\u0001E]g,thenCLOSURE(I)containsthesetofitemsI0inFig.4.31.4.6.INTRODUCTIONTOLRPARSING:SIMPLELR245Toseehowtheclosureiscomputed,E0!\u0001EisputinCLOSURE(I)byrule(1).SincethereisanEimmediatelytotherightofadot,weaddtheE-productionswithdotsattheleftends:E!\u0001E+TandE!\u0001T.NowthereisaTimmediatelytotherightofadotinthelatteritem,soweaddT!\u0001T\u0003FandT!\u0001F.Next,theFtotherightofadotforcesustoaddF!\u0001(E)andF!\u0001id,butnootheritemsneedtobeadded.2TheclosurecanbecomputedasinFig.4.32.Aconvenientwaytoimple-mentthefunctionclosureistokeepabooleanarrayadded,indexedbythenonterminalsofG,suchthatadded[B]issettotrueifandwhenweaddtheitemB!\u0001\rforeachB-productionB!\r.SetOfItemsCLOSURE(I)fJ=I;repeatfor(eachitemA!\u000b\u0001B\finJ)for(eachproductionB!\rofG)if(B!\u0001\risnotinJ)addB!\u0001\rtoJ;untilnomoreitemsareaddedtoJononeround;returnJ;gFigure4.32:ComputationofCLOSURENotethatifoneB-productionisaddedtotheclosureofIwiththedotattheleftend,thenallB-productionswillbesimilarlyaddedtotheclosure.Hence,itisnotnecessaryinsomecircumstancesactuallytolisttheitemsB!\u0001\raddedtoIbyCLOSURE.AlistofthenonterminalsBwhoseproductionsweresoaddedwillsu\u000ece.Wedivideallthesetsofitemsofinterestintotwoclasses:1.Kernelitems:theinitialitem,S0!\u0001S,andallitemswhosedotsarenotattheleftend.2.Nonkernelitems:allitemswiththeirdotsattheleftend,exceptforS0!\u0001S.Moreover,eachsetofitemsofinterestisformedbytakingtheclosureofasetofkernelitems;theitemsaddedintheclosurecanneverbekernelitems,ofcourse.Thus,wecanrepresentthesetsofitemswearereallyinterestedinwithverylittlestorageifwethrowawayallnonkernelitems,knowingthattheycouldberegeneratedbytheclosureprocess.InFig.4.31,nonkernelitemsareintheshadedpartoftheboxforastate.246CHAPTER4.SYNTAXANALYSISTheFunctionGOTOThesecondusefulfunctionisGOTO(I;X)whereIisasetofitemsandXisagrammarsymbol.GOTO(I;X)isde\fnedtobetheclosureofthesetofallitems[A!\u000bX\u0001\f]suchthat[A!\u000b\u0001X\f]isinI.Intuitively,theGOTOfunctionisusedtode\fnethetransitionsintheLR(0)automatonforagrammar.Thestatesoftheautomatoncorrespondtosetsofitems,andGOTO(I;X)speci\festhetransitionfromthestateforIunderinputX.Example4.41:IfIisthesetoftwoitemsf[E0!E\u0001];[E!E\u0001+T]g,thenGOTO(I;+)containstheitemsE!E+\u0001TT!\u0001T\u0003FT!\u0001FF!\u0001(E)F!\u0001idWecomputedGOTO(I;+)byexaminingIforitemswith+immediatelytotherightofthedot.E0!E\u0001isnotsuchanitem,butE!E\u0001+Tis.Wemovedthedotoverthe+togetE!E+\u0001Tandthentooktheclosureofthissingletonset.2WearenowreadyforthealgorithmtoconstructC,thecanonicalcollectionofsetsofLR(0)itemsforanaugmentedgrammarG0|thealgorithmisshowninFig.4.33.voiditems(G0)fC=\bCLOSURE(f[S0!\u0001S]g)\t;repeatfor(eachsetofitemsIinC)for(eachgrammarsymbolX)if(GOTO(I;X)isnotemptyandnotinC)addGOTO(I;X)toC;untilnonewsetsofitemsareaddedtoConaround;gFigure4.33:ComputationofthecanonicalcollectionofsetsofLR(0)itemsExample4.42:ThecanonicalcollectionofsetsofLR(0)itemsforgrammar(4.1)andtheGOTOfunctionareshowninFig.4.31.GOTOisencodedbythetransitionsinthe\fgure.24.6.INTRODUCTIONTOLRPARSING:SIMPLELR247UseoftheLR(0)AutomatonThecentralideabehind\\SimpleLR,\"orSLR,parsingistheconstructionfromthegrammaroftheLR(0)automaton.ThestatesofthisautomatonarethesetsofitemsfromthecanonicalLR(0)collection,andthetransitionsaregivenbytheGOTOfunction.TheLR(0)automatonfortheexpressiongrammar(4.1)appearedearlierinFig.4.31.ThestartstateoftheLR(0)automatonisCLOSURE(f[S0!\u0001S]g),whereS0isthestartsymboloftheaugmentedgrammar.Allstatesareacceptingstates.Wesay\\statej\"torefertothestatecorrespondingtothesetofitemsIj.HowcanLR(0)automatahelpwithshift-reducedecisions?Shift-reducedecisionscanbemadeasfollows.Supposethatthestring\rofgrammarsymbolstakestheLR(0)automatonfromthestartstate0tosomestatej.Then,shiftonnextinputsymbolaifstatejhasatransitionona.Otherwise,wechoosetoreduce;theitemsinstatejwilltelluswhichproductiontouse.TheLR-parsingalgorithmtobeintroducedinSection4.6.3usesitsstacktokeeptrackofstatesaswellasgrammarsymbols;infact,thegrammarsymbolcanberecoveredfromthestate,sothestackholdsstates.ThenextexamplegivesapreviewofhowanLR(0)automatonandastackofstatescanbeusedtomakeshift-reduceparsingdecisions.Example4.43:Figure4.34illustratestheactionsofashift-reduceparseroninputid\u0003id,usingtheLR(0)automatoninFig.4.31.Weuseastacktoholdstates;forclarity,thegrammarsymbolscorrespondingtothestatesonthestackappearincolumnSYMBOLS.Atline(1),thestackholdsthestartstate0oftheautomaton;thecorrespondingsymbolisthebottom-of-stackmarker$.248CHAPTER4.SYNTAXANALYSISWithsymbols,areductionisimplementedbypoppingthebodyofthepro-ductionfromthestack(online(2),thebodyisid)andpushingtheheadoftheproduction(inthiscase,F).Withstates,wepopstate5forsymbolid,whichbringsstate0tothetopandlookforatransitiononF,theheadoftheproduction.InFig.4.31,state0hasatransitiononFtostate3,sowepushstate3,withcorrespondingsymbolF;seeline(3).Asanotherexample,considerline(5),withstate7(symbol\u0003)ontopofthestack.Thisstatehasatransitiontostate5oninputid,sowepushstate5(symbolid).State5hasnotransitions,sowereducebyF!id.Whenwepopstate5forthebodyid,state7comestothetopofthestack.Sincestate7hasatransitiononFtostate10,wepushstate10(symbolF).24.6.3TheLR-ParsingAlgorithmAschematicofanLRparserisshowninFig.4.35.Itconsistsofaninput,anoutput,astack,adriverprogram,andaparsingtablethathastwoparts(ACTIONandGOTO).ThedriverprogramisthesameforallLRparsers;onlytheparsingtablechangesfromoneparsertoanother.Theparsingprogramreadscharactersfromaninputbu\u000beroneatatime.Whereashift-reduceparserwouldshiftasymbol,anLRparsershiftsastate.Eachstatesummarizestheinformationcontainedinthestackbelowit.a1\u0001\u0001\u0001ai\u0001\u0001\u0001an$InputLRParsingProgramsmsm\u00001\u0001\u0001\u0001$StackACTIONGOTOOutputFigure4.35:ModelofanLRparserThestackholdsasequenceofstates,s0s1\u0001\u0001\u0001sm,wheresmisontop.IntheSLRmethod,thestackholdsstatesfromtheLR(0)automaton;thecanonical-LRandLALRmethodsaresimilar.Byconstruction,eachstatehasacorre-spondinggrammarsymbol.Recallthatstatescorrespondtosetsofitems,andthatthereisatransitionfromstateitostatejifGOTO(Ii;X)=Ij.Alltran-sitionstostatejmustbeforthesamegrammarsymbolX.Thus,eachstate,exceptthestartstate0,hasauniquegrammarsymbolassociatedwithit.44.6.INTRODUCTIONTOLRPARSING:SIMPLELR249StructureoftheLRParsingTableTheparsingtableconsistsoftwoparts:aparsing-actionfunctionACTIONandagotofunctionGOTO.1.TheACTIONfunctiontakesasargumentsastateiandaterminala(or$,theinputendmarker).ThevalueofACTION[i;a]canhaveoneoffourforms:(a)Shiftj,wherejisastate.Theactiontakenbytheparsere\u000bectivelyshiftsinputatothestack,butusesstatejtorepresenta.(b)ReduceA!\f.Theactionoftheparsere\u000bectivelyreduces\fonthetopofthestacktoheadA.(c)Accept.Theparseracceptstheinputand\fnishesparsing.(d)Error.Theparserdiscoversanerrorinitsinputandtakessomecorrectiveaction.Weshallhavemoretosayabouthowsucherror-recoveryroutinesworkinSections4.8.3and4.9.4.2.WeextendtheGOTOfunction,de\fnedonsetsofitems,tostates:ifGOTO[Ii;A]=Ij,thenGOTOalsomapsastateiandanonterminalAtostatej.LR-ParserCon\fgurationsTodescribethebehaviorofanLRparser,ithelpstohaveanotationrepre-sentingthecompletestateoftheparser:itsstackandtheremaininginput.Acon\fgurationofanLRparserisapair:(s0s1\u0001\u0001\u0001sm;aiai+1\u0001\u0001\u0001an$)wherethe\frstcomponentisthestackcontents(topontheright),andthesecondcomponentistheremaininginput.Thiscon\fgurationrepresentstheright-sententialformX1X2\u0001\u0001\u0001Xmaiai+1\u0001\u0001\u0001aninessentiallythesamewayasashift-reduceparserwould;theonlydi\u000berenceisthatinsteadofgrammarsymbols,thestackholdsstatesfromwhichgrammarsymbolscanberecovered.Thatis,Xiisthegrammarsymbolrepresentedbystatesi.Notethats0,thestartstateoftheparser,doesnotrepresentagrammarsymbol,andservesasabottom-of-stackmarker,aswellasplayinganimportantroleintheparse.250CHAPTER4.SYNTAXANALYSISBehavioroftheLRParserThenextmoveoftheparserfromthecon\fgurationaboveisdeterminedbyreadingai,thecurrentinputsymbol,andsm,thestateontopofthestack,andthenconsultingtheentryACTION[sm;ai]intheparsingactiontable.Thecon\fgurationsresultingaftereachofthefourtypesofmoveareasfollows1.IfACTION[sm;ai]=shifts,theparserexecutesashiftmove;itshiftsthenextstatesontothestack,enteringthecon\fguration(s0s1\u0001\u0001\u0001sms;ai+1\u0001\u0001\u0001an$)Thesymbolaineednotbeheldonthestack,sinceitcanberecoveredfroms,ifneeded(whichinpracticeitneveris).Thecurrentinputsymbolisnowai+1.2.IfACTION[sm;ai]=reduceA!\f,thentheparserexecutesareducemove,enteringthecon\fguration(s0s1\u0001\u0001\u0001sm\u0000rs;aiai+1\u0001\u0001\u0001an$)whereristhelengthof\f,ands=GOTO[sm\u0000r;A].Heretheparser\frstpoppedrstatesymbolso\u000bthestack,exposingstatesm\u0000r.Theparserthenpusheds,theentryforGOTO[sm\u0000r;A],ontothestack.Thecurrentinputsymbolisnotchangedinareducemove.FortheLRparsersweshallconstruct,Xm\u0000r+1\u0001\u0001\u0001Xm,thesequenceofgrammarsymbolscorrespondingtothestatespoppedo\u000bthestack,willalwaysmatch\f,therightsideofthereducingproduction.TheoutputofanLRparserisgeneratedafterareducemovebyexecutingthesemanticactionassociatedwiththereducingproduction.Forthetimebeing,weshallassumetheoutputconsistsofjustprintingthereducingproduction.3.IfACTION[sm;ai]=accept,parsingiscompleted.4.IfACTION[sm;ai]=error,theparserhasdiscoveredanerrorandcallsanerrorrecoveryroutine.TheLR-parsingalgorithmissummarizedbelow.AllLRparsersbehaveinthisfashion;theonlydi\u000berencebetweenoneLRparserandanotheristheinformationintheACTIONandGOTO\feldsoftheparsingtable.Algorithm4.44:LR-parsingalgorithm.INPUT:AninputstringwandanLR-parsingtablewithfunctionsACTIONandGOTOforagrammarG.4.6.INTRODUCTIONTOLRPARSING:SIMPLELR251OUTPUT:IfwisinL(G),thereductionstepsofabottom-upparseforw;otherwise,anerrorindication.METHOD:Initially,theparserhass0onitsstack,wheres0istheinitialstate,andw$intheinputbu\u000ber.TheparserthenexecutestheprograminFig.4.36.2letabethe\frstsymbolofw$;while(1)f/*repeatforever*/letsbethestateontopofthestack;if(ACTION[s;a]=shiftt)fpushtontothestack;letabethenextinputsymbol;gelseif(ACTION[s;a]=reduceA!\f)fpopj\fjsymbolso\u000bthestack;letstatetnowbeontopofthestack;pushGOTO[t;A]ontothestack;outputtheproductionA!\f;gelseif(ACTION[s;a]=accept)break;/*parsingisdone*/elsecallerror-recoveryroutine;gFigure4.36:LR-parsingprogramExample4.45:Figure4.37showstheACTIONandGOTOfunctionsofanLR-parsingtablefortheexpressiongrammar(4.1),repeatedherewiththeproductionsnumbered:(1)E!E+T(4)T!F(2)E!T(5)F!(E)(3)T!T\u0003F(6)F!idThecodesfortheactionsare:1.simeansshiftandstackstatei,2.rjmeansreducebytheproductionnumberedj,3.accmeansaccept,4.blankmeanserror.NotethatthevalueofGOTO[s;a]forterminalaisfoundintheACTION\feldconnectedwiththeshiftactiononinputaforstates.TheGOTO\feldgivesGOTO[s;A]fornonterminalsA.AlthoughwehavenotyetexplainedhowtheentriesforFig.4.37wereselected,weshalldealwiththisissueshortly.252CHAPTER4.SYNTAXANALYSIS4.6.INTRODUCTIONTOLRPARSING:SIMPLELR253254CHAPTER4.SYNTAXANALYSIS3.ThegototransitionsforstateiareconstructedforallnonterminalsAusingtherule:IfGOTO(Ii;A)=Ij,thenGOTO[i;A]=j.4.Allentriesnotde\fnedbyrules(2)and(3)aremade\\error.\"5.Theinitialstateoftheparseristheoneconstructedfromthesetofitemscontaining[S0!\u0001S].2TheparsingtableconsistingoftheACTIONandGOTOfunctionsdeterminedbyAlgorithm4.46iscalledtheSLR(1)tableforG.AnLRparserusingtheSLR(1)tableforGiscalledtheSLR(1)parserforG,andagrammarhavinganSLR(1)parsingtableissaidtobeSLR(1).Weusuallyomitthe\\(1)\"afterthe\\SLR,\"sinceweshallnotdealherewithparsershavingmorethanonesymboloflookahead.Example4.47:LetusconstructtheSLRtablefortheaugmentedexpressiongrammar.ThecanonicalcollectionofsetsofLR(0)itemsforthegrammarwasshowninFig.4.31.FirstconsiderthesetofitemsI0:E0!\u0001EE!\u0001E+TE!\u0001TT!\u0001T\u0003FT!\u0001FF!\u0001(E)F!\u0001idTheitemF!\u0001(E)givesrisetotheentryACTION[0;(]=shift4,andtheitemF!\u0001idtotheentryACTION[0;id]=shift5.OtheritemsinI0yieldnoactions.NowconsiderI1:E0!E\u0001E!E\u0001+TThe\frstitemyieldsACTION[1;$]=accept,andthesecondyieldsACTION[1;+]=shift6.NextconsiderI2:E!T\u0001T!T\u0001\u0003FSinceFOLLOW(E)=f$;+;)g,the\frstitemmakesACTION[2;$]=ACTION[2;+]=ACTION[2;)]=reduceE!TTheseconditemmakesACTION[2;\u0003]=shift7.ContinuinginthisfashionweobtaintheACTIONandGOTOtablesthatwereshowninFig.4.31.Inthat\fgure,thenumbersofproductionsinreduceactionsarethesameastheorderinwhichtheyappearintheoriginalgrammar(4.1).Thatis,E!E+Tisnumber1,E!Tis2,andsoon.24.6.INTRODUCTIONTOLRPARSING:SIMPLELR255Example4.48:EverySLR(1)grammarisunambiguous,buttherearemanyunambiguousgrammarsthatarenotSLR(1).Considerthegrammarwithpro-ductionsS!L=RjRL!\u0003RjidR!L(4.49)ThinkofLandRasstandingforl-valueandr-value,respectively,and*asanoperatorindicating\\contentsof.\"5ThecanonicalcollectionofsetsofLR(0)itemsforgrammar(4.49)isshowninFig.4.39.I0:S0!\u0001SI5:L!id\u0001S!\u0001L=RS!\u0001RI6:S!L=\u0001RL!\u0001\u0003RR!\u0001LL!\u0001idL!\u0001\u0003RR!\u0001LL!\u0001idI1:S0!S\u0001I7:L!\u0003R\u0001I2:S!L\u0001=RI8:R!L\u0001R!L\u0001I9:S!L=R\u0001I3:S!R\u0001I4:L!\u0003\u0001RR!\u0001LL!\u0001\u0003RL!\u0001idFigure4.39:CanonicalLR(0)collectionforgrammar(4.49)ConsiderthesetofitemsI2.The\frstiteminthissetmakesACTION[2;=]be\\shift6.\"SinceFOLLOW(R)contains=(toseewhy,considerthederivationS)L=R)\u0003R=R),theseconditemsetsACTION[2;=]to\\reduceR!L.\"SincethereisbothashiftandareduceentryinACTION[2;=],state2hasashift/reducecon\rictoninputsymbol=.Grammar(4.49)isnotambiguous.Thisshift/reducecon\rictarisesfromthefactthattheSLRparserconstructionmethodisnotpowerfulenoughtorememberenoughleftcontexttodecidewhatactiontheparsershouldtakeoninput=,havingseenastringreducibletoL.ThecanonicalandLALRmethods,tobediscussednext,willsucceedonalargercollectionofgrammars,including256CHAPTER4.SYNTAXANALYSISgrammar(4.49).Note,however,thatthereareunambiguousgrammarsforwhicheveryLRparserconstructionmethodwillproduceaparsingactiontablewithparsingactioncon\ricts.Fortunately,suchgrammarscangenerallybeavoidedinprogramminglanguageapplications.24.6.5ViablePre\fxesWhycanLR(0)automatabeusedtomakeshift-reducedecisions?TheLR(0)automatonforagrammarcharacterizesthestringsofgrammarsymbolsthatcanappearonthestackofashift-reduceparserforthegrammar.Thestackcontentsmustbeapre\fxofaright-sententialform.Ifthestackholds\u000bandtherestoftheinputisx,thenasequenceofreductionswilltake\u000bxtoS.Intermsofderivations,S)\u0003rm\u000bx.Notallpre\fxesofright-sententialformscanappearonthestack,however,sincetheparsermustnotshiftpastthehandle.Forexample,supposeE)\u0003rmF\u0003id)rm(E)\u0003idThen,atvarioustimesduringtheparse,thestackwillhold(;(E,and(E),butitmustnothold(E)\u0003,since(E)isahandle,whichtheparsermustreducetoFbeforeshifting\u0003.Thepre\fxesofrightsententialformsthatcanappearonthestackofashift-reduceparserarecalledviablepre\fxes.Theyarede\fnedasfollows:aviablepre\fxisapre\fxofaright-sententialformthatdoesnotcontinuepasttherightendoftherightmosthandleofthatsententialform.Bythisde\fnition,itisalwayspossibletoaddterminalsymbolstotheendofaviablepre\fxtoobtainaright-sententialform.SLRparsingisbasedonthefactthatLR(0)automatarecognizeviablepre\fxes.WesayitemA!\f1\u0001\f2isvalidforaviablepre\fx\u000b\f1ifthereisaderivationS0)\u0003rm\u000bAw)rm\u000b\f1\f2w.Ingeneral,anitemwillbevalidformanyviablepre\fxes.ThefactthatA!\f1\u0001\f2isvalidfor\u000b\f1tellsusalotaboutwhethertoshiftorreducewhenwe\fnd\u000b\f1ontheparsingstack.Inparticular,if\f26=\u000f,thenitsuggeststhatwehavenotyetshiftedthehandleontothestack,soshiftisourmove.If\f2=\u000f,thenitlooksasifA!\f1isthehandle,andweshouldreducebythisproduction.Ofcourse,twovaliditemsmaytellustododi\u000berentthingsforthesameviablepre\fx.Someofthesecon\rictscanberesolvedbylookingatthenextinputsymbol,andotherscanberesolvedbythemethodsofSection4.8,butweshouldnotsupposethatallparsingactioncon\rictscanberesolvediftheLRmethodisappliedtoanarbitrarygrammar.Wecaneasilycomputethesetofvaliditemsforeachviablepre\fxthatcanappearonthestackofanLRparser.Infact,itisacentraltheoremofLR-parsingtheorythatthesetofvaliditemsforaviablepre\fx\risexactlythesetofitemsreachedfromtheinitialstatealongthepathlabeled\rintheLR(0)automatonforthegrammar.Inessence,thesetofvaliditemsembodies4.6.INTRODUCTIONTOLRPARSING:SIMPLELR257258CHAPTER4.SYNTAXANALYSIS!b)ThegrammarS!SS+jSS\u0003jaofExercise4.2.1.!c)ThegrammarS!S(S)j\u000fofExercise4.2.2(c).Exercise4.6.2:ConstructtheSLRsetsofitemsforthe(augmented)grammarofExercise4.2.1.ComputetheGOTOfunctionforthesesetsofitems.Showtheparsingtableforthisgrammar.IsthegrammarSLR?Exercise4.6.3:ShowtheactionsofyourparsingtablefromExercise4.6.2ontheinputaa\u0003a+.Exercise4.6.4:Foreachofthe(augmented)grammarsofExercise4.2.2(a){(g):a)ConstructtheSLRsetsofitemsandtheirGOTOfunction.b)Indicateanyactioncon\rictsinyoursetsofitems.c)ConstructtheSLR-parsingtable,ifoneexists.Exercise4.6.5:Showthatthefollowinggrammar:S!AaAbjBbBaA!\u000fB!\u000fisLL(1)butnotSLR(1).Exercise4.6.6:Showthatthefollowinggrammar:S!SAjAA!aisSLR(1)butnotLL(1).!!Exercise4.6.7:ConsiderthefamilyofgrammarsGnde\fnedby:S!Aibifor1\u0014i\u0014nAi!ajAijajfor1\u0014i;j\u0014nandi6=jShowthat:a)Gnhas2n2\u0000nproductions.b)Gnhas2n+n2+nsetsofLR(0)items.c)GnisSLR(1).WhatdoesthisanalysissayabouthowlargeLRparserscanget?4.7.MOREPOWERFULLRPARSERS259!Exercise4.6.8:Wesuggestedthatindividualitemscouldberegardedasstatesofanondeterministic\fniteautomaton,whilesetsofvaliditemsarethestatesofadeterministic\fniteautomaton(seetheboxon\\ItemsasStatesofanNFA\"inSection4.6.5).ForthegrammarS!SS+jSS\u0003jaofExercise4.2.1:a)Drawthetransitiondiagram(NFA)forthevaliditemsofthisgrammaraccordingtotherulegivenintheboxcitedabove.b)Applythesubsetconstruction(Algorithm3.20)toyourNFAfrompart(a).HowdoestheresultingDFAcomparetothesetofLR(0)itemsforthegrammar?!!c)Showthatinallcases,thesubsetconstructionappliedtotheNFAthatcomesfromthevaliditemsforagrammarproducestheLR(0)setsofitems.!Exercise4.6.9:Thefollowingisanambiguousgrammar:S!ASjbA!SAjaConstructforthisgrammaritscollectionofsetsofLR(0)items.IfwetrytobuildanLR-parsingtableforthegrammar,therearecertaincon\rictingactions.Whatarethey?Supposewetriedtousetheparsingtablebynondeterminis-ticallychoosingapossibleactionwheneverthereisacon\rict.Showallthepossiblesequencesofactionsoninputabab.4.7MorePowerfulLRParsersInthissection,weshallextendthepreviousLRparsingtechniquestouseonesymboloflookaheadontheinput.Therearetwodi\u000berentmethods:1.The\\canonical-LR\"orjust\\LR\"method,whichmakesfulluseofthelookaheadsymbol(s).Thismethodusesalargesetofitems,calledtheLR(1)items.2.The\\lookahead-LR\"or\\LALR\"method,whichisbasedontheLR(0)setsofitems,andhasmanyfewerstatesthantypicalparsersbasedontheLR(1)items.BycarefullyintroducinglookaheadsintotheLR(0)items,wecanhandlemanymoregrammarswiththeLALRmethodthanwiththeSLRmethod,andbuildparsingtablesthatarenobiggerthantheSLRtables.LALRisthemethodofchoiceinmostsituations.Afterintroducingboththesemethods,weconcludewithadiscussionofhowtocompactLRparsingtablesforenvironmentswithlimitedmemory.260CHAPTER4.SYNTAXANALYSIS4.7.1CanonicalLR(1)ItemsWeshallnowpresentthemostgeneraltechniqueforconstructinganLRparsingtablefromagrammar.RecallthatintheSLRmethod,stateicallsforreductionbyA!\u000bifthesetofitemsIicontainsitem[A!\u000b\u0001]andinputsymbolaisinFOLLOW(A).Insomesituations,however,whenstateiappearsontopofthestack,theviablepre\fx\f\u000bonthestackissuchthat\fAcannotbefollowedbyainanyright-sententialform.Thus,thereductionbyA!\u000bshouldbeinvalidoninputa.Example4.51:LetusreconsiderExample4.48,whereinstate2wehaditemR!L\u0001,whichcouldcorrespondtoA!\u000babove,andacouldbethe=sign,whichisinFOLLOW(R).Thus,theSLRparsercallsforreductionbyR!Linstate2with=asthenextinput(theshiftactionisalsocalledfor,becauseofitemS!L\u0001=Rinstate2).However,thereisnoright-sententialformofthegrammarinExample4.48thatbeginsR=\u0001\u0001\u0001.Thusstate2,whichisthestatecorrespondingtoviablepre\fxLonly,shouldnotreallycallforreductionofthatLtoR.2ItispossibletocarrymoreinformationinthestatethatwillallowustoruleoutsomeoftheseinvalidreductionsbyA!\u000b.Bysplittingstateswhennecessary,wecanarrangetohaveeachstateofanLRparserindicateexactlywhichinputsymbolscanfollowahandle\u000bforwhichthereisapossiblereductiontoA.Theextrainformationisincorporatedintothestatebyrede\fningitemstoincludeaterminalsymbolasasecondcomponent.Thegeneralformofanitembecomes[A!\u000b\u0001\f;a],whereA!\u000b\fisaproductionandaisaterminalortherightendmarker$.WecallsuchanobjectanLR(1)item.The1referstothelengthofthesecondcomponent,calledthelookaheadoftheitem.6Thelookaheadhasnoe\u000bectinanitemoftheform[A!\u000b\u0001\f;a],where\fisnot\u000f,butanitemoftheform[A!\u000b\u0001;a]callsforareductionbyA!\u000bonlyifthenextinputsymbolisa.Thus,wearecompelledtoreducebyA!\u000bonlyonthoseinputsymbolsaforwhich[A!\u000b\u0001;a]isanLR(1)iteminthestateontopofthestack.Thesetofsucha'swillalwaysbeasubsetofFOLLOW(A),butitcouldbeapropersubset,asinExample4.51.Formally,wesayLR(1)item[A!\u000b\u0001\f;a]isvalidforaviablepre\fx\rifthereisaderivationS)\u0003rm\u000eAw)rm\u000e\u000b\fw,where1.\r=\u000e\u000b,and2.Eitheraisthe\frstsymbolofw,orwis\u000fandais$.Example4.52:Letusconsiderthegrammar4.7.MOREPOWERFULLRPARSERS261S!BBB!aBjbThereisarightmostderivationS)\u0003rmaaBab)rmaaaBab.Weseethatitem[B!a\u0001B;a]isvalidforaviablepre\fx\r=aaabyletting\u000e=aa,A=B,w=ab,\u000b=a,and\f=Bintheabovede\fnition.ThereisalsoarightmostderivationS)\u0003rmBaB)rmBaaB.Fromthisderivationweseethatitem[B!a\u0001B;$]isvalidforviablepre\fxBaa.24.7.2ConstructingLR(1)SetsofItemsThemethodforbuildingthecollectionofsetsofvalidLR(1)itemsisessentiallythesameastheoneforbuildingthecanonicalcollectionofsetsofLR(0)items.WeneedonlytomodifythetwoproceduresCLOSUREandGOTO.SetOfItemsCLOSURE(I)frepeatfor(eachitem[A!\u000b\u0001B\f;a]inI)for(eachproductionB!\rinG0)for(eachterminalbinFIRST(\fa))add[B!\u0001\r;b]tosetI;untilnomoreitemsareaddedtoI;returnI;gSetOfItemsGOTO(I;X)finitializeJtobetheemptyset;for(eachitem[A!\u000b\u0001X\f;a]inI)additem[A!\u000bX\u0001\f;a]tosetJ;returnCLOSURE(J);gvoiditems(G0)finitializeCto\bCLOSURE(f[S0!\u0001S;$]g)\t;repeatfor(eachsetofitemsIinC)for(eachgrammarsymbolX)if(GOTO(I;X)isnotemptyandnotinC)addGOTO(I;X)toC;untilnonewsetsofitemsareaddedtoC;gFigure4.40:Sets-of-LR(1)-itemsconstructionforgrammarG0262CHAPTER4.SYNTAXANALYSISToappreciatethenewde\fnitionoftheCLOSUREoperation,inparticular,whybmustbeinFIRST(\fa),consideranitemoftheform[A!\u000b\u0001B\f;a]inthesetofitemsvalidforsomeviablepre\fx\r.ThenthereisarightmostderivationS)\u0003rm\u000eAax)rm\u000e\u000bB\fax,where\r=\u000e\u000b.Suppose\faxderivesterminalstringby.ThenforeachproductionoftheformB!\u0011forsome\u0011,wehavederivationS)\u0003rm\rBby)rm\r\u0011by.Thus,[B!\u0001\u0011;b]isvalidfor\r.Notethatbcanbethe\frstterminalderivedfrom\f,oritispossiblethat\fderives\u000finthederivation\fax)\u0003rmby,andbcanthereforebea.TosummarizebothpossibilitieswesaythatbcanbeanyterminalinFIRST(\fax),whereFIRSTisthefunctionfromSection4.4.Notethatxcannotcontainthe\frstterminalofby,soFIRST(\fax)=FIRST(\fa).WenowgivetheLR(1)setsofitemsconstruction.!C\u0001d;$I5!SCC\u0001;$I6!Cc\u0001C;$!C\u0001cC;$!C\u0001d;$I7\u0001cC;$S\u0001CC;$!C\u0001cC;c=d!C\u0001d;c=dI1!S0S\u0001;$I2!SC\u0001C;$!C!cC\u0001;c=dI9!CcC\u0001;$SCcdCcdCcdCcdCCd\u0001;$I3!Cc\u0001C;c=d!C\u0001cC;c=d!C\u0001d;c=dI4!Cd\u0001;c=dI8!!I0!S0\u0001S;$Figure4.41:TheGOTOgraphforgrammar(4.55)Algorithm4.53:ConstructionofthesetsofLR(1)items.INPUT:AnaugmentedgrammarG0.OUTPUT:ThesetsofLR(1)itemsthatarethesetofitemsvalidforoneormoreviablepre\fxesofG0.4.7.MOREPOWERFULLRPARSERS263METHOD:TheproceduresCLOSUREandGOTOandthemainroutineitemsforconstructingthesetsofitemswereshowninFig.4.40.2Example4.54:Considerthefollowingaugmentedgrammar.S0!SS!CCC!cCjd(4.55)Webeginbycomputingtheclosureoff[S0!\u0001S;$]g.Toclose,wematchtheitem[S0!\u0001S;$]withtheitem[A!\u000b\u0001B\f;a]intheprocedureCLOSURE.Thatis,A=S0,\u000b=\u000f,B=S,\f=\u000f,anda=$.FunctionCLOSUREtellsustoadd[B!\u0001\r;b]foreachproductionB!\randterminalbinFIRST(\fa).Intermsofthepresentgrammar,B!\rmustbeS!CC,andsince\fis\u000fandais$,bmayonlybe$.Thusweadd[S!\u0001CC;$].Wecontinuetocomputetheclosurebyaddingallitems[C!\u0001\r;b]forbinFIRST(C$).Thatis,matching[S!\u0001CC;$]against[A!\u000b\u0001B\f;a],wehaveA=S,\u000b=\u000f,B=C,\f=C,anda=$.SinceCdoesnotderivetheemptystring,FIRST(C$)=FIRST(C).SinceFIRST(C)containsterminalscandd,weadditems[C!\u0001cC;c],[C!\u0001cC;d],[C!\u0001d;c]and[C!\u0001d;d].Noneofthenewitemshasanonterminalimmediatelytotherightofthedot,sowehavecompletedour\frstsetofLR(1)items.TheinitialsetofitemsisI0:S!\u0001S;$S!\u0001CC;$C!\u0001cC;c=dC!\u0001d;c=dThebracketshavebeenomittedfornotationalconvenience,andweusethenotation[C!\u0001cC;c=d]asashorthandforthetwoitems[C!\u0001cC;c]and[C!\u0001cC;d].NowwecomputeGOTO(I0;X)forthevariousvaluesofX.ForX=Swemustclosetheitem[S0!S\u0001;$].Noadditionalclosureispossible,sincethedotisattherightend.ThuswehavethenextsetofitemsI1:S0!S\u0001;$ForX=Cweclose[S!C\u0001C;$].WeaddtheC-productionswithsecondcomponent$andthencanaddnomore,yieldingI2:S!C\u0001C;$C!\u0001cC;$C!\u0001d;$Next,letX=c.Wemustclosef[C!c\u0001C;c=d]g.WeaddtheC-productionswithsecondcomponentc=d,yielding264CHAPTER4.SYNTAXANALYSISI3:C!c\u0001C;c=dC!\u0001cC;c=dC!\u0001d;c=dFinally,letX=d,andwewindupwiththesetofitemsI4:C!d\u0001;c=dWehave\fnishedconsideringGOTOonI0.WegetnonewsetsfromI1,butI2hasgoto'sonC,c,andd.ForGOTO(I2;C)wegetI5:S!CC\u0001;$noclosurebeingneeded.TocomputeGOTO(I2;c)wetaketheclosureoff[C!c\u0001C;$]g,toobtainI6:C!c\u0001C;$C!\u0001cC;$C!\u0001d;$NotethatI6di\u000bersfromI3onlyinsecondcomponents.WeshallseethatitiscommonforseveralsetsofLR(1)itemsforagrammartohavethesame\frstcomponentsanddi\u000berintheirsecondcomponents.WhenweconstructthecollectionofsetsofLR(0)itemsforthesamegrammar,eachsetofLR(0)itemswillcoincidewiththesetof\frstcomponentsofoneormoresetsofLR(1)items.WeshallhavemoretosayaboutthisphenomenonwhenwediscussLALRparsing.ContinuingwiththeGOTOfunctionforI2,GOTO(I2;d)isseentobeI7:C!d\u0001;$TurningnowtoI3,theGOTO'sofI3oncanddareI3andI4,respectively,andGOTO(I3;C)isI8:C!cC\u0001;c=dI4andI5havenoGOTO's,sinceallitemshavetheirdotsattherightend.TheGOTO'sofI6oncanddareI6andI7,respectively,andGOTO(I6;C)isI9:C!cC\u0001;$TheremainingsetsofitemsyieldnoGOTO's,sowearedone.Figure4.41showsthetensetsofitemswiththeirgoto's.24.7.MOREPOWERFULLRPARSERS2654.7.3CanonicalLR(1)ParsingTablesWenowgivetherulesforconstructingtheLR(1)ACTIONandGOTOfunctionsfromthesetsofLR(1)items.Thesefunctionsarerepresentedbyatable,asbefore.Theonlydi\u000berenceisinthevaluesoftheentries.Algorithm4.56:Constructionofcanonical-LRparsingtables.INPUT:AnaugmentedgrammarG0.OUTPUT:Thecanonical-LRparsingtablefunctionsACTIONandGOTOforG0.METHOD:1.ConstructC0=fI0;I1;\u0001\u0001\u0001;Ing,thecollectionofsetsofLR(1)itemsforG0.2.StateioftheparserisconstructedfromIi.Theparsingactionforstateiisdeterminedasfollows.(a)If[A!\u000b\u0001a\f;b]isinIiandGOTO(Ii;a)=Ij,thensetACTION[i;a]to\\shiftj.\"Hereamustbeaterminal.(b)If[A!\u000b\u0001;a]isinIi,A6=S0,thensetACTION[i;a]to\\reduceA!\u000b.\"(c)If[S0!S\u0001;$]isinIi,thensetACTION[i;$]to\\accept.\"Ifanycon\rictingactionsresultfromtheaboverules,wesaythegrammarisnotLR(1).Thealgorithmfailstoproduceaparserinthiscase.3.ThegototransitionsforstateiareconstructedforallnonterminalsAusingtherule:IfGOTO(Ii;A)=Ij,thenGOTO[i;A]=j.4.Allentriesnotde\fnedbyrules(2)and(3)aremade\\error.\"5.Theinitialstateoftheparseristheoneconstructedfromthesetofitemscontaining[S0!\u0001S;$].2ThetableformedfromtheparsingactionandgotofunctionsproducedbyAlgorithm4.56iscalledthecanonicalLR(1)parsingtable.AnLRparserusingthistableiscalledacanonical-LR(1)parser.Iftheparsingactionfunctionhasnomultiplyde\fnedentries,thenthegivengrammariscalledanLR(1)grammar.Asbefore,weomitthe\\(1)\"ifitisunderstood.Example4.57:Thecanonicalparsingtableforgrammar(4.55)isshowninFig.4.42.Productions1,2,and3areS!CC,C!cC,andC!d,respectively.2EverySLR(1)grammarisanLR(1)grammar,butforanSLR(1)grammarthecanonicalLRparsermayhavemorestatesthantheSLRparserforthesamegrammar.ThegrammarofthepreviousexamplesisSLRandhasanSLRparserwithsevenstates,comparedwiththetenofFig.4.42.266CHAPTER4.SYNTAXANALYSIS4.7.MOREPOWERFULLRPARSERS267see$ontheinput,oritstartedwithastringnotoftheformc\u0003dc\u0003d.Itthusmakessensethatstate7shouldreducebyC!doninput$anddeclareerroroninputscord.LetusnowreplaceI4andI7byI47,theunionofI4andI7,consistingofthesetofthreeitemsrepresentedby[C!d\u0001;c=d=$].Thegoto'sondtoI4orI7fromI0,I2,I3,andI6nowenterI47.Theactionofstate47istoreduceonanyinput.Therevisedparserbehavesessentiallyliketheoriginal,althoughitmightreducedtoCincircumstanceswheretheoriginalwoulddeclareerror,forexample,oninputlikeccdorcdcdc.Theerrorwilleventuallybecaught;infact,itwillbecaughtbeforeanymoreinputsymbolsareshifted.Moregenerally,wecanlookforsetsofLR(1)itemshavingthesamecore,thatis,setof\frstcomponents,andwemaymergethesesetswithcommoncoresintoonesetofitems.Forexample,inFig.4.41,I4andI7formsuchapair,withcorefC!d\u0001g.Similarly,I3andI6formanotherpair,withcorefC!c\u0001C;C!\u0001cC;C!\u0001dg.Thereisonemorepair,I8andI9,withcommoncorefC!cC\u0001g.Notethat,ingeneral,acoreisasetofLR(0)itemsforthegrammarathand,andthatanLR(1)grammarmayproducemorethantwosetsofitemswiththesamecore.SincethecoreofGOTO(I;X)dependsonlyonthecoreofI,thegoto'sofmergedsetscanthemselvesbemerged.Thus,thereisnoproblemrevisingthegotofunctionaswemergesetsofitems.Theactionfunctionsaremodi\fedtore\rectthenon-erroractionsofallsetsofitemsinthemerger.SupposewehaveanLR(1)grammar,thatis,onewhosesetsofLR(1)itemsproducenoparsing-actioncon\ricts.Ifwereplaceallstateshavingthesamecorewiththeirunion,itispossiblethattheresultingunionwillhaveacon\rict,butitisunlikelyforthefollowingreason:Supposeintheunionthereisacon\rictonlookaheadabecausethereisanitem[A!\u000b\u0001;a]callingforareductionbyA!\u000b,andthereisanotheritem[B!\f\u0001a\r;b]callingforashift.Thensomesetofitemsfromwhichtheunionwasformedhasitem[A!\u000b\u0001;a],andsincethecoresofallthesestatesarethesame,itmusthaveanitem[B!\f\u0001a\r;c]forsomec.Butthenthisstatehasthesameshift/reducecon\rictona,andthegrammarwasnotLR(1)asweassumed.Thus,themergingofstateswithcommoncorescanneverproduceashift/reducecon\rictthatwasnotpresentinoneoftheoriginalstates,becauseshiftactionsdependonlyonthecore,notthelookahead.Itispossible,however,thatamergerwillproduceareduce/reducecon\rict,asthefollowingexampleshows.Example4.58:ConsiderthegrammarS0!SS!aAdjbBdjaBejbAeA!cB!cwhichgeneratesthefourstringsacd,ace,bcd,andbce.ThereadercancheckthatthegrammarisLR(1)byconstructingthesetsofitems.Upondoingso,268CHAPTER4.SYNTAXANALYSISwe\fndthesetofitemsf[A!c\u0001;d];[B!c\u0001;e]gvalidforviablepre\fxacandf[A!c\u0001;e];[B!c\u0001;d]gvalidforbc.Neitherofthesesetshasacon\rict,andtheircoresarethesame.However,theirunion,whichisA!c\u0001;d=eB!c\u0001;d=egeneratesareduce/reducecon\rict,sincereductionsbybothA!candB!carecalledforoninputsdande.2Wearenowpreparedtogivethe\frstoftwoLALRtable-constructional-gorithms.ThegeneralideaistoconstructthesetsofLR(1)items,andifnocon\rictsarise,mergesetswithcommoncores.Wethenconstructtheparsingtablefromthecollectionofmergedsetsofitems.Themethodweareabouttodescribeservesprimarilyasade\fnitionofLALR(1)grammars.ConstructingtheentirecollectionofLR(1)setsofitemsrequirestoomuchspaceandtimetobeusefulinpractice.Algorithm4.59:Aneasy,butspace-consumingLALRtableconstruction.INPUT:AnaugmentedgrammarG0.OUTPUT:TheLALRparsing-tablefunctionsACTIONandGOTOforG0.METHOD:1.ConstructC=fI0;I1;:::;Ing,thecollectionofsetsofLR(1)items.2.ForeachcorepresentamongthesetofLR(1)items,\fndallsetshavingthatcore,andreplacethesesetsbytheirunion.3.LetC0=fJ0;J1;:::;JmgbetheresultingsetsofLR(1)items.TheparsingactionsforstateiareconstructedfromJiinthesamemannerasinAlgorithm4.56.Ifthereisaparsingactioncon\rict,thealgorithmfailstoproduceaparser,andthegrammarissaidnottobeLALR(1).4.TheGOTOtableisconstructedasfollows.IfJistheunionofoneormoresetsofLR(1)items,thatis,J=I1[I2[\u0001\u0001\u0001[Ik,thenthecoresofGOTO(I1;X),GOTO(I2;X);:::;GOTO(Ik;X)arethesame,sinceI1;I2;:::;Ikallhavethesamecore.LetKbetheunionofallsetsofitemshavingthesamecoreasGOTO(I1;X).ThenGOTO(J;X)=K.2ThetableproducedbyAlgorithm4.59iscalledtheLALRparsingtableforG.Iftherearenoparsingactioncon\ricts,thenthegivengrammarissaidtobeanLALR(1)grammar.Thecollectionofsetsofitemsconstructedinstep(3)iscalledtheLALR(1)collection.4.7.MOREPOWERFULLRPARSERS269Example4.60:Againconsidergrammar(4.55)whoseGOTOgraphwasshowninFig.4.41.Aswementioned,therearethreepairsofsetsofitemsthatcanbemerged.I3andI6arereplacedbytheirunion:I36:C!c\u0001C;c=d=$C!\u0001cC;c=d=$C!\u0001d;c=d=$I4andI7arereplacedbytheirunion:I47:C!d\u0001;c=d=$andI8andI9arereplacedbytheirunion:I89:C!cC\u0001;c=d=$TheLALRactionandgotofunctionsforthecondensedsetsofitemsareshowninFig.4.43.270CHAPTER4.SYNTAXANALYSISparserwillputI36onthestack.ThisrelationshipholdsingeneralforanLALRgrammar.TheLRandLALRparserswillmimiconeanotheroncorrectinputs.Whenpresentedwitherroneousinput,theLALRparsermayproceedtodosomereductionsaftertheLRparserhasdeclaredanerror.However,theLALRparserwillnevershiftanothersymbolaftertheLRparserdeclaresanerror.Forexample,oninputccdfollowedby$,theLRparserofFig.4.42willput0334onthestack,andinstate4willdiscoveranerror,because$isthenextinputsymbolandstate4hasactionerroron$.Incontrast,theLALRparserofFig.4.43willmakethecorrespondingmoves,putting0363647onthestack.Butstate47oninput$hasactionreduceC!d.TheLALRparserwillthuschangeitsstackto0363689Nowtheactionofstate89oninput$isreduceC!cC.Thestackbecomes03689whereuponasimilarreductioniscalledfor,obtainingstack02Finally,state2hasactionerroroninput$,sotheerrorisnowdiscovered.4.7.5E\u000ecientConstructionofLALRParsingTablesThereareseveralmodi\fcationswecanmaketoAlgorithm4.59toavoidcon-structingthefullcollectionofsetsofLR(1)itemsintheprocessofcreatinganLALR(1)parsingtable.\u000fFirst,wecanrepresentanysetofLR(0)orLR(1)itemsIbyitskernel,thatis,bythoseitemsthatareeithertheinitialitem|[S0!\u0001S]or[S0!\u0001S;$]|orthathavethedotsomewhereotherthanatthebeginningoftheproductionbody.\u000fWecanconstructtheLALR(1)-itemkernelsfromtheLR(0)-itemkernelsbyaprocessofpropagationandspontaneousgenerationoflookaheads,thatweshalldescribeshortly.\u000fIfwehavetheLALR(1)kernels,wecangeneratetheLALR(1)parsingtablebyclosingeachkernel,usingthefunctionCLOSUREofFig.4.40,andthencomputingtableentriesbyAlgorithm4.56,asiftheLALR(1)setsofitemswerecanonicalLR(1)setsofitems.4.7.MOREPOWERFULLRPARSERS271Example4.61:Weshalluseasanexampleofthee\u000ecientLALR(1)table-constructionmethodthenon-SLRgrammarfromExample4.48,whichwere-producebelowinitsaugmentedform:S0!SS!L=RjRL!\u0003RjidR!LThecompletesetsofLR(0)itemsforthisgrammarwereshowninFig.4.39.ThekernelsoftheseitemsareshowninFig.4.44.2I0:S0!\u0001SI5:L!id\u0001I1:S0!S\u0001I6:S!L=\u0001RI2:S!L\u0001=RI7:L!\u0003R\u0001R!L\u0001I3:S!R\u0001I8:R!L\u0001I4:L!\u0003\u0001RI9:S!L=R\u0001Figure4.44:KernelsofthesetsofLR(0)itemsforgrammar(4.49)NowwemustattachtheproperlookaheadstotheLR(0)itemsinthekernels,tocreatethekernelsofthesetsofLALR(1)items.TherearetwowaysalookaheadbcangetattachedtoanLR(0)itemB!\r\u0001\u000einsomesetofLALR(1)itemsJ:1.ThereisasetofitemsI,withakernelitemA!\u000b\u0001\f;a,andJ=GOTO(I;X),andtheconstructionofGOTO\u0000CLOSURE(f[A!\u000b\u0001\f;a]g);X\u0001asgiveninFig.4.40,contains[B!\r\u0001\u000e;b],regardlessofa.Suchalooka-headbissaidtobegeneratedspontaneouslyforB!\r\u0001\u000e.Asaspecialcase,lookahead$isgeneratedspontaneouslyfortheitemS0!\u0001Sintheinitialsetofitems.2.Allisasin(1),buta=b,andGOTO\u0000CLOSURE(f[A!\u000b\u0001\f;b]g);X\u0001,asgiveninFig.4.40,contains[B!\r\u0001\u000e;b]onlybecauseA!\u000b\u0001\fhasbasoneofitsassociatedlookaheads.Insuchacase,wesaythatlookaheadspropagatefromA!\u000b\u0001\finthekernelofItoB!\r\u0001\u000einthekernelofJ.Notethatpropagationdoesnotdependontheparticularlookaheadsymbol;eitheralllookaheadspropagatefromoneitemtoanother,ornonedo.272CHAPTER4.SYNTAXANALYSISWeneedtodeterminethespontaneouslygeneratedlookaheadsforeachsetofLR(0)items,andalsotodeterminewhichitemspropagatelookaheadsfromwhich.Thetestisactuallyquitesimple.Let#beasymbolnotinthegrammarathand.LetA!\u000b\u0001\fbeakernelLR(0)iteminsetI.Compute,foreachX,J=GOTO\u0000CLOSURE(f[A!\u000b\u0001\f;#]g);X\u0001.ForeachkerneliteminJ,weexamineitssetoflookaheads.If#isalookahead,thenlookaheadspropagatetothatitemfromA!\u000b\u0001\f.Anyotherlookaheadisspontaneouslygenerated.Theseideasaremadepreciseinthefollowingalgorithm,whichalsomakesuseofthefactthattheonlykernelitemsinJmusthaveXimmediatelytotheleftofthedot;thatis,theymustbeoftheformB!\rX\u0001\u000e.Algorithm4.62:Determininglookaheads.INPUT:ThekernelKofasetofLR(0)itemsIandagrammarsymbolX.OUTPUT:ThelookaheadsspontaneouslygeneratedbyitemsinIforkernelitemsinGOTO(I;X)andtheitemsinIfromwhichlookaheadsarepropagatedtokernelitemsinGOTO(I;X).METHOD:ThealgorithmisgiveninFig.4.45.2for(eachitemA!\u000b\u0001\finK)fJ:=CLOSURE(f[A!\u000b\u0001\f,#]g);if([B!\r\u0001X\u000e;a]isinJ,andaisnot#)concludethatlookaheadaisgeneratedspontaneouslyforitemB!\rX\u0001\u000einGOTO(I;X);if([B!\r\u0001X\u000e;#]isinJ)concludethatlookaheadspropagatefromA!\u000b\u0001\finItoB!\rX\u0001\u000einGOTO(I;X);gFigure4.45:DiscoveringpropagatedandspontaneouslookaheadsWearenowreadytoattachlookaheadstothekernelsofthesetsofLR(0)itemstoformthesetsofLALR(1)items.First,weknowthat$isalooka-headforS0!\u0001SintheinitialsetofLR(0)items.Algorithm4.62givesusallthelookaheadsgeneratedspontaneously.Afterlistingallthoselookaheads,wemustallowthemtopropagateuntilnofurtherpropagationispossible.Therearemanydi\u000berentapproaches,allofwhichinsomesensekeeptrackof\\new\"lookaheadsthathavepropagatedintoanitembutwhichhavenotyetpropa-gatedout.Thenextalgorithmdescribesonetechniquetopropagatelookaheadstoallitems.Algorithm4.63:E\u000ecientcomputationofthekernelsoftheLALR(1)collec-tionofsetsofitems.INPUT:AnaugmentedgrammarG0.4.7.MOREPOWERFULLRPARSERS273OUTPUT:ThekernelsoftheLALR(1)collectionofsetsofitemsforG0.METHOD:1.ConstructthekernelsofthesetsofLR(0)itemsforG.Ifspaceisnotatapremium,thesimplestwayistoconstructtheLR(0)setsofitems,asinSection4.6.2,andthenremovethenonkernelitems.Ifspaceisseverelyconstrained,wemaywishinsteadtostoreonlythekernelitemsforeachset,andcomputeGOTOforasetofitemsIby\frstcomputingtheclosureofI.2.ApplyAlgorithm4.62tothekernelofeachsetofLR(0)itemsandgram-marsymbolXtodeterminewhichlookaheadsarespontaneouslygener-atedforkernelitemsinGOTO(I;X),andfromwhichitemsinIlookaheadsarepropagatedtokernelitemsinGOTO(I;X).3.Initializeatablethatgives,foreachkernelitemineachsetofitems,theassociatedlookaheads.Initially,eachitemhasassociatedwithitonlythoselookaheadsthatwedeterminedinstep(2)weregeneratedsponta-neously.4.Makerepeatedpassesoverthekernelitemsinallsets.Whenwevisitanitemi,welookupthekernelitemstowhichipropagatesitslookaheads,usinginformationtabulatedinstep(2).Thecurrentsetoflookaheadsforiisaddedtothosealreadyassociatedwitheachoftheitemstowhichipropagatesitslookaheads.Wecontinuemakingpassesoverthekernelitemsuntilnomorenewlookaheadsarepropagated.2Example4.64:LetusconstructthekernelsoftheLALR(1)itemsforthegrammarofExample4.61.ThekernelsoftheLR(0)itemswereshowninFig.4.44.WhenweapplyAlgorithm4.62tothekernelofsetofitemsI0,we\frstcomputeCLOSURE(f[S0!\u0001S;#]g),whichisS0!\u0001S;#L!\u0001\u0003R;#==S!\u0001L=R;#L!\u0001id;#==S!\u0001R;#R!\u0001L;#Amongtheitemsintheclosure,weseetwowherethelookahead=hasbeengeneratedspontaneously.The\frstoftheseisL!\u0001\u0003R.Thisitem,with\u0003totherightofthedot,givesriseto[L!\u0003\u0001R;=].Thatis,=isaspontaneouslygeneratedlookaheadforL!\u0003\u0001R,whichisinsetofitemsI4.Similarly,[L!\u0001id;=]tellsusthat=isaspontaneouslygeneratedlookaheadforL!id\u0001inI5.As#isalookaheadforallsixitemsintheclosure,wedeterminethattheitemS0!\u0001SinI0propagateslookaheadstothefollowingsixitems:274CHAPTER4.SYNTAXANALYSISS0!S\u0001inI1L!\u0003\u0001RinI4S!L\u0001=RinI2L!id\u0001inI5S!R\u0001inI3R!L\u0001inI24.7.MOREPOWERFULLRPARSERS275276CHAPTER4.SYNTAXANALYSISplacedattheendofthelist,andinplaceofaterminalwemayusethenotation\\any,\"meaningthatifthecurrentinputsymbolhasnotbeenfoundsofaronthelist,weshoulddothatactionnomatterwhattheinputis.Moreover,errorentriescansafelybereplacedbyreduceactions,forfurtheruniformityalongarow.Theerrorswillbedetectedlater,beforeashiftmove.Example4.65:ConsidertheparsingtableofFig.4.37.First,notethattheactionsforstates0,4,6,and7agree.WecanrepresentthemallbythelistSYMBOLACTIONids5(s4anyerrorState1hasasimilarlist:+s6$accanyerrorInstate2,wecanreplacetheerrorentriesbyr2,soreductionbyproduction2willoccuronanyinputbut*.Thusthelistforstate2is\u0003s7anyr2State3hasonlyerrorandr4entries.Wecanreplacetheformerbythelatter,sothelistforstate3consistsofonlythepair(any,r4).States5,10,and11canbetreatedsimilarly.Thelistforstate8is+s6)s11anyerrorandforstate9\u0003s7anyr12WecanalsoencodetheGOTOtablebyalist,buthereitappearsmoree\u000ecienttomakealistofpairsforeachnonterminalA.EachpaironthelistforAisoftheform(currentState;nextState),indicatingGOTO[currentState;A]=nextState4.7.MOREPOWERFULLRPARSERS277ThistechniqueisusefulbecausetheretendtoberatherfewstatesinanyonecolumnoftheGOTOtable.ThereasonisthattheGOTOonnonterminalAcanonlybeastatederivablefromasetofitemsinwhichsomeitemshaveAimmediatelytotheleftofadot.NosethasitemswithXandYimmediatelytotheleftofadotifX6=Y.Thus,eachstateappearsinatmostoneGOTOcolumn.Formorespacereduction,wenotethattheerrorentriesinthegototableareneverconsulted.Wecanthereforereplaceeacherrorentrybythemostcommonnon-errorentryinitscolumn.Thisentrybecomesthedefault;itisrepresentedinthelistforeachcolumnbyonepairwithanyinplaceofcurrentState.Example4.66:ConsiderFig.4.37again.ThecolumnforFhasentry10forstate7,andallotherentriesareeither3orerror.Wemayreplaceerrorby3andcreateforcolumnFthelistCURRENTSTATENEXTSTATE710any3Similarly,asuitablelistforcolumnTis69any2ForcolumnEwemaychooseeither1or8tobethedefault;twoentriesarenecessaryineithercase.Forexample,wemightcreateforcolumnEthelist48any12Thisspacesavingsinthesesmallexamplesmaybemisleading,becausethetotalnumberofentriesinthelistscreatedinthisexampleandthepreviousonetogetherwiththepointersfromstatestoactionlistsandfromnonterminalstonext-statelists,resultinunimpressivespacesavingsoverthematriximple-mentationofFig.4.37.Forpracticalgrammars,thespaceneededforthelistrepresentationistypicallylessthantenpercentofthatneededforthematrixrepresentation.Thetable-compressionmethodsfor\fniteautomatathatwerediscussedinSection3.9.8canalsobeusedtorepresentLRparsingtables.4.7.7ExercisesforSection4.7Exercise4.7.1:Constructthea)canonicalLR,andb)LALR278CHAPTER4.SYNTAXANALYSISsetsofitemsforthegrammarS!SS+jSS\u0003jaofExercise4.2.1.Exercise4.7.2:RepeatExercise4.7.1foreachofthe(augmented)grammarsofExercise4.2.2(a){(g).!Exercise4.7.3:ForthegrammarofExercise4.7.1,useAlgorithm4.63tocomputethecollectionofLALRsetsofitemsfromthekernelsoftheLR(0)setsofitems.!Exercise4.7.4:ShowthatthefollowinggrammarS!AajbAcjdcjbdaA!disLALR(1)butnotSLR(1).!Exercise4.7.5:ShowthatthefollowinggrammarS!AajbAcjBcjbBaA!dB!disLR(1)butnotLALR(1).4.8UsingAmbiguousGrammarsItisafactthateveryambiguousgrammarfailstobeLRandthusisnotinanyoftheclassesofgrammarsdiscussedintheprevioustwosections.How-ever,certaintypesofambiguousgrammarsarequiteusefulinthespeci\fcationandimplementationoflanguages.Forlanguageconstructslikeexpressions,anambiguousgrammarprovidesashorter,morenaturalspeci\fcationthananyequivalentunambiguousgrammar.Anotheruseofambiguousgrammarsisinisolatingcommonlyoccurringsyntacticconstructsforspecial-caseoptimiza-tion.Withanambiguousgrammar,wecanspecifythespecial-caseconstructsbycarefullyaddingnewproductionstothegrammar.Althoughthegrammarsweuseareambiguous,inallcaseswespecifydis-ambiguatingrulesthatallowonlyoneparsetreeforeachsentence.Inthisway,theoveralllanguagespeci\fcationbecomesunambiguous,andsometimesitbe-comespossibletodesignanLRparserthatfollowsthesameambiguity-resolvingchoices.Westressthatambiguousconstructsshouldbeusedsparinglyandinastrictlycontrolledfashion;otherwise,therecanbenoguaranteeastowhatlanguageisrecognizedbyaparser.4.8.USINGAMBIGUOUSGRAMMARS2794.8.1PrecedenceandAssociativitytoResolveCon\rictsConsidertheambiguousgrammar(4.3)forexpressionswithoperators+and\u0003,repeatedhereforconvenience:E!E+EjE\u0003Ej(E)jidThisgrammarisambiguousbecauseitdoesnotspecifytheassociativityorprecedenceoftheoperators+and\u0003.Theunambiguousgrammar(4.1),whichincludesproductionsE!E+TandT!T\u0003F,generatesthesamelanguage,butgives+lowerprecedencethan\u0003,andmakesbothoperatorsleftassociative.Therearetworeasonswhywemightprefertousetheambiguousgrammar.First,asweshallsee,wecaneasilychangetheassociativityandprecedenceoftheoperators+and\u0003withoutdisturbingtheproductionsof(4.3)orthenumberofstatesintheresultingparser.Second,theparserfortheunam-biguousgrammarwillspendasubstantialfractionofitstimereducingbytheproductionsE!TandT!F,whosesolefunctionistoenforceassociativityandprecedence.Theparserfortheambiguousgrammar(4.3)willnotwastetimereducingbythesesingleproductions(productionswhosebodyconsistsofasinglenonterminal).ThesetsofLR(0)itemsfortheambiguousexpressiongrammar(4.3)aug-mentedbyE0!EareshowninFig.4.48.Sincegrammar(4.3)isambiguous,therewillbeparsing-actioncon\rictswhenwetrytoproduceanLRparsingtablefromthesetsofitems.ThestatescorrespondingtosetsofitemsI7andI8generatethesecon\ricts.SupposeweusetheSLRapproachtoconstructingtheparsingactiontable.Thecon\rictgeneratedbyI7betweenreductionbyE!E+Eandshifton+or\u0003cannotberesolved,because+and\u0003areeachinFOLLOW(E).Thusbothactionswouldbecalledforoninputs+and\u0003.Asimilarcon\rictisgeneratedbyI8,betweenreductionbyE!E\u0003Eandshiftoninputs+and\u0003.Infact,eachofourLRparsingtable-constructionmethodswillgeneratethesecon\ricts.However,theseproblemscanberesolvedusingtheprecedenceandassocia-tivityinformationfor+and\u0003.Considertheinputid+id\u0003id,whichcausesaparserbasedonFig.4.48toenterstate7afterprocessingid+id;inparticulartheparserreachesacon\fgurationPREFIXSTACKINPUTE+E0147\u0003id$Forconvenience,thesymbolscorrespondingtothestates1,4,and7arealsoshownunderPREFIX.If\u0003takesprecedenceover+,weknowtheparsershouldshift\u0003ontothestack,preparingtoreducethe\u0003anditssurroundingidsymbolstoanexpression.ThischoicewasmadebytheSLRparserofFig.4.37,basedonanunambiguousgrammarforthesamelanguage.Ontheotherhand,if+takesprecedenceover\u0003,weknowtheparsershouldreduceE+EtoE.Thustherelativeprecedence280CHAPTER4.SYNTAXANALYSISI0:E0!\u0001EI5:E!E\u0003\u0001EE!\u0001E+EE!\u0001E+EE!\u0001E\u0003EE!\u0001E\u0003EE!\u0001(E)E!\u0001(E)E!\u0001idE!\u0001idI1:E0!E\u0001I6:E!(E\u0001)E!E\u0001+EE!E\u0001+EE!E\u0001\u0003EE!E\u0001\u0003EI2:E!(\u0001E)I7:E!E+E\u0001E!\u0001E+EE!E\u0001+EE!\u0001E\u0003EE!E\u0001\u0003EE!\u0001(E)E!\u0001idI8:E!E\u0003E\u0001E!E\u0001+EI3:E!id\u0001E!E\u0001\u0003EI4:E!E+\u0001EI9:E!(E)\u0001E!\u0001E+EE!\u0001E\u0003EE!\u0001(E)E!\u0001idFigure4.48:SetsofLR(0)itemsforanaugmentedexpressiongrammarof+followedby\u0003uniquelydetermineshowtheparsingactioncon\rictbetweenreducingE!E+Eandshiftingon\u0003instate7shouldberesolved.Iftheinputhadbeenid+id+idinstead,theparserwouldstillreachacon\fgurationinwhichithadstack0147afterprocessinginputid+id.Oninput+thereisagainashift/reducecon\rictinstate7.Now,however,theassociativityofthe+operatordetermineshowthiscon\rictshouldberesolved.If+isleftassociative,thecorrectactionistoreducebyE!E+E.Thatis,theidsymbolssurroundingthe\frst+mustbegrouped\frst.AgainthischoicecoincideswithwhattheSLRparserfortheunambiguousgrammarwoulddo.Insummary,assuming+isleftassociative,theactionofstate7oninput+shouldbetoreducebyE!E+E,andassumingthat\u0003takesprecedenceover+,theactionofstate7oninput\u0003shouldbetoshift.Similarly,assumingthat\u0003isleftassociativeandtakesprecedenceover+,wecanarguethatstate8,whichcanappearontopofthestackonlywhenE\u0003Earethetopthreegrammarsymbols,shouldhavetheactionreduceE!E\u0003Eonboth+and\u0003inputs.Inthecaseofinput+,thereasonisthat\u0003takesprecedenceover+,whileinthecaseofinput\u0003,therationaleisthat\u0003isleftassociative.4.8.USINGAMBIGUOUSGRAMMARS281Proceedinginthisway,weobtaintheLRparsingtableshowninFig.4.49.Productions1through4areE!E+E,E!E\u0003E,!(E),andE!id,respectively.ItisinterestingthatasimilarparsingactiontablewouldbeproducedbyeliminatingthereductionsbythesingleproductionsE!TandT!FfromtheSLRtablefortheunambiguousexpressiongrammar(4.1)showninFig.4.37.AmbiguousgrammarsliketheoneforexpressionscanbehandledinasimilarwayinthecontextofLALRandcanonicalLRparsing.282CHAPTER4.SYNTAXANALYSISI0:S0!\u0001SS!\u0001iSeSS!\u0001iSS!\u0001aI1:S0!S\u0001I2:S!i\u0001SeSS!i\u0001SS!\u0001iSeSS!\u0001iSS!\u0001aI3:S!a\u0001I4:S!iS\u0001eSI5:S!iSe\u0001SS!\u0001iSeSS!\u0001iSS!\u0001aI6:S!iSeS\u0001Figure4.50:LR(0)statesforaugmentedgrammar(4.67)ifexprthenstmtonthestackandelseasthe\frstinputsymbol,shouldweshiftelseontothestack(i.e.,shifte)orreduceifexprthenstmt(i.e,reducebyS!iS)?Theansweristhatweshouldshiftelse,becauseitis\\associated\"withthepreviousthen.Intheterminologyofgrammar(4.67),theeontheinput,standingforelse,canonlyformpartofthebodybeginningwiththeiSnowonthetopofthestack.IfwhatfollowseontheinputcannotbeparsedasanS,completingbodyiSeS,thenitcanbeshownthatthereisnootherparsepossible.Weconcludethattheshift/reducecon\rictinI4shouldberesolvedinfavorofshiftoninpute.TheSLRparsingtableconstructedfromthesetsofitemsofFig.4.50,usingthisresolutionoftheparsing-actioncon\rictinI4oninpute,isshowninFig.4.51.Productions1through3areS!iSeS,S!iS,andS!a,respectively.4.8.USINGAMBIGUOUSGRAMMARS283Forexample,oninputiiaea,theparsermakesthemovesshowninFig.4.52,correspondingtothecorrectresolutionofthe\\dangling-else.\"Atline(5),state4selectstheshiftactiononinpute,whereasatline(9),state4callsforreductionbyS!iSoninput$.284CHAPTER4.SYNTAXANALYSISprocessingisasequenceofstatesontopofthestack.Theremainderofthestringisstillintheinput,andtheparserattemptstoskipovertheremainderofthisstringbylookingforasymbolontheinputthatcanlegitimatelyfollowA.Byremovingstatesfromthestack,skippingovertheinput,andpushingGOTO(s;A)onthestack,theparserpretendsthatithasfoundaninstanceofAandresumesnormalparsing.Phrase-levelrecoveryisimplementedbyexaminingeacherrorentryintheLRparsingtableanddecidingonthebasisoflanguageusagethemostlikelyprogrammererrorthatwouldgiverisetothaterror.Anappropriaterecoveryprocedurecanthenbeconstructed;presumablythetopofthestackand/or\frstinputsymbolswouldbemodi\fedinawaydeemedappropriateforeacherrorentry.Indesigningspeci\fcerror-handlingroutinesforanLRparser,wecan\fllineachblankentryintheaction\feldwithapointertoanerrorroutinethatwilltaketheappropriateactionselectedbythecompilerdesigner.Theactionsmayincludeinsertionordeletionofsymbolsfromthestackortheinputorboth,oralterationandtranspositionofinputsymbols.WemustmakeourchoicessothattheLRparserwillnotgetintoanin\fniteloop.Asafestrategywillassurethatatleastoneinputsymbolwillberemovedorshiftedeventually,orthatthestackwilleventuallyshrinkiftheendoftheinputhasbeenreached.Poppingastackstatethatcoversanonterminalshouldbeavoided,becausethismodi\fcationeliminatesfromthestackaconstructthathasalreadybeensuccessfullyparsed.Example4.68:ConsideragaintheexpressiongrammarE!E+EjE\u0003Ej(E)jidFigure4.53showstheLRparsingtablefromFig.4.49forthisgrammar,modi\fedforerrordetectionandrecovery.Wehavechangedeachstatethatcallsforaparticularreductiononsomeinputsymbolsbyreplacingerrorentriesinthatstatebythereduction.Thischangehasthee\u000bectofpostponingtheerrordetectionuntiloneormorereductionsaremade,buttheerrorwillstillbecaughtbeforeanyshiftmovetakesplace.TheremainingblankentriesfromFig.4.49havebeenreplacedbycallstoerrorroutines.Theerrorroutinesareasfollows.e1:Thisroutineiscalledfromstates0,2,4and5,allofwhichexpectthebeginningofanoperand,eitheranidoraleftparenthesis.Instead,+,\u0003,ortheendoftheinputwasfound.pushstate3(thegotoofstates0,2,4and5onid);issuediagnostic\\missingoperand.\"e2:Calledfromstates0,1,2,4and5on\fndingarightparenthesis.removetherightparenthesisfromtheinput;issuediagnostic\\unbalancedrightparenthesis.\"4.8.USINGAMBIGUOUSGRAMMARS285286CHAPTER4.SYNTAXANALYSIS4.9.PARSERGENERATORS287stmt!ifethenstmtjifethenstmtelsestmtjwhileedostmtjbeginlistendjslist!list;stmtjstmtFigure4.56:Agrammarforcertainkindsofstatements4.9ParserGeneratorsThissectionshowshowaparsergeneratorcanbeusedtofacilitatetheconstruc-tionofthefrontendofacompiler.WeshallusetheLALRparsergeneratorYaccasthebasisofourdiscussion,sinceitimplementsmanyoftheconceptsdiscussedintheprevioustwosectionsanditiswidelyavailable.Yaccstandsfor\\yetanothercompiler-compiler,\"re\rectingthepopularityofparsergeneratorsintheearly1970swhenthe\frstversionofYaccwascreatedbyS.C.Johnson.YaccisavailableasacommandontheUNIXsystem,andhasbeenusedtohelpimplementmanyproductioncompilers.4.9.1TheParserGeneratorYaccAtranslatorcanbeconstructedusingYaccinthemannerillustratedinFig.4.57.First,a\fle,saytranslate.y,containingaYaccspeci\fcationofthetranslatorisprepared.TheUNIXsystemcommandyacctranslate.ytransformsthe\fletranslate.yintoaCprogramcalledy.tab.cusingtheLALRmethodoutlinedinAlgorithm4.63.Theprogramy.tab.cisarepre-sentationofanLALRparserwritteninC,alongwithotherCroutinesthattheusermayhaveprepared.TheLALRparsingtableiscompactedasdescribedinSection4.7.Bycompilingy.tab.calongwiththelylibrarythatcontainstheLRparsingprogramusingthecommandccy.tab.c-lyweobtainthedesiredobjectprograma.outthatperformsthetranslationspec-i\fedbytheoriginalYaccprogram.7Ifotherproceduresareneeded,theycanbecompiledorloadedwithy.tab.c,justaswithanyCprogram.AYaccsourceprogramhasthreeparts:288CHAPTER4.SYNTAXANALYSISYaccspeci\fcationtranslate.yYacccompilery.tab.cy.tab.cCcompilera.outinputa.outoutputFigure4.57:Creatinganinput/outputtranslatorwithYaccdeclarations%%translationrules%%supportingCroutinesExample4.69:ToillustratehowtoprepareaYaccsourceprogram,letusconstructasimpledeskcalculatorthatreadsanarithmeticexpression,evaluatesit,andthenprintsitsnumericvalue.Weshallbuildthedeskcalculatorstartingwiththewiththefollowinggrammarforarithmeticexpressions:E!E+TjTT!T\u0003FjFF!(E)jdigitThetokendigitisasingledigitbetween0and9.AYaccdeskcalculatorprogramderivedfromthisgrammarisshowninFig.4.58.2TheDeclarationsPartTherearetwosectionsinthedeclarationspartofaYaccprogram;bothareoptional.Inthe\frstsection,weputordinaryCdeclarations,delimitedby%{and%}.Hereweplacedeclarationsofanytemporariesusedbythetranslationrulesorproceduresofthesecondandthirdsections.InFig.4.58,thissectioncontainsonlytheinclude-statement#include<ctype.h>thatcausestheCpreprocessortoincludethestandardheader\fle<ctype.h>thatcontainsthepredicateisdigit.Alsointhedeclarationspartaredeclarationsofgrammartokens.InFig.4.58,thestatement%tokenDIGIT4.9.PARSERGENERATORS289%{#include<ctype.h>%}%tokenDIGIT%%line:expr'\\n'{printf(\"%d\\n\",$1);};expr:expr'+'term{$$=$1+$3;}|term;term:term'*'factor{$$=$1*$3;}|factor;factor:'('expr')'{$$=$2;}|DIGIT;%%yylex(){intc;c=getchar();if(isdigit(c)){yylval=c-'0';returnDIGIT;}returnc;}Figure4.58:Yaccspeci\fcationofasimpledeskcalculatordeclaresDIGITtobeatoken.TokensdeclaredinthissectioncanthenbeusedinthesecondandthirdpartsoftheYaccspeci\fcation.IfLexisusedtocreatethelexicalanalyzerthatpassestokentotheYaccparser,thenthesetokendeclarationsarealsomadeavailabletotheanalyzergeneratedbyLex,asdiscussedinSection3.5.2.TheTranslationRulesPartInthepartoftheYaccspeci\fcationafterthe\frst%%pair,weputthetranslationrules.Eachruleconsistsofagrammarproductionandtheassociatedsemanticaction.Asetofproductionsthatwehavebeenwriting:hheadi!hbodyi1jhbodyi2j\u0001\u0001\u0001jhbodyinwouldbewritteninYaccas290CHAPTER4.SYNTAXANALYSIShheadi:hbodyi1{hsemanticactioni1}|hbodyi2{hsemanticactioni2}\u0001\u0001\u0001|hbodyin{hsemanticactionin};InaYaccproduction,unquotedstringsoflettersanddigitsnotdeclaredtobetokensaretakentobenonterminals.Aquotedsinglecharacter,e.g.'c',istakentobetheterminalsymbolc,aswellastheintegercodeforthetokenrepresentedbythatcharacter(i.e.,Lexwouldreturnthecharactercodefor'c'totheparser,asaninteger).Alternativebodiescanbeseparatedbyaverticalbar,andasemicolonfollowseachheadwithitsalternativesandtheirsemanticactions.The\frstheadistakentobethestartsymbol.AYaccsemanticactionisasequenceofCstatements.Inasemanticaction,thesymbol$$referstotheattributevalueassociatedwiththenonterminalofthehead,while$ireferstothevalueassociatedwiththeithgrammarsymbol(terminalornonterminal)ofthebody.Thesemanticactionisperformedwhen-everwereducebytheassociatedproduction,sonormallythesemanticactioncomputesavaluefor$$intermsofthe$i's.IntheYaccspeci\fcation,wehavewrittenthetwoE-productionsE!E+TjTandtheirassociatedsemanticactionsas:expr:expr'+'term{$$=$1+$3;}|term;Notethatthenonterminalterminthe\frstproductionisthethirdgrammarsymbolofthebody,while+isthesecond.Thesemanticactionassociatedwiththe\frstproductionaddsthevalueoftheexprandthetermofthebodyandassignstheresultasthevalueforthenonterminalexprofthehead.Wehaveomittedthesemanticactionforthesecondproductionaltogether,sincecopyingthevalueisthedefaultactionforproductionswithasinglegrammarsymbolinthebody.Ingeneral,{$$=$1;}isthedefaultsemanticaction.Noticethatwehaveaddedanewstartingproductionline:expr'\\n'{printf(\"%d\\n\",$1);}totheYaccspeci\fcation.Thisproductionsaysthataninputtothedeskcalculatoristobeanexpressionfollowedbyanewlinecharacter.Thesemanticactionassociatedwiththisproductionprintsthedecimalvalueoftheexpressionfollowedbyanewlinecharacter.4.9.PARSERGENERATORS291TheSupportingC-RoutinesPartThethirdpartofaYaccspeci\fcationconsistsofsupportingC-routines.Alexicalanalyzerbythenameyylex()mustbeprovided.UsingLextoproduceyylex()isacommonchoice;seeSection4.9.3.Otherproceduressuchaserrorrecoveryroutinesmaybeaddedasnecessary.Thelexicalanalyzeryylex()producestokensconsistingofatokennameanditsassociatedattributevalue.IfatokennamesuchasDIGITisreturned,thetokennamemustbedeclaredinthe\frstsectionoftheYaccspeci\fcation.TheattributevalueassociatedwithatokeniscommunicatedtotheparserthroughaYacc-de\fnedvariableyylval.ThelexicalanalyzerinFig.4.58isverycrude.ItreadsinputcharactersoneatatimeusingtheC-functiongetchar().Ifthecharacterisadigit,thevalueofthedigitisstoredinthevariableyylval,andthetokennameDIGITisreturned.Otherwise,thecharacteritselfisreturnedasthetokenname.4.9.2UsingYaccwithAmbiguousGrammarsLetusnowmodifytheYaccspeci\fcationsothattheresultingdeskcalculatorbecomesmoreuseful.First,weshallallowthedeskcalculatortoevaluateasequenceofexpressions,onetoaline.Weshallalsoallowblanklinesbetweenexpressions.Wedosobychangingthe\frstruletolines:linesexpr'\\n'{printf(\"%g\\n\",$2);}|lines'\\n'|/*empty*/;InYacc,anemptyalternative,asthethirdlineis,denotes\u000f.Second,weshallenlargetheclassofexpressionstoincludenumberswithadecimalpointinsteadofsingledigitsandtoincludethearithmeticoperators+,\u0000,(bothbinaryandunary),\u0003,and=.TheeasiestwaytospecifythisclassofexpressionsistousetheambiguousgrammarE!E+EjE\u0000EjE\u0003EjE=Ej\u0000Ej(E)jnumberTheresultingYaccspeci\fcationisshowninFig.4.59.SincethegrammarintheYaccspeci\fcationinFig.4.59isambiguous,theLALRalgorithmwillgenerateparsing-actioncon\ricts.Yaccreportsthenum-berofparsing-actioncon\rictsthataregenerated.Adescriptionofthesetsofitemsandtheparsing-actioncon\rictscanbeobtainedbyinvokingYaccwitha-voption.Thisoptiongeneratesanadditional\fley.outputthatcontainsthekernelsofthesetsofitemsfoundforthegrammar,adescriptionoftheparsingactioncon\rictsgeneratedbytheLALRalgorithm,andareadablerepresen-tationoftheLRparsingtableshowinghowtheparsingactioncon\rictswereresolved.WheneverYaccreportsthatithasfoundparsing-actioncon\ricts,it292CHAPTER4.SYNTAXANALYSIS%{#include<ctype.h>#include<stdio.h>#defineYYSTYPEdouble/*doubletypeforYaccstack*/%}%tokenNUMBER%left'+''-'%left'*''/'%rightUMINUS%%lines:linesexpr'\\n'{printf(\"%g\\n\",$2);}|lines'\\n'|/*empty*/;expr:expr'+'expr{$$=$1+$3;}|expr'-'expr{$$=$1-$3;}|expr'*'expr{$$=$1*$3;}|expr'/'expr{$$=$1/$3;}|'('expr')'{$$=$2;}|'-'expr%precUMINUS{$$=-$2;}|NUMBER;%%yylex(){intc;while((c=getchar())=='');if((c=='.')||(isdigit(c))){ungetc(c,stdin);scanf(\"%lf\",&yylval);returnNUMBER;}returnc;}Figure4.59:Yaccspeci\fcationforamoreadvanceddeskcalculator.4.9.PARSERGENERATORS293iswisetocreateandconsultthe\fley.outputtoseewhytheparsing-actioncon\rictsweregeneratedandtoseewhethertheywereresolvedcorrectly.UnlessotherwiseinstructedYaccwillresolveallparsingactioncon\rictsusingthefollowingtworules:1.Areduce/reducecon\rictisresolvedbychoosingthecon\rictingproductionlisted\frstintheYaccspeci\fcation.2.Ashift/reducecon\rictisresolvedinfavorofshift.Thisruleresolvestheshift/reducecon\rictarisingfromthedangling-elseambiguitycorrectly.Sincethesedefaultrulesmaynotalwaysbewhatthecompilerwriterwants,Yaccprovidesageneralmechanismforresolvingshift/reducecon\ricts.Inthedeclarationsportion,wecanassignprecedencesandassociativitiestoterminals.Thedeclaration%left'+''-'makes+and-beofthesameprecedenceandbeleftassociative.Wecandeclareanoperatortoberightassociativebywriting%right'^'andwecanforceanoperatortobeanonassociativebinaryoperator(i.e.,twooccurrencesoftheoperatorcannotbecombinedatall)bywriting%nonassoc'<'Thetokensaregivenprecedencesintheorderinwhichtheyappearinthedeclarationspart,lowest\frst.Tokensinthesamedeclarationhavethesameprecedence.Thus,thedeclaration%rightUMINUSinFig.4.59givesthetokenUMINUSaprecedencelevelhigherthanthatofthe\fveprecedingterminals.Yaccresolvesshift/reducecon\rictsbyattachingaprecedenceandassocia-tivitytoeachproductioninvolvedinacon\rict,aswellastoeachterminalinvolvedinacon\rict.Ifitmustchoosebetweenshiftinginputsymbolaandre-ducingbyproductionA!\u000b,Yaccreducesiftheprecedenceoftheproductionisgreaterthanthatofa,oriftheprecedencesarethesameandtheassociativityoftheproductionisleft.Otherwise,shiftisthechosenaction.Normally,theprecedenceofaproductionistakentobethesameasthatofitsrightmostterminal.Thisisthesensibledecisioninmostcases.Forexample,givenproductionsE!E+EjE*E294CHAPTER4.SYNTAXANALYSISwewouldprefertoreducebyE!E+Ewithlookahead+,becausethe+inthebodyhasthesameprecedenceasthelookahead,butisleftassociative.Withlookahead*,wewouldprefertoshift,becausethelookaheadhashigherprecedencethanthe+intheproduction.Inthosesituationswheretherightmostterminaldoesnotsupplytheproperprecedencetoaproduction,wecanforceaprecedencebyappendingtoapro-ductionthetag%prechterminaliTheprecedenceandassociativityoftheproductionwillthenbethesameasthatoftheterminal,whichpresumablyisde\fnedinthedeclarationsection.Yaccdoesnotreportshift/reducecon\rictsthatareresolvedusingthisprecedenceandassociativitymechanism.This\\terminal\"canbeaplaceholder,likeUMINUSinFig.4.59;thistermi-nalisnotreturnedbythelexicalanalyzer,butisdeclaredsolelytode\fneaprecedenceforaproduction.InFig.4.59,thedeclaration%rightUMINUSassignstothetokenUMINUSaprecedencethatishigherthanthatof\u0003and=.Inthetranslationrulespart,thetag:%precUMINUSattheendoftheproductionexpr:'-'exprmakestheunary-minusoperatorinthisproductionhaveahigherprecedencethananyotheroperator.4.9.3CreatingYaccLexicalAnalyzerswithLexLexwasdesignedtoproducelexicalanalyzersthatcouldbeusedwithYacc.TheLexlibraryllwillprovideadriverprogramnamedyylex(),thenamerequiredbyYaccforitslexicalanalyzer.IfLexisusedtoproducethelexicalanalyzer,wereplacetheroutineyylex()inthethirdpartoftheYaccspeci\fcationbythestatement#include\"lex.yy.c\"andwehaveeachLexactionreturnaterminalknowntoYacc.Byusingthe#include\"lex.yy.c\"statement,theprogramyylexhasaccesstoYacc'snamesfortokens,sincetheLexoutput\fleiscompiledaspartoftheYaccoutput\fley.tab.c.UndertheUNIXsystem,iftheLexspeci\fcationisinthe\flefirst.landtheYaccspeci\fcationinsecond.y,wecansay4.9.PARSERGENERATORS295lexfirst.lyaccsecond.yccy.tab.c-ly-lltoobtainthedesiredtranslator.TheLexspeci\fcationinFig.4.60canbeusedinplaceofthelexicalanalyzerinFig.4.59.Thelastpattern,meaning\\anycharacter,\"mustbewritten\\n|.sincethedotinLexmatchesanycharacterexceptnewline.number[0-9]+\\.?|[0-9]*\\.[0-9]+%%[]{/*skipblanks*/}{number}{sscanf(yytext,\"%lf\",&yylval);returnNUMBER;}\\n|.{returnyytext[0];}Figure4.60:Lexspeci\fcationforyylex()inFig.4.594.9.4ErrorRecoveryinYaccInYacc,errorrecoveryusesaformoferrorproductions.First,theuserde-cideswhat\\major\"nonterminalswillhaveerrorrecoveryassociatedwiththem.Typicalchoicesaresomesubsetofthenonterminalsgeneratingexpressions,statements,blocks,andfunctions.TheuserthenaddstothegrammarerrorproductionsoftheformA!error\u000b,whereAisamajornonterminaland\u000bisastringofgrammarsymbols,perhapstheemptystring;errorisaYaccreservedword.Yaccwillgenerateaparserfromsuchaspeci\fcation,treatingtheerrorproductionsasordinaryproductions.However,whentheparsergeneratedbyYaccencountersanerror,ittreatsthestateswhosesetsofitemscontainerrorproductionsinaspecialway.Onencounteringanerror,Yaccpopssymbolsfromitsstackuntilit\fndsthetop-moststateonitsstackwhoseunderlyingsetofitemsincludesanitemoftheformA!\u0001error\u000b.Theparserthen\\shifts\"a\fctitioustokenerrorontothestack,asthoughitsawthetokenerroronitsinput.When\u000bis\u000f,areductiontoAoccursimmediatelyandthesemanticactionassociatedwiththeproductionA!error(whichmightbeauser-speci\federror-recoveryroutine)isinvoked.Theparserthendiscardsinputsymbolsuntilit\fndsaninputsymbolonwhichnormalparsingcanproceed.If\u000bisnotempty,Yaccskipsaheadontheinputlookingforasubstringthatcanbereducedto\u000b.If\u000bconsistsentirelyofterminals,thenitlooksforthisstringofterminalsontheinput,and\\reduces\"thembyshiftingthemontothestack.Atthispoint,theparserwillhaveerror\u000bontopofitsstack.Theparserwillthenreduceerror\u000btoA,andresumenormalparsing.Forexample,anerrorproductionoftheform296CHAPTER4.SYNTAXANALYSIS%{#include<ctype.h>#include<stdio.h>#defineYYSTYPEdouble/*doubletypeforYaccstack*/%}%tokenNUMBER%left'+''-'%left'*''/'%rightUMINUS%%lines:linesexpr'\\n'{printf(\"%g\\n\",$2);}|lines'\\n'|/*empty*/|error'\\n'{yyerror(\"reenterpreviousline:\");yyerrok;};expr:expr'+'expr{$$=$1+$3;}|expr'-'expr{$$=$1-$3;}|expr'*'expr{$$=$1*$3;}|expr'/'expr{$$=$1/$3;}|'('expr')'{$$=$2;}|'-'expr%precUMINUS{$$=-$2;}|NUMBER;%%#include\"lex.yy.c\"Figure4.61:Deskcalculatorwitherrorrecoverystmt!error;wouldspecifytotheparserthatitshouldskipjustbeyondthenextsemicolononseeinganerror,andassumethatastatementhadbeenfound.Thesemanticroutineforthiserrorproductionwouldnotneedtomanipulatetheinput,butcouldgenerateadiagnosticmessageandseta\ragtoinhibitgenerationofobjectcode,forexample.Example4.70:Figure4.61showstheYaccdeskcalculatorofFig.4.59withtheerrorproductionlines:error'\\n'Thiserrorproductioncausesthedeskcalculatortosuspendnormalparsingwhenasyntaxerrorisfoundonaninputline.Onencounteringtheerror,4.10.SUMMARYOFCHAPTER4297theparserinthedeskcalculatorstartspoppingsymbolsfromitsstackuntilitencountersastatethathasashiftactiononthetokenerror.State0issuchastate(inthisexample,it'stheonlysuchstate),sinceitsitemsincludelines!\u0001error'\\n'Also,state0isalwaysonthebottomofthestack.Theparsershiftsthetokenerrorontothestack,andthenproceedstoskipaheadintheinputuntilithasfoundanewlinecharacter.Atthispointtheparsershiftsthenewlineontothestack,reduceserror'\\n'tolines,andemitsthediagnosticmessage\\reenterpreviousline:\".ThespecialYaccroutineyyerrokresetstheparsertoitsnormalmodeofoperation.24.9.5ExercisesforSection4.9!Exercise4.9.1:WriteaYaccprogramthattakesbooleanexpressionsasinput[asgivenbythegrammarofExercise4.2.2(g)]andproducesthetruthvalueoftheexpressions.!Exercise4.9.2:WriteaYaccprogramthattakeslists(asde\fnedbythegrammarofExercise4.2.2(e),butwithanysinglecharacterasanelement,notjusta)andproducesasoutputalinearrepresentationofthesamelist;i.e.,asinglelistoftheelements,inthesameorderthattheyappearintheinput.!Exercise4.9.3:WriteaYaccprogramthattellswhetheritsinputisapalin-drome(sequenceofcharactersthatreadthesameforwardandbackward).!!Exercise4.9.4:WriteaYaccprogramthattakesregularexpressions(asde-\fnedbythegrammarofExercise4.2.2(d),butwithanysinglecharacterasanargument,notjusta)andproducesasoutputatransitiontableforanonde-terministic\fniteautomatonrecognizingthesamelanguage.4.10SummaryofChapter4 ✦Parsers.Aparsertakesasinputtokensfromthelexicalanalyzerandtreatsthetokennamesasterminalsymbolsofacontext-freegrammar.Theparserthenconstructsaparsetreeforitsinputsequenceoftokens;theparsetreemaybeconstructed\fguratively(bygoingthroughthecor-respondingderivationsteps)orliterally. ✦Context-FreeGrammars.Agrammarspeci\fesasetofterminalsymbols(inputs),anothersetofnonterminals(symbolsrepresentingsyntacticcon-structs),andasetofproductions,eachofwhichgivesawayinwhichstringsrepresentedbyonenonterminalcanbeconstructedfromterminalsymbolsandstringsrepresentedbycertainothernonterminals.Apro-ductionconsistsofahead(thenonterminaltobereplaced)andabody(thereplacingstringofgrammarsymbols).298CHAPTER4.SYNTAXANALYSIS ✦Derivations.Theprocessofstartingwiththestart-nonterminalofagram-marandsuccessivelyreplacingitbythebodyofoneofitsproductionsiscalledaderivation.Iftheleftmost(orrightmost)nonterminalisalwaysreplaced,thenthederivationiscalledleftmost(respectively,rightmost). ✦ParseTrees.Aparsetreeisapictureofaderivation,inwhichthereisanodeforeachnonterminalthatappearsinthederivation.Thechildrenofanodearethesymbolsbywhichthatnonterminalisreplacedinthederivation.Thereisaone-to-onecorrespondencebetweenparsetrees,left-mostderivations,andrightmostderivationsofthesameterminalstring. ✦Ambiguity.Agrammarforwhichsometerminalstringhastwoormoredi\u000berentparsetrees,orequivalentlytwoormoreleftmostderivationsortwoormorerightmostderivations,issaidtobeambiguous.Inmostcasesofpracticalinterest,itispossibletoredesignanambiguousgrammarsoitbecomesanunambiguousgrammarforthesamelanguage.However,ambiguousgrammarswithcertaintricksappliedsometimesleadtomoree\u000ecientparsers. ✦Top-DownandBottom-UpParsing.Parsersaregenerallydistinguishedbywhethertheyworktop-down(startwiththegrammar'sstartsymbolandconstructtheparsetreefromthetop)orbottom-up(startwiththeterminalsymbolsthatformtheleavesoftheparsetreeandbuildthetreefromthebottom).Top-downparsersincluderecursive-descentandLLparsers,whilethemostcommonformsofbottom-upparsersareLRparsers. ✦DesignofGrammars.Grammarssuitablefortop-downparsingoftenarehardertodesignthanthoseusedbybottom-upparsers.Itisnecessarytoeliminateleft-recursion,asituationwhereonenonterminalderivesastringthatbeginswiththesamenonterminal.Wealsomustleft-factor|groupproductionsforthesamenonterminalthathaveacommonpre\fxinthebody. ✦Recursive-DescentParsers.Theseparsersuseaprocedureforeachnon-terminal.Theprocedurelooksatitsinputanddecideswhichproductiontoapplyforitsnonterminal.Terminalsinthebodyoftheproductionarematchedtotheinputattheappropriatetime,whilenonterminalsinthebodyresultincallstotheirprocedure.Backtracking,inthecasewhenthewrongproductionwaschosen,isapossibility. ✦LL(1)Parsers.Agrammarsuchthatitispossibletochoosethecorrectproductionwithwhichtoexpandagivennonterminal,lookingonlyatthenextinputsymbol,iscalledLL(1).Thesegrammarsallowustoconstructapredictiveparsingtablethatgives,foreachnonterminalandeachlookaheadsymbol,thecorrectchoiceofproduction.Errorcorrectioncanbefacilitatedbyplacingerrorroutinesinsomeorallofthetableentriesthathavenolegitimateproduction.4.10.SUMMARYOFCHAPTER4299 ✦Shift-ReduceParsing.Bottom-upparsersgenerallyoperatebychoosing,onthebasisofthenextinputsymbol(lookaheadsymbol)andthecontentsofthestack,whethertoshiftthenextinputontothestack,ortoreducesomesymbolsatthetopofthestack.Areducesteptakesaproductionbodyatthetopofthestackandreplacesitbytheheadoftheproduction. ✦ViablePre\fxes.Inshift-reduceparsing,thestackcontentsarealwaysaviablepre\fx|thatis,apre\fxofsomeright-sententialformthatendsnofurtherrightthantheendofthehandleofthatright-sententialform.Thehandleisthesubstringthatwasintroducedinthelaststepoftherightmostderivationofthatsententialform. ✦ValidItems.Anitemisaproductionwithadotsomewhereinthebody.Anitemisvalidforaviablepre\fxiftheproductionofthatitemisusedtogeneratethehandle,andtheviablepre\fxincludesallthosesymbolstotheleftofthedot,butnotthosebelow. ✦LRParsers.EachoftheseveralkindsofLRparsersoperateby\frstconstructingthesetsofvaliditems(calledLRstates)forallpossibleviablepre\fxes,andkeepingtrackofthestateforeachpre\fxonthestack.Thesetofvaliditemsguidetheshift-reduceparsingdecision.Weprefertoreduceifthereisavaliditemwiththedotattherightendofthebody,andweprefertoshiftthelookaheadsymbolontothestackifthatsymbolappearsimmediatelytotherightofthedotinsomevaliditem. ✦SimpleLRParsers.InanSLRparser,weperformareductionimpliedbyavaliditemwithadotattherightend,providedthelookaheadsymbolcanfollowtheheadofthatproductioninsomesententialform.ThegrammarisSLR,andthismethodcanbeapplied,iftherearenoparsing-actioncon\ricts;thatis,fornosetofitems,andfornolookaheadsymbol,aretheretwoproductionstoreduceby,noristheretheoptiontoreduceortoshift. ✦Canonical-LRParsers.ThismorecomplexformofLRparserusesitemsthatareaugmentedbythesetoflookaheadsymbolsthatcanfollowtheuseoftheunderlyingproduction.Reductionsareonlychosenwhenthereisavaliditemwiththedotattherightend,andthecurrentlookaheadsymbolisoneofthoseallowedforthisitem.Acanonical-LRparsercanavoidsomeoftheparsing-actioncon\rictsthatarepresentinSLRparsers,butoftenhasmanymorestatesthantheSLRparserforthesamegrammar. ✦Lookahead-LRParsers.LALRparserso\u000bermanyoftheadvantagesofSLRandCanonical-LRparsers,bycombiningthestatesthathavethesamekernels(setsofitems,ignoringtheassociatedlookaheadsets).Thus,thenumberofstatesisthesameasthatoftheSLRparser,butsomeparsing-actioncon\rictspresentintheSLRparsermayberemovedintheLALRparser.LALRparsershavebecomethemethodofchoiceinpractice.300CHAPTER4.SYNTAXANALYSIS ✦Bottom-UpParsingofAmbiguousGrammars.Inmanyimportantsitua-tions,suchasparsingarithmeticexpressions,wecanuseanambiguousgrammar,andexploitsideinformationsuchastheprecedenceofoperatorstoresolvecon\rictsbetweenshiftingandreducing,orbetweenreductionbytwodi\u000berentproductions.Thus,LRparsingtechniquesextendtomanyambiguousgrammars. ✦Yacc.Theparser-generatorYacctakesa(possibly)ambiguousgrammarandcon\rict-resolutioninformationandconstructstheLALRstates.Itthenproducesafunctionthatusesthesestatestoperformabottom-upparseandcallanassociatedfunctioneachtimeareductionisperformed.4.11ReferencesforChapter4Thecontext-freegrammarformalismoriginatedwithChomsky[5],aspartofastudyonnaturallanguage.Theideaalsowasusedinthesyntaxdescriptionoftwoearlylanguages:FortranbyBackus[2]andAlgol60byNaur[26].ThescholarPaninidevisedanequivalentsyntacticnotationtospecifytherulesofSanskritgrammarbetween400B.C.and200B.C.[19].Thephenomenonofambiguitywasobserved\frstbyCantor[4]andFloyd[13].ChomskyNormalForm(Exercise4.4.8)isfrom[6].Thetheoryofcontext-freegrammarsissummarizedin[17].Recursive-descentparsingwasthemethodofchoiceforearlycompilers,suchas[16],andcompiler-writingsystems,suchasMETA[28]andTMG[25].LLgrammarswereintroducedbyLewisandStearns[24].Exercise4.4.5,thelinear-timesimulationofrecursive-descent,isfrom[3].Oneoftheearliestparsingtechniques,duetoFloyd[14],involvedtheprece-denceofoperators.TheideawasgeneralizedtopartsofthelanguagethatdonotinvolveoperatorsbyWirthandWeber[29].Thesetechniquesarerarelyusedtoday,butcanbeseenasleadinginachainofimprovementstoLRparsing.LRparserswereintroducedbyKnuth[22],andthecanonical-LRparsingtablesoriginatedthere.Thisapproachwasnotconsideredpractical,becausetheparsingtableswerelargerthanthemainmemoriesoftypicalcomputersoftheday,untilKorenjak[23]gaveamethodforproducingreasonablysizedparsingtablesfortypicalprogramminglanguages.DeRemerdevelopedtheLALR[8]andSLR[9]methodsthatareinusetoday.TheconstructionofLRparsingtablesforambiguousgrammarscamefrom[1]and[12].Johnson'sYaccveryquicklydemonstratedthepracticalityofgeneratingparserswithanLALRparsergeneratorforproductioncompilers.ThemanualfortheYaccparsergeneratorisfoundin[20].Theopen-sourceversion,Bison,isdescribedin[10].AsimilarLALR-basedparsergeneratorcalledCUP[18]supportsactionswritteninJava.Top-downparsergeneratorsincudeAntlr[27],arecursive-descentparsergeneratorthatacceptsactionsinC++,Java,orC#,andLLGen[15],whichisanLL(1)-basedgenerator.Dain[7]givesabibliographyonsyntax-errorhandling.4.11.REFERENCESFORCHAPTER4301Thegeneral-purposedynamic-programmingparsingalgorithmdescribedinExercise4.4.9wasinventedindependentlybyJ.Cocke(unpublished)byYoung-er[30]andKasami[21];hencethe\\CYKalgorithm.\"Thereisamorecomplex,general-purposealgorithmduetoEarley[11]thattabulatesLR-itemsforeachsubstringofthegiveninput;thisalgorithm,whilealsoO(n3)ingeneral,isonlyO(n2)onunambiguousgrammars.1.Aho,A.V.,S.C.Johnson,andJ.D.Ullman,\\Deterministicparsingofambiguousgrammars,\"Comm.ACM18:8(Aug.,1975),pp.441{452.2.Backus,J.W,\\ThesyntaxandsemanticsoftheproposedinternationalalgebraiclanguageoftheZurich-ACM-GAMMConference,\"Proc.Intl.Conf.InformationProcessing,UNESCO,Paris,(1959)pp.125{132.3.Birman,A.andJ.D.Ullman,\\Parsingalgorithmswithbacktrack,\"In-formationandControl23:1(1973),pp.1{34.4.Cantor,D.C.,\\OntheambiguityproblemofBackussystems,\"J.ACM9:4(1962),pp.477{479.5.Chomsky,N.,\\Threemodelsforthedescriptionoflanguage,\"IRETrans.onInformationTheoryIT-2:3(1956),pp.113{124.6.Chomsky,N.,\\Oncertainformalpropertiesofgrammars,\"InformationandControl2:2(1959),pp.137{167.7.Dain,J.,\\BibliographyonSyntaxErrorHandlinginLanguageTransla-tionSystems,\"1991.Availablefromthecomp.compilersnewsgroup;seehttp://compilers.iecc.com/comparch/article/91-04-050.8.DeRemer,F.,\\PracticalTranslatorsforLR(k)Languages,\"Ph.D.thesis,MIT,Cambridge,MA,1969.9.DeRemer,F.,\\SimpleLR(k)grammars,\"Comm.ACM14:7(July,1971),pp.453{460.10.Donnelly,C.andR.Stallman,\\Bison:TheYACC-compatibleParserGenerator,\"http://www.gnu.org/software/bison/manual/.11.Earley,J.,\\Ane\u000ecientcontext-freeparsingalgorithm,\"Comm.ACM13:2(Feb.,1970),pp.94{102.12.Earley,J.,\\Ambiguityandprecedenceinsyntaxdescription,\"ActaIn-formatica4:2(1975),pp.183{192.13.Floyd,R.W.,\\Onambiguityinphrase-structurelanguages,\"Comm.ACM5:10(Oct.,1962),pp.526{534.14.Floyd,R.W.,\\Syntacticanalysisandoperatorprecedence,\"J.ACM10:3(1963),pp.316{333.302CHAPTER4.SYNTAXANALYSIS15.Grune,DandC.J.H.Jacobs,\\Aprogrammer-friendlyLL(1)parsergenerator,\"SoftwarePracticeandExperience18:1(Jan.,1988),pp.29{38.Seealsohttp://www.cs.vu.nl/~ceriel/LLgen.html.16.Hoare,C.A.R.,\\ReportontheElliottAlgoltranslator,\"ComputerJ.5:2(1962),pp.127{129.17.Hopcroft,J.E.,R.Motwani,andJ.D.Ullman,IntroductiontoAutomataTheory,Languages,andComputation,Addison-Wesley,BostonMA,2001.18.Hudson,S.E.etal.,\\CUPLALRParserGeneratorinJava,\"Availableathttp://www2.cs.tum.edu/projects/cup/.19.Ingerman,P.Z.,\\Panini-Backusformsuggested,\"Comm.ACM10:3(March1967),p.137.20.Johnson,S.C.,\\Yacc|YetAnotherCompilerCompiler,\"ComputingScienceTechnicalReport32,BellLaboratories,MurrayHill,NJ,1975.Availableathttp://dinosaur.compilertools.net/yacc/.21.Kasami,T.,\\Ane\u000ecientrecognitionandsyntaxanalysisalgorithmforcontext-freelanguages,\"AFCRL-65-758,AirForceCambridgeResearchLaboratory,Bedford,MA,1965.22.Knuth,D.E.,\\Onthetranslationoflanguagesfromlefttoright,\"Infor-mationandControl8:6(1965),pp.607{639.23.Korenjak,A.J.,\\ApracticalmethodforconstructingLR(k)processors,\"Comm.ACM12:11(Nov.,1969),pp.613{623.24.Lewis,P.M.IIandR.E.Stearns,\\Syntax-directedtransduction,\"J.ACM15:3(1968),pp.465{488.25.McClure,R.M.,\\TMG|asyntax-directedcompiler,\"Proc.20thACMNatl.Conf.(1965),pp.262{274.26.Naur,P.etal.,\\ReportonthealgorithmiclanguageALGOL60,\"Comm.ACM3:5(May,1960),pp.299{314.SeealsoComm.ACM6:1(Jan.,1963),pp.1{17.27.Parr,T.,\\ANTLR,\"http://www.antlr.org/.28.Schorre,D.V.,\\Meta-II:asyntax-orientedcompilerwritinglanguage,\"Proc.19thACMNatl.Conf.(1964)pp.D1.3-1{D1.3-11.29.Wirth,N.andH.Weber,\\Euler:ageneralizationofAlgolanditsformalde\fnition:PartI,\"Comm.ACM9:1(Jan.,1966),pp.13{23.30.Younger,D.H.,\\Recognitionandparsingofcontext-freelanguagesintimen3,\"InformationandControl10:2(1967),pp.189{208.Chapter5Syntax-DirectedTranslationThischapterdevelopsthethemeofSection2.3:thetranslationoflanguagesguidedbycontext-freegrammars.ThetranslationtechniquesinthischapterwillbeappliedinChapter6totypecheckingandintermediate-codegeneration.Thetechniquesarealsousefulforimplementinglittlelanguagesforspecializedtasks;thischapterincludesanexamplefromtypesetting.Weassociateinformationwithalanguageconstructbyattachingattributestothegrammarsymbol(s)representingtheconstruct,asdiscussedinSec-tion2.3.2.Asyntax-directedde\fnitionspeci\festhevaluesofattributesbyassociatingsemanticruleswiththegrammarproductions.Forexample,anin\fx-to-post\fxtranslatormighthaveaproductionandrulePRODUCTIONSEMANTICRULEE!E1+TE:code=E1:codekT:codek0+0(5.1)Thisproductionhastwononterminals,EandT;thesubscriptinE1distin-guishestheoccurrenceofEintheproductionbodyfromtheoccurrenceofEasthehead.BothEandThaveastring-valuedattributecode.Thesemanticrulespeci\festhatthestringE:codeisformedbyconcatenatingE1:code,T:code,andthecharacter0+0.WhiletherulemakesitexplicitthatthetranslationofEisbuiltupfromthetranslationsofE1,T,and0+0,itmaybeine\u000ecienttoimplementthetranslationdirectlybymanipulatingstrings.FromSection2.3.5,asyntax-directedtranslationschemeembedsprogramfragmentscalledsemanticactionswithinproductionbodies,asinE!E1+Tfprint0+0g(5.2)Byconvention,semanticactionsareenclosedwithincurlybraces.(Ifcurlybracesoccurasgrammarsymbols,weenclosethemwithinsinglequotes,asin303304CHAPTER5.SYNTAX-DIRECTEDTRANSLATION0f0and0g0.)Thepositionofasemanticactioninaproductionbodydeterminestheorderinwhichtheactionisexecuted.Inproduction(5.2),theactionoccursattheend,afterallthegrammarsymbols;ingeneral,semanticactionsmayoccuratanypositioninaproductionbody.Betweenthetwonotations,syntax-directedde\fnitionscanbemorereadable,andhencemoreusefulforspeci\fcations.However,translationschemescanbemoree\u000ecient,andhencemoreusefulforimplementations.Themostgeneralapproachtosyntax-directedtranslationistoconstructaparsetreeorasyntaxtree,andthentocomputethevaluesofattributesatthenodesofthetreebyvisitingthenodesofthetree.Inmanycases,translationcanbedoneduringparsing,withoutbuildinganexplicittree.Weshallthereforestudyaclassofsyntax-directedtranslationscalled\\L-attributedtranslations\"(Lforleft-to-right),whichencompassvirtuallyalltranslationsthatcanbeperformedduringparsing.Wealsostudyasmallerclass,called\\S-attributedtranslations\"(Sforsynthesized),whichcanbeperformedeasilyinconnectionwithabottom-upparse.5.1Syntax-DirectedDe\fnitionsAsyntax-directedde\fnition(SDD)isacontext-freegrammartogetherwithattributesandrules.Attributesareassociatedwithgrammarsymbolsandrulesareassociatedwithproductions.IfXisasymbolandaisoneofitsattributes,thenwewriteX:atodenotethevalueofaataparticularparse-treenodelabeledX.Ifweimplementthenodesoftheparsetreebyrecordsorobjects,thentheattributesofXcanbeimplementedbydata\feldsintherecordsthatrepresentthenodesforX.Attributesmaybeofanykind:numbers,types,tablereferences,orstrings,forinstance.Thestringsmayevenbelongsequencesofcode,saycodeintheintermediatelanguageusedbyacompiler.5.1.1InheritedandSynthesizedAttributesWeshalldealwithtwokindsofattributesfornonterminals:1.AsynthesizedattributeforanonterminalAataparse-treenodeNisde\fnedbyasemanticruleassociatedwiththeproductionatN.NotethattheproductionmusthaveAasitshead.AsynthesizedattributeatnodeNisde\fnedonlyintermsofattributevaluesatthechildrenofNandatNitself.2.AninheritedattributeforanonterminalBataparse-treenodeNisde\fnedbyasemanticruleassociatedwiththeproductionattheparentofN.NotethattheproductionmusthaveBasasymbolinitsbody.AninheritedattributeatnodeNisde\fnedonlyintermsofattributevaluesatN'sparent,Nitself,andN'ssiblings.5.1.SYNTAX-DIRECTEDDEFINITIONS305306CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONtreenodeNlabeledE,thevalueofvalforEisthesumofthevaluesofvalatthechildrenofnodeNlabeledEandT.Production3,E!T,hasasinglerulethatde\fnesthevalueofvalforEtobethesameasthevalueofvalatthechildforT.Production4issimilartothesecondproduction;itsrulemultipliesthevaluesatthechildreninsteadofaddingthem.Therulesforproductions5and6copyvaluesatachild,likethatforthethirdproduction.Production7givesF:valthevalueofadigit,thatis,thenumericalvalueofthetokendigitthatthelexicalanalyzerreturned.2AnSDDthatinvolvesonlysynthesizedattributesiscalledS-attributed;theSDDinFig.5.1hasthisproperty.InanS-attributedSDD,eachrulecomputesanattributeforthenonterminalattheheadofaproductionfromattributestakenfromthebodyoftheproduction.Forsimplicity,theexamplesinthissectionhavesemanticruleswithoutsidee\u000bects.Inpractice,itisconvenienttoallowSDD'stohavelimitedsidee\u000bects,suchasprintingtheresultcomputedbyadeskcalculatororinteractingwithasymboltable.OncetheorderofevaluationofattributesisdiscussedinSection5.2,weshallallowsemanticrulestocomputearbitraryfunctions,possiblyinvolvingsidee\u000bects.AnS-attributedSDDcanbeimplementednaturallyinconjunctionwithanLRparser.Infact,theSDDinFig.5.1mirrorstheYaccprogramofFig.4.58,whichillustratestranslationduringLRparsing.Thedi\u000berenceisthat,intheruleforproduction1,theYaccprogramprintsthevalueE:valasasidee\u000bect,insteadofde\fningtheattributeL:val.AnSDDwithoutsidee\u000bectsissometimescalledanattributegrammar.Therulesinanattributegrammarde\fnethevalueofanattributepurelyintermsofthevaluesofotherattributesandconstants.5.1.2EvaluatinganSDDattheNodesofaParseTreeTovisualizethetranslationspeci\fedbyanSDD,ithelpstoworkwithparsetrees,eventhoughatranslatorneednotactuallybuildaparsetree.ImaginethereforethattherulesofanSDDareappliedby\frstconstructingaparsetreeandthenusingtherulestoevaluatealloftheattributesateachofthenodesoftheparsetree.Aparsetree,showingthevalue(s)ofitsattribute(s)iscalledanannotatedparsetree.Howdoweconstructanannotatedparsetree?Inwhatorderdoweevaluateattributes?Beforewecanevaluateanattributeatanodeofaparsetree,wemustevaluatealltheattributesuponwhichitsvaluedepends.Forexample,ifallattributesaresynthesized,asinExample5.1,thenwemustevaluatethevalattributesatallofthechildrenofanodebeforewecanevaluatethevalattributeatthenodeitself.Withsynthesizedattributes,wecanevaluateattributesinanybottom-uporder,suchasthatofapostordertraversaloftheparsetree;theevaluationofS-attributedde\fnitionsisdiscussedinSection5.2.3.5.1.SYNTAX-DIRECTEDDEFINITIONS307ForSDD'swithbothinheritedandsynthesizedattributes,thereisnoguar-anteethatthereisevenoneorderinwhichtoevaluateattributesatnodes.Forinstance,considernonterminalsAandB,withsynthesizedandinheritedattributesA:sandB:i,respectively,alongwiththeproductionandrulesPRODUCTIONSEMANTICRULESA!BA:s=B:i;B:i=A:s+1Theserulesarecircular;itisimpossibletoevaluateeitherA:satanodeNorB:iatthechildofNwithout\frstevaluatingtheother.ThecirculardependencyofA:sandB:iatsomepairofnodesinaparsetreeissuggestedbyFig.5.2.A.sB.iABFigure5.2:ThecirculardependencyofA:sandB:iononeanotherItiscomputationallydi\u000eculttodeterminewhetherornotthereexistanycircularitiesinanyoftheparsetreesthatagivenSDDcouldhavetotranslate.1Fortunately,thereareusefulsubclassesofSDD'sthataresu\u000ecienttoguaranteethatanorderofevaluationexists,asweshallseeinSection5.2.Example5.2:Figure5.3showsanannotatedparsetreefortheinputstring3\u00035+4n,constructedusingthegrammarandrulesofFig.5.1.Thevaluesoflexvalarepresumedsuppliedbythelexicalanalyzer.Eachofthenodesforthenonterminalshasattributevalcomputedinabottom-uporder,andweseetheresultingvaluesassociatedwitheachnode.Forinstance,atthenodewithachildlabeled\u0003,aftercomputingT:val=3andF:val=5atits\frstandthirdchildren,weapplytherulethatsaysT:valistheproductofthesetwovalues,or15.2Inheritedattributesareusefulwhenthestructureofaparsetreedoesnot\\match\"theabstractsyntaxofthesourcecode.Thenextexampleshowshowinheritedattributescanbeusedtoovercomesuchamismatchduetoagrammardesignedforparsingratherthantranslation.308CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONT:val=15\u0003F:val=5digit:lexval=3digit:lexval=5T:val=3F:val=3L:val=19E:val=15digit:lexval=4F:val=4T:val=4+E:val=19nFigure5.3:Annotatedparsetreefor3\u00035+4nExample5.3:TheSDDinFig.5.4computestermslike3\u00035and3\u00035\u00037.Thetop-downparseofinput3\u00035beginswiththeproductionT!FT0.Here,Fgeneratesthedigit3,buttheoperator\u0003isgeneratedbyT0.Thus,theleftoperand3appearsinadi\u000berentsubtreeoftheparsetreefrom\u0003.Aninheritedattributewillthereforebeusedtopasstheoperandtotheoperator.Thegrammarinthisexampleisanexcerptfromanon-left-recursiveversionofthefamiliarexpressiongrammar;weusedsuchagrammarasarunningexampletoillustratetop-downparsinginSection4.4.5.1.SYNTAX-DIRECTEDDEFINITIONS309Thesemanticrulesarebasedontheideathattheleftoperandoftheoperator\u0003isinherited.Moreprecisely,theheadT0oftheproductionT0!\u0003FT01inheritstheleftoperandof\u0003intheproductionbody.Givenatermx\u0003y\u0003z,therootofthesubtreefor\u0003y\u0003zinheritsx.Then,therootofthesubtreefor\u0003zinheritsthevalueofx\u0003y,andsoon,iftherearemorefactorsintheterm.Onceallthefactorshavebeenaccumulated,theresultispassedbackupthetreeusingsynthesizedattributes.Toseehowthesemanticrulesareused,considertheannotatedparsetreefor3\u00035inFig.5.5.Theleftmostleafintheparsetree,labeleddigit,hasattributevaluelexval=3,wherethe3issuppliedbythelexicalanalyzer.Itsparentisforproduction4,F!digit.Theonlysemanticruleassociatedwiththisproductionde\fnesF:val=digit:lexval,whichequals3.\u0003F:val=5digit:lexval=5T01:inh=1515T01:syn=\u000fdigit15=T0:syn3=T0:inh:lexval=3F:val=3T:val=15Figure5.5:Annotatedparsetreefor3\u00035Atthesecondchildoftheroot,theinheritedattributeT0:inhisde\fnedbythesemanticruleT0:inh=F:valassociatedwithproduction1.Thus,theleftoperand,3,forthe\u0003operatorispassedfromlefttorightacrossthechildrenoftheroot.TheproductionatthenodeforT0isT0!\u0003FT01.(Weretainthesubscript1intheannotatedparsetreetodistinguishbetweenthetwonodesforT0.)TheinheritedattributeT01:inhisde\fnedbythesemanticruleT01:inh=T0:inh\u0002F:valassociatedwithproduction2.WithT0:inh=3andF:val=5,wegetT01:inh=15.AtthelowernodeforT01,theproductionisT0!\u000f.ThesemanticruleT0:syn=T0:inhde\fnesT01:syn=15.ThesynattributesatthenodesforT0passthevalue15upthetreetothenodeforT,whereT:val=15.25.1.3ExercisesforSection5.1Exercise5.1.1:FortheSDDofFig.5.1,giveannotatedparsetreesforthefollowingexpressions:a)(3+4)\u0003(5+6)n.310CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONb)1\u00032\u00033\u0003(4+5)n.c)(9+8\u0003(7+6)+5)\u00034n.Exercise5.1.2:ExtendtheSDDofFig.5.4tohandleexpressionsasinFig.5.1.Exercise5.1.3:RepeatExercise5.1.1,usingyourSDDfromExercise5.1.2.5.2EvaluationOrdersforSDD's\\Dependencygraphs\"areausefultoolfordetermininganevaluationorderfortheattributeinstancesinagivenparsetree.Whileanannotatedparsetreeshowsthevaluesofattributes,adependencygraphhelpsusdeterminehowthosevaluescanbecomputed.Inthissection,inadditiontodependencygraphs,wede\fnetwoimpor-tantclassesofSDD's:the\\S-attributed\"andthemoregeneral\\L-attributed\"SDD's.Thetranslationsspeci\fedbythesetwoclasses\ftwellwiththeparsingmethodswehavestudied,andmosttranslationsencounteredinpracticecanbewrittentoconformtotherequirementsofatleastoneoftheseclasses.5.2.1DependencyGraphsAdependencygraphdepictsthe\rowofinformationamongtheattributein-stancesinaparticularparsetree;anedgefromoneattributeinstancetoan-othermeansthatthevalueofthe\frstisneededtocomputethesecond.Edgesexpressconstraintsimpliedbythesemanticrules.Inmoredetail:\u000fForeachparse-treenode,sayanodelabeledbygrammarsymbolX,thedependencygraphhasanodeforeachattributeassociatedwithX.\u000fSupposethatasemanticruleassociatedwithaproductionpde\fnesthevalueofsynthesizedattributeA:bintermsofthevalueofX:c(therulemayde\fneA:bintermsofotherattributesinadditiontoX:c).Then,thedependencygraphhasanedgefromX:ctoA:b.Moreprecisely,ateverynodeNlabeledAwhereproductionpisapplied,createanedgetoattributebatN,fromtheattributecatthechildofNcorrespondingtothisinstanceofthesymbolXinthebodyoftheproduction.2\u000fSupposethatasemanticruleassociatedwithaproductionpde\fnesthevalueofinheritedattributeB:cintermsofthevalueofX:a.Then,thedependencygraphhasanedgefromX:atoB:c.ForeachnodeNlabeledBthatcorrespondstoanoccurrenceofthisBinthebodyofproductionp,createanedgetoattributecatNfromtheattributeaatthenodeM5.2.EVALUATIONORDERSFORSDD'S311thatcorrespondstothisoccurrenceofX.NotethatMcouldbeeithertheparentorasiblingofN.Example5.4:Considerthefollowingproductionandrule:PRODUCTIONSEMANTICRULEE!E1+TE:val=E1:val+T:valAteverynodeNlabeledE,withchildrencorrespondingtothebodyofthisproduction,thesynthesizedattributevalatNiscomputedusingthevaluesofvalatthetwochildren,labeledEandT.Thus,aportionofthedependencygraphforeveryparsetreeinwhichthisproductionisusedlookslikeFig.5.6.Asaconvention,weshallshowtheparsetreeedgesasdottedlines,whiletheedgesofthedependencygrapharesolid.2valvalvalT+E1EFigure5.6:E:valissynthesizedfromE1:valandT:valExample5.5:AnexampleofacompletedependencygraphappearsinFig.5.7.Thenodesofthedependencygraph,representedbythenumbers1through9,correspondtotheattributesintheannotatedparsetreeinFig.5.5.val4F\u00035syn8inh7digit2lexvalT06inh\u000fsynT9valF3valdigit1lexvalT0Figure5.7:DependencygraphfortheannotatedparsetreeofFig.5.5Nodes1and2representtheattributelexvalassociatedwiththetwoleaveslabeleddigit.Nodes3and4representtheattributevalassociatedwiththetwonodeslabeledF.Theedgestonode3from1andtonode4from2result312CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONfromthesemanticrulethatde\fnesF:valintermsofdigit:lexval.Infact,F:valequalsdigit:lexval,buttheedgerepresentsdependence,notequality.Nodes5and6representtheinheritedattributeT0:inhassociatedwitheachoftheoccurrencesofnonterminalT0.Theedgeto5from3isduetotheruleT0:inh=F:val,whichde\fnesT0:inhattherightchildoftherootfromF:valattheleftchild.Weseeedgesto6fromnode5forT0:inhandfromnode4forF:val,becausethesevaluesaremultipliedtoevaluatetheattributeinhatnode6.Nodes7and8representthesynthesizedattributesynassociatedwiththeoccurrencesofT0.Theedgetonode7from6isduetothesemanticruleT0:syn=T0:inhassociatedwithproduction3inFig.5.4.Theedgetonode8from7isduetoasemanticruleassociatedwithproduction2.Finally,node9representstheattributeT:val.Theedgeto9from8isduetothesemanticrule,T:val=T0:syn,associatedwithproduction1.25.2.2OrderingtheEvaluationofAttributesThedependencygraphcharacterizesthepossibleordersinwhichwecanevalu-atetheattributesatthevariousnodesofaparsetree.IfthedependencygraphhasanedgefromnodeMtonodeN,thentheattributecorrespondingtoMmustbeevaluatedbeforetheattributeofN.Thus,theonlyallowableordersofevaluationarethosesequencesofnodesN1;N2;:::;NksuchthatifthereisanedgeofthedependencygraphfromNitoNj,theni<j.Suchanorderingembedsadirectedgraphintoalinearorder,andiscalledatopologicalsortofthegraph.Ifthereisanycycleinthegraph,thentherearenotopologicalsorts;thatis,thereisnowaytoevaluatetheSDDonthisparsetree.Iftherearenocycles,however,thenthereisalwaysatleastonetopologicalsort.Toseewhy,sincetherearenocycles,wecansurely\fndanodewithnoedgeentering.Foriftherewerenosuchnode,wecouldproceedfrompredecessortopredecessoruntilwecamebacktosomenodewehadalreadyseen,yieldingacycle.Makethisnodethe\frstinthetopologicalorder,removeitfromthedependencygraph,andrepeattheprocessontheremainingnodes.Example5.6:ThedependencygraphofFig.5.7hasnocycles.Onetopologi-calsortistheorderinwhichthenodeshavealreadybeennumbered:1;2;:::;9.Noticethateveryedgeofthegraphgoesfromanodetoahigher-numberednode,sothisorderissurelyatopologicalsort.Thereareothertopologicalsortsaswell,suchas1;3;5;2;4;6;7;8;9.25.2.3S-AttributedDe\fnitionsAsmentionedearlier,givenanSDD,itisveryhardtotellwhetherthereexistanyparsetreeswhosedependencygraphshavecycles.Inpractice,translationscanbeimplementedusingclassesofSDD'sthatguaranteeanevaluationorder,5.2.EVALUATIONORDERSFORSDD'S313sincetheydonotpermitdependencygraphswithcycles.Moreover,thetwoclassesintroducedinthissectioncanbeimplementede\u000ecientlyinconnectionwithtop-downorbottom-upparsing.The\frstclassisde\fnedasfollows:\u000fAnSDDisS-attributedifeveryattributeissynthesized.Example5.7:TheSDDofFig.5.1isanexampleofanS-attributedde\fnition.Eachattribute,L:val,E:val,T:val,andF:valissynthesized.2WhenanSDDisS-attributed,wecanevaluateitsattributesinanybottom-uporderofthenodesoftheparsetree.Itisoftenespeciallysimpletoevaluatetheattributesbyperformingapostordertraversaloftheparsetreeandevalu-atingtheattributesatanodeNwhenthetraversalleavesNforthelasttime.Thatis,weapplythefunctionpostorder,de\fnedbelow,totherootoftheparsetree(seealsothebox\\PreorderandPostorderTraversals\"inSection2.3.4):postorder(N)ffor(eachchildCofN,fromtheleft)postorder(C);evaluatetheattributesassociatedwithnodeN;gS-attributedde\fnitionscanbeimplementedduringbottom-upparsing,sinceabottom-upparsecorrespondstoapostordertraversal.Speci\fcally,postordercorrespondsexactlytotheorderinwhichanLRparserreducesaproductionbodytoitshead.ThisfactwillbeusedinSection5.4.2toevaluatesynthesizedattributesandstorethemonthestackduringLRparsing,withoutcreatingthetreenodesexplicitly.5.2.4L-AttributedDe\fnitionsThesecondclassofSDD'siscalledL-attributedde\fnitions.Theideabehindthisclassisthat,betweentheattributesassociatedwithaproductionbody,dependency-graphedgescangofromlefttoright,butnotfromrighttoleft(hence\\L-attributed\").Moreprecisely,eachattributemustbeeither1.Synthesized,or2.Inherited,butwiththeruleslimitedasfollows.SupposethatthereisaproductionA!X1X2\u0001\u0001\u0001Xn,andthatthereisaninheritedattributeXi:acomputedbyaruleassociatedwiththisproduction.Thentherulemayuseonly:(a)InheritedattributesassociatedwiththeheadA.(b)Eitherinheritedorsynthesizedattributesassociatedwiththeoccur-rencesofsymbolsX1;X2;:::;Xi\u00001locatedtotheleftofXi.314CHAPTER5.SYNTAX-DIRECTEDTRANSLATION(c)InheritedorsynthesizedattributesassociatedwiththisoccurrenceofXiitself,butonlyinsuchawaythattherearenocyclesinadependencygraphformedbytheattributesofthisXi.Example5.8:TheSDDinFig.5.4isL-attributed.Toseewhy,considerthesemanticrulesforinheritedattributes,whicharerepeatedhereforconvenience:PRODUCTIONSEMANTICRULET!FT0T0:inh=F:valT0!\u0003FT01T01:inh=T0:inh\u0002F:valThe\frstoftheserulesde\fnestheinheritedattributeT0:inhusingonlyF:val,andFappearstotheleftofT0intheproductionbody,asrequired.Thesecondrulede\fnesT01:inhusingtheinheritedattributeT0:inhassociatedwiththehead,andF:val,whereFappearstotheleftofT01intheproductionbody.Ineachofthesecases,therulesuseinformation\\fromaboveorfromtheleft,\"asrequiredbytheclass.Theremainingattributesaresynthesized.Hence,theSDDisL-attributed.2Example5.9:AnySDDcontainingthefollowingproductionandrulescannotbeL-attributed:PRODUCTIONSEMANTICRULESA!BCA:s=B:b;B:i=f(C:c;A:s)The\frstrule,A:s=B:b,isalegitimateruleineitheranS-attributedorL-attributedSDD.Itde\fnesasynthesizedattributeA:sintermsofanattributeatachild(thatis,asymbolwithintheproductionbody).Thesecondrulede\fnesaninheritedattributeB:i,sotheentireSDDcannotbeS-attributed.Further,althoughtheruleislegal,theSDDcannotbeL-attributed,becausetheattributeC:cisusedtohelpde\fneB:i,andCistotherightofBintheproductionbody.WhileattributesatsiblingsinaparsetreemaybeusedinL-attributedSDD's,theymustbetotheleftofthesymbolwhoseattributeisbeingde\fned.25.2.5SemanticRuleswithControlledSideE\u000bectsInpractice,translationsinvolvesidee\u000bects:adeskcalculatormightprintaresult;acodegeneratormightenterthetypeofanidenti\ferintoasymboltable.WithSDD's,westrikeabalancebetweenattributegrammarsandtranslationschemes.Attributegrammarshavenosidee\u000bectsandallowanyevaluationorderconsistentwiththedependencygraph.Translationschemesimposeleft-to-rightevaluationandallowsemanticactionstocontainanyprogramfragment;translationschemesarediscussedinSection5.4.Weshallcontrolsidee\u000bectsinSDD'sinoneofthefollowingways:5.2.EVALUATIONORDERSFORSDD'S315\u000fPermitincidentalsidee\u000bectsthatdonotconstrainattributeevaluation.Inotherwords,permitsidee\u000bectswhenattributeevaluationbasedonanytopologicalsortofthedependencygraphproducesa\\correct\"translation,where\\correct\"dependsontheapplication.\u000fConstraintheallowableevaluationorders,sothatthesametranslationisproducedforanyallowableorder.Theconstraintscanbethoughtofasimplicitedgesaddedtothedependencygraph.Asanexampleofanincidentalsidee\u000bect,letusmodifythedeskcalculatorofExample5.1toprintaresult.InsteadoftheruleL:val=E:val,whichsavestheresultinthesynthesizedattributeL:val,consider:PRODUCTIONSEMANTICRULE1)L!Enprint(E:val)Semanticrulesthatareexecutedfortheirsidee\u000bects,suchasprint(E:val),willbetreatedasthede\fnitionsofdummysynthesizedattributesassociatedwiththeheadoftheproduction.Themodi\fedSDDproducesthesametranslationunderanytopologicalsort,sincetheprintstatementisexecutedattheend,aftertheresultiscomputedintoE:val.Example5.10:TheSDDinFig.5.8takesasimpledeclarationDconsistingofabasictypeTfollowedbyalistLofidenti\fers.Tcanbeintor\roat.Foreachidenti\feronthelist,thetypeisenteredintothesymbol-tableentryfortheidenti\fer.Weassumethatenteringthetypeforoneidenti\ferdoesnota\u000bectthesymbol-tableentryforanyotheridenti\fer.Thus,entriescanbeupdatedinanyorder.ThisSDDdoesnotcheckwhetheranidenti\ferisdeclaredmorethanonce;itcanbemodi\fedtodoso.316CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONistopassthedeclaredtypedownthelistofidenti\fers,sothatitcanbeaddedtotheappropriatesymbol-tableentries.Productions2and3eachevaluatethesynthesizedattributeT:type,givingittheappropriatevalue,integeror\roat.ThistypeispassedtotheattributeL:inhintheruleforproduction1.Production4passesL:inhdowntheparsetree.Thatis,thevalueL1:inhiscomputedataparse-treenodebycopyingthevalueofL:inhfromtheparentofthatnode;theparentcorrespondstotheheadoftheproduction.Productions4and5alsohavearuleinwhichafunctionaddTypeiscalledwithtwoarguments:1.id.entry,alexicalvaluethatpointstoasymbol-tableobject,and2.L:inh,thetypebeingassignedtoeveryidenti\feronthelist.WesupposethatfunctionaddTypeproperlyinstallsthetypeL:inhasthetypeoftherepresentedidenti\fer.Adependencygraphfortheinputstring\roatid1;id2;id3appearsinFig.5.9.Numbers1through10representthenodesofthedependencygraph.Nodes1,2,and3representtheattributeentryassociatedwitheachoftheleaveslabeledid.Nodes6,8,and10arethedummyattributesthatrepresenttheapplicationofthefunctionaddTypetoatypeandoneoftheseentryvalues.inh5type4entryentry31entry2entry6entry7inh8entry9inh10DTrealLid3,Lid2,Lid1Figure5.9:Dependencygraphforadeclaration\roatid1;id2;id3Node4representstheattributeT:type,andisactuallywhereattributeeval-uationbegins.Thistypeisthenpassedtonodes5,7,and9representingL:inhassociatedwitheachoftheoccurrencesofthenonterminalL.25.2.EVALUATIONORDERSFORSDD'S3175.2.6ExercisesforSection5.2Exercise5.2.1:WhatareallthetopologicalsortsforthedependencygraphofFig.5.7?Exercise5.2.2:FortheSDDofFig.5.8,giveannotatedparsetreesforthefollowingexpressions:a)inta,b,c.b)floatw,x,y,z.Exercise5.2.3:SupposethatwehaveaproductionA!BCD.EachofthefournonterminalsA,B,C,andDhavetwoattributes:sisasynthesizedattribute,andiisaninheritedattribute.Foreachofthesetsofrulesbelow,tellwhether(i)therulesareconsistentwithanS-attributedde\fnition(ii)therulesareconsistentwithanL-attributedde\fnition,and(iii)whethertherulesareconsistentwithanyevaluationorderatall?a)A:s=B:i+C:s.b)A:s=B:i+C:sandD:i=A:i+B:s.c)A:s=B:s+D:s.!d)A:s=D:i,B:i=A:s+C:s,C:i=B:s,andD:i=B:i+C:i.!Exercise5.2.4:Thisgrammargeneratesbinarynumberswitha\\decimal\"point:S!L:LjLL!LBjBB!0j1DesignanL-attributedSDDtocomputeS:val,thedecimal-numbervalueofaninputstring.Forexample,thetranslationofstring101.101shouldbethedecimalnumber5.625.Hint:useaninheritedattributeL:sidethattellswhichsideofthedecimalpointabitison.!!Exercise5.2.5:DesignanS-attributedSDDforthegrammarandtranslationdescribedinExercise5.2.4.!!Exercise5.2.6:ImplementAlgorithm3.23,whichconvertsaregularexpres-sionintoanondeterministic\fniteautomaton,byanL-attributedSDDonatop-downparsablegrammar.Assumethatthereisatokencharrepresentinganycharacter,andthatchar.lexvalisthecharacteritrepresents.Youmayalsoassumetheexistenceofafunctionnew()thatreturnsanewstate,thatis,astateneverbeforereturnedbythisfunction.UseanyconvenientnotationtospecifythetransitionsoftheNFA.318CHAPTER5.SYNTAX-DIRECTEDTRANSLATION5.3ApplicationsofSyntax-DirectedTranslationThesyntax-directedtranslationtechniquesinthischapterwillbeappliedinChapter6totypecheckingandintermediate-codegeneration.Here,weconsiderselectedexamplestoillustratesomerepresentativeSDD's.Themainapplicationinthissectionistheconstructionofsyntaxtrees.Sincesomecompilersusesyntaxtreesasanintermediaterepresentation,acommonformofSDDturnsitsinputstringintoatree.Tocompletethetranslationtointermediatecode,thecompilermaythenwalkthesyntaxtree,usinganothersetofrulesthatareine\u000bectanSDDonthesyntaxtreeratherthantheparsetree.(Chapter6alsodiscussesapproachestointermediate-codegenerationthatapplyanSDDwithouteverconstructingatreeexplicitly.)WeconsidertwoSDD'sforconstructingsyntaxtreesforexpressions.The\frst,anS-attributedde\fnition,issuitableforuseduringbottom-upparsing.Thesecond,L-attributed,issuitableforuseduringtop-downparsing.The\fnalexampleofthissectionisanL-attributedde\fnitionthatdealswithbasicandarraytypes.5.3.1ConstructionofSyntaxTreesAsdiscussedinSection2.8.2,eachnodeinasyntaxtreerepresentsaconstruct;thechildrenofthenoderepresentthemeaningfulcomponentsoftheconstruct.Asyntax-treenoderepresentinganexpressionE1+E2haslabel+andtwochildrenrepresentingthesubexpressionsE1andE2.Weshallimplementthenodesofasyntaxtreebyobjectswithasuitablenumberof\felds.Eachobjectwillhaveanop\feldthatisthelabelofthenode.Theobjectswillhaveadditional\feldsasfollows:\u000fIfthenodeisaleaf,anadditional\feldholdsthelexicalvaluefortheleaf.AconstructorfunctionLeaf(op;val)createsaleafobject.Alternatively,ifnodesareviewedasrecords,thenLeafreturnsapointertoanewrecordforaleaf.\u000fIfthenodeisaninteriornode,thereareasmanyadditional\feldsasthenodehaschildreninthesyntaxtree.AconstructorfunctionNodetakestwoormorearguments:Node(op;c1;c2;:::;ck)createsanobjectwith\frst\feldopandkadditional\feldsforthekchildrenc1;:::;ck.Example5.11:TheS-attributedde\fnitioninFig.5.10constructssyntaxtreesforasimpleexpressiongrammarinvolvingonlythebinaryoperators+and\u0000.Asusual,theseoperatorsareatthesameprecedencelevelandarejointlyleftassociative.Allnonterminalshaveonesynthesizedattributenode,whichrepresentsanodeofthesyntaxtree.Everytimethe\frstproductionE!E1+Tisused,itsrulecreatesanodewith0+0foropandtwochildren,E1:nodeandT:node,forthesubexpressions.Thesecondproductionhasasimilarrule.5.3.APPLICATIONSOFSYNTAX-DIRECTEDTRANSLATION319320CHAPTER5.SYNTAX-DIRECTEDTRANSLATION4+idtoentryforc\u0000idtoentryforanumT.nodeE.nodeidT.node+numE.node\u0000idT.nodeE.nodeFigure5.11:Syntaxtreefora\u00004+c1)p1=newLeaf(id;entry-a);2)p2=newLeaf(num;4);3)p3=newNode(0\u00000;p1;p2);4)p4=newLeaf(id;entry-c);5)p5=newNode(0+0;p3;p4);Figure5.12:Stepsintheconstructionofthesyntaxtreefora\u00004+cTherulesforbuildingsyntaxtreesinthisexamplearesimilartotherulesforthedeskcalculatorinExample5.3.Inthedesk-calculatorexample,atermx\u0003ywasevaluatedbypassingxasaninheritedattribute,sincexand\u0003yappearedindi\u000berentportionsoftheparsetree.Here,theideaistobuildasyntaxtreeforx+ybypassingxasaninheritedattribute,sincexand+yappearindi\u000berentsubtrees.NonterminalE0isthecounterpartofnonterminalT0inExample5.3.Comparethedependencygraphfora\u00004+cinFig.5.14withthatfor3\u00035inFig.5.7.NonterminalE0hasaninheritedattributeinhandasynthesizedattributesyn.AttributeE0:inhrepresentsthepartialsyntaxtreeconstructedsofar.Speci\fcally,itrepresentstherootofthetreeforthepre\fxoftheinputstringthatistotheleftofthesubtreeforE0.Atnode5inthedependencygraphinFig.5.14,E0:inhdenotestherootofthepartialsyntaxtreefortheidenti\fera;thatis,theleaffora.Atnode6,E0:inhdenotestherootforthepartialsyntax5.3.APPLICATIONSOFSYNTAX-DIRECTEDTRANSLATION321322CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONtionfromonepartoftheparsetreetoanother.Thenextexampleshowshowamismatchinstructurecanbeduetothedesignofthelanguage,andnotduetoconstraintsimposedbytheparsingmethod.Example5.13:InC,thetypeint[2][3]canbereadas,\\arrayof2arraysof3integers.\"Thecorrespondingtypeexpressionarray(2;array(3;integer))isrepresentedbythetreeinFig.5.15.Theoperatorarraytakestwoparameters,anumberandatype.Iftypesarerepresentedbytrees,thenthisoperatorreturnsatreenodelabeledarraywithtwochildrenforanumberandatype.array2array3integerFigure5.15:Typeexpressionforint[2][3]WiththeSDDinFig.5.16,nonterminalTgenerateseitherabasictypeoranarraytype.NonterminalBgeneratesoneofthebasictypesintand\roat.TgeneratesabasictypewhenTderivesBCandCderives\u000f.Otherwise,Cgeneratesarraycomponentsconsistingofasequenceofintegers,eachintegersurroundedbybrackets.5.3.APPLICATIONSOFSYNTAX-DIRECTEDTRANSLATION323productionisC!\u000f,soC:tequalsC:b.ThesemanticrulesfortheproductionC![num]C1formC:tbyapplyingtheoperatorarraytotheoperandsnum:valandC1:t.2C:b=integerC:t=array(3,integer)[3=]C:b=integerC:tinteger\u000fintegerT:t=array(2,array(3,integer))B:t=intC:b=integerC:t=array(2,array(3,integer))[2]Figure5.17:Syntax-directedtranslationofarraytypes5.3.3ExercisesforSection5.3Exercise5.3.1:Belowisagrammarforexpressionsinvolvingoperator+andintegeror\roating-pointoperands.Floating-pointnumbersaredistinguishedbyhavingadecimalpoint.E!E+TjTT!num.numjnuma)GiveanSDDtodeterminethetypeofeachtermTandexpressionE.b)ExtendyourSDDof(a)totranslateexpressionsintopost\fxnotation.UsetheunaryoperatorintToFloattoturnanintegerintoanequivalent\roat.!Exercise5.3.2:GiveanSDDtotranslatein\fxexpressionswith+and\u0003intoequivalentexpressionswithoutredundantparentheses.Forexample,sincebothoperatorsassociatefromtheleft,and\u0003takesprecedenceover+,((a\u0003(b+c))\u0003(d))translatesintoa\u0003(b+c)\u0003d.!Exercise5.3.3:GiveanSDDtodi\u000berentiateexpressionssuchasx\u0003(3\u0003x+x\u0003x)involvingtheoperators+and\u0003,thevariablex,andconstants.Assumethatnosimpli\fcationoccurs,sothat,forexample,3\u0003xwillbetranslatedinto3\u00031+0\u0003x.324CHAPTER5.SYNTAX-DIRECTEDTRANSLATION5.4Syntax-DirectedTranslationSchemesSyntax-directedtranslationschemesareacomplementarynotationtosyntax-directedde\fnitions.Alloftheapplicationsofsyntax-directedde\fnitionsinSection5.3canbeimplementedusingsyntax-directedtranslationschemes.FromSection2.3.5,asyntax-directedtranslationscheme(SDT)isacontext-freegrammarwithprogramfragmentsembeddedwithinproductionbodies.Theprogramfragmentsarecalledsemanticactionsandcanappearatanypositionwithinaproductionbody.Byconvention,weplacecurlybracesaroundactions;ifbracesareneededasgrammarsymbols,thenwequotethem.AnySDTcanbeimplementedby\frstbuildingaparsetreeandthenper-formingtheactionsinaleft-to-rightdepth-\frstorder;thatis,duringapreordertraversal.AnexampleappearsinSection5.4.3.Typically,SDT'sareimplementedduringparsing,withoutbuildingaparsetree.Inthissection,wefocusontheuseofSDT'stoimplementtwoimportantclassesofSDD's:1.TheunderlyinggrammarisLR-parsable,andtheSDDisS-attributed.2.TheunderlyinggrammarisLL-parsable,andtheSDDisL-attributed.Weshallseehow,inboththesecases,thesemanticrulesinanSDDcanbeconvertedintoanSDTwithactionsthatareexecutedattherighttime.Duringparsing,anactioninaproductionbodyisexecutedassoonasallthegrammarsymbolstotheleftoftheactionhavebeenmatched.SDT'sthatcanbeimplementedduringparsingcanbecharacterizedbyin-troducingdistinctmarkernonterminalsinplaceofeachembeddedaction;eachmarkerMhasonlyoneproduction,M!\u000f.Ifthegrammarwithmarkernon-terminalscanbeparsedbyagivenmethod,thentheSDTcanbeimplementedduringparsing.5.4.1Post\fxTranslationSchemesByfarthesimplestSDDimplementationoccurswhenwecanparsethegrammarbottom-upandtheSDDisS-attributed.Inthatcase,wecanconstructanSDTinwhicheachactionisplacedattheendoftheproductionandisexecutedalongwiththereductionofthebodytotheheadofthatproduction.SDT'swithallactionsattherightendsoftheproductionbodiesarecalledpost\fxSDT's.Example5.14:Thepost\fxSDTinFig.5.18implementsthedeskcalculatorSDDofFig.5.1,withonechange:theactionforthe\frstproductionprintsavalue.Theremainingactionsareexactcounterpartsofthesemanticrules.SincetheunderlyinggrammarisLR,andtheSDDisS-attributed,theseactionscanbecorrectlyperformedalongwiththereductionstepsoftheparser.25.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES325L!Enfprint(E:val);gE!E1+TfE:val=E1:val+T:val;gE!TfE:val=T:val;gT!T1\u0003FfT:val=T1:val\u0002F:val;gT!FfT:val=F:val;gF!(E)fF:val=E:val;gF!digitfF:val=digit:lexval;gFigure5.18:Post\fxSDTimplementingthedeskcalculator5.4.2Parser-StackImplementationofPost\fxSDT'sPost\fxSDT'scanbeimplementedduringLRparsingbyexecutingtheactionswhenreductionsoccur.Theattribute(s)ofeachgrammarsymbolcanbeputonthestackinaplacewheretheycanbefoundduringthereduction.Thebestplanistoplacetheattributesalongwiththegrammarsymbols(ortheLRstatesthatrepresentthesesymbols)inrecordsonthestackitself.InFig.5.19,theparserstackcontainsrecordswitha\feldforagrammarsymbol(orparserstate)and,belowit,a\feldforanattribute.ThethreegrammarsymbolsXYZareontopofthestack;perhapstheyareabouttobereducedaccordingtoaproductionlikeA!XYZ.Here,weshowX:xastheoneattributeofX,andsoon.Ingeneral,wecanallowformoreattributes,eitherbymakingtherecordslargeenoughorbyputtingpointerstorecordsonthestack.Withsmallattributes,itmaybesimplertomaketherecordslargeenough,evenifsome\feldsgounusedsomeofthetime.However,ifoneormoreattributesareofunboundedsize|say,theyarecharacterstrings|thenitwouldbebettertoputapointertotheattribute'svalueinthestackrecordandstoretheactualvalueinsomelarger,sharedstorageareathatisnotpartofthestack.Synthesizedattribute(s)State/grammarsymboltopZ.zY.yX.xZYXFigure5.19:Parserstackwitha\feldforsynthesizedattributesIftheattributesareallsynthesized,andtheactionsoccurattheendsoftheproductions,thenwecancomputetheattributesfortheheadwhenwereducethebodytothehead.IfwereducebyaproductionsuchasA!XYZ,thenwehavealltheattributesofX,Y,andZavailable,atknownpositionsonthestack,asinFig.5.19.Aftertheaction,Aanditsattributesareatthetopofthestack,inthepositionoftherecordforX.Example5.15:Letusrewritetheactionsofthedesk-calculatorSDTofEx-326CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONample5.14sothattheymanipulatetheparserstackexplicitly.Suchstackmanipulationisusuallydoneautomaticallybytheparser.PRODUCTIONACTIONSL!Enfprint(stack[top\u00001]:val);top=top\u00001;gE!E1+Tfstack[top\u00002]:val=stack[top\u00002]:val+stack[top]:val;top=top\u00002;gE!TT!T1\u0003Ffstack[top\u00002]:val=stack[top\u00002]:val\u0002stack[top]:val;top=top\u00002;gT!FF!(E)fstack[top\u00002]:val=stack[top\u00001]:val;top=top\u00002;gF!digitFigure5.20:Implementingthedeskcalculatoronabottom-upparsingstackSupposethatthestackiskeptinanarrayofrecordscalledstack,withtopacursortothetopofthestack.Thus,stack[top]referstothetoprecordonthestack,stack[top\u00001]totherecordbelowthat,andsoon.Also,weassumethateachrecordhasa\feldcalledval,whichholdstheattributeofwhatevergrammarsymbolisrepresentedinthatrecord.Thus,wemayrefertotheattributeE:valthatappearsatthethirdpositiononthestackasstack[top\u00002]:val.TheentireSDTisshowninFig.5.20.Forinstance,inthesecondproduction,E!E1+T,wegotwopositionsbelowthetoptogetthevalueofE1,andwe\fndthevalueofTatthetop.TheresultingsumisplacedwheretheheadEwillappearafterthereduction,thatis,twopositionsbelowthecurrenttop.Thereasonisthatafterthereduction,thethreetopmoststacksymbolsarereplacedbyone.AftercomputingE:val,wepoptwosymbolso\u000bthetopofthestack,sotherecordwhereweplacedE:valwillnowbeatthetopofthestack.Inthethirdproduction,E!T,noactionisnecessary,becausethelengthofthestackdoesnotchange,andthevalueofT:valatthestacktopwillsimplybecomethevalueofE:val.ThesameobservationappliestotheproductionsT!FandF!digit.ProductionF!(E)isslightlydi\u000berent.Althoughthevaluedoesnotchange,twopositionsareremovedfromthestackduringthereduction,sothevaluehastomovetothepositionafterthereduction.Notethatwehaveomittedthestepsthatmanipulatethe\frst\feldofthestackrecords|the\feldthatgivestheLRstateorotherwiserepresentsthegrammarsymbol.IfweareperforminganLRparse,theparsingtabletellsuswhatthenewstateiseverytimewereduce;seeAlgorithm4.44.Thus,wemay5.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES327simplyplacethatstateintherecordforthenewtopofstack.25.4.3SDT'sWithActionsInsideProductionsAnactionmaybeplacedatanypositionwithinthebodyofaproduction.Itisperformedimmediatelyafterallsymbolstoitsleftareprocessed.Thus,ifwehaveaproductionB!XfagY,theactionaisdoneafterwehaverecognizedX(ifXisaterminal)oralltheterminalsderivedfromX(ifXisanonterminal).Moreprecisely,\u000fIftheparseisbottom-up,thenweperformactionaassoonasthisoc-currenceofXappearsonthetopoftheparsingstack.\u000fIftheparseistop-down,weperformajustbeforeweattempttoexpandthisoccurrenceofY(ifYanonterminal)orcheckforYontheinput(ifYisaterminal).SDT'sthatcanbeimplementedduringparsingincludepost\fxSDT'sandaclassofSDT'sconsideredinSection5.5thatimplementsL-attributedde\fni-tions.NotallSDT'scanbeimplementedduringparsing,asweshallseeinthenextexample.Example5.16:AsanextremeexampleofaproblematicSDT,supposethatweturnourdesk-calculatorrunningexampleintoanSDTthatprintsthepre\fxformofanexpression,ratherthanevaluatingtheexpression.TheproductionsandactionsareshowninFig.5.21.1)L!En2)E!fprint(0+0);gE1+T3)E!T4)T!fprint(0\u00030);gT1\u0003F5)T!F6)F!(E)7)F!digitfprint(digit:lexval);gFigure5.21:ProblematicSDTforin\fx-to-pre\fxtranslationduringparsingUnfortunately,itisimpossibletoimplementthisSDTduringeithertop-downorbottom-upparsing,becausetheparserwouldhavetoperformcriticalactions,likeprintinginstancesof\u0003or+,longbeforeitknowswhetherthesesymbolswillappearinitsinput.UsingmarkernonterminalsM2andM4fortheactionsinproductions2and4,respectively,oninputthatisadigit,ashift-reduceparser(seeSec-tion4.5.3)hascon\rictsbetweenreducingbyM2!\u000f,reducingbyM4!\u000f,andshiftingthedigit.2328CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONAnySDTcanbeimplementedasfollows:1.Ignoringtheactions,parsetheinputandproduceaparsetreeasaresult.2.Then,examineeachinteriornodeN,sayoneforproductionA!\u000b.AddadditionalchildrentoNfortheactionsin\u000b,sothechildrenofNfromlefttorighthaveexactlythesymbolsandactionsof\u000b.3.Performapreordertraversal(seeSection2.3.4)ofthetree,andassoonasanodelabeledbyanactionisvisited,performthataction.Forinstance,Fig.5.22showstheparsetreeforexpression3\u00035+4withac-tionsinserted.Ifwevisitthenodesinpreorder,wegetthepre\fxformoftheexpression:+\u0003354.digitfprint(3);g\u0003Fdigitfprint(4);gfprint(5);gTFdigitLFTfprint(0\u00030);gTE+fprint(0+0);gEnFigure5.22:Parsetreewithactionsembedded5.4.4EliminatingLeftRecursionFromSDT'sSincenogrammarwithleftrecursioncanbeparseddeterministicallytop-down,weexaminedleft-recursioneliminationinSection4.3.3.WhenthegrammarispartofanSDT,wealsoneedtoworryabouthowtheactionsarehandled.First,considerthesimplecase,inwhichtheonlythingwecareaboutistheorderinwhichtheactionsinanSDTareperformed.Forexample,ifeachactionsimplyprintsastring,wecareonlyabouttheorderinwhichthestringsareprinted.Inthiscase,thefollowingprinciplecanguideus:\u000fWhentransformingthegrammar,treattheactionsasiftheyweretermi-nalsymbols.5.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES329Thisprincipleisbasedontheideathatthegrammartransformationpreservestheorderoftheterminalsinthegeneratedstring.Theactionsarethereforeexecutedinthesameorderinanyleft-to-rightparse,top-downorbottom-up.The\\trick\"foreliminatingleftrecursionistotaketwoproductionsA!A\u000bj\fthatgeneratestringsconsistingofa\fandanynumberof\u000b's,andreplacethembyproductionsthatgeneratethesamestringsusinganewnonterminalR(for\\remainder\")ofthe\frstproduction:A!\fRR!\u000bRj\u000fIf\fdoesnotbeginwithA,thenAnolongerhasaleft-recursiveproduction.Inregular-de\fnitionterms,withbothsetsofproductions,Aisde\fnedby\f(\u000b)\u0003.SeeSection4.3.3forthehandlingofsituationswhereAhasmorerecursiveornonrecursiveproductions.Example5.17:ConsiderthefollowingE-productionsfromanSDTfortrans-latingin\fxexpressionsintopost\fxnotation:E!E1+Tfprint(0+0);gE!TIfweapplythestandardtransformationtoE,theremainderoftheleft-recursiveproductionis\u000b=+Tfprint(0+0);gand\f,thebodyoftheotherproductionisT.IfweintroduceRfortheremain-derofE,wegetthesetofproductions:E!TRR!+Tfprint(0+0);gRR!\u000f2WhentheactionsofanSDDcomputeattributesratherthanmerelyprintingoutput,wemustbemorecarefulabouthowweeliminateleftrecursionfromagrammar.However,iftheSDDisS-attributed,thenwecanalwaysconstructanSDTbyplacingattribute-computingactionsatappropriatepositionsinthenewproductions.Weshallgiveageneralschemaforthecaseofasinglerecursiveproduction,asinglenonrecursiveproduction,andasingleattributeoftheleft-recursivenonterminal;thegeneralizationtomanyproductionsofeachtypeisnothard,butisnotationallycumbersome.Supposethatthetwoproductionsare330CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONA!A1YfA:a=g(A1:a;Y:y)gA!XfA:a=f(X:x)gHere,A:aisthesynthesizedattributeofleft-recursivenonterminalA,andXandYaresinglegrammarsymbolswithsynthesizedattributesX:xandY:y,respectively.Thesecouldrepresentastringofseveralgrammarsymbols,eachwithitsownattribute(s),sincetheschemahasanarbitraryfunctiongcomput-ingA:aintherecursiveproductionandanarbitraryfunctionfcomputingA:ainthesecondproduction.Ineachcase,fandgtakeasargumentswhateverattributestheyareallowedtoaccessiftheSDDisS-attributed.WewanttoturntheunderlyinggrammarintoA!XRR!YRj\u000fFigure5.23suggestswhattheSDTonthenewgrammarmustdo.In(a)weseethee\u000bectofthepost\fxSDTontheoriginalgrammar.Weapplyfonce,correspondingtotheuseofproductionA!X,andthenapplygasmanytimesasweusetheproductionA!AY.SinceRgeneratesa\\remainder\"ofY's,itstranslationdependsonthestringtoitsleft,astringoftheformXYY\u0001\u0001\u0001Y.EachuseoftheproductionR!YRresultsinanapplicationofg.ForR,weuseaninheritedattributeR:itoaccumulatetheresultofsuccessivelyapplyingg,startingwiththevalueofA:a.(a)(b)A:a=g(f(X:x);Y1:y)\u000fR:i=g(g(f(X:x);Y1:y);Y2:y)Y2R:i=g(f(X:x);Y1:y)Y1AR:i=f(X:x)XXA:a=f(X:x)Y1Y2A:a=g(g(f(X:x);Y1:y);Y2:y)Figure5.23:Eliminatingleftrecursionfromapost\fxSDTInaddition,RhasasynthesizedattributeR:s,notshowninFig.5.23.Thisattributeis\frstcomputedwhenRendsitsgenerationofYsymbols,assignaledbytheuseofproductionR!\u000f.R:sisthencopiedupthetree,soitcanbecomethevalueofA:afortheentireexpressionXYY\u0001\u0001\u0001Y.ThecasewhereAgeneratesXYYisshowninFig.5.23,andweseethatthevalueofA:aattherootof(a)hastwousesofg.SodoesR:iatthebottomoftree(b),anditisthisvalueofR:sthatgetscopiedupthattree.Toaccomplishthistranslation,weusethefollowingSDT:5.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES331A!XfR:i=f(X:x)gRfA:a=R:sgR!YfR1:i=g(R:i;Y:y)gR1fR:s=R1:sgR!\u000ffR:s=R:igNoticethattheinheritedattributeR:iisevaluatedimmediatelybeforeauseofRinthebody,whilethesynthesizedattributesA:aandR:sareevaluatedattheendsoftheproductions.Thus,whatevervaluesareneededtocomputetheseattributeswillbeavailablefromwhathasbeencomputedtotheleft.5.4.5SDT'sforL-AttributedDe\fnitionsInSection5.4.1,weconvertedS-attributedSDD'sintopost\fxSDT's,withactionsattherightendsofproductions.AslongastheunderlyinggrammarisLR,post\fxSDT'scanbeparsedandtranslatedbottom-up.Now,weconsiderthemoregeneralcaseofanL-attributedSDD.Weshallassumethattheunderlyinggrammarcanbeparsedtop-down,forifnotitisfrequentlyimpossibletoperformthetranslationinconnectionwitheitheranLLoranLRparser.Withanygrammar,thetechniquebelowcanbeimple-mentedbyattachingactionstoaparsetreeandexecutingthemduringpreordertraversalofthetree.TherulesforturninganL-attributedSDDintoanSDTareasfollows:1.EmbedtheactionthatcomputestheinheritedattributesforanonterminalAimmediatelybeforethatoccurrenceofAinthebodyoftheproduction.IfseveralinheritedattributesforAdependononeanotherinanacyclicfashion,ordertheevaluationofattributessothatthoseneeded\frstarecomputed\frst.2.Placetheactionsthatcomputeasynthesizedattributefortheheadofaproductionattheendofthebodyofthatproduction.Weshallillustratetheseprincipleswithtwoextendedexamples.The\frstinvolvestypesetting.Itillustrateshowthetechniquesofcompilingcanbeusedinlanguageprocessingforapplicationsotherthanwhatwenormallythinkofasprogramminglanguages.Thesecondexampleisaboutthegenerationofintermediatecodeforatypicalprogramming-languageconstruct:aformofwhile-statement.Example5.18:Thisexampleismotivatedbylanguagesfortypesettingmath-ematicalformulas.Eqnisanearlyexampleofsuchalanguage;ideasfromEqnarestillfoundintheTEXtypesettingsystem,whichwasusedtoproducethisbook.Weshallconcentrateononlythecapabilitytode\fnesubscripts,subscriptsofsubscripts,andsoon,ignoringsuperscripts,built-upfractions,andallothermathematicalfeatures.IntheEqnlanguage,onewritesasubisubjtosettheexpressionaij.Asimplegrammarforboxes(elementsoftextboundedbyarectangle)is332CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONB!B1B2jB1subB2j(B1)jtextCorrespondingtothesefourproductions,aboxcanbeeither1.Twoboxes,juxtaposed,withthe\frst,B1,totheleftoftheother,B2.2.Aboxandasubscriptbox.Thesecondboxappearsinasmallersize,lower,andtotherightofthe\frstbox.3.Aparenthesizedbox,forgroupingofboxesandsubscripts.EqnandTEXbothusecurlybracesforgrouping,butweshalluseordinary,roundparen-thesestoavoidconfusionwiththebracesthatsurroundactionsinSDT's.4.Atextstring,thatis,anystringofcharacters.Thisgrammarisambiguous,butwecanstilluseittoparsebottom-upifwemakesubscriptingandjuxtapositionrightassociative,withsubtakingprece-denceoverjuxtaposition.Expressionswillbetypesetbyconstructinglargerboxesoutofsmallerones.InFig.5.24,theboxesforE1and:heightareabouttobejuxtaposedtoformtheboxforE1:height.TheleftboxforE1isitselfconstructedfromtheboxforEandthesubscript1.Thesubscript1ishandledbyshrinkingitsboxbyabout30%,loweringit,andplacingitaftertheboxforE.Althoughweshalltreat:heightasatextstring,therectangleswithinitsboxshowhowitcanbeconstructedfromboxesfortheindividualletters.thgieh.1E height depth height depthFigure5.24:ConstructinglargerboxesfromsmalleronesInthisexample,weconcentrateontheverticalgeometryofboxesonly.Thehorizontalgeometry|thewidthsofboxes|isalsointeresting,especiallywhendi\u000berentcharactershavedi\u000berentwidths.Itmaynotbereadilyapparent,buteachofthedistinctcharactersinFig.5.24hasadi\u000berentwidth.Thevaluesassociatedwiththeverticalgeometryofboxesareasfollows:a)Thepointsizeisusedtosettextwithinabox.Weshallassumethatcharactersnotinsubscriptsaresetin10pointtype,thesizeoftypeinthisbook.Further,weassumethatifaboxhaspointsizep,thenitssubscriptboxhasthesmallerpointsize0:7p.InheritedattributeB:pswillrepresentthepointsizeofblockB.Thisattributemustbeinherited,becausethecontextdeterminesbyhowmuchagivenboxneedstobeshrunk,duetothenumberoflevelsofsubscripting.5.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES333b)Eachboxhasabaseline,whichisaverticalpositionthatcorrespondstothebottomsoflinesoftext,notcountinganyletters,like\\g\"thatextendbelowthenormalbaseline.InFig.5.24,thedottedlinerepresentsthebaselinefortheboxesE,:height,andtheentireexpression.Thebaselinefortheboxcontainingthesubscript1isadjustedtolowerthesubscript.c)Aboxhasaheight,whichisthedistancefromthetopoftheboxtothebaseline.SynthesizedattributeB:htgivestheheightofboxB.d)Aboxhasadepth,whichisthedistancefromthebaselinetothebottomofthebox.SynthesizedattributeB:dpgivesthedepthofboxB.TheSDDinFig.5.25givesrulesforcomputingpointsizes,heights,anddepths.Production1isusedtoassignB:pstheinitialvalue10.334CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONshrinkhardlyatall.Further,weassumethatthebaselineofasubscriptboxdropsby25%oftheparent'spointsize;again,realityismorecomplex.Production4copiesattributesappropriatelywhenparenthesesareused.Fi-nally,production5handlestheleavesthatrepresenttextboxes.Inthismattertoo,thetruesituationiscomplicated,sowemerelyshowtwounspeci\fedfunc-tionsgetHtandgetDpthatexaminetablescreatedwitheachfonttodeterminethemaximumheightandmaximumdepthofanycharactersinthetextstring.Thestringitselfispresumedtobeprovidedastheattributelexvalofterminaltext.OurlasttaskistoturnthisSDDintoanSDT,followingtherulesforanL-attributedSDD,whichFig.5.25is.TheappropriateSDTisshowninFig.5.26.Forreadability,sinceproductionbodiesbecomelong,wesplitthemacrosslinesandlineuptheactions.Productionbodiesthereforeconsistofthecontentsofalllinesuptotheheadofthenextproduction.2PRODUCTIONACTIONS1)S!fB:ps=10;gB2)B!fB1:ps=B:ps;gB1fB2:ps=B:ps;gB2fB:ht=max(B1:ht;B2:ht);B:dp=max(B1:dp;B2:dp);g3)B!fB1:ps=B:ps;gB1subfB2:ps=0:7\u0002B:ps;gB2fB:ht=max(B1:ht;B2:ht\u00000:25\u0002B:ps);B:dp=max(B1:dp;B2:dp+0:25\u0002B:ps);g4)B!(fB1:ps=B:ps;gB1)fB:ht=B1:ht;B:dp=B1:dp;g5)B!textfB:ht=getHt(B:ps;text:lexval);B:dp=getDp(B:ps;text:lexval);gFigure5.26:SDTfortypesettingboxesOurnextexampleconcentratesonasimplewhile-statementandthegener-ationofintermediatecodeforthistypeofstatement.Intermediatecodewillbetreatedasastring-valuedattribute.Later,weshallexploretechniquesthatinvolvethewritingofpiecesofastring-valuedattributeasweparse,thusavoid-ingthecopyingoflongstringstobuildevenlongerstrings.ThetechniquewasintroducedinExample5.17,wherewegeneratedthepost\fxformofanin\fx5.4.SYNTAX-DIRECTEDTRANSLATIONSCHEMES335expression\\on-the-\ry,\"ratherthancomputingitasanattribute.However,inour\frstformulation,wecreateastring-valuedattributebyconcatenation.Example5.19:Forthisexample,weonlyneedoneproduction:S!while(C)S1Here,Sisthenonterminalthatgeneratesallkindsofstatements,presumablyincludingif-statements,assignmentstatements,andothers.Inthisexample,Cstandsforaconditionalexpression|abooleanexpressionthatevaluatestotrueorfalse.Inthis\row-of-controlexample,theonlythingsweevergeneratearelabels.Alltheotherintermediate-codeinstructionsareassumedtobegeneratedbypartsoftheSDTthatarenotshown.Speci\fcally,wegenerateexplicitinstruc-tionsoftheformlabelL,whereLisanidenti\fer,toindicatethatListhelabeloftheinstructionthatfollows.WeassumethattheintermediatecodeislikethatintroducedinSection2.8.4.Themeaningofourwhile-statementisthattheconditionalCisevaluated.Ifitistrue,controlgoestothebeginningofthecodeforS1.Iffalse,thencontrolgoestothecodethatfollowsthewhile-statement'scode.ThecodeforS1mustbedesignedtojumptothebeginningofthecodeforthewhile-statementwhen\fnished;thejumptothebeginningofthecodethatevaluatesCisnotshowninFig.5.27.Weusethefollowingattributestogeneratetheproperintermediatecode:1.TheinheritedattributeS:nextlabelsthebeginningofthecodethatmustbeexecutedafterSis\fnished.2.ThesynthesizedattributeS:codeisthesequenceofintermediate-codestepsthatimplementsastatementSandendswithajumptoS:next.3.TheinheritedattributeC:truelabelsthebeginningofthecodethatmustbeexecutedifCistrue.4.TheinheritedattributeC:falselabelsthebeginningofthecodethatmustbeexecutedifCisfalse.5.ThesynthesizedattributeC:codeisthesequenceofintermediate-codestepsthatimplementstheconditionCandjumpseithertoC:trueortoC:false,dependingonwhetherCistrueorfalse.TheSDDthatcomputestheseattributesforthewhile-statementisshowninFig.5.27.Anumberofpointsmeritexplanation:\u000fThefunctionnewgeneratesnewlabels.\u000fThevariablesL1andL2holdlabelsthatweneedinthecode.L1isthebeginningofthecodeforthewhile-statement,andweneedtoarrange336CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONS!while(C)S1L1=new();L2=new();S1:next=L1;C:false=S:next;C:true=L2;S:code=labelkL1kC:codeklabelkL2kS1:codeFigure5.27:SDDforwhile-statementsthatS1jumpsthereafterit\fnishes.ThatiswhywesetS1:nexttoL1.L2isthebeginningofthecodeforS1,anditbecomesthevalueofC:true,becausewebranchtherewhenCistrue.\u000fNoticethatC:falseissettoS:next,becausewhentheconditionisfalse,weexecutewhatevercodemustfollowthecodeforS.\u000fWeusekasthesymbolforconcatenationofintermediate-codefragments.ThevalueofS:codethusbeginswiththelabelL1,thenthecodeforconditionC,anotherlabelL2,andthecodeforS1.ThisSDDisL-attributed.WhenweconvertitintoanSDT,theonlyre-mainingissueishowtohandlethelabelsL1andL2,whicharevariables,andnotattributes.Ifwetreatactionsasdummynonterminals,thensuchvariablescanbetreatedasthesynthesizedattributesofdummynonterminals.SinceL1andL2donotdependonanyotherattributes,theycanbeassignedtothe\frstactionintheproduction.TheresultingSDTwithembeddedactionsthatimplementsthisL-attributedde\fnitionisshowninFig.5.28.2S!while(fL1=new();L2=new();C:false=S:next;C:true=L2;gC)fS1:next=L1;gS1fS:code=labelkL1kC:codeklabelkL2kS1:code;gFigure5.28:SDTforwhile-statements5.4.6ExercisesforSection5.4Exercise5.4.1:WementionedinSection5.4.2thatitispossibletodeduce,fromtheLRstateontheparsingstack,whatgrammarsymbolisrepresentedbythestate.Howwouldwediscoverthisinformation?Exercise5.4.2:RewritethefollowingSDT:A!AfagBjABfbgj0B!BfcgAjBAfdgj15.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S337sothattheunderlyinggrammarbecomesnon-left-recursive.Here,a,b,c,anddareactions,and0and1areterminals.!Exercise5.4.3:ThefollowingSDTcomputesthevalueofastringof0'sand1'sinterpretedasapositive,binaryinteger.B!B10fB:val=2\u0002B1:valgjB11fB:val=2\u0002B1:val+1gj1fB:val=1gRewritethisSDTsotheunderlyinggrammarisnotleftrecursive,andyetthesamevalueofB:valiscomputedfortheentireinputstring.!Exercise5.4.4:WriteL-attributedSDD'sanalogoustothatofExample5.19forthefollowingproductions,eachofwhichrepresentsafamiliar\row-of-controlconstruct,asintheprogramminglanguageC.Youmayneedtogenerateathree-addressstatementtojumptoaparticularlabelL,inwhichcaseyoushouldgenerategotoL.a)S!if(C)S1elseS2b)S!doS1while(C)c)S!0f0L0g0;L!LSj\u000fNotethatanystatementinthelistcanhaveajumpfromitsmiddletothenextstatement,soitisnotsu\u000ecientsimplytogeneratecodeforeachstatementinorder.Exercise5.4.5:ConverteachofyourSDD'sfromExercise5.4.4toanSDTinthemannerofExample5.19.Exercise5.4.6:ModifytheSDDofFig.5.25toincludeasynthesizedattributeB:le,thelengthofabox.Thelengthoftheconcatenationoftwoboxesisthesumofthelengthsofeach.ThenaddyournewrulestotheproperpositionsintheSDTofFig.5.26Exercise5.4.7:ModifytheSDDofFig.5.25toincludesuperscriptsdenotedbyoperatorsupbetweenboxes.IfboxB2isasuperscriptofboxB1,thenpositionthebaselineofB20.6timesthepointsizeofB1abovethebaselineofB1.AddthenewproductionandrulestotheSDTofFig.5.26.5.5ImplementingL-AttributedSDD'sSincemanytranslationapplicationscanbeaddressedusingL-attributedde\f-nitions,weshallconsidertheirimplementationinmoredetailinthissection.Thefollowingmethodsdotranslationbytraversingaparsetree:338CHAPTER5.SYNTAX-DIRECTEDTRANSLATION1.Buildtheparsetreeandannotate.ThismethodworksforanynoncircularSDDwhatsoever.WeintroducedannotatedparsetreesinSection5.1.2.2.Buildtheparsetree,addactions,andexecutetheactionsinpreorder.ThisapproachworksforanyL-attributedde\fnition.WediscussedhowtoturnanL-attributedSDDintoanSDTinSection5.4.5;inparticular,wediscussedhowtoembedactionsintoproductionsbasedonthesemanticrulesofsuchanSDD.Inthissection,wediscussthefollowingmethodsfortranslationduringparsing:3.Usearecursive-descentparserwithonefunctionforeachnonterminal.ThefunctionfornonterminalAreceivestheinheritedattributesofAasargumentsandreturnsthesynthesizedattributesofA.4.Generatecodeonthe\ry,usingarecursive-descentparser.5.ImplementanSDTinconjunctionwithanLL-parser.Theattributesarekeptontheparsingstack,andtherulesfetchtheneededattributesfromknownlocationsonthestack.6.ImplementanSDTinconjunctionwithanLR-parser.Thismethodmaybesurprising,sincetheSDTforanL-attributedSDDtypicallyhasac-tionsinthemiddleofproductions,andwecannotbesureduringanLRparsethatweareeveninthatproductionuntilitsentirebodyhasbeenconstructed.Weshallsee,however,thatiftheunderlyinggrammarisLL,wecanalwayshandleboththeparsingandtranslationbottom-up.5.5.1TranslationDuringRecursive-DescentParsingArecursive-descentparserhasafunctionAforeachnonterminalA,asdiscussedinSection4.4.1.Wecanextendtheparserintoatranslatorasfollows:a)TheargumentsoffunctionAaretheinheritedattributesofnonterminalA.b)Thereturn-valueoffunctionAisthecollectionofsynthesizedattributesofnonterminalA.InthebodyoffunctionA,weneedtobothparseandhandleattributes:1.DecideupontheproductionusedtoexpandA.2.Checkthateachterminalappearsontheinputwhenitisrequired.Weshallassumethatnobacktrackingisneeded,buttheextensiontorecur-sive-descentparsingwithbacktrackingcanbedonebyrestoringtheinputpositionuponfailure,asdiscussedinSection4.4.1.5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S3393.Preserve,inlocalvariables,thevaluesofallattributesneededtocomputeinheritedattributesfornonterminalsinthebodyorsynthesizedattributesfortheheadnonterminal.4.Callfunctionscorrespondingtononterminalsinthebodyoftheselectedproduction,providingthemwiththeproperarguments.Sincetheun-derlyingSDDisL-attributed,wehavealreadycomputedtheseattributesandstoredtheminlocalvariables.Example5.20:LetusconsidertheSDDandSDTofExample5.19forwhile-statements.ApseudocoderenditionoftherelevantpartsofthefunctionSappearsinFig.5.29.stringS(labelnext)fstringScode,Ccode;/*localvariablesholdingcodefragments*/labelL1,L2;/*thelocallabels*/if(currentinput==tokenwhile)fadvanceinput;check0(0isnextontheinput,andadvance;L1=new();L2=new();Ccode=C(next;L2);check0)0isnextontheinput,andadvance;Scode=S(L1);return(\"label\"kL1kCcodek\"label\"kL2kScode);gelse/*otherstatementtypes*/gFigure5.29:Implementingwhile-statementswitharecursive-descentparserWeshowSasstoringandreturninglongstrings.Inpractice,itwouldbefarmoree\u000ecientforfunctionslikeSandCtoreturnpointerstorecordsthatrepresentthesestrings.Then,thereturn-statementinfunctionSwouldnotphysicallyconcatenatethecomponentsshown,butratherwouldconstructarecord,orperhapstreeofrecords,expressingtheconcatenationofthestringsrepresentedbyScodeandCcode,thelabelsL1andL2,andthetwooccurrencesoftheliteralstring\"label\".2Example5.21:Now,letustakeuptheSDTofFig.5.26fortypesettingboxes.First,weaddressparsing,sincetheunderlyinggrammarinFig.5.26isambiguous.Thefollowingtransformedgrammarmakesjuxtapositionandsubscriptingrightassociative,withsubtakingprecedenceoverjuxtaposition:340CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONS!BB!TB1jTT!FsubT1jFF!(B)jtextThetwonewnonterminals,TandF,aremotivatedbytermsandfactorsinexpressions.Here,a\\factor,\"generatedbyF,iseitheraparenthesizedboxoratextstring.A\\term,\"generatedbyT,isa\\factor\"withasequenceofsubscripts,andaboxgeneratedbyBisasequenceofjuxtaposed\\terms.\"TheattributesofBcarryovertoTandF,sincethenewnonterminalsalsodenoteboxes;theywereintroducedsimplytoaidparsing.Thus,bothTandFhaveaninheritedattributepsandsynthesizedattributeshtanddp,withsemanticactionsthatcanbeadaptedfromtheSDTinFig.5.26.Thegrammarisnotyetreadyfortop-downparsing,sincetheproductionsforBandThavecommonpre\fxes.ConsiderT,forinstance.Atop-downparsercannotchoosebetweenthetwoproductionsforTbylookingonesymbolaheadintheinput.Fortunately,wecanuseaformofleft-factoring,discussedinSection4.3.4,tomakethegrammarready.WithSDT's,thenotionofcom-monpre\fxappliestoactionsaswell.BothproductionsforTbeginwiththenonterminalFinheritingattributepsfromT.ThepseudocodeinFig.5.30forT(ps)foldsinthecodeforF(ps).Afterleft-factoringisappliedtoT!FsubT1jF,thereisonlyonecalltoF;thepseudocodeshowstheresultofsubstitutingthecodeforFinplaceofthiscall.ThefunctionTwillbecalledasT(10:0)bythefunctionforB,whichwedonotshow.ItreturnsapairconsistingoftheheightanddepthoftheboxgeneratedbynonterminalT;inpractice,itwouldreturnarecordcontainingtheheightanddepth.FunctionTbeginsbycheckingforaleftparenthesis,inwhichcaseitmusthavetheproductionF!(B)toworkwith.ItsaveswhatevertheBinsidetheparenthesesreturns,butifthatBisnotfollowedbyarightparenthesis,thenthereisasyntaxerror,whichmustbehandledinamannernotshown.Otherwise,ifthecurrentinputistext,thenthefunctionTusesgetHtandgetDptodeterminetheheightanddepthofthistext.Tthendecideswhetherthenextboxisasubscriptandadjuststhepointsize,ifso.WeusetheactionsassociatedwiththeproductionB!BsubBinFig.5.26fortheheightanddepthofthelargerbox.Otherwise,wesimplyreturnwhatFwouldhavereturned:(h1;d1).25.5.2On-The-FlyCodeGenerationTheconstructionoflongstringsofcodethatareattributevalues,asinEx-ample5.20,isundesirableforseveralreasons,includingthetimeitcouldtaketocopyormovelongstrings.Incommoncasessuchasourrunningcode-generationexample,wecaninsteadincrementallygeneratepiecesofthecodeintoanarrayoroutput\flebyexecutingactionsinanSDT.Theelementsweneedtomakethistechniqueworkare:5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S341(\roat,\roat)T(\roatps)f\roath1,h2,d1,d2;/*localstoholdheightsanddepths*//*startcodeforF(ps)*/if(currentinput==0(0)fadvanceinput;(h1;d1)=B(ps);if(currentinput!=0)0)syntaxerror:expected0)0;advanceinput;gelseif(currentinput==text)fletlexicalvaluetext.lexvalbet;advanceinput;h1=getHt(ps;t);d1=getDp(ps;t);gelsesyntaxerror:expectedtextor0(0;/*endcodeforF(ps)*/if(currentinput==sub)fadvanceinput;(h2;d2)=T(0:7\u0003ps);return\u0000max(h1;h2\u00000:25\u0003ps);max(d1;d2+0:25\u0003ps)\u0001;greturn(h1;d1);gFigure5.30:Recursive-descenttypesettingofboxes1.Thereis,foroneormorenonterminals,amainattribute.Forconve-nience,weshallassumethatthemainattributesareallstringvalued.InExample5.20,theattributesS:codeandC:codearemainattributes;theotherattributesarenot.2.Themainattributesaresynthesized.3.Therulesthatevaluatethemainattribute(s)ensurethat(a)Themainattributeistheconcatenationofmainattributesofnon-terminalsappearinginthebodyoftheproductioninvolved,perhapswithotherelementsthatarenotmainattributes,suchasthestringlabelorthevaluesoflabelsL1andL2.(b)Themainattributesofnonterminalsappearintheruleinthesameorderasthenonterminalsthemselvesappearintheproductionbody.Asaconsequenceoftheaboveconditions,themainattributecanbeconstructedbyemittingthenon-main-attributeelementsoftheconcatenation.Wecanrely342CHAPTER5.SYNTAX-DIRECTEDTRANSLATION5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S343labelL2,and\fnallythecodefromtherecursivecalltoS(whichisthesameasScodeinFig.5.29).Thus,thecodeprintedbythiscalltoSisexactlythesameasthereturnvalueinFig.5.29.2Incidentally,wecanmakethesamechangetotheunderlyingSDT:turntheconstructionofamainattributeintoactionsthatemittheelementsofthatattribute.InFig.5.32weseetheSDTofFig.5.28revisedtogeneratecodeonthe\ry.S!while(fL1=new();L2=new();C:false=S:next;C:true=L2;print(\"label\";L1);gC)fS1:next=L1;print(\"label\";L2);gS1Figure5.32:SDTforon-the-\rycodegenerationforwhilestatements5.5.3L-AttributedSDD'sandLLParsingSupposethatanL-attributedSDDisbasedonanLL-grammarandthatwehaveconvertedittoanSDTwithactionsembeddedintheproductions,asdescribedinSection5.4.5.WecanthenperformthetranslationduringLLparsingbyextendingtheparserstacktoholdactionsandcertaindataitemsneededforattributeevaluation.Typically,thedataitemsarecopiesofattributes.Inadditiontorecordsrepresentingterminalsandnonterminals,theparserstackwillholdaction-recordsrepresentingactionstobeexecutedandsynth-esize-recordstoholdthesynthesizedattributesfornonterminals.Weusethefollowingtwoprinciplestomanageattributesonthestack:\u000fTheinheritedattributesofanonterminalAareplacedinthestackrecordthatrepresentsthatnonterminal.Thecodetoevaluatetheseattributeswillusuallyberepresentedbyanaction-recordimmediatelyabovethestackrecordforA;infact,theconversionofL-attributedSDD'stoSDT'sensuresthattheaction-recordwillbeimmediatelyaboveA.\u000fThesynthesizedattributesforanonterminalAareplacedinaseparatesynthesize-recordthatisimmediatelybelowtherecordforAonthestack.Thisstrategyplacesrecordsofseveraltypesontheparsingstack,trustingthatthesevariantrecordtypescanbemanagedproperlyassubclassesofa\\stack-record\"class.Inpractice,wemightcombineseveralrecordsintoone,buttheideasareperhapsbestexplainedbyseparatingdatausedfordi\u000berentpurposesintodi\u000berentrecords.Action-recordscontainpointerstocodetobeexecuted.Actionsmayalsoappearinsynthesize-records;theseactionstypicallyplacecopiesofthesynthe-sizedattribute(s)inotherrecordsfurtherdownthestack,wherethevalueof344CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONthatattributewillbeneededafterthesynthesize-recordanditsattributesarepoppedo\u000bthestack.LetustakeabrieflookatLLparsingtoseetheneedtomaketemporarycopiesofattributes.FromSection4.4.4,atable-drivenLLparsermimicsaleftmostderivation.Ifwistheinputthathasbeenmatchedsofar,thenthestackholdsasequenceofgrammarsymbols\u000bsuchthatS)\u0003lmw\u000b,whereSisthestartsymbol.WhentheparserexpandsbyaproductionA!BC,itreplacesAontopofthestackbyBC.SupposenonterminalChasaninheritedattributeC:i.WithA!BC,theinheritedattributeC:imaydependnotonlyontheinheritedattributesofA,butonalltheattributesofB.Thus,wemayneedtoprocessBcompletelybeforeC:icanbeevaluated.WethereforesavetemporarycopiesofalltheattributesneededtoevaluateC:iintheaction-recordthatevaluatesC:i.Otherwise,whentheparserreplacesAontopofthestackbyBC,theinheritedattributesofAwillhavedisappeared,alongwithitsstackrecord.SincetheunderlyingSDDisL-attributed,wecanbesurethatthevaluesoftheinheritedattributesofAareavailablewhenArisestothetopofthestack.Thevalueswillthereforebeavailableintimetobecopiedintotheaction-recordthatevaluatestheinheritedattributesofC.Furthermore,spaceforthesynthesizedattributesofAisnotaproblem,sincethespaceisinthesynthesize-recordforA,whichremainsonthestack,belowBandC,whentheparserexpandsbyA!BC.AsBisprocessed,wecanperformactions(througharecordjustaboveBonthestack)thatcopyitsinheritedattributesforusebyC,asneeded,andafterBisprocessed,thesynthesize-recordforBcancopyitssynthesizedattributesforusebyC,ifneeded.Likewise,synthesizedattributesofAmayneedtemporariestohelpcomputetheirvalue,andthesecanbecopiedtothesynthesize-recordforAasBandthenCareprocessed.Theprinciplethatmakesallthiscopyingofattributesworkis:\u000fAllcopyingtakesplaceamongtherecordsthatarecreatedduringoneexpansionofonenonterminal.Thus,eachoftheserecordsknowshowfarbelowitonthestackeachotherrecordis,andcanwritevaluesintotherecordsbelowsafely.Thenextexampleillustratestheimplementationofinheritedattributesdur-ingLLparsingbydiligentlycopyingattributevalues.Shortcutsoroptimiza-tionsarepossible,particularlywithcopyrules,whichsimplycopythevalueofoneattributeintoanother.ShortcutsaredeferreduntilExample5.24,whichalsoillustratessynthesize-records.Example5.23:ThisexampleimplementstheSDTofFig.5.32,whichgener-atescodeonthe\ryforthewhile-production.ThisSDTdoesnothavesynthe-sizedattributes,exceptfordummyattributesthatrepresentlabels.Figure5.33(a)showsthesituationasweareabouttousethewhile-produc-tiontoexpandS,presumablybecausethelookaheadsymbolontheinputis5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S345while.TherecordatthetopofstackisforS,anditcontainsonlytheinheritedattributeS:next,whichwesupposehasthevaluex.Sincewearenowparsingtop-down,weshowthestacktopattheleft,accordingtoourusualconvention.whiletop(Actionsnext=xL1=?L2=?L1=new();L2=new();stack[top\u00001]:false=snext;stack[top\u00001]:true=L2;stack[top\u00003]:al1=L1;stack[top\u00003]:al2=L2;print(\"label\";L1);Cfalse=?true=?)Actional1=?al2=?stack[top\u00001]:next=al1;print(\"label\";al2);S1next=?(b)(a)Stopnext=xFigure5.33:ExpansionofSaccordingtothewhile-statementproductionFigure5.33(b)showsthesituationimmediatelyafterwehaveexpandedS.Thereareaction-recordsinfrontofthenonterminalsCandS1,correspondingtotheactionsintheunderlyingSDTofFig.5.32.TherecordforChasroomforinheritedattributestrueandfalse,whiletherecordforS1hasroomforattributenext,asallS-recordsmust.Weshowvaluesforthese\feldsas?,becausewedonotyetknowtheirvalues.Theparsernextrecognizeswhileand(ontheinputandpopstheirrecordso\u000bthestack.Now,the\frstactionisatthetop,anditmustbeexecuted.Thisaction-recordhasa\feldsnext,whichholdsacopyoftheinheritedattributeS:next.WhenSispoppedfromthestack,thevalueofS:nextiscopiedintothe\feldsnextforuseduringtheevaluationoftheinheritedattributesforC.Thecodeforthe\frstactiongeneratesnewvaluesforL1andL2,whichweshallsupposeareyandz,respectively.ThenextstepistomakezthevalueofC:true.Theassignmentstack[top\u00001]:true=L2iswrittenknowingitisonlyexecutedwhenthisaction-recordisatthetopofstack,sotop\u00001referstotherecordbelowit|therecordforC.The\frstaction-recordthencopiesL1into\feldal1inthesecondaction,whereitwillbeusedtoevaluateS1:next.ItalsocopiesL2intoa\feldcalledal2ofthesecondaction;thisvalueisneededforthataction-recordtoprintitsoutputproperly.Finally,the\frstaction-recordprintslabelytotheoutput.Thesituationaftercompletingthe\frstactionandpoppingitsrecordo\u000b346CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONnext=?S1print(\"label\";al2);stack[top\u00001]:next=al1;al1=yal2=zAction)true=zfalse=xtopCFigure5.34:AftertheactionaboveCisperformedthestackisshowninFig.5.34.ThevaluesofinheritedattributesintherecordforChavebeen\flledinproperly,ashavethetemporariesal1andal2inthesecondactionrecord.Atthispoint,Cisexpanded,andwepresumethatthecodetoimplementitstestcontainingjumpstolabelsxandz,asappropriate,isgenerated.WhentheC-recordispoppedfromthestack,therecordfor)becomestopandcausestheparsertocheckfor)onitsinput.WiththeactionaboveS1atthetopofthestack,itscodesetsS1:nextandemitslabelz.Whenthatisdone,therecordforS1becomesthetopofstack,andasitisexpanded,wepresumeitcorrectlygeneratescodethatimplementswhateverkindofstatementitisandthenjumptolabely.2Example5.24:Now,letusconsiderthesamewhile-statement,butwithatranslationthatproducestheoutputS:codeasasynthesizedattribute,ratherthanbyon-the-\rygeneration.Inordertofollowtheexplanation,itisusefultobearinmindthefollowinginvariantorinductivehypothesis,whichweassumeisfollowedforeverynonterminal:\u000fEverynonterminalthathascodeassociatedwithitleavesthatcode,asastring,inthesynthesize-recordjustbelowitonthestack.Assumingthisstatementistrue,weshallhandlethewhile-productionsoitmaintainsthisstatementasaninvariant.Figure5.35(a)showsthesituationjustbeforeSisexpandedusingthepro-ductionforwhile-statements.AtthetopofthestackweseetherecordforS;ithasa\feldforitsinheritedattributeS:next,asinExample5.23.Immediatelybelowthatrecordisthesynthesize-recordforthisoccurrenceofS.Thelatterhasa\feldforS:code,asallsynthesize-recordsforSmusthave.Wealsoshowitwithsomeother\feldsforlocalstorageandactions,sincetheSDTforthewhileproductioninFig.5.28issurelypartofalargerSDT.OurexpansionofSisbasedontheSDTofFig.5.28,anditisshowninFig.5.35(b).Asashortcut,duringtheexpansion,weassumethattheinheritedattributeS:nextisassigneddirectlytoC:false,ratherthanbeingplacedinthe\frstactionandthencopiedintotherecordforC.Letusexaminewhateachrecorddoeswhenitbecomesthetopofstack.First,thewhilerecordcausesthetokenwhiletobematchedwiththeinput,5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S347stack[top\u00003]:Ccode=code;code=?C:codeSynthesizetrue=?false=?Cstack[top\u00005]:l2=L2;stack[top\u00005]:l1=L1;stack[top\u00004]:next=L1;stack[top\u00001]:true=L2;L2=new();L1=new();L2=?L1=?Action(topwhileactions)(b)(a)actionsdatacode=?S:codeSynthesizek\"label\"kl2kcode;\"label\"kl1kCcodestack[top\u00001]:code=l2=?l1=?Ccode=?code=?S1:codeSynthesizenext=?S1datacode=?S:codeSynthesizenext=xtopSFigure5.35:ExpansionofSwithsynthesizedattributeconstructedonthestackwhichitmust,orelsewewouldnothaveexpandedSinthisway.Afterwhileand(arepoppedo\u000bthestack,thecodefortheaction-recordisexecuted.ItgeneratesvaluesforL1andL2,andwetaketheshortcutofcopyingthemdirectlytotheinheritedattributesthatneedthem:S1:nextandC:true.ThelasttwostepsoftheactioncauseL1andL2tobecopiedintotherecordcalled\\SynthesizeS1:code.\"Thesynthesize-recordforS1doesdoubleduty:notonlywillitholdthesyn-thesizedattributeS1:code,butitwillalsoserveasanaction-recordtocompletetheevaluationoftheattributesfortheentireproductionS!while(C)S1.Inparticular,whenitgetstothetop,itwillcomputethesynthesizedattributeS:codeandplaceitsvalueinthesynthesize-recordfortheheadS.WhenCbecomesthetopofthestack,ithasbothitsinheritedattributescomputed.Bytheinductivehypothesisstatedabove,wesupposeitcorrectlygeneratescodetoexecuteitsconditionandjumptotheproperlabel.WealsoassumethattheactionsperformedduringtheexpansionofCcorrectlyplacethiscodeintherecordbelow,asthevalueofsynthesizedattributeC:code.AfterCispopped,thesynthesize-recordforC:codebecomesthetop.Itscodeisneededinthesynthesize-recordforS1:code,becausethatiswhereweconcatenateallthecodeelementstoformS:code.Thesynthesize-recordforC:codethereforehasanactiontocopyC:codeintothesynthesize-recordforS1:code.Afterdoingso,therecordfortoken)reachesthetopofstack,andcausesacheckfor)ontheinput.Assumingthattestsucceeds,therecordforS1becomesthetopofstack.Byourinductivehypothesis,thisnonterminalis348CHAPTER5.SYNTAX-DIRECTEDTRANSLATION5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S3491.StartwiththeSDTconstructedasinSection5.4.5,whichplacesembed-dedactionsbeforeeachnonterminaltocomputeitsinheritedattributesandanactionattheendoftheproductiontocomputesynthesizedat-tributes.2.Introduceintothegrammaramarkernonterminalinplaceofeachem-beddedaction.Eachsuchplacegetsadistinctmarker,andthereisoneproductionforanymarkerM,namelyM!\u000f.3.ModifytheactionaifmarkernonterminalMreplacesitinsomeproduc-tionA!\u000bfag\f,andassociatewithM!\u000fanactiona0that(a)Copies,asinheritedattributesofM,anyattributesofAorsymbolsof\u000bthatactionaneeds.(b)Computesattributesinthesamewayasa,butmakesthoseat-tributesbesynthesizedattributesofM.Thischangeappearsillegal,sincetypicallytheactionassociatedwithproductionM!\u000fwillhavetoaccessattributesbelongingtogrammarsymbolsthatdonotappearinthisproduction.However,weshallimple-menttheactionsontheLRparsingstack,sothenecessaryattributeswillalwaysbeavailableaknownnumberofpositionsdownthestack.Example5.25:SupposethatthereisaproductionA!BCinanLLgram-mar,andtheinheritedattributeB:iiscomputedfrominheritedattributeA:ibysomeformulaB:i=f(A:i).Thatis,thefragmentofanSDTwecareaboutisA!fB:i=f(A:i);gBCWeintroducemarkerMwithinheritedattributeM:iandsynthesizedattributeM:s.TheformerwillbeacopyofA:iandthelatterwillbeB:i.TheSDTwillbewrittenA!MBCM!fM:i=A:i;M:s=f(M:i);gNoticethattheruleforMdoesnothaveA:iavailabletoit,butinfactweshallarrangethateveryinheritedattributeforanonterminalsuchasAappearsonthestackimmediatelybelowwherethereductiontoAwilllatertakeplace.Thus,whenwereduce\u000ftoM,weshall\fndA:iimmediatelybelowit,fromwhereitmayberead.Also,thevalueofM:s,whichisleftonthestackalongwithM,isreallyB:iandproperlyisfoundrightbelowwherethereductiontoBwilllateroccur.2Example5.26:LetusturntheSDTofFig.5.28intoanSDTthatcanoperatewithanLRparseoftherevisedgrammar.WeintroduceamarkerMbeforeCandamarkerNbeforeS1,sotheunderlyinggrammarbecomes350CHAPTER5.SYNTAX-DIRECTEDTRANSLATION5.5.IMPLEMENTINGL-ATTRIBUTEDSDD'S351Letusfollowtheparsingprocessforawhile-statement.SupposethatarecordholdingS:nextappearsonthetopofthestack,andthenextinputistheterminalwhile.Weshiftthisterminalontothestack.Itisthencertainthattheproductionbeingrecognizedisthewhile-production,sotheLRparsercanshift\\(\"anddeterminethatitsnextstepmustbetoreduce\u000ftoM.ThestackatthistimeisshowninFig.5.36.Wealsoshowinthat\fguretheactionthatisassociatedwiththereductiontoM.WecreatevaluesforL1andL2,whichlivein\feldsoftheM-record.Alsointhatrecordare\feldsforC:trueandC:false.Theseattributesmustbeinthesecondandthird\feldsoftherecord,forconsistencywithotherstackrecordsthatmightappearbelowCinothercontextsandalsomustprovidetheseattributesforC.TheactioncompletesbyassigningvaluestoC:trueandC:false,onefromtheL2justgenerated,andtheotherbyreachingdownthestacktowhereweknowS:nextisfound.topC:trueMC:falseL1L2Codeexecutedduringreductionof\u000ftoML1=new();L2=new();C:true=L2;C:false=stack[top\u00003]:next;(whileS:next?Figure5.36:LRparsingstackafterreductionof\u000ftoMWepresumethatthenextinputsareproperlyreducedtoC.ThesynthesizedattributeC:codeisthereforeplacedintherecordforC.ThischangetothestackisshowninFig.5.37,whichalsoincorporatesthenextseveralrecordsthatarelaterplacedaboveConthestack.S:nextwhile(MC:trueC:falseL1L2CC:code)NS1:nextS1topS1:code?Figure5.37:Stackjustbeforereductionofthewhile-productionbodytoSContinuingwiththerecognitionofthewhile-statement,theparsershouldnext\fnd\\)\"ontheinput,whichitpushesontothestackinarecordofitsown.Atthatpoint,theparser,whichknowsitisworkingonawhile-statementbecausethegrammarisLL,willreduce\u000ftoN.Thesinglepieceofdataasso-ciatedwithNistheinheritedattributeS1:next.Notethatthisattributeneeds352CHAPTER5.SYNTAX-DIRECTEDTRANSLATIONtobeintherecordforNbecausethatwillbejustbelowtherecordforS1.ThecodethatisexecutedtocomputethevalueofS1:nextisS1:next=stack[top\u00003]:L1;ThisactionreachesthreerecordsbelowN,whichisatthetopofstackwhenthecodeisexecuted,andretrievesthevalueofL1.Next,theparserreducessomepre\fxoftheremaininginputtoS,whichwehaveconsistentlyreferredtoasS1todistinguishitfromtheSattheheadoftheproduction.ThevalueofS1:codeiscomputedandappearsinthestackrecordforS1.ThissteptakesustotheconditionthatisillustratedinFig.5.37.Atthispoint,theparserwillreduceeverythingfromwhiletoS1toS.Thecodethatisexecutedduringthisreductionis:tempCode=labelkstack[top\u00004]:L1kstack[top\u00003]:codeklabelkstack[top\u00004]:L2kstack[top]:code;top=top\u00005;stack[top]:code=tempCode;Thatis,weconstructthevalueofS:codeinavariabletempCode.Thatcodeistheusual,consistingofthetwolabelsL1andL2,thecodeforCandthecodeforS1.Thestackispopped,soSappearswherewhilewas.ThevalueofthecodeforSisplacedinthecode\feldofthatrecord,whereitcanbeinterpretedasthesynthesizedattributeS:code.Notethatwedonotshow,inanyofthisdiscussion,themanipulationofLRstates,whichmustalsoappearonthestackinthe\feldthatwehavepopulatedwithgrammarsymbols.25.5.5ExercisesforSection5.5Exercise5.5.1:ImplementeachofyourSDD'sofExercise5.4.4asarecursive-descentparserinthestyleofSection5.5.1.Exercise5.5.2:ImplementeachofyourSDD'sofExercise5.4.4asarecursive-descentparserinthestyleofSection5.5.2.Exercise5.5.3:ImplementeachofyourSDD'sofExercise5.4.4withanLLparserinthestyleofSection5.5.3,withcodegenerated\\onthe\ry.\"Exercise5.5.4:ImplementeachofyourSDD'sofExercise5.4.4withanLLparserinthestyleofSection5.5.3,butwithcode(orpointerstothecode)storedonthestack.Exercise5.5.5:ImplementeachofyourSDD'sofExercise5.4.4withanLRparserinthestyleofSection5.5.4.Exercise5.5.6:ImplementyourSDDofExercise5.2.4inthestyleofSec-tion5.5.1.WouldanimplementationinthestyleofSection5.5.2beanydi\u000ber-ent?5.6.SUMMARYOFCHAPTER53535.6SummaryofChapter5 ✦InheritedandSynthesizedAttributes:Syntax-directedde\fnitionsmayusetwokindsofattributes.Asynthesizedattributeataparse-treenodeiscomputedfromattributesatitschildren.Aninheritedattributeatanodeiscomputedfromattributesatitsparentand/orsiblings. ✦DependencyGraphs:GivenaparsetreeandanSDD,wedrawedgesamongtheattributeinstancesassociatedwitheachparse-treenodetodenotethatthevalueoftheattributeattheheadoftheedgeiscomputedintermsofthevalueoftheattributeatthetailoftheedge. ✦CyclicDe\fnitions:InproblematicSDD's,we\fndthattherearesomeparsetreesforwhichitisimpossibleto\fndanorderinwhichwecancomputealltheattributesatallnodes.Theseparsetreeshavecyclesintheirassociateddependencygraphs.ItisintractabletodecidewhetheranSDDhassuchcirculardependencygraphs. ✦S-AttributedDe\fnitions:InanS-attributedSDD,allattributesaresyn-thesized. ✦L-AttributedDe\fnitions:InanL-attributedSDD,attributesmaybein-heritedorsynthesized.However,inheritedattributesataparse-treenodemaydependonlyoninheritedattributesofitsparentandon(any)at-tributesofsiblingstoitsleft. ✦SyntaxTrees:Eachnodeinasyntaxtreerepresentsaconstruct;thechil-drenofthenoderepresentthemeaningfulcomponentsoftheconstruct. ✦ImplementingS-AttributedSDD's:AnS-attributedde\fnitioncanbeim-plementedbyanSDTinwhichallactionsareattheendoftheproduction(a\\post\fx\"SDT).Theactionscomputethesynthesizedattributesoftheproductionheadintermsofsynthesizedattributesofthesymbolsinthebody.IftheunderlyinggrammarisLR,thenthisSDTcanbeimple-mentedontheLRparserstack. ✦EliminatingLeftRecursionFromSDT's:IfanSDThasonlyside-e\u000bects(noattributesarecomputed),thenthestandardleft-recursion-eliminationalgorithmforgrammarsallowsustocarrytheactionsalongasiftheywereterminals.Whenattributesarecomputed,wecanstilleliminateleftrecursioniftheSDTisapost\fxSDT. ✦ImplementingL-attributedSDD'sbyRecursive-DescentParsing:IfwehaveanL-attributedde\fnitiononatop-downparsablegrammar,wecanbuildarecursive-descentparserwithnobacktrackingtoimplementthetranslation.Inheritedattributesbecomeargumentsofthefunctionsfortheirnonterminals,andsynthesizedattributesarereturnedbythatfunc-tion.354CHAPTER5.SYNTAX-DIRECTEDTRANSLATION ✦ImplementingL-AttributedSDD'sonanLLGrammar:EveryL-attribut-edde\fnitionwithanunderlyingLLgrammarcanbeimplementedalongwiththeparse.Recordstoholdthesynthesizedattributesforanon-terminalareplacedbelowthatnonterminalonthestack,whileinheritedattributesforanonterminalarestoredwiththatnonterminalonthestack.Actionrecordsarealsoplacedonthestacktocomputeattributesattheappropriatetime. ✦ImplementingL-AttributedSDD'sonanLLGrammar,Bottom-Up:AnL-attributedde\fnitionwithanunderlyingLLgrammarcanbeconvertedtoatranslationonanLRgrammarandthetranslationperformedincon-nectionwithabottom-upparse.Thegrammartransformationintroduces\\marker\"nonterminalsthatappearonthebottom-upparser'sstackandholdinheritedattributesofthenonterminalaboveitonthestack.Syn-thesizedattributesarekeptwiththeirnonterminalonthestack.5.7ReferencesforChapter5Syntax-directedde\fnitionsareaformofinductivede\fnitioninwhichtheinduc-tionisonthesyntacticstructure.Assuchtheyhavelongbeenusedinformallyinmathematics.TheirapplicationtoprogramminglanguagescamewiththeuseofagrammartostructuretheAlgol60report.TheideaofaparserthatcallsforsemanticactionscanbefoundinSamelsonandBauer[8]andBrookerandMorris[1].Irons[2]constructedoneofthe\frstsyntax-directedcompilers,usingsynthesizedattributes.TheclassofL-attributedde\fnitionscomesfrom[6].Inheritedattributes,dependencygraphs,andatestforcircularityofSDD's(thatis,whetherornotthereissomeparsetreewithnoorderinwhichtheat-tributescanbecomputed)arefromKnuth[5].Jazayeri,Ogden,andRounds[3]showedthattestingcircularityrequiresexponentialtime,asafunctionofthesizeoftheSDD.ParsergeneratorssuchasYacc[4](seealsothebibliographicnotesinChap-ter4)supportattributeevaluationduringparsing.ThesurveybyPaakki[7]isastartingpointforaccessingtheextensiveliteratureonsyntax-directedde\fnitionsandtranslations.1.Brooker,R.A.andD.Morris,\\Ageneraltranslationprogramforphrasestructurelanguages,\"J.ACM9:1(1962),pp.1{10.2.Irons,E.T.,\\AsyntaxdirectedcompilerforAlgol60,\"Comm.ACM4:1(1961),pp.51{55.3.Jazayeri,M.,W.F.Ogden,andW.C.Rounds,\\Theintrinsicexpo-nentialcomplexityofthecircularityproblemforattributegrammars,\"Comm.ACM18:12(1975),pp.697{706.5.7.REFERENCESFORCHAPTER53554.Johnson,S.C.,\\Yacc|YetAnotherCompilerCompiler,\"ComputingScienceTechnicalReport32,BellLaboratories,MurrayHill,NJ,1975.Availableathttp://dinosaur.compilertools.net/yacc/.5.Knuth,D.E.,\\Semanticsofcontext-freelanguages,\"MathematicalSys-temsTheory2:2(1968),pp.127{145.SeealsoMathematicalSystemsTheory5:1(1971),pp.95{96.6.Lewis,P.M.II,D.J.Rosenkrantz,andR.E.Stearns,\\Attributedtrans-lations,\"J.ComputerandSystemSciences9:3(1974),pp.279{307.7.Paakki,J.,\\Attributegrammarparadigms|ahigh-levelmethodologyinlanguageimplementation,\"ComputingSurveys27:2(1995),pp.196{255.8.Samelson,K.andF.L.Bauer,\\Sequentialformulatranslation,\"Comm.ACM3:2(1960),pp.76{83. This page intentionally left blank Chapter6Intermediate-CodeGenerationIntheanalysis-synthesismodelofacompiler,thefrontendanalyzesasourceprogramandcreatesanintermediaterepresentation,fromwhichthebackendgeneratestargetcode.Ideally,detailsofthesourcelanguagearecon\fnedtothefrontend,anddetailsofthetargetmachinetothebackend.Withasuitablyde\fnedintermediaterepresentation,acompilerforlanguageiandmachinejcanthenbebuiltbycombiningthefrontendforlanguageiwiththebackendformachinej.Thisapproachtocreatingsuiteofcompilerscansaveaconsiderableamountofe\u000bort:m\u0002ncompilerscanbebuiltbywritingjustmfrontendsandnbackends.Thischapterdealswithintermediaterepresentations,statictypechecking,andintermediatecodegeneration.Forsimplicity,weassumethatacom-pilerfrontendisorganizedasinFig.6.1,whereparsing,staticchecking,andintermediate-codegenerationaredonesequentially;sometimestheycanbecom-binedandfoldedintoparsing.Weshallusethesyntax-directedformalismsofChapters2and5tospecifycheckingandtranslation.Manyofthetranslationschemescanbeimplementedduringeitherbottom-uportop-downparsing,us-ingthetechniquesofChapter5.Allschemescanbeimplementedbycreatingasyntaxtreeandthenwalkingthetree.CodecodeintermediateGeneratorCodeIntermediateCheckerStaticGeneratorParserfrontendbackendFigure6.1:LogicalstructureofacompilerfrontendStaticcheckingincludestypechecking,whichensuresthatoperatorsareap-pliedtocompatibleoperands.Italsoincludesanysyntacticchecksthatremain357358CHAPTER6.INTERMEDIATE-CODEGENERATIONafterparsing.Forexample,staticcheckingassuresthatabreak-statementinCisenclosedwithinawhile-,for-,orswitch-statement;anerrorisreportedifsuchanenclosingstatementdoesnotexist.Theapproachinthischaptercanbeusedforawiderangeofintermediaterepresentations,includingsyntaxtreesandthree-addresscode,bothofwhichwereintroducedinSection2.8.Theterm\\three-addresscode\"comesfrominstructionsofthegeneralformx=yopzwiththreeaddresses:twofortheoperandsyandzandonefortheresultx.Intheprocessoftranslatingaprograminagivensourcelanguageintocodeforagiventargetmachine,acompilermayconstructasequenceofintermediaterepresentations,asinFig.6.2.High-levelrepresentationsareclosetothesourcelanguageandlow-levelrepresentationsareclosetothetargetmachine.Syntaxtreesarehighlevel;theydepictthenaturalhierarchicalstructureofthesourceprogramandarewellsuitedtotaskslikestatictypechecking.CodeTargetRepresentationIntermediateLowLevel\u0001\u0001\u0001RepresentationIntermediateHighLevelProgramSourceFigure6.2:AcompilermightuseasequenceofintermediaterepresentationsAlow-levelrepresentationissuitableformachine-dependenttaskslikereg-isterallocationandinstructionselection.Three-addresscodecanrangefromhigh-tolow-level,dependingonthechoiceofoperators.Forexpressions,thedi\u000berencesbetweensyntaxtreesandthree-addresscodearesuper\fcial,asweshallseeinSection6.2.3.Forloopingstatements,forexample,asyntaxtreerepresentsthecomponentsofastatement,whereasthree-addresscodecontainslabelsandjumpinstructionstorepresentthe\rowofcontrol,asinmachinelanguage.Thechoiceordesignofanintermediaterepresentationvariesfromcompilertocompiler.Anintermediaterepresentationmayeitherbeanactuallanguageoritmayconsistofinternaldatastructuresthataresharedbyphasesofthecompiler.Cisaprogramminglanguage,yetitisoftenusedasanintermediateformbecauseitis\rexible,itcompilesintoe\u000ecientmachinecode,anditscom-pilersarewidelyavailable.TheoriginalC++compilerconsistedofafrontendthatgeneratedC,treatingaCcompilerasabackend.6.1VariantsofSyntaxTreesNodesinasyntaxtreerepresentconstructsinthesourceprogram;thechildrenofanoderepresentthemeaningfulcomponentsofaconstruct.Adirectedacyclicgraph(hereaftercalledaDAG)foranexpressionidenti\festhecommonsubexpressions(subexpressionsthatoccurmorethanonce)oftheexpression.Asweshallseeinthissection,DAG'scanbeconstructedbyusingthesametechniquesthatconstructsyntaxtrees.6.1.VARIANTSOFSYNTAXTREES3596.1.1DirectedAcyclicGraphsforExpressionsLikethesyntaxtreeforanexpression,aDAGhasleavescorrespondingtoatomicoperandsandinteriornodescorrespondingtooperators.Thedi\u000berenceisthatanodeNinaDAGhasmorethanoneparentifNrepresentsacom-monsubexpression;inasyntaxtree,thetreeforthecommonsubexpressionwouldbereplicatedasmanytimesasthesubexpressionappearsintheoriginalexpression.Thus,aDAGnotonlyrepresentsexpressionsmoresuccinctly,itgivesthecompilerimportantcluesregardingthegenerationofe\u000ecientcodetoevaluatetheexpressions.Example6.1:Figure6.3showstheDAGfortheexpressiona+a*(b-c)+(b-c)*dTheleafforahastwoparents,becauseaappearstwiceintheexpression.Moreinterestingly,thetwooccurrencesofthecommonsubexpressionb-carerepresentedbyonenode,thenodelabeled\u0000.Thatnodehastwoparents,representingitstwousesinthesubexpressionsa*(b-c)and(b-c)*d.Eventhoughbandcappeartwiceinthecompleteexpression,theirnodeseachhaveoneparent,sincebothusesareinthecommonsubexpressionb-c.2d\u0003cb+\u0000a\u0003+Figure6.3:Dagfortheexpressiona+a*(b-c)+(b-c)*dTheSDDofFig.6.4canconstructeithersyntaxtreesorDAG's.ItwasusedtoconstructsyntaxtreesinExample5.11,wherefunctionsLeafandNodecreatedafreshnodeeachtimetheywerecalled.ItwillconstructaDAGif,beforecreatinganewnode,thesefunctions\frstcheckwhetheranidenticalnodealreadyexists.Ifapreviouslycreatedidenticalnodeexists,theexistingnodeisreturned.Forinstance,beforeconstructinganewnode,Node(op;left;right),wecheckwhetherthereisalreadyanodewithlabelop,andchildrenleftandright,inthatorder.Ifso,Nodereturnstheexistingnode;otherwise,itcreatesanewnode.Example6.2:ThesequenceofstepsshowninFig.6.5constructstheDAGinFig.6.3,providedNodeandLeafreturnanexistingnode,ifpossible,as360CHAPTER6.INTERMEDIATE-CODEGENERATION6.1.VARIANTSOFSYNTAXTREES361interiornodeshavetwoadditional\feldsindicatingtheleftandrightchildren.1=421+335\u0001\u0001\u000110toentryfori(a)DAG(b)Array.id12num=+i10Figure6.6:NodesofaDAGfori=i+10allocatedinanarrayInthisarray,werefertonodesbygivingtheintegerindexoftherecordforthatnodewithinthearray.Thisintegerhistoricallyhasbeencalledthevaluenumberforthenodeorfortheexpressionrepresentedbythenode.Forinstance,inFig.6.6,thenodelabeled+hasvaluenumber3,anditsleftandrightchildrenhavevaluenumbers1and2,respectively.Inpractice,wecouldusepointerstorecordsorreferencestoobjectsinsteadofintegerindexes,butweshallstillrefertothereferencetoanodeasits\\valuenumber.\"Ifstoredinanappropriatedatastructure,valuenumbershelpusconstructexpressionDAG'se\u000eciently;thenextalgorithmshowshow.Supposethatnodesarestoredinanarray,asinFig.6.6,andeachnodeisreferredtobyitsvaluenumber.Letthesignatureofaninteriornodebethetriplehop;l;ri,whereopisthelabel,litsleftchild'svaluenumber,andritsrightchild'svaluenumber.Aunaryoperatormaybeassumedtohaver=0.Algorithm6.3:Thevalue-numbermethodforconstructingthenodesofaDAG.INPUT:Labelop,nodel,andnoder.OUTPUT:Thevaluenumberofanodeinthearraywithsignaturehop;l;ri.METHOD:SearchthearrayforanodeMwithlabelop,leftchildl,andrightchildr.Ifthereissuchanode,returnthevaluenumberofM.Ifnot,createinthearrayanewnodeNwithlabelop,leftchildl,andrightchildr,andreturnitsvaluenumber.2WhileAlgorithm6.3yieldsthedesiredoutput,searchingtheentirearrayeverytimeweareaskedtolocateonenodeisexpensive,especiallyifthearrayholdsexpressionsfromanentireprogram.Amoree\u000ecientapproachistouseahashtable,inwhichthenodesareputinto\\buckets,\"eachofwhichtypicallywillhaveonlyafewnodes.Thehashtableisoneofseveraldatastructuresthatsupportdictionariese\u000eciently.1Adictionaryisanabstractdatatypethat362CHAPTER6.INTERMEDIATE-CODEGENERATIONallowsustoinsertanddeleteelementsofaset,andtodeterminewhetheragivenelementiscurrentlyintheset.Agooddatastructurefordictionaries,suchasahashtable,performseachoftheseoperationsintimethatisconstantorclosetoconstant,independentofthesizeoftheset.ToconstructahashtableforthenodesofaDAG,weneedahashfunctionhthatcomputestheindexofthebucketforasignaturehop;l;ri,inawaythatdistributesthesignaturesacrossbuckets,sothatitisunlikelythatanyonebucketwillgetmuchmorethanafairshareofthenodes.Thebucketindexh(op;l;r)iscomputeddeterministicallyfromop,l,andr,sothatwemayrepeatthecalculationandalwaysgettothesamebucketindexfornodehop;l;ri.Thebucketscanbeimplementedaslinkedlists,asinFig.6.7.Anarray,indexedbyhashvalue,holdsthebucketheaders,eachofwhichpointstothe\frstcellofalist.Withinthelinkedlistforabucket,eachcellholdsthevaluenumberofoneofthenodesthathashtothatbucket.Thatis,nodehop;l;ricanbefoundonthelistwhoseheaderisatindexh(op;l;r)ofthearray.0\u0001\u0001\u00019253\u0001\u0001\u0001202\u0001\u0001\u0001ListelementsrepresentingnodesArrayofbucketheadersindexedbyhashvalueFigure6.7:DatastructureforsearchingbucketsThus,giventheinputnodeop,l,andr,wecomputethebucketindexh(op;l;r)andsearchthelistofcellsinthisbucketforthegiveninputnode.Typically,thereareenoughbucketssothatnolisthasmorethanafewcells.Wemayneedtolookatallthecellswithinabucket,however,andforeachvaluenumbervfoundinacell,wemustcheckwhetherthesignaturehop;l;rioftheinputnodematchesthenodewithvaluenumbervinthelistofcells(asinFig.6.7).Ifwe\fndamatch,wereturnv.Ifwe\fndnomatch,weknownosuchnodecanexistinanyotherbucket,sowecreateanewcell,addittothelistofcellsforbucketindexh(op;l;r),andreturnthevaluenumberinthatnewcell.6.1.3ExercisesforSection6.1Exercise6.1.1:ConstructtheDAGfortheexpression((x+y)\u0000((x+y)\u0003(x\u0000y)))+((x+y)\u0003(x\u0000y))6.2.THREE-ADDRESSCODE363Exercise6.1.2:ConstructtheDAGandidentifythevaluenumbersforthesubexpressionsofthefollowingexpressions,assuming+associatesfromtheleft.a)a+b+(a+b).b)a+b+a+b.c)a+a+\u0000a+a+a+(a+a+a+a)\u0001.6.2Three-AddressCodeInthree-addresscode,thereisatmostoneoperatorontherightsideofaninstruction;thatis,nobuilt-uparithmeticexpressionsarepermitted.Thusasource-languageexpressionlikex+y*zmightbetranslatedintothesequenceofthree-addressinstructionst1=y*zt2=x+t1wheret1andt2arecompiler-generatedtemporarynames.Thisunravelingofmulti-operatorarithmeticexpressionsandofnested\row-of-controlstatementsmakesthree-addresscodedesirablefortarget-codegenerationandoptimization,asdiscussedinChapters8and9.Theuseofnamesfortheintermediatevaluescomputedbyaprogramallowsthree-addresscodetoberearrangedeasily.Example6.4:Three-addresscodeisalinearizedrepresentationofasyntaxtreeoraDAGinwhichexplicitnamescorrespondtotheinteriornodesofthegraph.TheDAGinFig.6.3isrepeatedinFig.6.8,togetherwithacorrespond-ingthree-addresscodesequence.2a+t2=t3t2a*t1==t4=t1*dt5t3+t4(a)DAG(b)Three-addresscodeb-c=t1d\u0003cb\u0000\u0003++aFigure6.8:ADAGanditscorrespondingthree-addresscode364CHAPTER6.INTERMEDIATE-CODEGENERATION6.2.1AddressesandInstructionsThree-addresscodeisbuiltfromtwoconcepts:addressesandinstructions.Inobject-orientedterms,theseconceptscorrespondtoclasses,andthevariouskindsofaddressesandinstructionscorrespondtoappropriatesubclasses.Al-ternatively,three-addresscodecanbeimplementedusingrecordswith\feldsfortheaddresses;recordscalledquadruplesandtriplesarediscussedbrie\ryinSection6.2.2.Anaddresscanbeoneofthefollowing:\u000fAname.Forconvenience,weallowsource-programnamestoappearasaddressesinthree-addresscode.Inanimplementation,asourcenameisreplacedbyapointertoitssymbol-tableentry,whereallinformationaboutthenameiskept.\u000fAconstant.Inpractice,acompilermustdealwithmanydi\u000berenttypesofconstantsandvariables.Typeconversionswithinexpressionsarecon-sideredinSection6.5.2.\u000fAcompiler-generatedtemporary.Itisuseful,especiallyinoptimizingcom-pilers,tocreateadistinctnameeachtimeatemporaryisneeded.Thesetemporariescanbecombined,ifpossible,whenregistersareallocatedtovariables.Wenowconsiderthecommonthree-addressinstructionsusedintherestofthisbook.Symboliclabelswillbeusedbyinstructionsthatalterthe\rowofcontrol.Asymboliclabelrepresentstheindexofathree-addressinstructioninthesequenceofinstructions.Actualindexescanbesubstitutedforthelabels,eitherbymakingaseparatepassorby\\backpatching,\"discussedinSection6.7.Hereisalistofthecommonthree-addressinstructionforms:1.Assignmentinstructionsoftheformx=yopz,whereopisabinaryarithmeticorlogicaloperation,andx,y,andzareaddresses.2.Assignmentsoftheformx=opy,whereopisaunaryoperation.Essentialunaryoperationsincludeunaryminus,logicalnegation,andconversionoperatorsthat,forexample,convertanintegertoa\roating-pointnumber.3.Copyinstructionsoftheformx=y,wherexisassignedthevalueofy.4.AnunconditionaljumpgotoL.Thethree-addressinstructionwithlabelListhenexttobeexecuted.5.ConditionaljumpsoftheformifxgotoLandifFalsexgotoL.TheseinstructionsexecutetheinstructionwithlabelLnextifxistrueandfalse,respectively.Otherwise,thefollowingthree-addressinstructioninsequenceisexecutednext,asusual.6.2.THREE-ADDRESSCODE3656.ConditionaljumpssuchasifxrelopygotoL,whichapplyarelationaloperator(<,==,>=,etc.)toxandy,andexecutetheinstructionwithlabelLnextifxstandsinrelationreloptoy.Ifnot,thethree-addressinstructionfollowingifxrelopygotoLisexecutednext,insequence.7.Procedurecallsandreturnsareimplementedusingthefollowinginstruc-tions:paramxforparameters;callp,nandy=callp,nforprocedureandfunctioncalls,respectively;andreturny,wherey,representingareturnedvalue,isoptional.Theirtypicaluseisasthesequenceofthree-addressinstructionsparamx1paramx2\u0001\u0001\u0001paramxncallp,ngeneratedaspartofacalloftheprocedurep(x1;x2;:::;xn).Thein-tegern,indicatingthenumberofactualparametersin\\callp,n,\"isnotredundantbecausecallscanbenested.Thatis,someofthe\frstparamstatementscouldbeparametersofacallthatcomesafterpreturnsitsvalue;thatvaluebecomesanotherparameterofthelatercall.TheimplementationofprocedurecallsisoutlinedinSection6.9.8.Indexedcopyinstructionsoftheformx=y[i]andx[i]=y.Theinstruc-tionx=y[i]setsxtothevalueinthelocationimemoryunitsbeyondlocationy.Theinstructionx[i]=ysetsthecontentsofthelocationiunitsbeyondxtothevalueofy.9.Addressandpointerassignmentsoftheformx=&y,x=*y,and*x=y.Theinstructionx=&ysetsther-valueofxtobethelocation(l-value)ofy.2Presumablyyisaname,perhapsatemporary,thatdenotesanexpressionwithanl-valuesuchasA[i][j],andxisapointernameortemporary.Intheinstructionx=*y,presumablyyisapointeroratemporarywhoser-valueisalocation.Ther-valueofxismadeequaltothecontentsofthatlocation.Finally,*x=ysetsther-valueoftheobjectpointedtobyxtother-valueofy.Example6.5:Considerthestatementdoi=i+1;while(a[i]<v);TwopossibletranslationsofthisstatementareshowninFig.6.9.Thetrans-lationinFig.6.9(a)usesasymboliclabelL,attachedtothe\frstinstruction.366CHAPTER6.INTERMEDIATE-CODEGENERATIONThetranslationin(b)showspositionnumbersfortheinstructions,startingarbitrarilyatposition100.Inbothtranslations,thelastinstructionisacondi-tionaljumptothe\frstinstruction.Themultiplicationi*8isappropriateforanarrayofelementsthateachtake8unitsofspace.2L:t1=i+16.2.THREE-ADDRESSCODE367unaryminusoperator,asin-c,fromthebinaryminusoperator,asinb-c.Notethattheunary-minus\\three-address\"statementhasonlytwoaddresses,asdoesthecopystatementa=t5.ThequadruplesinFig.6.10(b)implementthethree-addresscodein(a).2t2+4t4t3b*3t3cminus2t2t1b*t4(b)Quadruples(a)Three-addresscoderesultarg2arg1op\u0001\u0001\u0001at5=5t51t2minusc=t1=t1cminus0t5=at2+t4=t5b*t3=t4minusc=t3b*t1Figure6.10:Three-addresscodeanditsquadruplerepresentationForreadability,weuseactualidenti\ferslikea,b,andcinthe\feldsarg1,arg2,andresultinFig.6.10(b),insteadofpointerstotheirsymbol-tableentries.Temporarynamescaneitherbyenteredintothesymboltablelikeprogrammer-de\fnednames,ortheycanbeimplementedasobjectsofaclassTempwithitsownmethods.6.2.3TriplesAtriplehasonlythree\felds,whichwecallop,arg1,andarg2.Notethattheresult\feldinFig.6.10(b)isusedprimarilyfortemporarynames.Usingtriples,werefertotheresultofanoperationxopybyitsposition,ratherthanbyanexplicittemporaryname.Thus,insteadofthetemporaryt1inFig.6.10(b),atriplerepresentationwouldrefertoposition(0).Parenthesizednumbersrepresentpointersintothetriplestructureitself.InSection6.1.2,positionsorpointerstopositionswerecalledvaluenumbers.TriplesareequivalenttosignaturesinAlgorithm6.3.Hence,theDAGandtriplerepresentationsofexpressionsareequivalent.Theequivalenceendswithexpressions,sincesyntax-treevariantsandthree-addresscoderepresentcontrol\rowquitedi\u000berently.Example6.7:ThesyntaxtreeandtriplesinFig.6.11correspondtothethree-addresscodeandquadruplesinFig.6.10.InthetriplerepresentationinFig.6.11(b),thecopystatementa=t5isencodedinthetriplerepresentationbyplacingainthearg1\feldand(4)inthearg2\feld.2Aternaryoperationlikex[i]=yrequirestwoentriesinthetriplestructure;forexample,wecanputxandiinonetripleandyinthenext.Similarly,x=y[i]canimplementedbytreatingitasifitwerethetwoinstructions368CHAPTER6.INTERMEDIATE-CODEGENERATION6.2.THREE-ADDRESSCODE369b*3cminus2(0)b*1cminus0instruction(2)arg2arg1op\u0001\u0001\u0001(4)a=5(3)(1)+4\u0001\u0001\u0001(5)40(4)39(3)38(2)37(1)36(0)35Figure6.12:Indirecttriplesrepresentationofthree-addresscode6.2.4StaticSingle-AssignmentFormStaticsingle-assignmentform(SSA)isanintermediaterepresentationthatfa-cilitatescertaincodeoptimizations.TwodistinctiveaspectsdistinguishSSAfromthree-addresscode.The\frstisthatallassignmentsinSSAaretovari-ableswithdistinctnames;hencethetermstaticsingle-assigment.Figure6.13showsthesameintermediateprograminthree-addresscodeandinstaticsingle-assignmentform.Notethatsubscriptsdistinguisheachde\fnitionofvariablespandqintheSSArepresentation.p=a+bp1=a+bq=p-cq1=p1-cp=q*dp2=q1*dp=e-pp3=e-p2q=p+qq2=p3+q1(a)Three-addresscode.(b)Staticsingle-assignmentform.Figure6.13:Intermediateprograminthree-addresscodeandSSAThesamevariablemaybede\fnedintwodi\u000berentcontrol-\rowpathsinaprogram.Forexample,thesourceprogramif(flag)x=-1;elsex=1;y=x*a;hastwocontrol-\rowpathsinwhichthevariablexgetsde\fned.Ifweusedi\u000berentnamesforxinthetruepartandthefalsepartoftheconditionalstatement,thenwhichnameshouldweuseintheassignmenty=x*a?HereiswheretheseconddistinctiveaspectofSSAcomesintoplay.SSAusesanotationalconventioncalledthe˚-functiontocombinethetwode\fnitionsofx:if(flag)x1=-1;elsex2=1;x3=˚(x1;x2);370CHAPTER6.INTERMEDIATE-CODEGENERATIONHere,˚(x1;x2)hasthevaluex1ifthecontrol\rowpassesthroughthetruepartoftheconditionalandthevaluex2ifthecontrol\rowpassesthroughthefalsepart.Thatistosay,the˚-functionreturnsthevalueofitsargumentthatcorrespondstothecontrol-\rowpaththatwastakentogettotheassignment-statementcontainingthe˚-function.6.2.5ExercisesforSection6.2Exercise6.2.1:Translatethearithmeticexpressiona+\u0000(b+c)into:a)Asyntaxtree.b)Quadruples.c)Triples.d)Indirecttriples.Exercise6.2.2:RepeatExercise6.2.1forthefollowingassignmentstate-ments:i.a=b[i]+c[j].ii.a[i]=b*c-b*d.iii.x=f(y+1)+2.iv.x=*p+&y.!Exercise6.2.3:Showhowtotransformathree-addresscodesequenceintooneinwhicheachde\fnedvariablegetsauniquevariablename.6.3TypesandDeclarationsTheapplicationsoftypescanbegroupedundercheckingandtranslation:\u000fTypecheckinguseslogicalrulestoreasonaboutthebehaviorofaprogramatruntime.Speci\fcally,itensuresthatthetypesoftheoperandsmatchthetypeexpectedbyanoperator.Forexample,the&&operatorinJavaexpectsitstwooperandstobebooleans;theresultisalsooftypeboolean.\u000fTranslationApplications.Fromthetypeofaname,acompilercande-terminethestoragethatwillbeneededforthatnameatruntime.Typeinformationisalsoneededtocalculatetheaddressdenotedbyanarrayreference,toinsertexplicittypeconversions,andtochoosetherightver-sionofanarithmeticoperator,amongotherthings.6.3.TYPESANDDECLARATIONS371Inthissection,weexaminetypesandstoragelayoutfornamesdeclaredwithinaprocedureoraclass.Theactualstorageforaprocedurecalloranobjectisallocatedatruntime,whentheprocedureiscalledortheobjectiscreated.Asweexaminelocaldeclarationsatcompiletime,wecan,however,layoutrelativeaddresses,wheretherelativeaddressofanameoracomponentofadatastructureisano\u000bsetfromthestartofadataarea.6.3.1TypeExpressionsTypeshavestructure,whichweshallrepresentusingtypeexpressions:atypeexpressioniseitherabasictypeorisformedbyapplyinganoperatorcalledatypeconstructortoatypeexpression.Thesetsofbasictypesandconstructorsdependonthelanguagetobechecked.Example6.8:Thearraytypeint[2][3]canbereadas\\arrayof2arraysof3integerseach\"andwrittenasatypeexpressionarray(2;array(3;integer)).ThistypeisrepresentedbythetreeinFig.6.14.Theoperatorarraytakestwoparameters,anumberandatype.2array2array3integerFigure6.14:Typeexpressionforint[2][3]Weshallusethefollowingde\fnitionoftypeexpressions:\u000fAbasictypeisatypeexpression.Typicalbasictypesforalanguageincludeboolean,char,integer,\roat,andvoid;thelatterdenotes\\theabsenceofavalue.\"\u000fAtypenameisatypeexpression.\u000fAtypeexpressioncanbeformedbyapplyingthearraytypeconstructortoanumberandatypeexpression.\u000fArecordisadatastructurewithnamed\felds.Atypeexpressioncanbeformedbyapplyingtherecordtypeconstructortothe\feldnamesandtheirtypes.RecordtypeswillbeimplementedinSection6.3.6byapplyingtheconstructorrecordtoasymboltablecontainingentriesforthe\felds.\u000fAtypeexpressioncanbeformedbyusingthetypeconstructor!forfunc-tiontypes.Wewrites!tfor\\functionfromtypestotypet.\"FunctiontypeswillbeusefulwhentypecheckingisdiscussedinSection6.5.372CHAPTER6.INTERMEDIATE-CODEGENERATION6.3.TYPESANDDECLARATIONS373Whentypeexpressionsarerepresentedbygraphs,twotypesarestructurallyequivalentifandonlyifoneofthefollowingconditionsistrue:\u000fTheyarethesamebasictype.\u000fTheyareformedbyapplyingthesameconstructortostructurallyequiv-alenttypes.\u000fOneisatypenamethatdenotestheother.Iftypenamesaretreatedasstandingforthemselves,thenthe\frsttwocondi-tionsintheabovede\fnitionleadtonameequivalenceoftypeexpressions.Name-equivalentexpressionsareassignedthesamevaluenumber,ifweuseAlgorithm6.3.Structuralequivalencecanbetestedusingtheuni\fcationalgo-rithminSection6.5.5.6.3.3DeclarationsWeshallstudytypesanddeclarationsusingasimpli\fedgrammarthatdeclaresjustonenameatatime;declarationswithlistsofnamescanbehandledasdiscussedinExample5.10.ThegrammarisD!Tid;Dj\u000fT!BCjrecord0{0D0}0B!intj\roatC!\u000fj[num]CThefragmentoftheabovegrammarthatdealswithbasicandarraytypeswasusedtoillustrateinheritedattributesinSection5.3.2.Thedi\u000berenceinthissectionisthatweconsiderstoragelayoutaswellastypes.NonterminalDgeneratesasequenceofdeclarations.NonterminalTgen-eratesbasic,array,orrecordtypes.NonterminalBgeneratesoneofthebasictypesintand\roat.NonterminalC,for\\component,\"generatesstringsofzeroormoreintegers,eachintegersurroundedbybrackets.Anarraytypecon-sistsofabasictypespeci\fedbyB,followedbyarraycomponentsspeci\fedbynonterminalC.Arecordtype(thesecondproductionforT)isasequenceofdeclarationsforthe\feldsoftherecord,allsurroundedbycurlybraces.6.3.4StorageLayoutforLocalNamesFromthetypeofaname,wecandeterminetheamountofstoragethatwillbeneededforthenameatruntime.Atcompiletime,wecanusetheseamountstoassigneachnamearelativeaddress.Thetypeandrelativeaddressaresavedinthesymbol-tableentryforthename.Dataofvaryinglength,suchasstrings,ordatawhosesizecannotbedetermineduntilruntime,suchasdynamicarrays,ishandledbyreservingaknown\fxedamountofstorageforapointertothedata.Run-timestoragemanagementisdiscussedinChapter7.374CHAPTER6.INTERMEDIATE-CODEGENERATION6.3.TYPESANDDECLARATIONS375T!Bft=B:type;w=B:width;gCfT:type=C:type;T:width=C:width;gB!intfB:type=integer;B:width=4;gB!\roatfB:type=\roat;B:width=8;gC!\u000ffC:type=t;C:width=w;gC![num]C1fC:type=array(num:value;C1:type);C:width=num:value\u0002C1:width;gFigure6.15:ComputingtypesandtheirwidthsThewidthofanarrayisobtainedbymultiplyingthewidthofanelementbythenumberofelementsinthearray.Ifaddressesofconsecutiveintegersdi\u000berby4,thenaddresscalculationsforanarrayofintegerswillincludemultiplicationsby4.Suchmultiplicationsprovideopportunitiesforoptimization,soitishelpfulforthefrontendtomakethemexplicit.Inthischapter,weignoreothermachinedependenciessuchasthealignmentofdataobjectsonwordboundaries.Example6.9:Theparsetreeforthetypeint[2][3]isshownbydottedlinesinFig.6.16.ThesolidlinesshowhowthetypeandwidtharepassedfromB,downthechainofC'sthroughvariablestandw,andthenbackupthechainassynthesizedattributestypeandwidth.ThevariablestandwareassignedthevaluesofB:typeandB:width,respectively,beforethesubtreewiththeCnodesisexamined.ThevaluesoftandwareusedatthenodeforC!\u000ftostarttheevaluationofthesynthesizedattributesupthechainofCnodes.2array(3;integer)type=12width=typeinteger=4=widtharray(2;array(3;integer))=width24=typearray(2;array(3;integer))=width24=type4TBintC[2]C[3]C\u000f=width=typeinteger=w4=tintegerFigure6.16:Syntax-directedtranslationofarraytypes376CHAPTER6.INTERMEDIATE-CODEGENERATION6.3.5SequencesofDeclarationsLanguagessuchasCandJavaallowallthedeclarationsinasingleproceduretobeprocessedasagroup.ThedeclarationsmaybedistributedwithinaJavaprocedure,buttheycanstillbeprocessedwhentheprocedureisanalyzed.Therefore,wecanuseavariable,sayo\u000bset,tokeeptrackofthenextavailablerelativeaddress.ThetranslationschemeofFig.6.17dealswithasequenceofdeclarationsoftheformTid,whereTgeneratesatypeasinFig.6.15.Beforethe\frstdeclarationisconsidered,o\u000bsetissetto0.Aseachnewnamexisseen,xisenteredintothesymboltablewithitsrelativeaddresssettothecurrentvalueofo\u000bset,whichisthenincrementedbythewidthofthetypeofx.P!fo\u000bset=0;gDD!Tid;ftop:put(id:lexeme;T:type;o\u000bset);o\u000bset=o\u000bset+T:width;gD1D!\u000fFigure6.17:ComputingtherelativeaddressesofdeclarednamesThesemanticactionwithintheproductionD!Tid;D1createsasymbol-tableentrybyexecutingtop:put(id:lexeme;T:type;o\u000bset).Heretopdenotesthecurrentsymboltable.Themethodtop:putcreatesasymbol-tableentryforid:lexeme,withtypeT:typeandrelativeaddresso\u000bsetinitsdataarea.Theinitializationofo\u000bsetinFig.6.17ismoreevidentifthe\frstproductionappearsononelineas:P!fo\u000bset=0;gD(6.1)Nonterminalsgenerating\u000f,calledmarkernonterminals,canbeusedtorewriteproductionssothatallactionsappearattheendsofrightsides;seeSec-tion5.5.4.UsingamarkernonterminalM,(6.1)canberestatedas:P!MDM!\u000ffo\u000bset=0;g6.3.6FieldsinRecordsandClassesThetranslationofdeclarationsinFig.6.17carriesoverto\feldsinrecordsandclasses.RecordtypescanbeaddedtothegrammarinFig.6.15byaddingthefollowingproductionT!record0{0D0}06.3.TYPESANDDECLARATIONS377The\feldsinthisrecordtypearespeci\fedbythesequenceofdeclarationsgeneratedbyD.TheapproachofFig.6.17canbeusedtodeterminethetypesandrelativeaddressesof\felds,providedwearecarefulabouttwothings:\u000fThe\feldnameswithinarecordmustbedistinct;thatis,anamemayappearatmostonceinthedeclarationsgeneratedbyD.\u000fTheo\u000bsetorrelativeaddressfora\feldnameisrelativetothedataareaforthatrecord.Example6.10:Theuseofanamexfora\feldwithinarecorddoesnotcon\rictwithotherusesofthenameoutsidetherecord.Thus,thethreeusesofxinthefollowingdeclarationsaredistinctanddonotcon\rictwitheachother:floatx;record{floatx;floaty;}p;record{inttag;floatx;floaty;}q;Asubsequentassignmentx=p.x+q.x;setsvariablextothesumofthe\feldsnamedxintherecordspandq.Notethattherelativeaddressofxinpdi\u000bersfromtherelativeaddressofxinq.2Forconvenience,recordtypeswillencodeboththetypesandrelativead-dressesoftheir\felds,usingasymboltablefortherecordtype.Arecordtypehastheformrecord(t),whererecordisthetypeconstructor,andtisasymbol-tableobjectthatholdsinformationaboutthe\feldsofthisrecordtype.ThetranslationschemeinFig.6.18consistsofasingleproductiontobeaddedtotheproductionsforTinFig.6.15.Thisproductionhastwosemanticactions.TheembeddedactionbeforeDsavestheexistingsymboltable,denotedbytopandsetstoptoafreshsymboltable.Italsosavesthecurrento\u000bset,andsetso\u000bsetto0.ThedeclarationsgeneratedbyDwillresultintypesandrelativeaddressesbeingputinthefreshsymboltable.TheactionafterDcreatesarecordtypeusingtop,beforerestoringthesavedsymboltableando\u000bset.T!record0{0fEnv:push(top);top=newEnv();Stack:push(o\u000bset);o\u000bset=0;gD0}0fT:type=record(top);T:width=o\u000bset;top=Env:pop();o\u000bset=Stack:pop();gFigure6.18:Handlingof\feldnamesinrecordsForconcreteness,theactionsinFig.6.18givepseudocodeforaspeci\fcim-plementation.LetclassEnvimplementsymboltables.ThecallEnv:push(top)pushesthecurrentsymboltabledenotedbytopontoastack.Variabletopisthensettoanewsymboltable.Similarly,o\u000bsetispushedontoastackcalledStack.Variableo\u000bsetisthensetto0.378CHAPTER6.INTERMEDIATE-CODEGENERATIONAfterthedeclarationsinDhavebeentranslated,thesymboltabletopholdsthetypesandrelativeaddressesofthe\feldsinthisrecord.Further,o\u000bsetgivesthestorageneededforallthe\felds.ThesecondactionsetsT:typetorecord(top)andT:widthtoo\u000bset.Variablestopando\u000bsetarethenrestoredtotheirpushedvaluestocompletethetranslationofthisrecordtype.Thisdiscussionofstorageforrecordtypescarriesovertoclasses,sincenostorageisreservedformethods.SeeExercise6.3.2.6.3.7ExercisesforSection6.3Exercise6.3.1:Determinethetypesandrelativeaddressesfortheidenti\fersinthefollowingsequenceofdeclarations:floatx;record{floatx;floaty;}p;record{inttag;floatx;floaty;}q;!Exercise6.3.2:Extendthehandlingof\feldnamesinFig.6.18toclassesandsingle-inheritanceclasshierarchies.a)GiveanimplementationofclassEnvthatallowslinkedsymboltables,sothatasubclasscaneitherrede\fnea\feldnameorreferdirectlytoa\feldnameinasuperclass.b)Giveatranslationschemethatallocatesacontiguousdataareaforthe\feldsinaclass,includinginherited\felds.Inherited\feldsmustmaintaintherelativeaddressestheywereassignedinthelayoutforthesuperclass.6.4TranslationofExpressionsTherestofthischapterexploresissuesthatariseduringthetranslationofex-pressionsandstatements.Webegininthissectionwiththetranslationofex-pressionsintothree-addresscode.Anexpressionwithmorethanoneoperator,likea+b\u0003c,willtranslateintoinstructionswithatmostoneoperatorperin-struction.AnarrayreferenceA[i][j]willexpandintoasequenceofthree-addressinstructionsthatcalculateanaddressforthereference.WeshallconsidertypecheckingofexpressionsinSection6.5andtheuseofbooleanexpressionstodirectthe\rowofcontrolthroughaprograminSection6.6.6.4.1OperationsWithinExpressionsThesyntax-directedde\fnitioninFig.6.19buildsupthethree-addresscodeforanassignmentstatementSusingattributecodeforSandattributesaddrandcodeforanexpressionE.AttributesS:codeandE:codedenotethethree-addresscodeforSandE,respectively.AttributeE:addrdenotestheaddressthatwill6.4.TRANSLATIONOFEXPRESSIONS379380CHAPTER6.INTERMEDIATE-CODEGENERATIONbyapplyinggentoacombinationofexpressionsandstrings.WhenwetranslatetheproductionE!E1+E2,thesemanticrulesinFig.6.19buildupE:codebyconcatenatingE1:code,E2:code,andaninstruc-tionthataddsthevaluesofE1andE2.TheinstructionputstheresultoftheadditionintoanewtemporarynameforE,denotedbyE:addr.ThetranslationofE!-E1issimilar.TherulescreateanewtemporaryforEandgenerateaninstructiontoperformtheunaryminusoperation.Finally,theproductionS!id=E;generatesinstructionsthatassignthevalueofexpressionEtotheidenti\ferid.Thesemanticruleforthisproductionusesfunctiontop.gettodeterminetheaddressoftheidenti\ferrepresentedbyid,asintherulesforE!id.S:codeconsistsoftheinstructionstocomputethevalueofEintoanaddressgivenbyE:addr,followedbyanassignmenttotheaddresstop:get(id:lexeme)forthisinstanceofid.Example6.11:Thesyntax-directedde\fnitioninFig.6.19translatestheas-signmentstatementa=b+-c;intothethree-addresscodesequencet1=minusct2=b+t1a=t226.4.2IncrementalTranslationCodeattributescanbelongstrings,sotheyareusuallygeneratedincremen-tally,asdiscussedinSection5.5.2.Thus,insteadofbuildingupE:codeasinFig.6.19,wecanarrangetogenerateonlythenewthree-addressinstructions,asinthetranslationschemeofFig.6.20.Intheincrementalapproach,gennotonlyconstructsathree-addressinstruction,itappendstheinstructiontothesequenceofinstructionsgeneratedsofar.Thesequencemayeitherberetainedinmemoryforfurtherprocessing,oritmaybeoutputincrementally.ThetranslationschemeinFig.6.20generatesthesamecodeasthesyntax-directedde\fnitioninFig.6.19.Withtheincrementalapproach,thecodeat-tributeisnotused,sincethereisasinglesequenceofinstructionsthatiscreatedbysuccessivecallstogen.Forexample,thesemanticruleforE!E1+E2inFig.6.20simplycallsgentogenerateanaddinstruction;theinstructionstocomputeE1intoE1:addrandE2intoE2:addrhavealreadybeengenerated.TheapproachofFig.6.20canalsobeusedtobuildasyntaxtree.ThenewsemanticactionforE!E1+E2createsanodebyusingaconstructor,asinE!E1+E2fE:addr=newNode(0+0;E1:addr;E2:addr);gHere,attributeaddrrepresentstheaddressofanoderatherthanavariableorconstant.6.4.TRANSLATIONOFEXPRESSIONS381S!id=E;fgen(top:get(id:lexeme)0=0E:addr);gE!E1+E2fE:addr=newTemp();gen(E:addr0=0E1:addr0+0E2:addr);gj-E1fE:addr=newTemp();gen(E:addr0=00minus0E1:addr);gj(E1)fE:addr=E1:addr;gjidfE:addr=top:get(id:lexeme);gFigure6.20:Generatingthree-addresscodeforexpressionsincrementally6.4.3AddressingArrayElementsArrayelementscanbeaccessedquicklyiftheyarestoredinablockofconsecu-tivelocations.InCandJava,arrayelementsarenumbered0;1;:::;n\u00001,foranarraywithnelements.Ifthewidthofeacharrayelementisw,thentheithelementofarrayAbeginsinlocationbase+i\u0002w(6.2)wherebaseistherelativeaddressofthestorageallocatedforthearray.Thatis,baseistherelativeaddressofA[0].Theformula(6.2)generalizestotwoormoredimensions.Intwodimensions,letuswriteA[i1][i2],asinC,forelementi2inrowi1.Letw1bethewidthofarowandletw2bethewidthofanelementinarow.TherelativeaddressofA[i1][i2]canthenbecalculatedbytheformulabase+i1\u0002w1+i2\u0002w2(6.3)Inkdimensions,theformulaisbase+i1\u0002w1+i2\u0002w2+\u0001\u0001\u0001+ik\u0002wk(6.4)wherewj,for1\u0014j\u0014k,isthegeneralizationofw1andw2in(6.3).Alternatively,therelativeaddressofanarrayreferencecanbecalculatedintermsofthenumbersofelementsnjalongdimensionjofthearrayandthewidthw=wkofasingleelementofthearray.Intwodimensions(i.e.,k=2andw=w2),thelocationforA[i1][i2]isgivenbybase+(i1\u0002n2+i2)\u0002w(6.5)Inkdimensions,thefollowingformulacalculatesthesameaddressas(6.4):base+((\u0001\u0001\u0001((i1\u0002n2+i2)\u0002n3+i3)\u0001\u0001\u0001)\u0002nk+ik)\u0002w(6.6)382CHAPTER6.INTERMEDIATE-CODEGENERATIONMoregenerally,arrayelementsneednotbenumberedstartingat0.Inaone-dimensionalarray,thearrayelementsarenumberedlow;low+1;:::;highandbaseistherelativeaddressofA[low].Formula(6.2)fortheaddressofA[i]isreplacedby:base+(i\u0000low)\u0002w(6.7)Theexpressions(6.2)and(6.7)canbebothberewrittenasi\u0002w+c,wherethesubexpressionc=base\u0000low\u0002wcanbeprecalculatedatcompiletime.Notethatc=basewhenlowis0.WeassumethatcissavedinthesymboltableentryforA,sotherelativeaddressofA[i]isobtainedbysimplyaddingi\u0002wtoc.Compile-timeprecalculationcanalsobeappliedtoaddresscalculationsforelementsofmultidimensionalarrays;seeExercise6.4.5.However,thereisonesituationwherewecannotusecompile-timeprecalculation:whenthearray'ssizeisdynamic.Ifwedonotknowthevaluesoflowandhigh(ortheirgen-eralizationsinmanydimensions)atcompiletime,thenwecannotcomputeconstantssuchasc.Then,formulaslike(6.7)mustbeevaluatedastheyarewritten,whentheprogramexecutes.Theaboveaddresscalculationsarebasedonrow-majorlayoutforarrays,whichisusedinC,forexample.Atwo-dimensionalarrayisnormallystoredinoneoftwoforms,eitherrow-major(row-by-row)orcolumn-major(column-by-column).Figure6.21showsthelayoutofa2\u00023arrayAin(a)row-majorformand(b)column-majorform.Column-majorformisusedintheFortranfamilyoflanguages.A[2;3]A[2;2]A[2;1]A[1;3]A[1;2]A[1;1](b)ColumnMajorFirstrowSecondrowA[1;1]A[2;1]A[1;2]A[2;2]A[1;3]A[2;3]FirstcolumnSecondcolumnThirdcolumn(a)RowMajorFigure6.21:Layoutsforatwo-dimensionalarray.Wecangeneralizerow-orcolumn-majorformtomanydimensions.Thegeneralizationofrow-majorformistostoretheelementsinsuchawaythat,aswescandownablockofstorage,therightmostsubscriptsappeartovaryfastest,likethenumbersonanodometer.Column-majorformgeneralizestotheoppositearrangement,withtheleftmostsubscriptsvaryingfastest.6.4.TRANSLATIONOFEXPRESSIONS3836.4.4TranslationofArrayReferencesThechiefproblemingeneratingcodeforarrayreferencesistorelatetheaddress-calculationformulasinSection6.4.3toagrammarforarrayreferences.LetnonterminalLgenerateanarraynamefollowedbyasequenceofindexexpres-sions:L!L[E]jid[E]AsinCandJava,assumethatthelowest-numberedarrayelementis0.Letuscalculateaddressesbasedonwidths,usingtheformula(6.4),ratherthanonnumbersofelements,asin(6.6).ThetranslationschemeinFig.6.22generatesthree-addresscodeforexpressionswitharrayreferences.ItconsistsoftheproductionsandsemanticactionsfromFig.6.20,togetherwithproductionsinvolvingnonterminalL.S!id=E;fgen(top:get(id:lexeme)0=0E:addr);gjL=E;fgen(L:array:base0[0L:addr0]00=0E:addr);gE!E1+E2fE:addr=newTemp();gen(E:addr0=0E1:addr0+0E2:addr);gjidfE:addr=top:get(id:lexeme);gjLfE:addr=newTemp();gen(E:addr0=0L:array:base0[0L:addr0]0);gL!id[E]fL:array=top:get(id:lexeme);L:type=L:array:type:elem;L:addr=newTemp();gen(L:addr0=0E:addr0\u00030L:type:width);gjL1[E]fL:array=L1:array;L:type=L1:type:elem;t=newTemp();L:addr=newTemp();gen(t0=0E:addr0\u00030L:type:width);gen(L:addr0=0L1:addr0+0t);gFigure6.22:SemanticactionsforarrayreferencesNonterminalLhasthreesynthesizedattributes:1.L:addrdenotesatemporarythatisusedwhilecomputingtheo\u000bsetforthearrayreferencebysummingthetermsij\u0002wjin(6.4).384CHAPTER6.INTERMEDIATE-CODEGENERATION2.L:arrayisapointertothesymbol-tableentryforthearrayname.Thebaseaddressofthearray,say,L:array:baseisusedtodeterminetheactuall-valueofanarrayreferenceafteralltheindexexpressionsareanalyzed.3.L:typeisthetypeofthesubarraygeneratedbyL.Foranytypet,weassumethatitswidthisgivenbyt:width.Weusetypesasattributes,ratherthanwidths,sincetypesareneededanywayfortypechecking.Foranyarraytypet,supposethatt:elemgivestheelementtype.TheproductionS!id=E;representsanassignmenttoanonarrayvari-able,whichishandledasusual.ThesemanticactionforS!L=E;generatesanindexedcopyinstructiontoassignthevaluedenotedbyexpressionEtothelocationdenotedbythearrayreferenceL.RecallthatattributeL:arraygivesthesymbol-tableentryforthearray.Thearray'sbaseaddress|theaddressofits0thelement|isgivenbyL:array:base.AttributeL:addrdenotesthetemporarythatholdstheo\u000bsetforthearrayreferencegeneratedbyL.ThelocationforthearrayreferenceisthereforeL:array:base[L:addr].Thegeneratedinstructioncopiesther-valuefromaddressE:addrintothelocationforL.ProductionsE!E1+E2andE!idarethesameasbefore.These-manticactionforthenewproductionE!LgeneratescodetocopythevaluefromthelocationdenotedbyLintoanewtemporary.ThislocationisL:array:base[L:addr],asdiscussedabovefortheproductionS!L=E;.Again,attributeL:arraygivesthearrayname,andL:array:basegivesitsbaseaddress.AttributeL:addrdenotesthetemporarythatholdstheo\u000bset.Thecodeforthearrayreferenceplacesther-valueatthelocationdesignatedbythebaseando\u000bsetintoanewtemporarydenotedbyE:addr.Example6.12:Letadenotea2\u00023arrayofintegers,andletc,i,andjalldenoteintegers.Then,thetypeofaisarray(2;array(3;integer)).Itswidthwis24,assumingthatthewidthofanintegeris4.Thetypeofa[i]isarray(3;integer),ofwidthw1=12.Thetypeofa[i][j]isinteger.Anannotatedparsetreefortheexpressionc+a[i][j]isshowninFig.6.23.Theexpressionistranslatedintothesequenceofthree-addressinstructionsinFig.6.24.Asusual,wehaveusedthenameofeachidenti\fertorefertoitssymbol-tableentry.26.4.5ExercisesforSection6.4Exercise6.4.1:AddtothetranslationofFig.6.19rulesforthefollowingproductions:a)E!E1\u0003E2.b)E!+E1(unaryplus).Exercise6.4.2:RepeatExercise6.4.1fortheincrementaltranslationofFig.6.20.6.4.TRANSLATIONOFEXPRESSIONS385t1=L:addrarray(3;integer)==L:typea]a:type=array(2;array(3;integer))[E:addr=iiE:addr=jjL:typeE:addr=t5+E:addr=ccE:addr=t4L:array=a=integerL:addr=t3[]L:arrayFigure6.23:Annotatedparsetreeforc+a[i][j]t1=i*12t2=j*4t3=t1+t2t4=a[t3]t5=c+t4Figure6.24:Three-addresscodeforexpressionc+a[i][j]Exercise6.4.3:UsethetranslationofFig.6.22totranslatethefollowingassignments:a)x=a[i]+b[j].b)x=a[i][j]+b[i][j].!c)x=a[b[i][j]][c[k]].!Exercise6.4.4:RevisethetranslationofFig.6.22forarrayreferencesoftheFortranstyle,thatis,id[E1;E2;:::;En]forann-dimensionalarray.Exercise6.4.5:Generalizeformula(6.7)tomultidimensionalarrays,andin-dicatewhatvaluescanbestoredinthesymboltableandusedtocomputeo\u000bsets.Considerthefollowingcases:a)AnarrayAoftwodimensions,inrow-majorform.The\frstdimensionhasindexesrunningfroml1toh1,andtheseconddimensionhasindexesfroml2toh2.Thewidthofasinglearrayelementisw.386CHAPTER6.INTERMEDIATE-CODEGENERATION6.5.TYPECHECKING387elementalongwiththevalueoftheelement.Asoundtypesystemeliminatestheneedfordynamiccheckingfortypeerrors,becauseitallowsustodeterminestaticallythattheseerrorscannotoccurwhenthetargetprogramruns.Animplementationofalanguageisstronglytypedifacompilerguaranteesthattheprogramsitacceptswillrunwithouttypeerrors.Besidestheiruseforcompiling,ideasfromtypecheckinghavebeenusedtoimprovethesecurityofsystemsthatallowsoftwaremodulestobeimportedandexecuted.Javaprogramscompileintomachine-independentbytecodesthatincludedetailedtypeinformationabouttheoperationsinthebytecodes.Im-portedcodeischeckedbeforeitisallowedtoexecute,toguardagainstbothinadvertenterrorsandmaliciousmisbehavior.6.5.1RulesforTypeCheckingTypecheckingcantakeontwoforms:synthesisandinference.Typesynthesisbuildsupthetypeofanexpressionfromthetypesofitssubexpressions.Itrequiresnamestobedeclaredbeforetheyareused.ThetypeofE1+E2isde\fnedintermsofthetypesofE1andE2.Atypicalrulefortypesynthesishastheformiffhastypes!tandxhastypes,thenexpressionf(x)hastypet(6.8)Here,fandxdenoteexpressions,ands!tdenotesafunctionfromstot.Thisruleforfunctionswithoneargumentcarriesovertofunctionswithseveralarguments.Therule(6.8)canbeadaptedforE1+E2byviewingitasafunctionapplicationadd(E1;E2).6Typeinferencedeterminesthetypeofalanguageconstructfromthewayitisused.LookingaheadtotheexamplesinSection6.5.4,letnullbeafunctionthattestswhetheralistisempty.Then,fromtheusagenull(x),wecantellthatxmustbealist.Thetypeoftheelementsofxisnotknown;allweknowisthatxmustbealistofelementsofsometypethatispresentlyunknown.Variablesrepresentingtypeexpressionsallowustotalkaboutunknowntypes.WeshalluseGreekletters\u000b;\f;\u0001\u0001\u0001fortypevariablesintypeexpressions.Atypicalrulefortypeinferencehastheformiff(x)isanexpression,thenforsome\u000band\f,fhastype\u000b!\fandxhastype\u000b(6.9)TypeinferenceisneededforlanguageslikeML,whichchecktypes,butdonotrequirenamestobedeclared.388CHAPTER6.INTERMEDIATE-CODEGENERATIONInthissection,weconsidertypecheckingofexpressions.Therulesforcheckingstatementsaresimilartothoseforexpressions.Forexample,wetreattheconditionalstatement\\if(E)S;\"asifitweretheapplicationofafunctioniftoEandS.Letthespecialtypevoiddenotetheabsenceofavalue.Thenfunctionifexpectstobeappliedtoabooleanandavoid;theresultoftheapplicationisavoid.6.5.2TypeConversionsConsiderexpressionslikex+i,wherexisoftype\roatandiisoftypeinte-ger.Sincetherepresentationofintegersand\roating-pointnumbersisdi\u000berentwithinacomputeranddi\u000berentmachineinstructionsareusedforoperationsonintegersand\roats,thecompilermayneedtoconvertoneoftheoperandsof+toensurethatbothoperandsareofthesametypewhentheadditionoccurs.Supposethatintegersareconvertedto\roatswhennecessary,usingaunaryoperator(float).Forexample,theinteger2isconvertedtoa\roatinthecodefortheexpression2*3.14:t1=(float)2t2=t1*3.14Wecanextendsuchexamplestoconsiderintegerand\roatversionsoftheoperators;forexample,int*forintegeroperandsandfloat*for\roats.TypesynthesiswillbeillustratedbyextendingtheschemeinSection6.4.2fortranslatingexpressions.WeintroduceanotherattributeE:type,whosevalueiseitherintegeror\roat.TheruleassociatedwithE!E1+E2buildsonthepseudocodeif(E1:type=integerandE2:type=integer)E:type=integer;elseif(E1:type=\roatandE2:type=integer)\u0001\u0001\u0001\u0001\u0001\u0001Asthenumberoftypessubjecttoconversionincreases,thenumberofcasesincreasesrapidly.Thereforewithlargenumbersoftypes,carefulorganizationofthesemanticactionsbecomesimportant.Typeconversionrulesvaryfromlanguagetolanguage.TherulesforJavainFig.6.25distinguishbetweenwideningconversions,whichareintendedtopreserveinformation,andnarrowingconversions,whichcanloseinformation.ThewideningrulesaregivenbythehierarchyinFig.6.25(a):anytypelowerinthehierarchycanbewidenedtoahighertype.Thus,acharcanbewidenedtoanintortoa\roat,butacharcannotbewidenedtoashort.ThenarrowingrulesareillustratedbythegraphinFig.6.25(b):atypescanbenarrowedtoatypetifthereisapathfromstot.Notethatchar,short,andbytearepairwiseconvertibletoeachother.Conversionfromonetypetoanotherissaidtobeimplicitifitisdoneautomaticallybythecompiler.Implicittypeconversions,alsocalledcoercions,6.5.TYPECHECKING389(b)Narrowingconversions(a)Wideningconversionsbytedoubleshortcharintlong\roatdoubleshortcharbyteintlong\roatFigure6.25:ConversionsbetweenprimitivetypesinJavaarelimitedinmanylanguagestowideningconversions.Conversionissaidtobeexplicitiftheprogrammermustwritesomethingtocausetheconversion.Explicitconversionsarealsocalledcasts.ThesemanticactionforcheckingE!E1+E2usestwofunctions:1.max(t1;t2)takestwotypest1andt2andreturnsthemaximum(orleastupperbound)ofthetwotypesinthewideninghierarchy.Itdeclaresanerrorifeithert1ort2isnotinthehierarchy;e.g.,ifeithertypeisanarrayorapointertype.2.widen(a;t;w)generatestypeconversionsifneededtowidenthecontentsofanaddressaoftypetintoavalueoftypew.Itreturnsaitselfiftandwarethesametype.Otherwise,itgeneratesaninstructiontodotheconversionandplacetheresultinatemporary,whichisreturnedastheresult.Pseudocodeforwiden,assumingthattheonlytypesareintegerand\roat,appearsinFig.6.26.Addrwiden(Addra;Typet;Typew)if(t=w)returna;elseif(t=integerandw=\roat)ftemp=newTemp();gen(temp0=00(\roat)0a);returntemp;gelseerror;gFigure6.26:Pseudocodeforfunctionwiden390CHAPTER6.INTERMEDIATE-CODEGENERATIONThesemanticactionforE!E1+E2inFig.6.27illustrateshowtypeconversionscanbeaddedtotheschemeinFig.6.20fortranslatingexpressions.Inthesemanticaction,temporaryvariablea1iseitherE1:addr,ifthetypeofE1doesnotneedtobeconvertedtothetypeofE,oranewtemporaryvariablereturnedbywidenifthisconversionisnecessary.Similarly,a2iseitherE2:addroranewtemporaryholdingthetype-convertedvalueofE2.Neitherconversionisneededifbothtypesareintegerorbothare\roat.Ingeneral,however,wecould\fndthattheonlywaytoaddvaluesoftwodi\u000berenttypesistoconvertthembothtoathirdtype.E!E1+E2fE:type=max(E1:type;E2:type);a1=widen(E1:addr;E1:type;E:type);a2=widen(E2:addr;E2:type;E:type);E:addr=newTemp();gen(E:addr0=0a10+0a2);gFigure6.27:Introducingtypeconversionsintoexpressionevaluation6.5.3OverloadingofFunctionsandOperatorsAnoverloadedsymbolhasdi\u000berentmeaningsdependingonitscontext.Over-loadingisresolvedwhenauniquemeaningisdeterminedforeachoccurrenceofaname.Inthissection,werestrictattentiontooverloadingthatcanberesolvedbylookingonlyattheargumentsofafunction,asinJava.Example6.13:The+operatorinJavadenoteseitherstringconcatenationoraddition,dependingonthetypesofitsoperands.User-de\fnedfunctionscanbeoverloadedaswell,asinvoiderr(){\u0001\u0001\u0001}voiderr(Strings){\u0001\u0001\u0001}Notethatwecanchoosebetweenthesetwoversionsofafunctionerrbylookingattheirarguments.2Thefollowingisatype-synthesisruleforoverloadedfunctions:iffcanhavetypesi!ti,for1\u0014i\u0014n,wheresi6=sjfori6=jandxhastypesk,forsome1\u0014k\u0014nthenexpressionf(x)hastypetk(6.10)Thevalue-numbermethodofSection6.1.2canbeappliedtotypeexpres-sionstoresolveoverloadingbasedonargumenttypes,e\u000eciently.InaDAGrepresentingatypeexpression,weassignanintegerindex,calledavaluenum-ber,toeachnode.UsingAlgorithm6.3,weconstructasignatureforanode,6.5.TYPECHECKING391consistingofitslabelandthevaluenumbersofitschildren,inorderfromlefttoright.Thesignatureforafunctionconsistsofthefunctionnameandthetypesofitsarguments.Theassumptionthatwecanresolveoverloadingbasedonthetypesofargumentsisequivalenttosayingthatwecanresolveoverloadingbasedonsignatures.Itisnotalwayspossibletoresolveoverloadingbylookingonlyattheargu-mentsofafunction.InAda,insteadofasingletype,asubexpressionstandingalonemayhaveasetofpossibletypesforwhichthecontextmustprovidesu\u000e-cientinformationtonarrowthechoicedowntoasingletype(seeExercise6.5.2).6.5.4TypeInferenceandPolymorphicFunctionsTypeinferenceisusefulforalanguagelikeML,whichisstronglytyped,butdoesnotrequirenamestobedeclaredbeforetheyareused.Typeinferenceensuresthatnamesareusedconsistently.Theterm\\polymorphic\"referstoanycodefragmentthatcanbeexecutedwithargumentsofdi\u000berenttypes.Inthissection,weconsiderparametricpoly-morphism,wherethepolymorphismischaracterizedbyparametersortypevariables.TherunningexampleistheMLprograminFig.6.28,whichde\fnesafunctionlength.Thetypeoflengthcanbedescribedas,\\foranytype\u000b,lengthmapsalistofelementsoftype\u000btoaninteger.\"funlength(x)=ifnull(x)then0elselength(tl(x))+1;Figure6.28:MLprogramforthelengthofalistExample6.14:InFig.6.28,thekeywordfunintroducesafunctionde\fnition;functionscanberecursive.Theprogramfragmentde\fnesfunctionlengthwithoneparameterx.Thebodyofthefunctionconsistsofaconditionalexpression.Theprede\fnedfunctionnulltestswhetheralistisempty,andtheprede\fnedfunctiontl(shortfor\\tail\")returnstheremainderofalistafterthe\frstelementisremoved.Thefunctionlengthdeterminesthelengthornumberofelementsofalistx.Allelementsofalistmusthavethesametype,butlengthcanbeappliedtolistswhoseelementsareofanyonetype.Inthefollowingexpression,lengthisappliedtotwodi\u000berenttypesoflists(listelementsareenclosedwithin\\[\"and\\]\"):length([\"sun\";\"mon\";\"tue\"])+length([10;9;8;7])(6.11)Thelistofstringshaslength3andthelistofintegershaslength4,soexpres-sion(6.11)evaluatesto7.2392CHAPTER6.INTERMEDIATE-CODEGENERATIONUsingthesymbol8(readas\\foranytype\")andthetypeconstructorlist,thetypeoflengthcanbewrittenas8\u000b:list(\u000b)!integer(6.12)The8symbolistheuniversalquanti\fer,andthetypevariabletowhichitisappliedissaidtobeboundbyit.Boundvariablescanberenamedatwill,providedalloccurrencesofthevariablearerenamed.Thus,thetypeexpression8\f:list(\f)!integerisequivalentto(6.12).Atypeexpressionwitha8symbolinitwillbereferredtoinformallyasa\\polymorphictype.\"Eachtimeapolymorphicfunctionisapplied,itsboundtypevariablescandenoteadi\u000berenttype.Duringtypechecking,ateachuseofapolymorphictypewereplacetheboundvariablesbyfreshvariablesandremovetheuniversalquanti\fers.Thenextexampleinformallyinfersatypeforlength,implicitlyusingtypeinferenceruleslike(6.9),whichisrepeatedhere:iff(x)isanexpression,thenforsome\u000band\f,fhastype\u000b!\fandxhastype\u000bExample6.15:TheabstractsyntaxtreeinFig.6.29representsthede\fnitionoflengthinFig.6.28.Therootofthetree,labeledfun,representsthefunctionde\fnition.Theremainingnonleafnodescanbeviewedasfunctionapplications.Thenodelabeled+representstheapplicationoftheoperator+toapairofchildren.Similarly,thenodelabeledifrepresentstheapplicationofanoperatoriftoatripleformedbyitschildren(fortypechecking,itdoesnotmatterthateitherthethenortheelsepartwillbeevaluated,butnotboth).+applylength1applytlxfun0xnullapplyifxlengthFigure6.29:Abstractsyntaxtreeforthefunctionde\fnitioninFig.6.28Fromthebodyoffunctionlength,wecaninferitstype.Considerthechildrenofthenodelabeledif,fromlefttoright.Sincenullexpectstobeappliedtolists,xmustbealist.Letususevariable\u000basaplaceholderforthetypeofthelistelements;thatis,xhastype\\listof\u000b.\"6.5.TYPECHECKING393394CHAPTER6.INTERMEDIATE-CODEGENERATIONCheckthefunctionde\fnitionsandtheexpressionintheinputsequence.Usetheinferredtypeofafunctionifitissubsequentlyusedinanexpression.\u000fForafunctionde\fnitionfunid1(id2)=E,createfreshtypevariables\u000band\f.Associatethetype\u000b!\fwiththefunctionid1,andthetype\u000bwiththeparameterid2.Then,inferatypeforexpressionE.Suppose\u000bdenotestypesand\fdenotestypetaftertypeinferenceforE.Theinferredtypeoffunctionid1iss!t.Bindanytypevariablesthatremainunconstrainedins!tby8quanti\fers.\u000fForafunctionapplicationE1(E2),infertypesforE1andE2.SinceE1isusedasafunction,itstypemusthavetheforms!s0.(Technically,thetypeofE1mustunifywith\f!\r,where\fand\rarenewtypevariables).LettbetheinferredtypeofE2.Unifysandt.Ifuni\fcationfails,theexpressionhasatypeerror.Otherwise,theinferredtypeofE1(E2)iss0.\u000fForeachoccurrenceofapolymorphicfunction,replacetheboundvari-ablesinitstypebydistinctfreshvariablesandremovethe8quanti\fers.Theresultingtypeexpressionistheinferredtypeofthisoccurrence.\u000fForanamethatisencounteredforthe\frsttime,introduceafreshvariableforitstype.2Example6.17:InFig.6.30,weinferatypeforfunctionlength.TherootofthesyntaxtreeinFig.6.29isforafunctionde\fnition,soweintroducevariables\fand\r,associatethetype\f!\rwithfunctionlength,andthetype\fwithx;seelines1-2ofFig.6.30.Attherightchildoftheroot,weviewifasapolymorphicfunctionthatisappliedtoatriple,consistingofabooleanandtwoexpressionsthatrepresentthethenandelseparts.Itstypeis8\u000b:boolean\u0002\u000b\u0002\u000b!\u000b.Eachapplicationofapolymorphicfunctioncanbetoadi\u000berenttype,sowemakeupafreshvariable\u000bi(whereiisfrom\\if\")andremovethe8;seeline3ofFig.6.30.Thetypeoftheleftchildofifmustunifywithboolean,andthetypesofitsothertwochildrenmustunifywith\u000bi.Theprede\fnedfunctionnullhastype8\u000b:list(\u000b)!boolean.Weuseafreshtypevariable\u000bn(wherenisfor\\null\")inplaceoftheboundvariable\u000b;seeline4.Fromtheapplicationofnulltox,weinferthatthetype\fofxmustmatchlist(\u000bn);seeline5.Atthe\frstchildofif,thetypebooleanfornull(x)matchesthetypeexpectedbyif.Atthesecondchild,thetype\u000biuni\feswithinteger;seeline6.Now,considerthesubexpressionlength(tl(x))+1.Wemakeupafreshvariable\u000bt(wheretisfor\\tail\")fortheboundvariable\u000binthetypeoftl;seeline8.Fromtheapplicationtl(x),weinferlist(\u000bt)=\f=list(\u000bn);seeline9.Sincelength(tl(x))isanoperandof+,itstype\rmustunifywithinteger;seeline10.Itfollowsthatthetypeoflengthislist(\u000bn)!integer.Afterthe6.5.TYPECHECKING395396CHAPTER6.INTERMEDIATE-CODEGENERATION((\u000b1!\u000b2)\u0002list(\u000b3))!list(\u000b2)((\u000b3!\u000b4)\u0002list(\u000b3))!\u000b5ThefollowingsubstitutionSisthemostgeneraluni\ferfortheseexpressionsxS(x)6.5.TYPECHECKING397booleanunify(Nodem;Noden)fs=\fnd(m);t=\fnd(n);if(s=t)returntrue;elseif(nodessandtrepresentthesamebasictype)returntrue;elseif(sisanop-nodewithchildrens1ands2andtisanop-nodewithchildrent1andt2)funion(s;t);returnunify(s1;t1)andunify(s2;t2);gelseif(sortrepresentsavariable)funion(s;t);returntrue;gelsereturnfalse;gFigure6.32:Uni\fcationalgorithm.\u000f\fnd(n)returnstherepresentativenodeoftheequivalenceclasscurrentlycontainingnoden.\u000funion(m;n)mergestheequivalenceclassescontainingnodesmandn.Ifoneoftherepresentativesfortheequivalenceclassesofmandnisanon-variablenode,unionmakesthatnonvariablenodebetherepresentativeforthemergedequivalenceclass;otherwise,unionmakesoneortheotheroftheoriginalrepresentativesbethenewrepresentative.Thisasymme-tryinthespeci\fcationofunionisimportantbecauseavariablecannotbeusedastherepresentativeforanequivalenceclassforanexpressioncontainingatypeconstructororbasictype.Otherwise,twoinequivalentexpressionsmaybeuni\fedthroughthatvariable.Theunionoperationonsetsisimplementedbysimplychangingtheset\feldoftherepresentativeofoneequivalenceclasssothatitpointstotherepresen-tativeoftheother.To\fndtheequivalenceclassthatanodebelongsto,wefollowthesetpointersofnodesuntiltherepresentative(thenodewithanullpointerintheset\feld)isreached.NotethatthealgorithminFig.6.32usess=\fnd(m)andt=\fnd(n)ratherthanmandn,respectively.Therepresentativenodessandtareequalifmandnareinthesameequivalenceclass.Ifsandtrepresentthesamebasictype,thecallunify(m;n)returnstrue.Ifsandtarebothinteriornodesforabinarytypeconstructor,wemergetheirequivalenceclassesonspeculationandrecursivelycheckthattheirrespectivechildrenareequivalent.Bymerging\frst,wedecreasethenumberofequivalenceclassesbeforerecursivelycheckingthechildren,sothealgorithmterminates.398CHAPTER6.INTERMEDIATE-CODEGENERATIONThesubstitutionofanexpressionforavariableisimplementedbyaddingtheleafforthevariabletotheequivalenceclasscontainingthenodeforthatexpression.Supposeeithermornisaleafforavariable.Supposealsothatthisleafhasbeenputintoanequivalenceclasswithanoderepresentinganexpressionwithatypeconstructororabasictype.Then\fndwillreturnarepresentativethatre\rectsthattypeconstructororbasictype,sothatavariablecannotbeuni\fedwithtwodi\u000berentexpressions.2Example6.20:SupposethatthetwoexpressionsinExample6.18arerepre-sentedbytheinitialgraphinFig.6.33,whereeachnodeisinitsownequiv-alenceclass.WhenAlgorithm6.19isappliedtocomputeunify(1;9),itnotesthatnodes1and9bothrepresentthesameoperator.Itthereforemerges1and9intothesameequivalenceclassandcallsunify(2;10)andunify(8;14).Theresultofcomputingunify(1;9)isthegraphpreviouslyshowninFig.6.31.2list:8!:11\u000b4:12\u000b5:14\u0002:10list:13!:9!:1\u000b3:7list:6\u000b2:5\u000b1:4!:3\u0002:2Figure6.33:InitialgraphwitheachnodeinitsownequivalenceclassIfAlgorithm6.19returnstrue,wecanconstructasubstitutionSthatactsastheuni\fer,asfollows.Foreachvariable\u000b,\fnd(\u000b)givesthenodenthatistherepresentativeoftheequivalenceclassof\u000b.TheexpressionrepresentedbynisS(\u000b).Forexample,inFig.6.31,weseethattherepresentativefor\u000b3isnode4,whichrepresents\u000b1.Therepresentativefor\u000b5isnode8,whichrepresentslist(\u000b2).TheresultingsubstitutionSisasinExample6.18.6.5.6ExercisesforSection6.5Exercise6.5.1:AssumingthatfunctionwideninFig.6.26canhandleanyofthetypesinthehierarchyofFig.6.25(a),translatetheexpressionsbelow.Assumethatcanddarecharacters,sandtareshortintegers,iandjareintegers,andxisa\roat.a)x=s+c.b)i=s+c.c)x=(s+c)*(t+d).6.6.CONTROLFLOW399Exercise6.5.2:AsinAda,supposethateachexpressionmusthaveauniquetype,butthatfromasubexpression,byitself,allwecandeduceisasetofpos-sibletypes.Thatis,theapplicationoffunctionE1toargumentE2,representedbyE!E1(E2),hastheassociatedruleE:type=ftjforsomesinE2:type,s!tisinE1:typegDescribeanSDDthatdeterminesauniquetypeforeachsubexpressionbyusinganattributetypetosynthesizeasetofpossibletypesbottom-up,and,oncetheuniquetypeoftheoverallexpressionisdetermined,proceedstop-downtodetermineattributeuniqueforthetypeofeachsubexpression.6.6ControlFlowThetranslationofstatementssuchasif-else-statementsandwhile-statementsistiedtothetranslationofbooleanexpressions.Inprogramminglanguages,booleanexpressionsareoftenusedto1.Alterthe\rowofcontrol.Booleanexpressionsareusedasconditionalexpressionsinstatementsthatalterthe\rowofcontrol.Thevalueofsuchbooleanexpressionsisimplicitinapositionreachedinaprogram.Forexample,inif(E)S,theexpressionEmustbetrueifstatementSisreached.2.Computelogicalvalues.Abooleanexpressioncanrepresenttrueorfalseasvalues.Suchbooleanexpressionscanbeevaluatedinanalogytoarith-meticexpressionsusingthree-addressinstructionswithlogicaloperators.Theintendeduseofbooleanexpressionsisdeterminedbyitssyntacticcon-text.Forexample,anexpressionfollowingthekeywordifisusedtoalterthe\rowofcontrol,whileanexpressionontherightsideofanassignmentisusedtodenotealogicalvalue.Suchsyntacticcontextscanbespeci\fedinanumberofways:wemayusetwodi\u000berentnonterminals,useinheritedattributes,orseta\ragduringparsing.Alternativelywemaybuildasyntaxtreeandinvokedi\u000berentproceduresforthetwodi\u000berentusesofbooleanexpressions.Thissectionconcentratesontheuseofbooleanexpressionstoalterthe\rowofcontrol.Forclarity,weintroduceanewnonterminalBforthispurpose.InSection6.6.6,weconsiderhowacompilercanallowbooleanexpressionstorepresentlogicalvalues.6.6.1BooleanExpressionsBooleanexpressionsarecomposedofthebooleanoperators(whichwedenote&&,||,and!,usingtheCconventionfortheoperatorsAND,OR,andNOT,respectively)appliedtoelementsthatarebooleanvariablesorrelationalex-pressions.RelationalexpressionsareoftheformE1relE2,whereE1and400CHAPTER6.INTERMEDIATE-CODEGENERATIONE2arearithmeticexpressions.Inthissection,weconsiderbooleanexpressionsgeneratedbythefollowinggrammar:B!B||BjB&&Bj!Bj(B)jErelEjtruejfalseWeusetheattributerel.optoindicatewhichofthesixcomparisonoperators<,<=,=,!=,>,or>=isrepresentedbyrel.Asiscustomary,weassumethat||and&&areleft-associative,andthat||haslowestprecedence,then&&,then!.GiventheexpressionB1||B2,ifwedeterminethatB1istrue,thenwecanconcludethattheentireexpressionistruewithouthavingtoevaluateB2.Similarly,givenB1&&B2,ifB1isfalse,thentheentireexpressionisfalse.Thesemanticde\fnitionoftheprogramminglanguagedetermineswhetherallpartsofabooleanexpressionmustbeevaluated.Ifthelanguagede\fnitionpermits(orrequires)portionsofabooleanexpressiontogounevaluated,thenthecompilercanoptimizetheevaluationofbooleanexpressionsbycomputingonlyenoughofanexpressiontodetermineitsvalue.Thus,inanexpressionsuchasB1||B2,neitherB1norB2isnecessarilyevaluatedfully.IfeitherB1orB2isanexpressionwithsidee\u000bects(e.g.,itcontainsafunctionthatchangesaglobalvariable),thenanunexpectedanswermaybeobtained.6.6.2Short-CircuitCodeInshort-circuit(orjumping)code,thebooleanoperators&&,||,and!trans-lateintojumps.Theoperatorsthemselvesdonotappearinthecode;instead,thevalueofabooleanexpressionisrepresentedbyapositioninthecodese-quence.Example6.21:Thestatementif(x<100||x>200&&x!=y)x=0;mightbetranslatedintothecodeofFig.6.34.Inthistranslation,thebooleanexpressionistrueifcontrolreacheslabelL2.Iftheexpressionisfalse,controlgoesimmediatelytoL1,skippingL2andtheassignmentx=0.2ifx<100gotoL2ifFalsex>200gotoL1ifFalsex!=ygotoL1L2:x=0L1:Figure6.34:Jumpingcode6.6.CONTROLFLOW4016.6.3Flow-of-ControlStatementsWenowconsiderthetranslationofbooleanexpressionsintothree-addresscodeinthecontextofstatementssuchasthosegeneratedbythefollowinggrammar:S!if(B)S1S!if(B)S1elseS2S!while(B)S1Intheseproductions,nonterminalBrepresentsabooleanexpressionandnon-terminalSrepresentsastatement.ThisgrammargeneralizestherunningexampleofwhileexpressionsthatweintroducedinExample5.19.Asinthatexample,bothBandShaveasynthe-sizedattributecode,whichgivesthetranslationintothree-addressinstructions.Forsimplicity,webuildupthetranslationsB:codeandS:codeasstrings,us-ingsyntax-directedde\fnitions.Thesemanticrulesde\fningthecodeattributescouldbeimplementedinsteadbybuildingupsyntaxtreesandthenemittingcodeduringatreetraversal,orbyanyoftheapproachesoutlinedinSection5.5.Thetranslationofif(B)S1consistsofB:codefollowedbyS1:code,asillus-tratedinFig.6.35(a).WithinB:codearejumpsbasedonthevalueofB.IfBistrue,control\rowstothe\frstinstructionofS1:code,andifBisfalse,control\rowstotheinstructionimmediatelyfollowingS1:code.B.true:B.false:(a)iftoB.falseB.codeS1.codegotoS.nextS2.code\u0001\u0001\u0001toB.truetoB.falseB.true:B.false:S.next:(b)if-elseB.codeS1.codegotobegin\u0001\u0001\u0001toB.truetoB.falsebegin:B.true:B.false:(c)whiletoB.trueB.codeS1.code\u0001\u0001\u0001Figure6.35:Codeforif-,if-else-,andwhile-statementsThelabelsforthejumpsinB:codeandS:codearemanagedusinginheritedattributes.WithabooleanexpressionB,weassociatetwolabels:B:true,the402CHAPTER6.INTERMEDIATE-CODEGENERATIONlabeltowhichcontrol\rowsifBistrue,andB:false,thelabeltowhichcontrol\rowsifBisfalse.WithastatementS,weassociateaninheritedattributeS:nextdenotingalabelfortheinstructionimmediatelyafterthecodeforS.Insomecases,theinstructionimmediatelyfollowingS:codeisajumptosomelabelL.AjumptoajumptoLfromwithinS:codeisavoidedusingS:next.Thesyntax-directedde\fnitioninFig.6.36-6.37producesthree-addresscodeforbooleanexpressionsinthecontextofif-,if-else-,andwhile-statements.6.6.CONTROLFLOW403AprogramconsistsofastatementgeneratedbyP!S.ThesemanticrulesassociatedwiththisproductioninitializeS:nexttoanewlabel.P:codeconsistsofS:codefollowedbythenewlabelS:next.TokenassignintheproductionS!assignisaplaceholderforassignmentstatements.ThetranslationofassignmentsisasdiscussedinSection6.4;forthisdiscussionofcontrol\row,S:codeissimplyassign:code.IntranslatingS!if(B)S1,thesemanticrulesinFig.6.36createanewlabelB:trueandattachittothe\frstthree-addressinstructiongeneratedforthestatementS1,asillustratedinFig.6.35(a).Thus,jumpstoB:truewithinthecodeforBwillgotothecodeforS1.Further,bysettingB:falsetoS:next,weensurethatcontrolwillskipthecodeforS1ifBevaluatestofalse.Intranslatingtheif-else-statementS!if(B)S1elseS2,thecodeforthebooleanexpressionBhasjumpsoutofittothe\frstinstructionofthecodeforS1ifBistrue,andtothe\frstinstructionofthecodeforS2ifBisfalse,asillustratedinFig.6.35(b).Further,control\rowsfrombothS1andS2tothethree-addressinstructionimmediatelyfollowingthecodeforS|itslabelisgivenbytheinheritedattributeS:next.AnexplicitgotoS:nextappearsafterthecodeforS1toskipoverthecodeforS2.NogotoisneededafterS2,sinceS2:nextisthesameasS:next.ThecodeforS!while(B)S1isformedfromB:codeandS1:codeasshowninFig.6.35(c).Weusealocalvariablebegintoholdanewlabelattachedtothe\frstinstructionforthiswhile-statement,whichisalsothe\frstinstructionforB.Weuseavariableratherthananattribute,becausebeginislocaltothesemanticrulesforthisproduction.TheinheritedlabelS:nextmarkstheinstructionthatcontrolmust\rowtoifBisfalse;hence,B:falseissettobeS:next.AnewlabelB:trueisattachedtothe\frstinstructionforS1;thecodeforBgeneratesajumptothislabelifBistrue.AfterthecodeforS1weplacetheinstructiongotobegin,whichcausesajumpbacktothebeginningofthecodeforthebooleanexpression.NotethatS1:nextissettothislabelbegin,sojumpsfromwithinS1:codecangodirectlytobegin.ThecodeforS!S1S2consistsofthecodeforS1followedbythecodeforS2.Thesemanticrulesmanagethelabels;the\frstinstructionafterthecodeforS1isthebeginningofthecodeforS2;andtheinstructionafterthecodeforS2isalsotheinstructionafterthecodeforS.Wediscussthetranslationof\row-of-controlstatementsfurtherinSection6.7.Thereweshallseeanalternativemethod,called\\backpatching,\"whichemitscodeforstatementsinonepass.6.6.4Control-FlowTranslationofBooleanExpressionsThesemanticrulesforbooleanexpressionsinFig.6.37complementthesemanticrulesforstatementsinFig.6.36.AsinthecodelayoutofFig.6.35,abooleanexpressionBistranslatedintothree-addressinstructionsthatevaluateBusing404CHAPTER6.INTERMEDIATE-CODEGENERATIONconditionalandunconditionaljumpstooneoftwolabels:B:trueifBistrue,andB:falseifBisfalse.6.6.CONTROLFLOW4052.ThetranslationofB1&&B2issimilar.3.NocodeisneededforanexpressionBoftheform!B1:justinterchangethetrueandfalseexitsofBtogetthetrueandfalseexitsofB1.4.TheconstantstrueandfalsetranslateintojumpstoB:trueandB:false,respectively.Example6.22:ConsideragainthefollowingstatementfromExample6.21:if(x<100||x>200&&x!=y)x=0;(6.13)Usingthesyntax-directedde\fnitionsinFigs.6.36and6.37wewouldobtainthecodeinFig.6.38.ifx<100gotoL2gotoL3L3:ifx>200gotoL4gotoL1L4:ifx!=ygotoL2gotoL1L2:x=0L1:Figure6.38:Control-\rowtranslationofasimpleif-statementThestatement(6.13)constitutesaprogramgeneratedbyP!SfromFig.6.36.ThesemanticrulesfortheproductiongenerateanewlabelL1fortheinstructionafterthecodeforS.StatementShastheformif(B)S1,whereS1isx=0;,sotherulesinFig.6.36generateanewlabelL2andattachittothe\frst(andonly,inthiscase)instructioninS1:code,whichisx=0.Since||haslowerprecedencethan&&,thebooleanexpressionin(6.13)hastheformB1||B2,whereB1isx<100.FollowingtherulesinFig.6.37,B1:trueisL2,thelabeloftheassignmentx=0;.B1:falseisanewlabelL3,attachedtothe\frstinstructioninthecodeforB2.Notethatthecodegeneratedisnotoptimal,inthatthetranslationhasthreemoreinstructions(goto's)thanthecodeinExample6.21.TheinstructiongotoL3isredundant,sinceL3isthelabeloftheverynextinstruction.ThetwogotoL1instructionscanbeeliminatedbyusingifFalseinsteadofifinstructions,asinExample6.21.26.6.5AvoidingRedundantGotosInExample6.22,thecomparisonx>200translatesintothecodefragment:406CHAPTER6.INTERMEDIATE-CODEGENERATIONifx>200gotoL4gotoL1L4:\u0001\u0001\u0001Instead,considertheinstruction:ifFalsex>200gotoL1L4:\u0001\u0001\u0001ThisifFalseinstructiontakesadvantageofthenatural\rowfromoneinstruc-tiontothenextinsequence,socontrolsimply\\fallsthrough\"tolabelL4ifx>200,therebyavoidingajump.Inthecodelayoutsforif-andwhile-statementsinFig.6.35,thecodeforstatementS1immediatelyfollowsthecodeforthebooleanexpressionB.Byusingaspeciallabelfall(i.e.,\\don'tgenerateanyjump\"),wecanadaptthesemanticrulesinFig.6.36and6.37toallowcontroltofallthroughfromthecodeforBtothecodeforS1.ThenewrulesforS!if(B)S1inFig.6.36setB:truetofall:B:true=fallB:false=S1:next=S:nextS:code=B:codejjS1:codeSimilarly,therulesforif-else-andwhile-statementsalsosetB:truetofall.Wenowadaptthesemanticrulesforbooleanexpressionstoallowcontroltofallthroughwheneverpossible.ThenewrulesforB!E1relE2inFig.6.39generatetwoinstructions,asinFig.6.37,ifbothB:trueandB:falseareexplicitlabels;thatis,neitherequalsfall.Otherwise,ifB:trueisanexplicitlabel,thenB:falsemustbefall,sotheygenerateanifinstructionthatletscontrolfallthroughiftheconditionisfalse.Conversely,ifB:falseisanexplicitlabel,thentheygenerateanifFalseinstruction.Intheremainingcase,bothB:trueandB:falsearefall,sonojumpingenerated.9InthenewrulesforB!B1||B2inFig.6.40,notethatthemeaningoflabelfallforBisdi\u000berentfromitsmeaningforB1.SupposeB:trueisfall;i.e,controlfallsthroughB,ifBevaluatestotrue.AlthoughBevaluatestotrueifB1does,B1:truemustensurethatcontroljumpsoverthecodeforB2togettothenextinstructionafterB.Ontheotherhand,ifB1evaluatestofalse,thetruth-valueofBisde-terminedbythevalueofB2,sotherulesinFig.6.40ensurethatB1:falsecorrespondstocontrolfallingthroughfromB1tothecodeforB2.ThesemanticrulesforB!B1&&B2aresimilartothoseinFig.6.40.Weleavethemasanexercise.Example6.23:Withthenewrulesusingthespeciallabelfall,theprogram(6.13)fromExample6.216.6.CONTROLFLOW407test=E1:addrrel:opE2:addrs=ifB:true6=fallandB:false6=fallthengen(0if0test0goto0B:true)jjgen(0goto0B:false)elseifB:true6=fallthengen(0if0test0goto0B:true)elseifB:false6=fallthengen(0ifFalse0test0goto0B:false)else00B:code=E1:codejjE2:codejjsFigure6.39:SemanticrulesforB!E1relE2B1:true=ifB:true6=fallthenB:trueelsenewlabel()B1:false=fallB2:true=B:trueB2:false=B:falseB:code=ifB:true6=fallthenB1:codejjB2:codeelseB1:codejjB2:codejjlabel(B1:true)Figure6.40:SemanticrulesforB!B1||B2if(x<100||x>200&&x!=y)x=0;translatesintothecodeofFig.6.41.ifx<100gotoL2ifFalsex>200gotoL1ifFalsex!=ygotoL1L2:x=0L1:Figure6.41:If-statementtranslatedusingthefall-throughtechniqueAsinExample6.22,therulesforP!ScreatelabelL1.Thedi\u000berencefromExample6.22isthattheinheritedattributeB:trueisfallwhenthesemanticrulesforB!B1||B2areapplied(B:falseisL1).TherulesinFig.6.40createanewlabelL2toallowajumpoverthecodeforB2ifB1evaluatestotrue.Thus,B1:trueisL2andB1:falseisfall,sinceB2mustbeevaluatedifB1isfalse.TheproductionB!E1relE2thatgeneratesx<100isthereforereachedwithB:true=L2andB:false=fall.Withtheseinheritedlabels,therulesinFig.6.39thereforegenerateasingleinstructionifx<100gotoL2.2408CHAPTER6.INTERMEDIATE-CODEGENERATION6.6.6BooleanValuesandJumpingCodeThefocusinthissectionhasbeenontheuseofbooleanexpressionstoalterthe\rowofcontrolinstatements.Abooleanexpressionmayalsobeevaluatedforitsvalue,asinassignmentstatementssuchasx=true;orx=a<b;.Acleanwayofhandlingbothrolesofbooleanexpressionsisto\frstbuildasyntaxtreeforexpressions,usingeitherofthefollowingapproaches:1.Usetwopasses.Constructacompletesyntaxtreefortheinput,andthenwalkthetreeindepth-\frstorder,computingthetranslationsspeci\fedbythesemanticrules.2.Useonepassforstatements,buttwopassesforexpressions.Withthisapproach,wewouldtranslateEinwhile(E)S1beforeS1isexamined.ThetranslationofE,however,wouldbedonebybuildingitssyntaxtreeandthenwalkingthetree.ThefollowinggrammarhasasinglenonterminalEforexpressions:S!id=E;jif(E)Sjwhile(E)SjSSE!E||EjE&&EjErelEjE+Ej(E)jidjtruejfalseNonterminalEgovernsthe\rowofcontrolinS!while(E)S1.ThesamenonterminalEdenotesavalueinS!id=E;andE!E+E.Wecanhandlethesetworolesofexpressionsbyusingseparatecode-genera-tionfunctions.SupposethatattributeE:ndenotesthesyntax-treenodeforanexpressionEandthatnodesareobjects.Letmethodjumpgeneratejumpingcodeatanexpressionnode,andletmethodrvaluegeneratecodetocomputethevalueofthenodeintoatemporary.WhenEappearsinS!while(E)S1,methodjumpiscalledatnodeE:n.TheimplementationofjumpisbasedontherulesforbooleanexpressionsinFig.6.37.Speci\fcally,jumpingcodeisgeneratedbycallingE:n:jump(t;f),wheretisanewlabelforthe\frstinstructionofS1:codeandfisthelabelS:next.WhenEappearsinS!id=E;,methodrvalueiscalledatnodeE:n.IfEhastheformE1+E2,themethodcallE:n:rvalue()generatescodeasdiscussedinSection6.4.IfEhastheformE1&&E2,we\frstgeneratejumpingcodeforEandthenassigntrueorfalsetoanewtemporarytatthetrueandfalseexits,respectively,fromthejumpingcode.Forexample,theassignmentx=a<b&&c<dcanbeimplementedbythecodeinFig.6.42.6.6.7ExercisesforSection6.6Exercise6.6.1:Addrulestothesyntax-directedde\fnitionofFig.6.36forthefollowingcontrol-\rowconstructs:a)Arepeat-statementrepeatSwhileB.6.6.CONTROLFLOW409ifFalsea<bgotoL1ifFalsec<dgotoL1t=truegotoL2L1:t=falseL2:x=tFigure6.42:Translatingabooleanassignmentbycomputingthevalueofatemporary!b)Afor-loopfor(S1;B;S2)S3.Exercise6.6.2:Modernmachinestrytoexecutemanyinstructionsatthesametime,includingbranchinginstructions.Thus,thereisaseverecostifthemachinespeculativelyfollowsonebranch,whencontrolactuallygoesanotherway(allthespeculativeworkisthrownaway).Itisthereforedesirabletomin-imizethenumberofbranches.Noticethattheimplementationofawhile-loopinFig.6.35(c)hastwobranchesperinteration:onetoenterthebodyfromtheconditionBandtheothertojumpbacktothecodeforB.Asaresult,itisusuallypreferabletoimplementwhile(B)Sasifitwereif(B)fre-peatSuntil!(B)g.Showwhatthecodelayoutlookslikeforthistranslation,andrevisetheruleforwhile-loopsinFig.6.36.!Exercise6.6.3:Supposethattherewerean\\exclusive-or\"operator(trueifandonlyifexactlyoneofitstwoargumentsistrue)inC.WritetheruleforthisoperatorinthestyleofFig.6.37.Exercise6.6.4:Translatethefollowingexpressionsusingthegoto-avoidingtranslationschemeofSection6.6.5:a)if(a==b&&c==d||e==f)x==1;b)if(a==b||c==d||e==f)x==1;c)if(a==b&&c==d&&e==f)x==1;Exercise6.6.5:Giveatranslationschemebasedonthesyntax-directedde\f-nitioninFigs.6.36and6.37.Exercise6.6.6:AdaptthesemanticrulesinFigs.6.36and6.37toallowcontroltofallthrough,usingrulesliketheonesinFigs.6.39and6.40.!Exercise6.6.7:ThesemanticrulesforstatementsinExercise6.6.6generateunnecessarylabels.ModifytherulesforstatementsinFig.6.36tocreatelabelsasneeded,usingaspeciallabeldeferredtomeanthatalabelhasnotyetbeencreated.YourrulesmustgeneratecodesimilartothatinExample6.21.410CHAPTER6.INTERMEDIATE-CODEGENERATION!!Exercise6.6.8:Section6.6.5talksaboutusingfall-throughcodetominimizethenumberofjumpsinthegeneratedintermediatecode.However,itdoesnottakeadvantageoftheoptiontoreplaceaconditionbyitscomplement,e.g.,re-placeifa<bgotoL1;gotoL2byifa>=bgotoL2;gotoL1.DevelopaSDDthatdoestakeadvantageofthisoptionwhenneeded.6.7BackpatchingAkeyproblemwhengeneratingcodeforbooleanexpressionsand\row-of-controlstatementsisthatofmatchingajumpinstructionwiththetargetofthejump.Forexample,thetranslationofthebooleanexpressionBinif(B)Scontainsajump,forwhenBisfalse,totheinstructionfollowingthecodeforS.Inaone-passtranslation,BmustbetranslatedbeforeSisexamined.WhatthenisthetargetofthegotothatjumpsoverthecodeforS?InSection6.6weaddressedthisproblembypassinglabelsasinheritedattributestowheretherelevantjumpinstructionsweregenerated.Butaseparatepassisthenneededtobindlabelstoaddresses.Thissectiontakesacomplementaryapproach,calledbackpatching,inwhichlistsofjumpsarepassedassynthesizedattributes.Speci\fcally,whenajumpisgenerated,thetargetofthejumpistemporarilyleftunspeci\fed.Eachsuchjumpisputonalistofjumpswhoselabelsaretobe\flledinwhentheproperlabelcanbedetermined.Allofthejumpsonalisthavethesametargetlabel.6.7.1One-PassCodeGenerationUsingBackpatchingBackpatchingcanbeusedtogeneratecodeforbooleanexpressionsand\row-of-controlstatementsinonepass.ThetranslationswegeneratewillbeofthesameformasthoseinSection6.6,exceptforhowwemanagelabels.Inthissection,synthesizedattributestruelistandfalselistofnonterminalBareusedtomanagelabelsinjumpingcodeforbooleanexpressions.Inparticu-lar,B:truelistwillbealistofjumporconditionaljumpinstructionsintowhichwemustinsertthelabeltowhichcontrolgoesifBistrue.B:falselistlikewiseisthelistofinstructionsthateventuallygetthelabeltowhichcontrolgoeswhenBisfalse.AscodeisgeneratedforB,jumpstothetrueandfalseexitsareleftincomplete,withthelabel\feldun\flled.TheseincompletejumpsareplacedonlistspointedtobyB:truelistandB:falselist,asappropriate.Similarly,astatementShasasynthesizedattributeS:nextlist,denotingalistofjumpstotheinstructionimmediatelyfollowingthecodeforS.Forspeci\fcity,wegenerateinstructionsintoaninstructionarray,andlabelswillbeindicesintothisarray.Tomanipulatelistsofjumps,weusethreefunctions:1.makelist(i)createsanewlistcontainingonlyi,anindexintothearrayofinstructions;makelistreturnsapointertothenewlycreatedlist.6.7.BACKPATCHING4112.merge(p1;p2)concatenatesthelistspointedtobyp1andp2,andreturnsapointertotheconcatenatedlist.3.backpatch(p;i)insertsiasthetargetlabelforeachoftheinstructionsonthelistpointedtobyp.6.7.2BackpatchingforBooleanExpressionsWenowconstructatranslationschemesuitableforgeneratingcodeforbooleanexpressionsduringbottom-upparsing.AmarkernonterminalMinthegram-marcausesasemanticactiontopickup,atappropriatetimes,theindexofthenextinstructiontobegenerated.Thegrammarisasfollows:B!B1||MB2jB1&&MB2j!B1j(B1)jE1relE2jtruejfalseM!\u000fThetranslationschemeisinFig.6.43.1)B!B1||MB2fbackpatch(B1:falselist;M:instr);B:truelist=merge(B1:truelist;B2:truelist);B:falselist=B2:falselist;g2)B!B1&&MB2fbackpatch(B1:truelist;M:instr);B:truelist=B2:truelist;B:falselist=merge(B1:falselist;B2:falselist);g3)B!!B1fB:truelist=B1:falselist;B:falselist=B1:truelist;g4)B!(B1)fB:truelist=B1:truelist;B:falselist=B1:falselist;g5)B!E1relE2fB:truelist=makelist(nextinstr);B:falselist=makelist(nextinstr+1);gen(0if0E1:addrrel:opE2:addr0goto412CHAPTER6.INTERMEDIATE-CODEGENERATIONB1:falselistmustbethebeginningofthecodegeneratedforB2.ThistargetisobtainedusingthemarkernonterminalM.Thatnonterminalproduces,asasynthesizedattributeM:instr,theindexofthenextinstruction,justbeforeB2codestartsbeinggenerated.Toobtainthatinstructionindex,weassociatewiththeproductionM!\u000fthesemanticactionfM:instr=nextinstr;gThevariablenextinstrholdstheindexofthenextinstructiontofollow.ThisvaluewillbebackpatchedontotheB1:falselist(i.e.,eachinstructiononthelistB1:falselistwillreceiveM:instrasitstargetlabel)whenwehaveseentheremainderoftheproductionB!B1||MB2.Semanticaction(2)forB!B1&&MB2issimilarto(1).Action(3)forB!!Bswapsthetrueandfalselists.Action(4)ignoresparentheses.Forsimplicity,semanticaction(5)generatestwoinstructions,aconditionalgotoandanunconditionalone.Neitherhasitstarget\flledin.Theseinstruc-tionsareputonnewlists,pointedtobyB:truelistandB:falselist,respectively.f103gB:f=f102gB:t=B:f104&&f103;105g=f104gyx>200=B:tf104g=B:ff105gx!=B:t=M:i\u000f=B:tf100;104g=B:ff103;105g||102=f100g=B:ff101gx<100=M:i\u000f=B:tFigure6.44:Annotatedparsetreeforx<100||x>200&&x!=yExample6.24:Consideragaintheexpressionx<100||x>200&&x!=yAnannotatedparsetreeisshowninFig.6.44;forreadability,attributestru-elist,falselist,andinstrarerepresentedbytheirinitialletters.Theactionsareperformedduringadepth-\frsttraversalofthetree.Sinceallactionsappearattheendsofrightsides,theycanbeperformedinconjunctionwithreductionsduringabottom-upparse.Inresponsetothereductionofx<100toBbyproduction(5),thetwoinstructions6.7.BACKPATCHING413100:ifx<100goto414CHAPTER6.INTERMEDIATE-CODEGENERATION100:ifx<100goto6.7.BACKPATCHING4151)S!if(B)MS1fbackpatch(B:truelist;M:instr);S:nextlist=merge(B:falselist;S1:nextlist);g2)S!if(B)M1S1NelseM2S2fbackpatch(B:truelist;M1:instr);backpatch(B:falselist;M2:instr);temp=merge(S1:nextlist;N:nextlist);S:nextlist=merge(temp;S2:nextlist);g3)S!whileM1(B)M2S1fbackpatch(S1:nextlist;M1:instr);backpatch(B:truelist;M2:instr);S:nextlist=B:falselist;gen(0goto0M1:instr);g4)S!{L}fS:nextlist=L:nextlist;g5)S!A;fS:nextlist=null;g6)M!\u000ffM:instr=nextinstr;g7)N!\u000ffN:nextlist=makelist(nextinstr);gen(0goto416CHAPTER6.INTERMEDIATE-CODEGENERATIONmarkerwithproductionN!\u000f.NhasattributeN:nextlist,whichwillbealistconsistingoftheinstructionnumberofthejumpgoto6.7.BACKPATCHING417IfSistheenclosingloopconstruct,thenabreak-statementisajumptothe\frstinstructionafterthecodeforS.Wecangeneratecodeforthebreakby(1)keepingtrackoftheenclosingloopstatementS,(2)generatinganun\flledjumpforthebreak-statement,and(3)puttingthisun\flledjumponS:nextlist,wherenextlistisasdiscussedinSection6.7.3.Inatwo-passfrontendthatbuildssyntaxtrees,S:nextlistcanbeimple-mentedasa\feldinthenodeforS.WecankeeptrackofSbyusingthesymboltabletomapaspecialidenti\ferbreaktothenodefortheenclosingloopstatementS.Thisapproachwillalsohandlelabeledbreak-statementsinJava,sincethesymboltablecanbeusedtomapthelabeltothesyntax-treenodeforthelabeledconstruct.Alternatively,insteadofusingthesymboltabletoaccessthenodeforS,wecanputapointertoS:nextlistinthesymboltable.Now,whenabreak-statementisreached,wegenerateanun\flledjump,lookupnextlistthroughthesymboltable,andaddthejumptothelist,whereitwillbebackpatchedasdiscussedinSection6.7.3.Continue-statementscanbehandledinamanneranalogoustothebreak-statement.Themaindi\u000berencebetweenthetwoisthatthetargetofthegen-eratedjumpisdi\u000berent.6.7.5ExercisesforSection6.7Exercise6.7.1:UsingthetranslationofFig.6.43,translateeachofthefol-lowingexpressions.Showthetrueandfalselistsforeachsubexpression.Youmayassumetheaddressofthe\frstinstructiongeneratedis100.a)a==b&&(c==d||e==f)b)(a==b||c==d)||e==fc)(a==b&&c==d)&&e==fExercise6.7.2:InFig.6.47(a)istheoutlineofaprogram,andFig.6.47(b)sketchesthestructureofthegeneratedthree-addresscode,usingthebackpatch-ingtranslationofFig.6.46.Here,i1throughi8arethelabelsofthegeneratedinstructionsthatbegineachofthe\\Code\"sections.Whenweimplementthistranslation,wemaintain,foreachbooleanexpressionB,twolistsofplacesinthecodeforB,whichwedenotebyB:trueandB:false.TheplacesonlistB:truearethoseplaceswhereweeventuallyputthelabelofthestatementtowhichcontrolmust\rowwheneverBistrue;B:falsesimilarlyliststheplaceswhereweputthelabelthatcontrol\rowstowhenBisfoundtobefalse.Also,wemaintainforeachstatementS,alistofplaceswherewemustputthelabeltowhichcontrol\rowswhenSis\fnished.Givethevalue(oneofi1throughi8)thateventuallyreplaceseachplaceoneachofthefollowinglists:(a)B3:false(b)S2:next(c)B4:false(d)S1:next(e)B2:true418CHAPTER6.INTERMEDIATE-CODEGENERATIONwhile(E1)fi1:CodeforE1if(E2)i2:CodeforE2while(E3)i3:CodeforE3S1;i4:CodeforS1elsefi5:CodeforE4if(E4)i6:CodeforS2S2;i7:CodeforS3S3i8:\u0001\u0001\u0001gg(a)(b)Figure6.47:Control-\rowstructureofprogramforExercise6.7.2Exercise6.7.3:WhenperformingthetranslationofFig.6.47usingtheschemeofFig.6.46,wecreatelistsS:nextforeachstatement,startingwiththeassign-ment-statementsS1,S2,andS3,andproceedingtoprogressivelylargerif-statements,if-else-statements,while-statements,andstatementblocks.Thereare\fveconstructedstatementsofthistypeinFig.6.47:S4:while(B3)S1.S5:if(B4)S2.S6:TheblockconsistingofS5andS3.S7:Thestatementif(B2)S4elseS6.S8:Theentireprogram.Foreachoftheseconstructedstatements,thereisarulethatallowsustoconstructSi:nextintermsofotherSj:nextlists,andthelistsBk:trueandBk:falsefortheexpressionsintheprogram.Givetherulesfor(a)S4:next(b)S5:next(c)S6:next(d)S7:next(e)S8:next6.8Switch-StatementsThe\\switch\"or\\case\"statementisavailableinavarietyoflanguages.Ourswitch-statementsyntaxisshowninFig.6.48.ThereisaselectorexpressionE,whichistobeevaluated,followedbynconstantvaluesV1;V2;\u0001\u0001\u0001;Vnthattheexpressionmighttake,perhapsincludingadefault\\value,\"whichalwaysmatchestheexpressionifnoothervaluedoes.6.8.SWITCH-STATEMENTS419switch(E){caseV1:S1caseV2:S2\u0001\u0001\u0001caseVn\u00001:Sn\u00001default:Sn}Figure6.48:Switch-statementsyntax6.8.1TranslationofSwitch-StatementsTheintendedtranslationofaswitchiscodeto:1.EvaluatetheexpressionE.2.FindthevalueVjinthelistofcasesthatisthesameasthevalueoftheexpression.Recallthatthedefaultvaluematchestheexpressionifnoneofthevaluesexplicitlymentionedincasesdoes.3.ExecutethestatementSjassociatedwiththevaluefound.Step(2)isann-waybranch,whichcanbeimplementedinoneofseveralways.Ifthenumberofcasesissmall,say10atmost,thenitisreasonabletouseasequenceofconditionaljumps,eachofwhichtestsforanindividualvalueandtransferstothecodeforthecorrespondingstatement.Acompactwaytoimplementthissequenceofconditionaljumpsistocreateatableofpairs,eachpairconsistingofavalueandalabelforthecorrespondingstatement'scode.Thevalueoftheexpressionitself,pairedwiththelabelforthedefaultstatementisplacedattheendofthetableatruntime.Asimpleloopgeneratedbythecompilercomparesthevalueoftheexpressionwitheachvalueinthetable,beingassuredthatifnoothermatchisfound,thelast(default)entryissuretomatch.Ifthenumberofvaluesexceeds10orso,itismoree\u000ecienttoconstructahashtableforthevalues,withthelabelsofthevariousstatementsasentries.Ifnoentryforthevaluepossessedbytheswitchexpressionisfound,ajumptothedefaultstatementisgenerated.Thereisacommonspecialcasethatcanbeimplementedevenmoree\u000e-cientlythanbyann-waybranch.Ifthevaluesalllieinsomesmallrange,saymintomax,andthenumberofdi\u000berentvaluesisareasonablefractionofmax\u0000min,thenwecanconstructanarrayofmax\u0000min\\buckets,\"wherebucketj\u0000mincontainsthelabelofthestatementwithvaluej;anybucketthatwouldotherwiseremainun\flledcontainsthedefaultlabel.Toperformtheswitch,evaluatetheexpressiontoobtainthevaluej;checkthatitisintherangemintomaxandtransferindirectlytothetableentryato\u000bsetj\u0000min.Forexample,iftheexpressionisoftypecharacter,atableof,420CHAPTER6.INTERMEDIATE-CODEGENERATIONsay,128entries(dependingonthecharacterset)maybecreatedandtransferredthroughwithnorangetesting.6.8.2Syntax-DirectedTranslationofSwitch-StatementsTheintermediatecodeinFig.6.49isaconvenienttranslationoftheswitch-statementinFig.6.48.Thetestsallappearattheendsothatasimplecodegeneratorcanrecognizethemultiwaybranchandgeneratee\u000ecientcodeforit,usingthemostappropriateimplementationsuggestedatthebeginningofthissection.codetoevaluateEintotgototestL1:codeforS1gotonextL2:codeforS2gotonext\u0001\u0001\u0001Ln\u00001:codeforSn\u00001gotonextLn:codeforSngotonexttest:ift=V1gotoL1ift=V2gotoL2\u0001\u0001\u0001ift=Vn\u00001gotoLn\u00001gotoLnnext:Figure6.49:Translationofaswitch-statementThemorestraightforwardsequenceshowninFig.6.50wouldrequirethecompilertodoextensiveanalysisto\fndthemoste\u000ecientimplementation.Notethatitisinconvenientinaone-passcompilertoplacethebranchingstatementsatthebeginning,becausethecompilercouldnotthenemitcodeforeachofthestatementsSiasitsawthem.TotranslateintotheformofFig.6.49,whenweseethekeywordswitch,wegeneratetwonewlabelstestandnext,andanewtemporaryt.Then,asweparsetheexpressionE,wegeneratecodetoevaluateEintot.AfterprocessingE,wegeneratethejumpgototest.Then,asweseeeachcasekeyword,wecreateanewlabelLiandenteritintothesymboltable.Weplaceinaqueue,usedonlytostorecases,avalue-labelpairconsistingofthevalueViofthecaseconstantandLi(orapointertothesymbol-tableentryforLi).WeprocesseachstatementcaseVi:SibyemittingthelabelLiattachedtothecodeforSi,followedbythejumpgotonext.6.8.SWITCH-STATEMENTS421codetoevaluateEintotift!=V1gotoL1codeforS1gotonextL1:ift!=V2gotoL2codeforS2gotonextL2:\u0001\u0001\u0001Ln\u00002:ift!=Vn\u00001gotoLn\u00001codeforSn\u00001gotonextLn\u00001:codeforSnnext:Figure6.50:AnothertranslationofaswitchstatementWhentheendoftheswitchisfound,wearereadytogeneratethecodeforthen-waybranch.Readingthequeueofvalue-labelpairs,wecangenerateasequenceofthree-addressstatementsoftheformshowninFig.6.51.There,tisthetemporaryholdingthevalueoftheselectorexpressionE,andLnisthelabelforthedefaultstatement.casetV1L1casetV2L2\u0001\u0001\u0001casetVn\u00001Ln\u00001casettLnnext:Figure6.51:Casethree-address-codeinstructionsusedtotranslateaswitch-statementThecasetViLiinstructionisasynonymforift=VigotoLiinFig.6.49,butthecaseinstructioniseasierforthe\fnalcodegeneratortodetectasacandidateforspecialtreatment.Atthecode-generationphase,thesesequencesofcasestatementscanbetranslatedintoann-waybranchofthemoste\u000ecienttype,dependingonhowmanythereareandwhetherthevaluesfallintoasmallrange.6.8.3ExercisesforSection6.8!Exercise6.8.1:Inordertotranslateaswitch-statementintoasequenceofcase-statementsasinFig.6.51,thetranslatorneedstocreatethelistofvalue-422CHAPTER6.INTERMEDIATE-CODEGENERATIONlabelpairs,asitprocessesthesourcecodefortheswitch.Wecandoso,usinganadditionaltranslationthataccumulatesjustthepairs.Sketchasyntax-directedde\fnitionthatproducesthelistofpairs,whilealsoemittingcodeforthestatementsSithataretheactionsforeachcase.6.9IntermediateCodeforProceduresProceduresandtheirimplementationwillbediscussedatlengthinChapter7,alongwiththerun-timemanagementofstoragefornames.Weusethetermfunctioninthissectionforaprocedurethatreturnsavalue.Webrie\rydiscussfunctiondeclarationsandthree-addresscodeforfunctioncalls.Inthree-addresscode,afunctioncallisunraveledintotheevaluationofparametersinprepa-rationforacall,followedbythecallitself.Forsimplicity,weassumethatparametersarepassedbyvalue;parameter-passingmethodsarediscussedinSection1.6.6.Example6.25:Supposethataisanarrayofintegers,andthatfisafunctionfromintegerstointegers.Then,theassignmentn=f(a[i]);mighttranslateintothefollowingthree-addresscode:1)t1=i*42)t2=a[t1]3)paramt24)t3=callf,15)n=t3The\frsttwolinescomputethevalueoftheexpressiona[i]intotemporaryt2,asdiscussedinSection6.4.Line3makest2anactualparameterforthecalloffonline4.Thatlinealsoassignsthereturnvaluetotemporaryt3.Line5assignstheresultoff(a[i])ton.2TheproductionsinFig.6.52allowfunctionde\fnitionsandfunctioncalls.(Thesyntaxgeneratesunwantedcommasafterthelastparameter,butisgoodenoughforillustratingtranslation.)NonterminalsDandTgeneratedeclara-tionsandtypes,respectively,asinSection6.3.Afunctionde\fnitiongeneratedbyDconsistsofkeywordde\fne,areturntype,thefunctionname,formalparametersinparenthesesandafunctionbodyconsistingofabracketedstate-ment.NonterminalFgenerateszeroormoreformalparameters,whereaformalparameterconsistsofatypefollowedbyanidenti\fer.NonterminalsSandEgeneratestatementsandexpressions,respectively.TheproductionforSaddsastatementthatreturnsthevalueofanexpression.TheproductionforEaddsfunctioncalls,withactualparametersgeneratedbyA.Anactualparameterisanexpression.6.9.INTERMEDIATECODEFORPROCEDURES423D!de\fneTid(F){S}F!\u000fjTid,FS!returnE;E!id(A)A!\u000fjE,AFigure6.52:AddingfunctionstothesourcelanguageFunctionde\fnitionsandfunctioncallscanbetranslatedusingconceptsthathavealreadybeenintroducedinthischapter.\u000fFunctiontypes.Thetypeofafunctionmustencodethereturntypeandthetypesoftheformalparameters.Letvoidbeaspecialtypethatrepre-sentsnoparameterornoreturntype.Thetypeofafunctionpop()thatreturnsanintegeristherefore\\functionfromvoidtointeger.\"Functiontypescanberepresentedbyusingaconstructorfunappliedtothereturntypeandanorderedlistoftypesfortheparameters.\u000fSymboltables.Letsbethetopsymboltablewhenthefunctionde\fnitionisreached.Thefunctionnameisenteredintosforuseintherestoftheprogram.Theformalparametersofafunctioncanbehandledinanalogywith\feldnamesinarecord(seeFig.6.18).IntheproductionforD,afterseeingde\fneandthefunctionname,wepushsandsetupanewsymboltableEnv:push(top);top=newEnv(top);Callthenewsymboltable,t.NotethattopispassedasaparameterinnewEnv(top),sothenewsymboltabletcanbelinkedtothepreviousone,s.Thenewtabletisusedtotranslatethefunctionbody.Wereverttotheprevioussymboltablesafterthefunctionbodyistranslated.\u000fTypechecking.Withinexpressions,afunctionistreatedlikeanyotheroperator.ThediscussionoftypecheckinginSection6.5.2thereforecarriesover,includingtherulesforcoercions.Forexample,iffisafunctionwithaparameteroftypereal,thentheinteger2iscoercedtoarealinthecallf(2).\u000fFunctioncalls.Whengeneratingthree-addressinstructionsforafunctioncallid(E;E;:::;E),itissu\u000ecienttogeneratethethree-addressinstruc-tionsforevaluatingorreducingtheparametersEtoaddresses,followedbyaparaminstructionforeachparameter.Ifwedonotwanttomixtheparameter-evaluatinginstructionswiththeparaminstructions,theattributeE:addrforeachexpressionEcanbesavedinadatastructure424CHAPTER6.INTERMEDIATE-CODEGENERATIONsuchasaqueue.Oncealltheexpressionsaretranslated,theparamin-structionscanbegeneratedasthequeueisemptied.Theprocedureissuchanimportantandfrequentlyusedprogrammingcon-structthatitisimperativeforacompilertogenerategoodcodeforprocedurecallsandreturns.Therun-timeroutinesthathandleprocedureparameterpass-ing,calls,andreturnsarepartoftherun-timesupportpackage.Mechanismsforrun-timesupportarediscussedinChapter7.6.10SummaryofChapter6Thetechniquesinthischaptercanbecombinedtobuildasimplecompilerfrontend,liketheoneinAppendixA.Thefrontendcanbebuiltincrementally: ✦Pickanintermediaterepresentation:Anintermediaterepresentationistypicallysomecombinationofagraphicalnotationandthree-addresscode.Asinsyntaxtrees,anodeinagraphicalnotationrepresentsaconstruct;thechildrenofanoderepresentitssubconstructs.Threead-dresscodetakesitsnamefrominstructionsoftheformx=yopz,withatmostoneoperatorperinstruction.Thereareadditionalinstructionsforcontrol\row. ✦Translateexpressions:Expressionswithbuilt-upoperationscanbeun-woundintoasequenceofindividualoperationsbyattachingactionstoeachproductionoftheformE!E1opE2.TheactioneithercreatesanodeforEwiththenodesforE1andE2aschildren,oritgeneratesathree-addressinstructionthatappliesoptotheaddressesforE1andE2andputstheresultintoanewtemporaryname,whichbecomestheaddressforE. ✦Checktypes:ThetypeofanexpressionE1opE2isdeterminedbytheoperatoropandthetypesofE1andE2.Acoercionisanimplicittypeconversion,suchasfromintegerto\roat.Intermediatecodecontainsex-plicittypeconversionstoensureanexactmatchbetweenoperandtypesandthetypesexpectedbyanoperator. ✦Useasymboltabletoimplementdeclarations:Adeclarationspeci\festhetypeofaname.Thewidthofatypeistheamountofstorageneededforanamewiththattype.Usingwidths,therelativeaddressofanameatruntimecanbecomputedasano\u000bsetfromthestartofadataarea.Thetypeandrelativeaddressofanameareputintothesymboltableduetoadeclaration,sothetranslatorcansubsequentlygetthemwhenthenameappearsinanexpression. ✦Flattenarrays:Forquickaccess,arrayelementsarestoredinconsecutivelocations.Arraysofarraysare\rattenedsotheycanbetreatedasaone-6.11.REFERENCESFORCHAPTER6425dimensionalarrayofindividualelements.Thetypeofanarrayisusedtocalculatetheaddressofanarrayelementrelativetothebaseofthearray. ✦Generatejumpingcodeforbooleanexpressions:Inshort-circuitorjump-ingcode,thevalueofabooleanexpressionisimplicitinthepositionreachedinthecode.JumpingcodeisusefulbecauseabooleanexpressionBistypicallyusedforcontrol\row,asinif(B)S.Booleanvaluescanbecomputedbyjumpingtot=trueort=false,asappropriate,wheretisatemporaryname.Usinglabelsforjumps,abooleanexpressioncanbetranslatedbyinheritinglabelscorrespondingtoitstrueandfalseexits.Theconstantstrueandfalsetranslateintoajumptothetrueandfalseexits,respectively. ✦Implementstatementsusingcontrol\row:Statementscanbetranslatedbyinheritingalabelnext,wherenextmarksthe\frstinstructionafterthecodeforthisstatement.TheconditionalS!if(B)S1canbetranslatedbyattachinganewlabelmarkingthebeginningofthecodeforS1andpassingthenewlabelandS:nextforthetrueandfalseexits,respectively,ofB. ✦Alternatively,usebackpatching:Backpatchingisatechniqueforgenerat-ingcodeforbooleanexpressionsandstatementsinonepass.Theideaistomaintainlistsofincompletejumps,whereallthejumpinstructionsonalisthavethesametarget.Whenthetargetbecomesknown,alltheinstructionsonitslistarecompletedby\fllinginthetarget. ✦Implementrecords:Fieldnamesinarecordorclasscanbetreatedasasequenceofdeclarations.Arecordtypeencodesthetypesandrelativeaddressesofthe\felds.Asymboltableobjectcanbeusedforthispurpose.6.11ReferencesforChapter6Mostofthetechniquesinthischapterstemfromthe\rurryofdesignandim-plementationactivityaroundAlgol60.Syntax-directedtranslationintointer-mediatecodewaswellestablishedbythetimePascal[11]andC[6,9]werecreated.UNCOL(forUniversalCompilerOrientedLanguage)isamythicaluniversalintermediatelanguage,soughtsincethemid1950's.GivenanUNCOL,com-pilerscouldbeconstructedbyhookingafrontendforagivensourcelanguagewithabackendforagiventargetlanguage[10].Thebootstrappingtechniquesgiveninthereport[10]areroutinelyusedtoretargetcompilers.TheUNCOLidealofmixingandmatchingfrontendswithbackendshasbeenapproachedinanumberofways.Aretargetablecompilerconsistsofonefrontendthatcanbeputtogetherwithseveralbackendstoimplementagivenlanguageonseveralmachines.Neliacwasanearlyexampleofalanguagewitharetargetablecompiler[5]writteninitsownlanguage.Anotherapproachisto426CHAPTER6.INTERMEDIATE-CODEGENERATIONretro\ftafrontendforanewlanguageontoanexistingcompiler.Feldman[2]describestheadditionofaFortran77frontendtotheCcompilers[6]and[9].GCC,theGNUCompilerCollection[3],supportsfrontendsforC,C++,Objective-C,Fortran,Java,andAda.ValuenumbersandtheirimplementationbyhashingarefromErshov[1].TheuseoftypeinformationtoimprovethesecurityofJavabytecodesisdescribedbyGosling[4].Typeinferencebyusinguni\fcationtosolvesetsofequationshasbeenre-discoveredseveraltimes;itsapplicationtoMLisdescribedbyMilner[7].SeePierce[8]foracomprehensivetreatmentoftypes.1.Ershov,A.P.,\\Onprogrammingofarithmeticoperations,\"Comm.ACM1:8(1958),pp.3{6.SeealsoComm.ACM1:9(1958),p.16.2.Feldman,S.I.,\\ImplementationofaportableFortran77compilerusingmoderntools,\"ACMSIGPLANNotices14:8(1979),pp.98{106.3.GCChomepagehttp://gcc.gnu.org/,FreeSoftwareFoundation.4.Gosling,J.,\\Javaintermediatebytecodes,\"Proc.ACMSIGPLANWork-shoponIntermediateRepresentations(1995),pp.111{118.5.Huskey,H.D.,M.H.Halstead,andR.McArthur,\\Neliac|adialectofAlgol,\"Comm.ACM3:8(1960),pp.463{468.6.Johnson,S.C.,\\AtourthroughtheportableCcompiler,\"BellTelephoneLaboratories,Inc.,MurrayHill,N.J.,1979.7.Milner,R.,\\Atheoryoftypepolymorphisminprogramming,\"J.Com-puterandSystemSciences17:3(1978),pp.348{375.8.Pierce,B.C.,TypesandProgrammingLanguages,MITPress,Cambridge,Mass.,2002.9.Ritchie,D.M.,\\AtourthroughtheUNIXCcompiler,\"BellTelephoneLaboratories,Inc.,MurrayHill,N.J.,1979.10.Strong,J.,J.Wegstein,A.Tritter,J.Olsztyn,O.Mock,andT.Steel,\\Theproblemofprogrammingcommunicationwithchangingmachines:aproposedsolution,\"Comm.ACM1:8(1958),pp.12{18.Part2:1:9(1958),pp.9{15.ReportoftheSHAREAd-HocCommitteeonUniversalLanguages.11.Wirth,N.\\ThedesignofaPascalcompiler,\"Software|PracticeandExperience1:4(1971),pp.309{333.Chapter7Run-TimeEnvironmentsAcompilermustaccuratelyimplementtheabstractionsembodiedinthesource-languagede\fnition.Theseabstractionstypicallyincludetheconceptswedis-cussedinSection1.6suchasnames,scopes,bindings,datatypes,operators,procedures,parameters,and\row-of-controlconstructs.Thecompilermustco-operatewiththeoperatingsystemandothersystemssoftwaretosupporttheseabstractionsonthetargetmachine.Todoso,thecompilercreatesandmanagesarun-timeenvironmentinwhichitassumesitstargetprogramsarebeingexecuted.Thisenvironmentdealswithavarietyofissuessuchasthelayoutandallocationofstoragelocationsfortheobjectsnamedinthesourceprogram,themechanismsusedbythetargetpro-gramtoaccessvariables,thelinkagesbetweenprocedures,themechanismsforpassingparameters,andtheinterfacestotheoperatingsystem,input/outputdevices,andotherprograms.Thetwothemesinthischapteraretheallocationofstoragelocationsandaccesstovariablesanddata.Weshalldiscussmemorymanagementinsomedetail,includingstackallocation,heapmanagement,andgarbagecollection.Inthenextchapter,wepresenttechniquesforgeneratingtargetcodeformanycommonlanguageconstructs.7.1StorageOrganizationFromtheperspectiveofthecompilerwriter,theexecutingtargetprogramrunsinitsownlogicaladdressspaceinwhicheachprogramvaluehasalocation.Themanagementandorganizationofthislogicaladdressspaceissharedbetweenthecompiler,operatingsystem,andtargetmachine.Theoperatingsystemmapsthelogicaladdressesintophysicaladdresses,whichareusuallyspreadthroughoutmemory.Therun-timerepresentationofanobjectprograminthelogicaladdressspaceconsistsofdataandprogramareasasshowninFig.7.1.Acompilerfora427428CHAPTER7.RUN-TIMEENVIRONMENTSlanguagelikeC++onanoperatingsystemlikeLinuxmightsubdividememoryinthisway.CodeStaticHeapFreeMemoryStackFigure7.1:Typicalsubdivisionofrun-timememoryintocodeanddataareasThroughoutthisbook,weassumetherun-timestoragecomesinblocksofcontiguousbytes,whereabyteisthesmallestunitofaddressablememory.Abyteiseightbitsandfourbytesformamachineword.Multibyteobjectsarestoredinconsecutivebytesandgiventheaddressofthe\frstbyte.AsdiscussedinChapter6,theamountofstorageneededforanameisde-terminedfromitstype.Anelementarydatatype,suchasacharacter,integer,or\roat,canbestoredinanintegralnumberofbytes.Storageforanaggre-gatetype,suchasanarrayorstructure,mustbelargeenoughtoholdallitscomponents.Thestoragelayoutfordataobjectsisstronglyin\ruencedbytheaddressingconstraintsofthetargetmachine.Onmanymachines,instructionstoaddin-tegersmayexpectintegerstobealigned,thatis,placedatanaddressdivisibleby4.Althoughacharacterarray(asinC)oflength10needsonlyenoughbytestoholdtencharacters,acompilermayallocate12bytestogettheproperalignment,leaving2bytesunused.Spaceleftunusedduetoalignmentconsid-erationsisreferredtoaspadding.Whenspaceisatapremium,acompilermaypackdatasothatnopaddingisleft;additionalinstructionsmaythenneedtobeexecutedatruntimetopositionpackeddatasothatitcanbeoperatedonasifitwereproperlyaligned.Thesizeofthegeneratedtargetcodeis\fxedatcompiletime,sothecom-pilercanplacetheexecutabletargetcodeinastaticallydeterminedareaCode,usuallyinthelowendofmemory.Similarly,thesizeofsomeprogramdataobjects,suchasglobalconstants,anddatageneratedbythecompiler,suchasinformationtosupportgarbagecollection,maybeknownatcompiletime,andthesedataobjectscanbeplacedinanotherstaticallydeterminedareacalledStatic.Onereasonforstaticallyallocatingasmanydataobjectsaspossibleis7.1.STORAGEORGANIZATION429thattheaddressesoftheseobjectscanbecompiledintothetargetcode.InearlyversionsofFortran,alldataobjectscouldbeallocatedstatically.Tomaximizetheutilizationofspaceatruntime,theothertwoareas,StackandHeap,areattheoppositeendsoftheremainderoftheaddressspace.Theseareasaredynamic;theirsizecanchangeastheprogramexecutes.Theseareasgrowtowardseachotherasneeded.Thestackisusedtostoredatastructurescalledactivationrecordsthatgetgeneratedduringprocedurecalls.Inpractice,thestackgrowstowardsloweraddresses,theheaptowardshigher.However,throughoutthischapterandthenextweshallassumethatthestackgrowstowardshigheraddressessothatwecanusepositiveo\u000bsetsfornotationalconvenienceinallourexamples.Asweshallseeinthenextsection,anactivationrecordisusedtostoreinformationaboutthestatusofthemachine,suchasthevalueoftheprogramcounterandmachineregisters,whenaprocedurecalloccurs.Whencontrolreturnsfromthecall,theactivationofthecallingprocedurecanberestartedafterrestoringthevaluesofrelevantregistersandsettingtheprogramcountertothepointimmediatelyafterthecall.Dataobjectswhoselifetimesarecon-tainedinthatofanactivationcanbeallocatedonthestackalongwithotherinformationassociatedwiththeactivation.Manyprogramminglanguagesallowtheprogrammertoallocateanddeal-locatedataunderprogramcontrol.Forexample,Chasthefunctionsmallocandfreethatcanbeusedtoobtainandgivebackarbitrarychunksofstor-age.Theheapisusedtomanagethiskindoflong-liveddata.Section7.4willdiscussvariousmemory-managementalgorithmsthatcanbeusedtomaintaintheheap.7.1.1StaticVersusDynamicStorageAllocationThelayoutandallocationofdatatomemorylocationsintherun-timeenvi-ronmentarekeyissuesinstoragemanagement.Theseissuesaretrickybecausethesamenameinaprogramtextcanrefertomultiplelocationsatruntime.Thetwoadjectivesstaticanddynamicdistinguishbetweencompiletimeandruntime,respectively.Wesaythatastorage-allocationdecisionisstatic,ifitcanbemadebythecompilerlookingonlyatthetextoftheprogram,notatwhattheprogramdoeswhenitexecutes.Conversely,adecisionisdynamicifitcanbedecidedonlywhiletheprogramisrunning.Manycompilersusesomecombinationofthefollowingtwostrategiesfordynamicstorageallocation:1.Stackstorage.Nameslocaltoaprocedureareallocatedspaceonastack.Wediscussthe\\run-timestack\"startinginSection7.2.Thestacksup-portsthenormalcall/returnpolicyforprocedures.2.Heapstorage.Datathatmayoutlivethecalltotheprocedurethatcre-ateditisusuallyallocatedona\\heap\"ofreusablestorage.WediscussheapmanagementstartinginSection7.4.Theheapisanareaofvirtual430CHAPTER7.RUN-TIMEENVIRONMENTSmemorythatallowsobjectsorotherdataelementstoobtainstoragewhentheyarecreatedandtoreturnthatstoragewhentheyareinvalidated.Tosupportheapmanagement,\\garbagecollection\"enablestherun-timesystemtodetectuselessdataelementsandreusetheirstorage,evenifthepro-grammerdoesnotreturntheirspaceexplicitly.Automaticgarbagecollectionisanessentialfeatureofmanymodernlanguages,despiteitbeingadi\u000ecultoperationtodoe\u000eciently;itmaynotevenbepossibleforsomelanguages.7.2StackAllocationofSpaceAlmostallcompilersforlanguagesthatuseprocedures,functions,ormethodsasunitsofuser-de\fnedactionsmanageatleastpartoftheirrun-timememoryasastack.Eachtimeaprocedure1iscalled,spaceforitslocalvariablesispushedontoastack,andwhentheprocedureterminates,thatspaceispoppedo\u000bthestack.Asweshallsee,thisarrangementnotonlyallowsspacetobesharedbyprocedurecallswhosedurationsdonotoverlapintime,butitallowsustocompilecodeforaprocedureinsuchawaythattherelativeaddressesofitsnonlocalvariablesarealwaysthesame,regardlessofthesequenceofprocedurecalls.7.2.1ActivationTreesStackallocationwouldnotbefeasibleifprocedurecalls,oractivationsofpro-cedures,didnotnestintime.Thefollowingexampleillustratesnestingofprocedurecalls.Example7.1:Figure7.2containsasketchofaprogramthatreadsnineinte-gersintoanarrayaandsortsthemusingtherecursivequicksortalgorithm.Themainfunctionhasthreetasks.ItcallsreadArray,setsthesentinels,andthencallsquicksortontheentiredataarray.Figure7.3suggestsasequenceofcallsthatmightresultfromanexecutionoftheprogram.Inthisexecution,thecalltopartition(1;9)returns4,soa[1]througha[3]holdelementslessthanitschosenseparatorvaluev,whilethelargerelementsareina[5]througha[9].2Inthisexample,asistrueingeneral,procedureactivationsarenestedintime.Ifanactivationofprocedurepcallsprocedureq,thenthatactivationofqmustendbeforetheactivationofpcanend.Therearethreecommoncases:1.Theactivationofqterminatesnormally.Theninessentiallyanylanguage,controlresumesjustafterthepointofpatwhichthecalltoqwasmade.2.Theactivationofq,orsomeprocedureqcalled,eitherdirectlyorindi-rectly,aborts;i.e.,itbecomesimpossibleforexecutiontocontinue.Inthatcase,pendssimultaneouslywithq.7.2.STACKALLOCATIONOFSPACE431inta[11];voidreadArray(){/*Reads9integersintoa[1];:::;a[9].*/inti;\u0001\u0001\u0001}intpartition(intm,intn){/*Picksaseparatorvaluev,andpartitionsa[m::n]sothata[m::p\u00001]arelessthanv,a[p]=v,anda[p+1::n]areequaltoorgreaterthanv.Returnsp.*/\u0001\u0001\u0001}voidquicksort(intm,intn){inti;if(n>m){i=partition(m,n);quicksort(m,i-1);quicksort(i+1,n);}}main(){readArray();a[0]=-9999;a[10]=9999;quicksort(1,9);}Figure7.2:Sketchofaquicksortprogram3.Theactivationofqterminatesbecauseofanexceptionthatqcannothan-dle.Procedurepmayhandletheexception,inwhichcasetheactivationofqhasterminatedwhiletheactivationofpcontinues,althoughnotnec-essarilyfromthepointatwhichthecalltoqwasmade.Ifpcannothandletheexception,thenthisactivationofpterminatesatthesametimeastheactivationofq,andpresumablytheexceptionwillbehandledbysomeotheropenactivationofaprocedure.Wethereforecanrepresenttheactivationsofproceduresduringtherunningofanentireprogrambyatree,calledanactivationtree.Eachnodecorrespondstooneactivation,andtherootistheactivationofthe\\main\"procedurethatinitiatesexecutionoftheprogram.Atanodeforanactivationofprocedurep,thechildrencorrespondtoactivationsoftheprocedurescalledbythisactivationofp.Weshowtheseactivationsintheorderthattheyarecalled,fromlefttoright.Noticethatonechildmust\fnishbeforetheactivationtoitsrightcanbegin.432CHAPTER7.RUN-TIMEENVIRONMENTS7.2.STACKALLOCATIONOFSPACE433entermain()enterreadArray()leavereadArray()enterquicksort(1,9)enterpartition(1,9)leavepartition(1,9)enterquicksort(1,3)\u0001\u0001\u0001leavequicksort(1,3)enterquicksort(5,9)\u0001\u0001\u0001leavequicksort(5,9)leavequicksort(1,9)leavemain()Figure7.3:PossibleactivationsfortheprogramofFig.7.2q(2;1)q(3;3)q(5;9)p(5;9)q(9;9)q(5;5)q(7;9)p(7;9)q(7;7)mp(2;3)q(2;3)q(1;0)p(1;3)q(1;3)p(1;9)q(1;9)rFigure7.4:Activationtreerepresentingcallsduringanexecutionofquicksort7.2.2ActivationRecordsProcedurecallsandreturnsareusuallymanagedbyarun-timestackcalledthecontrolstack.Eachliveactivationhasanactivationrecord(sometimescalledaframe)onthecontrolstack,withtherootoftheactivationtreeatthebottom,andtheentiresequenceofactivationrecordsonthestackcorrespondingtothepathintheactivationtreetotheactivationwherecontrolcurrentlyresides.Thelatteractivationhasitsrecordatthetopofthestack.Example7.3:Ifcontroliscurrentlyintheactivationq(2;3)ofthetreeofFig.7.4,thentheactivationrecordforq(2;3)isatthetopofthecontrolstack.Justbelowistheactivationrecordforq(1;3),theparentofq(2;3)inthetree.Belowthatistheactivationrecordq(1;9),andatthebottomistheactivationrecordform,themainfunctionandrootoftheactivationtree.2434CHAPTER7.RUN-TIMEENVIRONMENTSWeshallconventionallydrawcontrolstackswiththebottomofthestackhigherthanthetop,sotheelementsinanactivationrecordthatappearlowestonthepageareactuallyclosesttothetopofthestack.Thecontentsofactivationrecordsvarywiththelanguagebeingimple-mented.Hereisalistofthekindsofdatathatmightappearinanactivationrecord(seeFig.7.5forasummaryandpossibleorderfortheseelements):TemporariesLocaldataSavedmachinestatusAccesslinkControllinkReturnedvaluesActualparametersFigure7.5:Ageneralactivationrecord1.Temporaryvalues,suchasthosearisingfromtheevaluationofexpres-sions,incaseswherethosetemporariescannotbeheldinregisters.2.Localdatabelongingtotheprocedurewhoseactivationrecordthisis.3.Asavedmachinestatus,withinformationaboutthestateofthemachinejustbeforethecalltotheprocedure.Thisinformationtypicallyincludesthereturnaddress(valueoftheprogramcounter,towhichthecalledproceduremustreturn)andthecontentsofregistersthatwereusedbythecallingprocedureandthatmustberestoredwhenthereturnoccurs.4.An\\accesslink\"maybeneededtolocatedataneededbythecalledproce-durebutfoundelsewhere,e.g.,inanotheractivationrecord.AccesslinksarediscussedinSection7.3.5.5.Acontrollink,pointingtotheactivationrecordofthecaller.6.Spaceforthereturnvalueofthecalledfunction,ifany.Again,notallcalledproceduresreturnavalue,andifonedoes,wemayprefertoplacethatvalueinaregisterfore\u000eciency.7.Theactualparametersusedbythecallingprocedure.Commonly,thesevaluesarenotplacedintheactivationrecordbutratherinregisters,whenpossible,forgreatere\u000eciency.However,weshowaspaceforthemtobecompletelygeneral.7.2.STACKALLOCATIONOFSPACE435Example7.4:Figure7.6showssnapshotsoftherun-timestackascontrol\rowsthroughtheactivationtreeofFig.7.4.Dashedlinesinthepartialtreesgotoactivationsthathaveended.Sincearrayaisglobal,spaceisallocatedforitbeforeexecutionbeginswithanactivationofproceduremain,asshowninFig.7.6(a).integeriintegerm,nmainq(1;3)integeri(d)Controlreturnstoq(1;3)rrq(1;9)integerm,nmainintegera[11]q(1;0)p(1;3)q(1;3)p(1;9)q(1;9)r(a)Frameformainmainintegera[11]main(b)risactivatedintegerirmainintegera[11]main(c)rhasbeenpoppedandq(1;9)pushedintegeriq(1;9)integerm,nmainintegera[11]q(1;9)mainFigure7.6:Downward-growingstackofactivationrecordsWhencontrolreachesthe\frstcallinthebodyofmain,procedurerisactivated,anditsactivationrecordispushedontothestack(Fig.7.6(b)).Theactivationrecordforrcontainsspaceforlocalvariablei.Recallthatthetopofstackisatthebottomofdiagrams.Whencontrolreturnsfromthisactivation,itsrecordispopped,leavingjusttherecordformainonthestack.Controlthenreachesthecalltoq(quicksort)withactualparameters1and9,andanactivationrecordforthiscallisplacedonthetopofthestack,asinFig.7.6(c).Theactivationrecordforqcontainsspacefortheparametersmandnandthelocalvariablei,followingthegenerallayoutinFig.7.5.Noticethatspaceonceusedbythecallofrisreusedonthestack.Notraceofdatalocaltorwillbeavailabletoq(1;9).Whenq(1;9)returns,thestackagainhasonlytheactivationrecordformain.SeveralactivationsoccurbetweenthelasttwosnapshotsinFig.7.6.Arecursivecalltoq(1;3)wasmade.Activationsp(1;3)andq(1;0)havebegunandendedduringthelifetimeofq(1;3),leavingtheactivationrecordforq(1;3)436CHAPTER7.RUN-TIMEENVIRONMENTSontop(Fig.7.6(d)).Noticethatwhenaprocedureisrecursive,itisnormaltohaveseveralofitsactivationrecordsonthestackatthesametime.27.2.3CallingSequencesProcedurecallsareimplementedbywhatareknownascallingsequences,whichconsistsofcodethatallocatesanactivationrecordonthestackandentersinformationintoits\felds.Areturnsequenceissimilarcodetorestorethestateofthemachinesothecallingprocedurecancontinueitsexecutionafterthecall.Callingsequencesandthelayoutofactivationrecordsmaydi\u000bergreatly,evenamongimplementationsofthesamelanguage.Thecodeinacallingse-quenceisoftendividedbetweenthecallingprocedure(the\\caller\")andtheprocedureitcalls(the\\callee\").Thereisnoexactdivisionofrun-timetasksbetweencallerandcallee;thesourcelanguage,thetargetmachine,andtheop-eratingsystemimposerequirementsthatmayfavoronesolutionoveranother.Ingeneral,ifaprocedureiscalledfromndi\u000berentpoints,thentheportionofthecallingsequenceassignedtothecallerisgeneratedntimes.However,theportionassignedtothecalleeisgeneratedonlyonce.Hence,itisdesirabletoputasmuchofthecallingsequenceintothecalleeaspossible|whateverthecalleecanbereliedupontoknow.Weshallsee,however,thatthecalleecannotknoweverything.Whendesigningcallingsequencesandthelayoutofactivationrecords,thefollowingprinciplesarehelpful:1.Valuescommunicatedbetweencallerandcalleearegenerallyplacedatthebeginningofthecallee'sactivationrecord,sotheyareascloseaspossibletothecaller'sactivationrecord.Themotivationisthatthecallercancomputethevaluesoftheactualparametersofthecallandplacethemontopofitsownactivationrecord,withouthavingtocreatetheentireactivationrecordofthecallee,oreventoknowthelayoutofthatrecord.Moreover,itallowsfortheuseofproceduresthatdonotalwaystakethesamenumberortypeofarguments,suchasC'sprintffunction.Thecalleeknowswheretoplacethereturnvalue,relativetoitsownactivationrecord,whilehowevermanyargumentsarepresentwillappearsequentiallybelowthatplaceonthestack.2.Fixed-lengthitemsaregenerallyplacedinthemiddle.FromFig.7.5,suchitemstypicallyincludethecontrollink,theaccesslink,andthemachinestatus\felds.Ifexactlythesamecomponentsofthemachinestatusaresavedforeachcall,thenthesamecodecandothesavingandrestoringforeach.Moreover,ifwestandardizethemachine'sstatusinformation,thenprogramssuchasdebuggerswillhaveaneasiertimedecipheringthestackcontentsifanerroroccurs.3.Itemswhosesizemaynotbeknownearlyenoughareplacedattheendoftheactivationrecord.Mostlocalvariableshavea\fxedlength,which7.2.STACKALLOCATIONOFSPACE437canbedeterminedbythecompilerbyexaminingthetypeofthevariable.However,somelocalvariableshaveasizethatcannotbedetermineduntiltheprogramexecutes;themostcommonexampleisadynamicallysizedarray,wherethevalueofoneofthecallee'sparametersdeterminesthelengthofthearray.Moreover,theamountofspaceneededfortempo-rariesusuallydependsonhowsuccessfulthecode-generationphaseisinkeepingtemporariesinregisters.Thus,whilethespaceneededfortem-porariesiseventuallyknowntothecompiler,itmaynotbeknownwhentheintermediatecodeis\frstgenerated.4.Wemustlocatethetop-of-stackpointerjudiciously.Acommonapproachistohaveitpointtotheendofthe\fxed-length\feldsintheactivationrecord.Fixed-lengthdatacanthenbeaccessedby\fxedo\u000bsets,knowntotheintermediate-codegenerator,relativetothetop-of-stackpointer.Aconsequenceofthisapproachisthatvariable-length\feldsintheactivationrecordsareactually\\above\"thetop-of-stack.Theiro\u000bsetsneedtobecalculatedatruntime,buttheytoocanbeaccessedfromthetop-of-stackpointer,byusingapositiveo\u000bset.TemporariesandlocaldataParametersandreturnedvalueLinksandsavedstatusLinksandsavedstatusTemporariesandlocaldatatop438CHAPTER7.RUN-TIMEENVIRONMENTS2.Thecallerstoresareturnaddressandtheoldvalueoftop7.2.STACKALLOCATIONOFSPACE439showninFig.7.8.Thesameschemeworksforobjectsofanytypeiftheyarelocaltotheprocedurecalledandhaveasizethatdependsontheparametersofthecall.InFig.7.8,procedurephasthreelocalarrays,whosesizeswesupposecannotbedeterminedatcompiletime.Thestorageforthesearraysisnotpartoftheactivationrecordforp,althoughitdoesappearonthestack.Onlyapointertothebeginningofeacharrayappearsintheactivationrecorditself.Thus,whenpisexecuting,thesepointersareatknowno\u000bsetsfromthetop-of-stackpointer,sothetargetcodecanaccessarrayelementsthroughthesepointers.Controllinkandsavedstatus\u0001\u0001\u0001Pointertoatop440CHAPTER7.RUN-TIMEENVIRONMENTSintermsofsizesthatwillbecomeknownatruntime.Whenqreturns,top7.3.ACCESSTONONLOCALDATAONTHESTACK441intf(intn){intt,s;if(n<2)return1;s=f(n-1);t=f(n-2);returns+t;}Figure7.9:FibonacciprogramforExercise7.2.3a)Whichfunctioncreatesthespaceonthestackforeachelement?b)Whichfunctionwritesthevalueofeachelement?c)Towhichactivationrecorddoestheelementbelong?Exercise7.2.5:Inalanguagethatpassesparametersbyreference,thereisafunctionf(x;y)thatdoesthefollowing:x=x+1;y=y+2;returnx+y;Ifaisassignedthevalue3,andthenf(a;a)iscalled,whatisreturned?Exercise7.2.6:TheCfunctionfisde\fnedby:intf(intx,*py,**ppz){**ppz+=1;*py+=2;x+=3;returnx+*py+**ppz;}Variableaisapointertob;variablebisapointertoc,andcisanintegercurrentlywithvalue4.Ifwecallf(c;b;a),whatisreturned?7.3AccesstoNonlocalDataontheStackInthissection,weconsiderhowproceduresaccesstheirdata.Especiallyim-portantisthemechanismfor\fndingdatausedwithinaprocedurepbutthatdoesnotbelongtop.Accessbecomesmorecomplicatedinlanguageswhereprocedurescanbedeclaredinsideotherprocedures.WethereforebeginwiththesimplecaseofCfunctions,andthenintroducealanguage,ML,thatpermitsbothnestedfunctiondeclarationsandfunctionsas\\\frst-classobjects;\"thatis,functionscantakefunctionsasargumentsandreturnfunctionsasvalues.Thiscapabilitycanbesupportedbymodifyingtheimplementationoftherun-timestack,andweshallconsiderseveraloptionsformodifyingtheactivationrecordsofSection7.2.442CHAPTER7.RUN-TIMEENVIRONMENTS7.3.1DataAccessWithoutNestedProceduresIntheCfamilyoflanguages,allvariablesarede\fnedeitherwithinasinglefunctionoroutsideanyfunction(\\globally\").Mostimportantly,itisimpossibletodeclareoneprocedurewhosescopeisentirelywithinanotherprocedure.Rather,aglobalvariablevhasascopeconsistingofallthefunctionsthatfollowthedeclarationofv,exceptwherethereisalocalde\fnitionoftheidenti\ferv.Variablesdeclaredwithinafunctionhaveascopeconsistingofthatfunctiononly,orpartofit,ifthefunctionhasnestedblocks,asdiscussedinSection1.6.3.Forlanguagesthatdonotallownestedproceduredeclarations,allocationofstorageforvariablesandaccesstothosevariablesissimple:1.Globalvariablesareallocatedstaticstorage.Thelocationsofthesevari-ablesremain\fxedandareknownatcompiletime.Sotoaccessanyvariablethatisnotlocaltothecurrentlyexecutingprocedure,wesimplyusethestaticallydeterminedaddress.2.Anyothernamemustbelocaltotheactivationatthetopofthestack.Wemayaccessthesevariablesthroughthetop7.3.ACCESSTONONLOCALDATAONTHESTACK4437.3.3ALanguageWithNestedProcedureDeclarationsTheCfamilyoflanguages,andmanyotherfamiliarlanguagesdonotsupportnestedprocedures,soweintroduceonethatdoes.Thehistoryofnestedpro-ceduresinlanguagesislong.Algol60,anancestorofC,hadthiscapability,asdiditsdescendantPascal,aonce-popularteachinglanguage.Ofthelaterlanguageswithnestedprocedures,oneofthemostin\ruentialisML,anditisthislanguagewhosesyntaxandsemanticsweshallborrow(seetheboxon\\MoreaboutML\"forsomeoftheinterestingfeaturesofML):\u000fMLisafunctionallanguage,meaningthatvariables,oncedeclaredandinitialized,arenotchanged.Thereareonlyafewexceptions,suchasthearray,whoseelementscanbechangedbyspecialfunctioncalls.\u000fVariablesarede\fned,andhavetheirunchangeablevaluesinitialized,byastatementoftheform:valhnamei=hexpressioni\u000fFunctionsarede\fnedusingthesyntax:funhnamei(hargumentsi)=hbodyi\u000fForfunctionbodiesweshalluselet-statementsoftheform:lethlistofde\fnitionsiinhstatementsiendThede\fnitionsarenormallyvalorfunstatements.Thescopeofeachsuchde\fnitionconsistsofallfollowingde\fnitions,uptothein,andallthestatementsuptotheend.Mostimportantly,functionde\fnitionscanbenested.Forexample,thebodyofafunctionpcancontainalet-statementthatincludesthede\fnitionofanother(nested)functionq.Similarly,qcanhavefunctionde\fnitionswithinitsownbody,leadingtoarbitrarilydeepnestingoffunctions.7.3.4NestingDepthLetusgivenestingdepth1toproceduresthatarenotnestedwithinanyotherprocedure.Forexample,allCfunctionsareatnestingdepth1.However,ifaprocedurepisde\fnedimmediatelywithinaprocedureatnestingdepthi,thengivepthenestingdepthi+1.Example7.5:Figure7.10containsasketchinMLofourrunningquicksortexample.Theonlyfunctionatnestingdepth1istheoutermostfunction,sort,whichreadsanarrayaof9integersandsortsthemusingthequicksortalgo-rithm.De\fnedwithinsort,atline(2),isthearrayaitself.Noticetheform444CHAPTER7.RUN-TIMEENVIRONMENTS7.3.ACCESSTONONLOCALDATAONTHESTACK4451)funsort(inputFile,outputFile)=let2)vala=array(11,0);3)funreadArray(inputFile)=\u0001\u0001\u00014)\u0001\u0001\u0001a\u0001\u0001\u0001;5)funexchange(i,j)=6)\u0001\u0001\u0001a\u0001\u0001\u0001;7)funquicksort(m,n)=let8)valv=\u0001\u0001\u0001;9)funpartition(y,z)=10)\u0001\u0001\u0001a\u0001\u0001\u0001v\u0001\u0001\u0001exchange\u0001\u0001\u0001in11)\u0001\u0001\u0001a\u0001\u0001\u0001v\u0001\u0001\u0001partition\u0001\u0001\u0001quicksortendin12)\u0001\u0001\u0001a\u0001\u0001\u0001readArray\u0001\u0001\u0001quicksort\u0001\u0001\u0001end;Figure7.10:Aversionofquicksort,inMLstyle,usingnestedfunctions(11)suggeststhatquicksortaccessesvariablesaandv,thefunctionpartition,anditselfrecursively.Line(12)suggeststhattheouterfunctionsortaccessesaandcallsthetwoproceduresreadArrayandquicksort.27.3.5AccessLinksAdirectimplementationofthenormalstaticscoperulefornestedfunctionsisobtainedbyaddingapointercalledtheaccesslinktoeachactivationrecord.Ifprocedurepisnestedimmediatelywithinprocedureqinthesourcecode,thentheaccesslinkinanyactivationofppointstothemostrecentactivationofq.Notethatthenestingdepthofqmustbeexactlyonelessthanthenestingdepthofp.Accesslinksformachainfromtheactivationrecordatthetopofthestacktoasequenceofactivationsatprogressivelylowernestingdepths.Alongthischainarealltheactivationswhosedataandproceduresareaccessibletothecurrentlyexecutingprocedure.Supposethattheprocedurepatthetopofthestackisatnestingdepthnp,andpneedstoaccessx,whichisanelementde\fnedwithinsomeprocedureqthatsurroundspandhasnestingdepthnq.Notethatnq\u0014np,withequalityonlyifpandqarethesameprocedure.To\fndx,westartattheactivationrecordforpatthetopofthestackandfollowtheaccesslinknp\u0000nqtimes,fromactivationrecordtoactivationrecord.Finally,wewindupatanactivationrecordforq,anditwillalwaysbethemostrecent(highest)activationrecord446CHAPTER7.RUN-TIMEENVIRONMENTSforqthatcurrentlyappearsonthestack.Thisactivationrecordcontainstheelementxthatwewant.Sincethecompilerknowsthelayoutofactivationrecords,xwillbefoundatsome\fxedo\u000bsetfromthepositioninq'sactivationrecordthatwecanreachbyfollowingthelastaccesslink.Example7.6:Figure7.11showsasequenceofstacksthatmightresultfromexecutionofthefunctionsortofFig.7.10.Asbefore,werepresentfunctionnamesbytheir\frstletters,andweshowsomeofthedatathatmightappearinthevariousactivationrecords,aswellastheaccesslinkforeachactivation.InFig.7.11(a),weseethesituationaftersorthascalledreadArraytoloadinputintothearrayaandthencalledquicksort(1;9)tosortthearray.Theaccesslinkfromquicksort(1;9)pointstotheactivationrecordforsort,notbecausesortcalledquicksortbutbecausesortisthemostcloselynestedfunctionsurroundingquicksortintheprogramofFig.7.10.saccesslinkaq(1;9)accesslinkv(a)saccesslinkaq(1;9)accesslinksaccesslinkaq(1;9)accesslinkvq(1;3)accesslinkvp(1;3)accesslinke(1;3)accesslink(d)(c)vq(1;3)accesslinkv(b)saccesslinkaq(1;9)accesslinkvq(1;3)accesslinkvp(1;3)accesslinkFigure7.11:Accesslinksfor\fndingnonlocaldataInsuccessivestepsofFig.7.11weseearecursivecalltoquicksort(1;3),followedbyacalltopartition,whichcallsexchange.Noticethatquicksort(1;3)'saccesslinkpointstosort,forthesamereasonthatquicksort(1;9)'sdoes.InFig.7.11(d),theaccesslinkforexchangebypassestheactivationrecordsforquicksortandpartition,sinceexchangeisnestedimmediatelywithinsort.Thatarrangementis\fne,sinceexchangeneedstoaccessonlythearraya,andthetwoelementsitmustswapareindicatedbyitsownparametersiandj.27.3.ACCESSTONONLOCALDATAONTHESTACK4477.3.6ManipulatingAccessLinksHowareaccesslinksdetermined?Thesimplecaseoccurswhenaprocedurecallistoaparticularprocedurewhosenameisgivenexplicitlyintheprocedurecall.Thehardercaseiswhenthecallistoaprocedure-parameter;inthatcase,theparticularprocedurebeingcalledisnotknownuntilruntime,andthenestingdepthofthecalledproceduremaydi\u000berindi\u000berentexecutionsofthecall.Thus,letus\frstconsiderwhatshouldhappenwhenaprocedureqcallsprocedurep,explicitly.Therearetwocases:1.Procedurepisatahighernestingdepththanq.Thenpmustbede\fnedimmediatelywithinq,orthecallbyqwouldnotbeatapositionthatiswithinthescopeoftheprocedurenamep.Thus,thenestingdepthofpisexactlyonegreaterthanthatofq,andtheaccesslinkfrompmustleadtoq.Itisasimplematterforthecallingsequencetoincludeastepthatplacesintheaccesslinkforpapointertotheactivationrecordofq.ExamplesincludethecallofquicksortbysorttosetupFig.7.11(a),andthecallofpartitionbyquicksorttocreateFig.7.11(c).2.Thenestingdepthnpofpislessthanorequaltothenestingdepthnqofq.Inorderforthecallwithinqtobeinthescopeofnamep,procedureqmustbenestedwithinsomeprocedurer,whilepisaprocedurede\fnedimmediatelywithinr.Thetopactivationrecordforrcanthereforebefoundbyfollowingthechainofaccesslinks,startingintheactivationrecordforq,fornq\u0000np+1hops.Then,theaccesslinkforpmustgotothisactivationofr.Thiscaseincludesrecursivecalls,wherep=q.Inthatcase,thechainofaccesslinksisfollowedforonehop,andtheaccesslinksforpandqarethesame.Anexampleisthecallofquicksort(1;3)byquicksort(1;9)tosetupFig.7.11(b).Italsoincludesthecaseofmutuallyrecursivecalls,wheretwoormoreproceduresarede\fnedwithinacommonparent.Example7.7:Foranexampleofcase(3),noticehowwegofromFig.7.11(c)toFig.7.11(d).Thenestingdepth2ofthecalledfunctionexchangeisonelessthanthedepth3ofthecallingfunctionpartition.Thus,westartattheactivationrecordforpartitionandfollow3\u00002+1=2accesslinks,whichtakesusfrompartition'sactivationrecordtothatofquicksort(1;3)tothatofsort.Theaccesslinkforexchangethereforegoestotheactivationrecordforsort,asweseeinFig.7.11(d).Anequivalentwaytodiscoverthisaccesslinkissimplytofollowaccesslinksfornq\u0000nphops,andcopytheaccesslinkfoundinthatrecord.Inourexample,wewouldgoonehoptotheactivationrecordforquicksort(1;3)andcopyitsaccesslinktosort.Noticethatthisaccesslinkiscorrectforexchange,eventhoughexchangeisnotinthescopeofquicksort,thesebeingsiblingfunctionsnestedwithinsort.2448CHAPTER7.RUN-TIMEENVIRONMENTS7.3.7AccessLinksforProcedureParametersWhenaprocedurepispassedtoanotherprocedureqasaparameter,andqthencallsitsparameter(andthereforecallspinthisactivationofq),itispossiblethatqdoesnotknowthecontextinwhichpappearsintheprogram.Ifso,itisimpossibleforqtoknowhowtosettheaccesslinkforp.Thesolutiontothisproblemisasfollows:whenproceduresareusedasparameters,thecallerneedstopass,alongwiththenameoftheprocedure-parameter,theproperaccesslinkforthatparameter.Thecalleralwaysknowsthelink,sinceifpispassedbyprocedurerasanactualparameter,thenpmustbeanameaccessibletor,andtherefore,rcandeterminetheaccesslinkforpexactlyasifpwerebeingcalledbyrdirectly.Thatis,weusetherulesforconstructingaccesslinksgiveninSection7.3.6.Example7.8:InFig.7.12weseeasketchofanMLfunctionathathasfunctionsbandcnestedwithinit.Functionbhasafunction-valuedparameterf,whichitcalls.Functioncde\fneswithinitafunctiond,andcthencallsbwithactualparameterd.funa(x)=letfunb(f)=\u0001\u0001\u0001f\u0001\u0001\u0001;func(y)=letfund(z)=\u0001\u0001\u0001in\u0001\u0001\u0001b(d)\u0001\u0001\u0001endin\u0001\u0001\u0001c(1)\u0001\u0001\u0001end;Figure7.12:SketchofMLprogramthatusesfunction-parametersLetustracewhathappenswhenaisexecuted.First,acallsc,soweplaceanactivationrecordforcabovethatforaonthestack.Theaccesslinkforcpointstotherecordfora,sincecisde\fnedimmediatelywithina.Thenccallsb(d).Thecallingsequencesetsupanactivationrecordforb,asshowninFig.7.13(a).Withinthisactivationrecordistheactualparameterdanditsaccesslink,whichtogetherformthevalueofformalparameterfintheactivationrecordforb.Noticethatcknowsaboutd,sincedisde\fnedwithinc,andthereforecpassesapointertoitsownactivationrecordastheaccesslink.Nomatterwheredwasde\fned,ifcisinthescopeofthatde\fnition,thenoneofthethreerulesofSection7.3.6mustapply,andccanprovidethelink.7.3.ACCESSTONONLOCALDATAONTHESTACK449accesslinkca(b)accesslinkdf:hd;iaccesslinkbaccesslinkca(a)f:hd;iaccesslinkbFigure7.13:ActualparameterscarrytheiraccesslinkwiththemNow,letuslookatwhatbdoes.Weknowthatatsomepoint,itusesitsparameterf,whichhasthee\u000bectofcallingd.Anactivationrecordfordappearsonthestack,asshowninFig.7.13(b).Theproperaccesslinktoplaceinthisactivationrecordisfoundinthevalueforparameterf;thelinkistotheactivationrecordforc,sincecimmediatelysurroundsthede\fnitionofd.Noticethatbiscapableofsettinguptheproperlink,eventhoughbisnotinthescopeofc'sord'sde\fnitions.27.3.8DisplaysOneproblemwiththeaccess-linkapproachtononlocaldataisthatifthenestingdepthgetslarge,wemayhavetofollowlongchainsoflinkstoreachthedataweneed.Amoree\u000ecientimplementationusesanauxiliaryarrayd,calledthedisplay,whichconsistsofonepointerforeachnestingdepth.Wearrangethat,atalltimes,d[i]isapointertothehighestactivationrecordonthestackforanyprocedureatnestingdepthi.ExamplesofadisplayareshowninFig.7.14.Forinstance,inFig.7.14(d),weseethedisplayd,withd[1]holdingapointertotheactivationrecordforsort,thehighest(andonly)activationrecordforafunctionatnestingdepth1.Also,d[2]holdsapointertotheactivationrecordforexchange,thehighestrecordatdepth2,andd[3]pointstopartition,thehighestrecordatdepth3.Theadvantageofusingadisplayisthatifprocedurepisexecuting,anditneedstoaccesselementxbelongingtosomeprocedureq,weneedtolookonlyind[i],whereiisthenestingdepthofq;wefollowthepointerd[i]totheactivationrecordforq,whereinxisfoundataknowno\u000bset.Thecompilerknowswhatiis,soitcangeneratecodetoaccessxusingd[i]andtheo\u000bsetof450CHAPTER7.RUN-TIMEENVIRONMENTSd[1]savedd[2]q(1;3)savedd[2]p(1;3)savedd[3]d[1]d[2]d[3](d)sq(1;9)savedd[2]q(1;3)savedd[2]p(1;3)savedd[3]e(1;3)savedd[2]q(1;9)d[2](a)sq(1;9)savedd[2]d[1]d[2](b)sq(1;9)savedd[2]q(1;3)savedd[2]d[1]d[2]d[3](c)sFigure7.14:Maintainingthedisplay7.3.ACCESSTONONLOCALDATAONTHESTACK451xfromthetopoftheactivationrecordforq.Thus,thecodeneverneedstofollowalongchainofaccesslinks.Inordertomaintainthedisplaycorrectly,weneedtosavepreviousvaluesofdisplayentriesinnewactivationrecords.Ifprocedurepatdepthnpiscalled,anditsactivationrecordisnotthe\frstonthestackforaprocedureatdepthnp,thentheactivationrecordforpneedstoholdthepreviousvalueofd[np],whiled[np]itselfissettopointtothisactivationofp.Whenpreturns,anditsactivationrecordisremovedfromthestack,werestored[np]tohaveitsvaluepriortothecallofp.Example7.9:SeveralstepsofmanipulatingthedisplayareillustratedinFig.7.14.InFig.7.14(a),sortatdepth1hascalledquicksort(1;9)atdepth2.Theactivationrecordforquicksorthasaplacetostoretheoldvalueofd[2],indicatedassavedd[2],althoughinthiscasesincetherewasnoprioractivationrecordatdepth2,thispointerisnull.InFig.7.14(b),quicksort(1;9)callsquicksort(1;3).Sincetheactivationrecordsforbothcallsareatdepth2,wemuststorethepointertoquicksort(1;9),whichwasind[2],intherecordforquicksort(1;3).Then,d[2]ismadetopointtoquicksort(1;3).Next,partitioniscalled.Thisfunctionisatdepth3,soweusetheslotd[3]inthedisplayforthe\frsttime,andmakeitpointtotheactivationrecordforpartition.Therecordforpartitionhasaslotforaformervalueofd[3],butinthiscasethereisnone,sothepointerremainsnull.ThedisplayandstackatthistimeareshowninFig.7.14(c).Then,partitioncallsexchange.Thatfunctionisatdepth2,soitsactiva-tionrecordstorestheoldpointerd[2],whichgoestotheactivationrecordforquicksort(1;3).Noticethatthedisplaypointers\\cross\";thatis,d[3]pointsfurtherdownthestackthand[2]does.However,thatisapropersituation;exchangecanonlyaccessitsowndataandthatofsort,viad[1].27.3.9ExercisesforSection7.3Exercise7.3.1:InFig.7.15isaMLfunctionmainthatcomputesFibonaccinumbersinanonstandardway.Functionfib0willcomputethenthFibonaccinumberforanyn\u00150.Nestedwithinitisfib1,whichcomputesthenthFibonaccinumberontheassumptionn\u00152,andnestedwithinfib1isfib2,whichassumesn\u00154.Notethatneitherfib1norfib2needtocheckforthebasiscases.Showthestackofactivationrecordsthatresultfromacalltomain,upuntilthetimethatthe\frstcall(tofib0(1))isabouttoreturn.Showtheaccesslinkineachoftheactivationrecordsonthestack.Exercise7.3.2:SupposethatweimplementthefunctionsofFig.7.15usingadisplay.Showthedisplayatthemomentthe\frstcalltofib0(1)isabouttoreturn.Also,indicatethesaveddisplayentryineachoftheactivationrecordsonthestackatthattime.452CHAPTER7.RUN-TIMEENVIRONMENTSfunmain(){letfunfib0(n)=letfunfib1(n)=letfunfib2(n)=fib1(n-1)+fib1(n-2)inifn>=4thenfib2(n)elsefib0(n-1)+fib0(n-2)endinifn>=2thenfib1(n)else1endinfib0(4)end;Figure7.15:NestedfunctionscomputingFibonaccinumbers7.4HeapManagementTheheapistheportionofthestorethatisusedfordatathatlivesinde\fnitely,oruntiltheprogramexplicitlydeletesit.Whilelocalvariablestypicallybecomeinaccessiblewhentheirproceduresend,manylanguagesenableustocreateobjectsorotherdatawhoseexistenceisnottiedtotheprocedureactivationthatcreatesthem.Forexample,bothC++andJavagivetheprogrammernewtocreateobjectsthatmaybepassed|orpointerstothemmaybepassed|fromproceduretoprocedure,sotheycontinuetoexistlongaftertheprocedurethatcreatedthemisgone.Suchobjectsarestoredonaheap.Inthissection,wediscussthememorymanager,thesubsystemthatallo-catesanddeallocatesspacewithintheheap;itservesasaninterfacebetweenapplicationprogramsandtheoperatingsystem.ForlanguageslikeCorC++thatdeallocatechunksofstoragemanually(i.e.,byexplicitstatementsoftheprogram,suchasfreeordelete),thememorymanagerisalsoresponsibleforimplementingdeallocation.InSection7.5,wediscussgarbagecollection,whichistheprocessof\fndingspaceswithintheheapthatarenolongerusedbytheprogramandcanthereforebereallocatedtohouseotherdataitems.ForlanguageslikeJava,itisthegarbagecollectorthatdeallocatesmemory.Whenitisrequired,thegarbagecollectorisanimportantsubsystemofthememorymanager.7.4.HEAPMANAGEMENT4537.4.1TheMemoryManagerThememorymanagerkeepstrackofallthefreespaceinheapstorageatalltimes.Itperformstwobasicfunctions:\u000fAllocation.Whenaprogramrequestsmemoryforavariableorobject,2thememorymanagerproducesachunkofcontiguousheapmemoryoftherequestedsize.Ifpossible,itsatis\fesanallocationrequestusingfreespaceintheheap;ifnochunkoftheneededsizeisavailable,itseekstoincreasetheheapstoragespacebygettingconsecutivebytesofvirtualmemoryfromtheoperatingsystem.Ifspaceisexhausted,thememorymanagerpassesthatinformationbacktotheapplicationprogram.\u000fDeallocation.Thememorymanagerreturnsdeallocatedspacetothepooloffreespace,soitcanreusethespacetosatisfyotherallocationrequests.Memorymanagerstypicallydonotreturnmemorytotheoperatingsys-tem,eveniftheprogram'sheapusagedrops.Memorymanagementwouldbesimplerif(a)allallocationrequestswereforchunksofthesamesize,and(b)storagewerereleasedpredictably,say,\frst-allocated\frst-deallocated.Therearesomelanguages,suchasLisp,forwhichcondition(a)holds;pureLispusesonlyonedataelement|atwo-pointercell|fromwhichalldatastructuresarebuilt.Condition(b)alsoholdsinsomesituations,themostcommonbeingdatathatcanbeallocatedontherun-timestack.However,inmostlanguages,neither(a)nor(b)holdsingeneral.Rather,dataelementsofdi\u000berentsizesareallocated,andthereisnogoodwaytopredictthelifetimesofallallocatedobjects.Thus,thememorymanagermustbepreparedtoservice,inanyorder,allo-cationanddeallocationrequestsofanysize,rangingfromonebytetoaslargeastheprogram'sentireaddressspace.Herearethepropertieswedesireofmemorymanagers:\u000fSpaceE\u000eciency.Amemorymanagershouldminimizethetotalheapspaceneededbyaprogram.Doingsoallowslargerprogramstorunina\fxedvirtualaddressspace.Spacee\u000eciencyisachievedbyminimizing\\fragmentation,\"discussedinSection7.4.4.\u000fProgramE\u000eciency.Amemorymanagershouldmakegooduseofthememorysubsystemtoallowprogramstorunfaster.AsweshallseeinSection7.4.2,thetimetakentoexecuteaninstructioncanvarywidelydependingonwhereobjectsareplacedinmemory.Fortunately,programstendtoexhibit\\locality,\"aphenomenondiscussedinSection7.4.3,whichreferstothenonrandomclusteredwayinwhichtypicalprogramsaccessmemory.Byattentiontotheplacementofobjectsinmemory,thememorymanagercanmakebetteruseofspaceand,hopefully,maketheprogramrunfaster.454CHAPTER7.RUN-TIMEENVIRONMENTS\u000fLowOverhead.Becausememoryallocationsanddeallocationsarefre-quentoperationsinmanyprograms,itisimportantthattheseoperationsbease\u000ecientaspossible.Thatis,wewishtominimizetheoverhead|thefractionofexecutiontimespentperformingallocationanddealloca-tion.Noticethatthecostofallocationsisdominatedbysmallrequests;theoverheadofmanaginglargeobjectsislessimportant,becauseitusu-allycanbeamortizedoveralargeramountofcomputation.7.4.2TheMemoryHierarchyofaComputerMemorymanagementandcompileroptimizationmustbedonewithanaware-nessofhowmemorybehaves.Modernmachinesaredesignedsothatprogram-merscanwritecorrectprogramswithoutconcerningthemselveswiththedetailsofthememorysubsystem.However,thee\u000eciencyofaprogramisdeterminednotjustbythenumberofinstructionsexecuted,butalsobyhowlongittakestoexecuteeachoftheseinstructions.Thetimetakentoexecuteaninstructioncanvarysigni\fcantly,sincethetimetakentoaccessdi\u000berentpartsofmemorycanvaryfromnanosecondstomilliseconds.Data-intensiveprogramscanthere-forebene\ftsigni\fcantlyfromoptimizationsthatmakegooduseofthememorysubsystem.AsweshallseeinSection7.4.3,theycantakeadvantageofthephenomenonof\\locality\"|thenonrandombehavioroftypicalprograms.Thelargevarianceinmemoryaccesstimesisduetothefundamentallimi-tationinhardwaretechnology;wecanbuildsmallandfaststorage,orlargeandslowstorage,butnotstoragethatisbothlargeandfast.Itissimplyimpos-sibletodaytobuildgigabytesofstoragewithnanosecondaccesstimes,whichishowfasthigh-performanceprocessorsrun.Therefore,practicallyallmoderncomputersarrangetheirstorageasamemoryhierarchy.Amemoryhierarchy,asshowninFig.7.16,consistsofaseriesofstorageelements,withthesmallerfasterones\\closer\"totheprocessor,andthelargersloweronesfurtheraway.Typically,aprocessorhasasmallnumberofregisters,whosecontentsareundersoftwarecontrol.Next,ithasoneormorelevelsofcache,usuallymadeoutofstaticRAM,thatarekilobytestoseveralmegabytesinsize.Thenextlevelofthehierarchyisthephysical(main)memory,madeoutofhundredsofmegabytesorgigabytesofdynamicRAM.Thephysicalmemoryisthenbackedupbyvirtualmemory,whichisimplementedbygigabytesofdisks.Uponamemoryaccess,themachine\frstlooksforthedataintheclosest(lowest-level)storageand,ifthedataisnotthere,looksinthenexthigherlevel,andsoon.Registersarescarce,soregisterusageistailoredforthespeci\fcapplicationsandmanagedbythecodethatacompilergenerates.Alltheotherlevelsofthehierarchyaremanagedautomatically;inthisway,notonlyistheprogrammingtasksimpli\fed,butthesameprogramcanworke\u000bectivelyacrossmachineswithdi\u000berentmemorycon\fgurations.Witheachmemoryaccess,themachinesearcheseachlevelofthememoryinsuccession,startingwiththelowestlevel,untilitlocatesthedata.Cachesaremanagedexclusivelyinhardware,inordertokeepupwiththerelativelyfastRAMaccesstimes.Becausedisksarerela-7.4.HEAPMANAGEMENT4551ns32WordsRegisters(Processor)5-10ns16-64KB1st-LevelCache40-60ns128KB-4MB2nd-LevelCache100-150ns256MB-2GBPhysicalMemory3-15ms>2GBVirtualMemory(Disk)TypicalAccessTimesTypicalSizesFigure7.16:TypicalMemoryHierarchyCon\fgurationstivelyslow,thevirtualmemoryismanagedbytheoperatingsystem,withtheassistanceofahardwarestructureknownasthe\\translationlookasidebu\u000ber.\"Dataistransferredasblocksofcontiguousstorage.Toamortizethecostofaccess,largerblocksareusedwiththeslowerlevelsofthehierarchy.Be-tweenmainmemoryandcache,dataistransferredinblocksknownascachelines,whicharetypicallyfrom32to256byteslong.Betweenvirtualmemory(disk)andmainmemory,dataistransferredinblocksknownaspages,typicallybetween4Kand64Kbytesinsize.7.4.3LocalityinProgramsMostprogramsexhibitahighdegreeoflocality;thatis,theyspendmostoftheirtimeexecutingarelativelysmallfractionofthecodeandtouchingonlyasmallfractionofthedata.Wesaythataprogramhastemporallocalityifthememorylocationsitaccessesarelikelytobeaccessedagainwithinashortperiodoftime.Wesaythataprogramhasspatiallocalityifmemorylocationsclosetothelocationaccessedarelikelyalsotobeaccessedwithinashortperiodoftime.Theconventionalwisdomisthatprogramsspend90%oftheirtimeexecuting10%ofthecode.Hereiswhy:\u000fProgramsoftencontainmanyinstructionsthatareneverexecuted.Pro-gramsbuiltwithcomponentsandlibrariesuseonlyasmallfractionoftheprovidedfunctionality.Alsoasrequirementschangeandprogramsevolve,legacysystemsoftencontainmanyinstructionsthatarenolongerused.456CHAPTER7.RUN-TIMEENVIRONMENTS7.4.HEAPMANAGEMENT457458CHAPTER7.RUN-TIMEENVIRONMENTSWitheachdeallocationrequest,thefreedchunksofmemoryareaddedbacktothepooloffreespace.Wecoalescecontiguousholesintolargerholes,astheholescanonlygetsmallerotherwise.Ifwearenotcareful,thefreememorymayendupgettingfragmented,consistingoflargenumbersofsmall,noncontiguousholes.Itisthenpossiblethatnoholeislargeenoughtosatisfyafuturerequest,eventhoughtheremaybesu\u000ecientaggregatefreespace.Best-FitandNext-FitObjectPlacementWereducefragmentationbycontrollinghowthememorymanagerplacesnewobjectsintheheap.Ithasbeenfoundempiricallythatagoodstrategyformini-mizingfragmentationforreal-lifeprogramsistoallocatetherequestedmemoryinthesmallestavailableholethatislargeenough.Thisbest-\ftalgorithmtendstosparethelargeholestosatisfysubsequent,largerrequests.Analternative,called\frst-\ft,whereanobjectisplacedinthe\frst(lowest-address)holeinwhichit\fts,takeslesstimetoplaceobjects,buthasbeenfoundinferiortobest-\ftinoverallperformance.Toimplementbest-\ftplacementmoree\u000eciently,wecanseparatefreespacechunksintobins,accordingtotheirsizes.Onepracticalideaistohavemanymorebinsforthesmallersizes,becausethereareusuallymanymoresmallobjects.Forexample,theLeamemorymanager,usedintheGNUCcompilergcc,alignsallchunksto8-byteboundaries.Thereisabinforeverymultipleof8-bytechunksfrom16bytesto512bytes.Larger-sizedbinsarelogarithmicallyspaced(i.e.,theminimumsizeforeachbinistwicethatofthepreviousbin),andwithineachofthesebinsthechunksareorderedbytheirsize.Thereisalwaysachunkoffreespacethatcanbeextendedbyrequestingmorepagesfromtheoperatingsystem.Calledthewildernesschunk,thischunkistreatedbyLeaasthelargest-sizedbinbecauseofitsextensibility.Binningmakesiteasyto\fndthebest-\ftchunk.\u000fIf,asforsmallsizesrequestedfromtheLeamemorymanager,thereisabinforchunksofthatsizeonly,wemaytakeanychunkfromthatbin.\u000fForsizesthatdonothaveaprivatebin,we\fndtheonebinthatisallowedtoincludechunksofthedesiredsize.Withinthatbin,wecanuseeithera\frst-\ftorabest-\ftstrategy;i.e.,weeitherlookforandselectthe\frstchunkthatissu\u000ecientlylargeor,wespendmoretimeand\fndthesmallestchunkthatissu\u000ecientlylarge.Notethatwhenthe\ftisnotexact,theremainderofthechunkwillgenerallyneedtobeplacedinabinwithsmallersizes.\u000fHowever,itmaybethatthetargetbinisempty,orallchunksinthatbinaretoosmalltosatisfytherequestforspace.Inthatcase,wesimplyrepeatthesearch,usingthebinforthenextlargersize(s).Eventually,weeither\fndachunkwecanuse,orwereachthe\\wilderness\"chunk,fromwhichwecansurelyobtaintheneededspace,possiblybygoingtotheoperatingsystemandgettingadditionalpagesfortheheap.7.4.HEAPMANAGEMENT459Whilebest-\ftplacementtendstoimprovespaceutilization,itmaynotbethebestintermsofspatiallocality.Chunksallocatedataboutthesametimebyaprogramtendtohavesimilarreferencepatternsandtohavesimilarlifetimes.Placingthemclosetogetherthusimprovestheprogram'sspatiallocality.Oneusefuladaptationofthebest-\ftalgorithmistomodifytheplacementinthecasewhenachunkoftheexactrequestedsizecannotbefound.Inthiscase,weuseanext-\ftstrategy,tryingtoallocatetheobjectinthechunkthathaslastbeensplit,wheneverenoughspaceforthenewobjectremainsinthatchunk.Next-\ftalsotendstoimprovethespeedoftheallocationoperation.ManagingandCoalescingFreeSpaceWhenanobjectisdeallocatedmanually,thememorymanagermustmakeitschunkfree,soitcanbeallocatedagain.Insomecircumstances,itmayalsobepossibletocombine(coalesce)thatchunkwithadjacentchunksoftheheap,toformalargerchunk.Thereisanadvantagetodoingso,sincewecanalwaysusealargechunktodotheworkofsmallchunksofequaltotalsize,butmanysmallchunkscannotholdonelargeobject,asthecombinedchunkcould.Ifwekeepabinforchunksofone\fxedsize,asLeadoesforsmallsizes,thenwemayprefernottocoalesceadjacentblocksofthatsizeintoachunkofdoublethesize.Itissimplertokeepallthechunksofonesizeinasmanypagesasweneed,andnevercoalescethem.Then,asimpleallocation/deallocationschemeistokeepabitmap,withonebitforeachchunkinthebin.A1indicatesthechunkisoccupied;0indicatesitisfree.Whenachunkisdeallocated,wechangeits1toa0.Whenweneedtoallocateachunk,we\fndanychunkwitha0bit,changethatbittoa1,andusethecorrespondingchunk.Iftherearenofreechunks,wegetanewpage,divideitintochunksoftheappropriatesize,andextendthebitvector.Mattersaremorecomplexwhentheheapismanagedasawhole,withoutbinning,orifwearewillingtocoalesceadjacentchunksandmovetheresultingchunktoadi\u000berentbinifnecessary.Therearetwodatastructuresthatareusefultosupportcoalescingofadjacentfreeblocks:\u000fBoundaryTags.Atboththelowandhighendsofeachchunk,whetherfreeorallocated,wekeepvitalinformation.Atbothends,wekeepafree/usedbitthattellswhetherornottheblockiscurrentlyallocated(used)oravailable(free).Adjacenttoeachfree/usedbitisacountofthetotalnumberofbytesinthechunk.\u000fADoublyLinked,EmbeddedFreeList.Thefreechunks(butnottheallocatedchunks)arealsolinkedinadoublylinkedlist.Thepointersforthislistarewithintheblocksthemselves,sayadjacenttotheboundarytagsateitherend.Thus,noadditionalspaceisneededforthefreelist,althoughitsexistencedoesplacealowerboundonhowsmallchunkscanget;theymustaccommodatetwoboundarytagsandtwopointers,eveniftheobjectisasinglebyte.Theorderofchunksonthefreelistisleft460CHAPTER7.RUN-TIMEENVIRONMENTSunspeci\fed.Forexample,thelistcouldbesortedbysize,thusfacilitatingbest-\ftplacement.Example7.10:Figure7.17showspartofaheapwiththreeadjacentchunks,A,B,andC.ChunkB,ofsize100,hasjustbeendeallocatedandreturnedtothefreelist.Sinceweknowthebeginning(leftend)ofB,wealsoknowtheendofthechunkthathappenstobeimmediatelytoB'sleft,namelyAinthisexample.Thefree/usedbitattherightendofAiscurrently0,soAtooisfree.WemaythereforecoalesceAandBintoonechunkof300bytes.100002002000\u0001\u0001\u0001ChunkCChunkBChunkA\u0001\u0001\u0001112012010100Figure7.17:PartofaheapandadoublylinkedfreelistItmightbethecasethatchunkC,thechunkimmediatelytoB'sright,isalsofree,inwhichcasewecancombineallofA,B,andC.Notethatifwealwayscoalescechunkswhenwecan,thentherecanneverbetwoadjacentfreechunks,soweneverhavetolookfurtherthanthetwochunksadjacenttotheonebeingdeallocated.Inthecurrentcase,we\fndthebeginningofCbystartingattheleftendofB,whichweknow,and\fndingthetotalnumberofbytesinB,whichisfoundintheleftboundarytagofBandis100bytes.Withthisinformation,we\fndtherightendofBandthebeginningofthechunktoitsright.Atthatpoint,weexaminethefree/usedbitofCand\fndthatitis1forused;hence,Cisnotavailableforcoalescing.SincewemustcoalesceAandB,weneedtoremoveoneofthemfromthefreelist.Thedoublylinkedfree-liststructureletsus\fndthechunksbeforeandaftereachofAandB.NoticethatitshouldnotbeassumedthatphysicalneighborsAandBarealsoadjacentonthefreelist.KnowingthechunksprecedingandfollowingAandBonthefreelist,itisstraightforwardtomanipulatepointersonthelisttoreplaceAandBbyonecoalescedchunk.2Automaticgarbagecollectioncaneliminatefragmentationaltogetherifitmovesalltheallocatedobjectstocontiguousstorage.TheinteractionbetweengarbagecollectionandmemorymanagementisdiscussedinmoredetailinSec-tion7.6.4.7.4.5ManualDeallocationRequestsWeclosethissectionwithmanualmemorymanagement,wheretheprogrammermustexplicitlyarrangeforthedeallocationofdata,asinCandC++.Ideally,anystoragethatwillnolongerbeaccessedshouldbedeleted.Conversely,anystoragethatmaybereferencedmustnotbedeleted.Unfortunately,itishardtoenforceeitheroftheseproperties.Inadditiontoconsideringthedi\u000ecultieswith7.4.HEAPMANAGEMENT461manualdeallocation,weshalldescribesomeofthetechniquesprogrammersusetohelpwiththedi\u000eculties.ProblemswithManualDeallocationManualmemorymanagementiserror-prone.Thecommonmistakestaketwoforms:failingevertodeletedatathatcannotbereferencediscalledamemory-leakerror,andreferencingdeleteddataisadangling-pointer-dereferenceerror.Itishardforprogrammerstotellifaprogramwillneverrefertosomestor-ageinthefuture,sothe\frstcommonmistakeisnotdeletingstoragethatwillneverbereferenced.Notethatalthoughmemoryleaksmayslowdowntheexe-cutionofaprogramduetoincreasedmemoryusage,theydonota\u000bectprogramcorrectness,aslongasthemachinedoesnotrunoutofmemory.Manypro-gramscantoleratememoryleaks,especiallyiftheleakageisslow.However,forlong-runningprograms,andespeciallynonstopprogramslikeoperatingsystemsorservercode,itiscriticalthattheynothaveleaks.Automaticgarbagecollectiongetsridofmemoryleaksbydeallocatingallthegarbage.Evenwithautomaticgarbagecollection,aprogrammaystillusemorememorythannecessary.Aprogrammermayknowthatanobjectwillneverbereferenced,eventhoughreferencestothatobjectexistsomewhere.Inthatcase,theprogrammermustdeliberatelyremovereferencestoobjectsthatwillneverbereferenced,sotheobjectscanbedeallocatedautomatically.Beingoverlyzealousaboutdeletingobjectscanleadtoevenworseproblemsthanmemoryleaks.Thesecondcommonmistakeistodeletesomestorageandthentrytorefertothedatainthedeallocatedstorage.Pointerstostoragethathasbeendeallocatedareknownasdanglingpointers.Oncethefreedstoragehasbeenreallocatedtoanewvariable,anyread,write,ordeallocationviathedanglingpointercanproduceseeminglyrandome\u000bects.Werefertoanyoperation,suchasread,write,ordeallocate,thatfollowsapointerandtriestousetheobjectitpointsto,asdereferencingthepointer.Noticethatreadingthroughadanglingpointermayreturnanarbitraryvalue.Writingthroughadanglingpointerarbitrarilychangesthevalueofthenewvariable.Deallocatingadanglingpointer'sstoragemeansthatthestorageofthenewvariablemaybeallocatedtoyetanothervariable,andactionsontheoldandnewvariablesmaycon\rictwitheachother.Unlikememoryleaks,dereferencingadanglingpointerafterthefreedstorageisreallocatedalmostalwayscreatesaprogramerrorthatishardtodebug.Asaresult,programmersaremoreinclinednottodeallocateavariableiftheyarenotcertainitisunreferencable.Arelatedformofprogrammingerroristoaccessanillegaladdress.Commonexamplesofsucherrorsincludedereferencingnullpointersandaccessinganout-of-boundsarrayelement.Itisbetterforsucherrorstobedetectedthantohavetheprogramsilentlycorrupttheresults.Infact,manysecurityviolationsexploitprogrammingerrorsofthistype,wherecertainprograminputsallowunintendedaccesstodata,leadingtoa\\hacker\"takingcontroloftheprogram462CHAPTER7.RUN-TIMEENVIRONMENTS7.5.INTRODUCTIONTOGARBAGECOLLECTION463allocatedobject.Wheneverareferencetotheobjectiscreated,weincre-mentthereferencecount;wheneverareferenceisremoved,wedecrementthereferencecount.Whenthecountgoestozero,theobjectcannolongerbereferencedandcanthereforebedeleted.Thistechnique,however,doesnotcatchuseless,circulardatastructures,whereacollectionofobjectscannotbeaccessed,buttheirreferencecountsarenotzero,sincetheyrefertoeachother.Foranillustrationofthisproblem,seeExample7.11.Referencecountingdoeseradicatealldangling-pointerreferences,sincetherearenooutstandingreferencestoanydeletedobjects.Referencecountingisexpensivebecauseitimposesanoverheadoneveryoperationthatstoresapointer.\u000fRegion-basedallocationisusefulforcollectionsofobjectswhoselifetimesaretiedtospeci\fcphasesinacomputation.Whenobjectsarecreatedtobeusedonlywithinsomestepofacomputation,wecanallocateallsuchobjectsinthesameregion.Wethendeletetheentireregiononcethatcomputationstepcompletes.Thisregion-basedallocationtechniquehaslimitedapplicability.However,itisverye\u000ecientwheneveritcanbeused;insteadofdeallocatingobjectsoneatatime,itdeletesallobjectsintheregioninawholesalefashion.7.4.6ExercisesforSection7.4Exercise7.4.1:Supposetheheapconsistsofsevenchunks,startingataddress0.Thesizesofthechunks,inorder,are80,30,60,50,70,20,40bytes.Whenweplaceanobjectinachunk,weputitatthehighendifthereisenoughspaceremainingtoformasmallerchunk(sothatthesmallerchunkcaneasilyremainonthelinkedlistoffreespace).However,wecannottoleratechunksoffewerthat8bytes,soifanobjectisalmostaslargeastheselectedchunk,wegiveittheentirechunkandplacetheobjectatthelowendofthechunk.Ifwerequestspaceforobjectsofthefollowingsizes:32,64,48,16,inthatorder,whatdoesthefreespacelistlooklikeaftersatisfyingtherequests,ifthemethodofselectingchunksisa)First\ft.b)Best\ft.7.5IntroductiontoGarbageCollectionDatathatcannotbereferencedisgenerallyknownasgarbage.Manyhigh-levelprogramminglanguagesremovetheburdenofmanualmemorymanagementfromtheprogrammerbyo\u000beringautomaticgarbagecollection,whichdeallo-catesunreachabledata.Garbagecollectiondatesbacktotheinitialimplemen-tationofLispin1958.Othersigni\fcantlanguagesthato\u000bergarbagecollectionincludeJava,Perl,ML,Modula-3,Prolog,andSmalltalk.464CHAPTER7.RUN-TIMEENVIRONMENTSInthissection,weintroducemanyoftheconceptsofgarbagecollection.Thenotionofanobjectbeing\\reachable\"isperhapsintuitive,butweneedtobeprecise;theexactrulesarediscussedinSection7.5.2.Wealsodiscuss,inSection7.5.3,asimple,butimperfect,methodofautomaticgarbagecollection:referencecounting,whichisbasedontheideathatonceaprogramhaslostallreferencestoanobject,itsimplycannotandsowillnotreferencethestorage.Section7.6coverstrace-basedcollectors,whicharealgorithmsthatdiscoveralltheobjectsthatarestilluseful,andthenturnalltheotherchunksoftheheapintofreespace.7.5.1DesignGoalsforGarbageCollectorsGarbagecollectionisthereclamationofchunksofstorageholdingobjectsthatcannolongerbeaccessedbyaprogram.Weneedtoassumethatobjectshaveatypethatcanbedeterminedbythegarbagecollectoratruntime.Fromthetypeinformation,wecantellhowlargetheobjectisandwhichcomponentsoftheobjectcontainreferences(pointers)tootherobjects.Wealsoassumethatreferencestoobjectsarealwaystotheaddressofthebeginningoftheobject,neverpointerstoplaceswithintheobject.Thus,allreferencestoanobjecthavethesamevalueandcanbeidenti\fedeasily.Auserprogram,whichweshallrefertoasthemutator,modi\festhecol-lectionofobjectsintheheap.Themutatorcreatesobjectsbyacquiringspacefromthememorymanager,andthemutatormayintroduceanddropreferencestoexistingobjects.Objectsbecomegarbagewhenthemutatorprogramcannot\\reach\"them,inthesensemadepreciseinSection7.5.2.Thegarbagecollector\fndstheseunreachableobjectsandreclaimstheirspacebyhandingthemtothememorymanager,whichkeepstrackofthefreespace.ABasicRequirement:TypeSafetyNotalllanguagesaregoodcandidatesforautomaticgarbagecollection.Foragarbagecollectortowork,itmustbeabletotellwhetheranygivendataelementorcomponentofadataelementis,orcouldbeusedas,apointertoachunkofallocatedmemoryspace.Alanguageinwhichthetypeofanydatacomponentcanbedeterminedissaidtobetypesafe.Therearetype-safelanguageslikeML,forwhichwecandeterminetypesatcompiletime.Thereareothertype-safelanguages,likeJava,whosetypescannotbedeterminedatcompiletime,butcanbedeterminedatruntime.Thelatterarecalleddynamicallytypedlanguages.Ifalanguageisneitherstaticallynordynamicallytypesafe,thenitissaidtobeunsafe.Unsafelanguages,whichunfortunatelyincludesomeofthemostimpor-tantlanguagessuchasCandC++,arebadcandidatesforautomaticgarbagecollection.Inunsafelanguages,memoryaddressescanbemanipulatedarbi-trarily:arbitraryarithmeticoperationscanbeappliedtopointerstocreatenewpointers,andarbitraryintegerscanbecastaspointers.Thusaprogram7.5.INTRODUCTIONTOGARBAGECOLLECTION465theoreticallycouldrefertoanylocationinmemoryatanytime.Consequently,nomemorylocationcanbeconsideredtobeinaccessible,andnostoragecaneverbereclaimedsafely.Inpractice,mostCandC++programsdonotgeneratepointersarbitrarily,andatheoreticallyunsoundgarbagecollectorthatworkswellempiricallyhasbeendevelopedandused.WeshalldiscussconservativegarbagecollectionforCandC++inSection7.8.3.PerformanceMetricsGarbagecollectionisoftensoexpensivethat,althoughitwasinventeddecadesagoandabsolutelypreventsmemoryleaks,ithasyettobeadoptedbymanymainstreamprogramminglanguages.Manydi\u000berentapproacheshavebeenpro-posedovertheyears,andthereisnotoneclearlybestgarbage-collectionalgo-rithm.Beforeexploringtheoptions,letus\frstenumeratetheperformancemetricsthatmustbeconsideredwhendesigningagarbagecollector.\u000fOverallExecutionTime.Garbagecollectioncanbeveryslow.Itisimpor-tantthatitnotsigni\fcantlyincreasethetotalruntimeofanapplication.Sincethegarbagecollectornecessarilymusttouchalotofdata,itsperfor-manceisdeterminedgreatlybyhowitleveragesthememorysubsystem.\u000fSpaceUsage.Itisimportantthatgarbagecollectionavoidfragmentationandmakethebestuseoftheavailablememory.\u000fPauseTime.Simplegarbagecollectorsarenotoriousforcausingpro-grams|themutators|topausesuddenlyforanextremelylongtime,asgarbagecollectionkicksinwithoutwarning.Thus,besidesminimiz-ingtheoverallexecutiontime,itisdesirablethatthemaximumpausetimebeminimized.Asanimportantspecialcase,real-timeapplicationsrequirecertaincomputationstobecompletedwithinatimelimit.Wemusteithersuppressgarbagecollectionwhileperformingreal-timetasks,orrestrictmaximumpausetime.Thus,garbagecollectionisseldomusedinreal-timeapplications.\u000fProgramLocality.Wecannotevaluatethespeedofagarbagecollectorsolelybyitsrunningtime.Thegarbagecollectorcontrolstheplacementofdataandthusin\ruencesthedatalocalityofthemutatorprogram.Itcanimproveamutator'stemporallocalitybyfreeingupspaceandreusingit;itcanimprovethemutator'sspatiallocalitybyrelocatingdatausedtogetherinthesamecacheorpages.Someofthesedesigngoalscon\rictwithoneanother,andtradeo\u000bsmustbemadecarefullybyconsideringhowprogramstypicallybehave.Alsoobjectsofdi\u000berentcharacteristicsmayfavordi\u000berenttreatments,requiringacollectortousedi\u000berenttechniquesfordi\u000berentkindsofobjects.466CHAPTER7.RUN-TIMEENVIRONMENTSForexample,thenumberofobjectsallocatedisdominatedbysmallobjects,soallocationofsmallobjectsmustnotincuralargeoverhead.Ontheotherhand,considergarbagecollectorsthatrelocatereachableobjects.Relocationisexpensivewhendealingwithlargeobjects,butlesssowithsmallobjects.Asanotherexample,ingeneral,thelongerwewaittocollectgarbageinatrace-basedcollector,thelargerthefractionofobjectsthatcanbecollected.Thereasonisthatobjectsoften\\dieyoung,\"soifwewaitawhile,manyofthenewlyallocatedobjectswillbecomeunreachable.Suchacollectorthuscostslessontheaverage,perunreachableobjectcollected.Ontheotherhand,infrequentcollectionincreasesaprogram'smemoryusage,decreasesitsdatalocality,andincreasesthelengthofthepauses.Incontrast,areference-countingcollector,byintroducingaconstantover-headtomanyofthemutator'soperations,canslowdowntheoverallexecutionofaprogramsigni\fcantly.Ontheotherhand,referencecountingdoesnotcre-atelongpauses,anditismemorye\u000ecient,becauseit\fndsgarbageassoonasitisproduced(withtheexceptionofcertaincyclicstructuresdiscussedinSection7.5.3).Languagedesigncanalsoa\u000bectthecharacteristicsofmemoryusage.Somelanguagesencourageaprogrammingstylethatgeneratesalotofgarbage.Forexample,programsinfunctionaloralmostfunctionalprogramminglanguagescreatemoreobjectstoavoidmutatingexistingobjects.InJava,allobjects,otherthanbasetypeslikeintegersandreferences,areallocatedontheheapandnotthestack,eveniftheirlifetimesarecon\fnedtothatofonefunctioninvocation.Thisdesignfreestheprogrammerfromworryingaboutthelifetimesofvariables,attheexpenseofgeneratingmoregarbage.Compileroptimizationshavebeendevelopedtoanalyzethelifetimesofvariablesandallocatethemonthestackwheneverpossible.7.5.2ReachabilityWerefertoallthedatathatcanbeaccesseddirectlybyaprogram,withouthavingtodereferenceanypointer,astherootset.Forexample,inJavatherootsetofaprogramconsistsofallthestatic\feldmembersandallthevariablesonitsstack.Aprogramobviouslycanreachanymemberofitsrootsetatanytime.Recursively,anyobjectwithareferencethatisstoredinthe\feldmembersorarrayelementsofanyreachableobjectisitselfreachable.Reachabilitybecomesabitmorecomplexwhentheprogramhasbeenop-timizedbythecompiler.First,acompilermaykeepreferencevariablesinregisters.Thesereferencesmustalsobeconsideredpartoftherootset.Sec-ond,eventhoughinatype-safelanguageprogrammersdonotgettomanipulatememoryaddressesdirectly,acompileroftendoessoforthesakeofspeedingupthecode.Thus,registersincompiledcodemaypointtothemiddleofanobjectoranarray,ortheymaycontainavaluetowhichano\u000bsetwillbeappliedtocomputealegaladdress.Herearesomethingsanoptimizingcompilercandotoenablethegarbagecollectorto\fndthecorrectrootset:7.5.INTRODUCTIONTOGARBAGECOLLECTION467\u000fThecompilercanrestricttheinvocationofgarbagecollectiontoonlycertaincodepointsintheprogram,whenno\\hidden\"referencesexist.\u000fThecompilercanwriteoutinformationthatthegarbagecollectorcanusetorecoverallthereferences,suchasspecifyingwhichregisterscontainreferences,orhowtocomputethebaseaddressofanobjectthatisgivenaninternaladdress.\u000fThecompilercanassurethatthereisareferencetothebaseaddressofallreachableobjectswheneverthegarbagecollectormaybeinvoked.Thesetofreachableobjectschangesasaprogramexecutes.Itgrowsasnewobjectsgetcreatedandshrinksasobjectsbecomeunreachable.Itisimportanttorememberthatonceanobjectbecomesunreachable,itcannotbecomereach-ableagain.Therearefourbasicoperationsthatamutatorperformstochangethesetofreachableobjects:\u000fObjectAllocations.Theseareperformedbythememorymanager,whichreturnsareferencetoeachnewlyallocatedchunkofmemory.Thisoper-ationaddsmemberstothesetofreachableobjects.\u000fParameterPassingandReturnValues.Referencestoobjectsarepassedfromtheactualinputparametertothecorrespondingformalparameter,andfromthereturnedresultbacktothecaller.Objectspointedtobythesereferencesremainreachable.\u000fReferenceAssignments.Assignmentsoftheformu=v,whereuandvarereferences,havetwoe\u000bects.First,uisnowareferencetotheobjectreferredtobyv.Aslongasuisreachable,theobjectitreferstoissurelyreachable.Second,theoriginalreferenceinuislost.Ifthisreferenceisthelasttosomereachableobject,thenthatobjectbecomesunreachable.Anytimeanobjectbecomesunreachable,allobjectsthatarereachableonlythroughreferencescontainedinthatobjectalsobecomeunreachable.\u000fProcedureReturns.Asaprocedureexits,theframeholdingitslocalvariablesispoppedo\u000bthestack.Iftheframeholdstheonlyreachablereferencetoanyobject,thatobjectbecomesunreachable.Again,ifthenowunreachableobjectsholdtheonlyreferencestootherobjects,theytoobecomeunreachable,andsoon.Insummary,newobjectsareintroducedthroughobjectallocations.Param-eterpassingandassignmentscanpropagatereachability;assignmentsandendsofprocedurescanterminatereachability.Asanobjectbecomesunreachable,itcancausemoreobjectstobecomeunreachable.Therearetwobasicwaysto\fndunreachableobjects.Eitherwecatchthetransitionsasreachableobjectsturnunreachable,orweperiodicallylocateallthereachableobjectsandtheninferthatalltheotherobjectsareunreachable.Referencecounting,introducedinSection7.4.5,isawell-knownapproximation468CHAPTER7.RUN-TIMEENVIRONMENTS7.5.INTRODUCTIONTOGARBAGECOLLECTION4694.ProcedureReturns.Asaprocedureexits,objectsreferredtobythelocalvariablesinitsactivationrecordhavetheircountsdecremented.Ifseverallocalvariablesholdreferencestothesameobject,thatobject'scountmustbedecrementedonceforeachsuchreference.5.TransitiveLossofReachability.Wheneverthereferencecountofanobjectbecomeszero,wemustalsodecrementthecountofeachobjectpointedtobyareferencewithintheobject.Referencecountinghastwomaindisadvantages:itcannotcollectunreach-able,cyclicdatastructures,anditisexpensive.Cyclicdatastructuresarequiteplausible;datastructuresoftenpointbacktotheirparentnodes,orpointtoeachotherascrossreferences.Example7.11:Figure7.18showsthreeobjectswithreferencesamongthem,butnoreferencesfromanywhereelse.Ifnoneoftheseobjectsispartoftherootset,thentheyareallgarbage,buttheirreferencecountsareeachgreaterthan0.Suchasituationistantamounttoamemoryleakifweusereferencecountingforgarbagecollection,sincethenthisgarbageandanystructureslikeitareneverdeallocated.2fromoutsideNopointersFigure7.18:Anunreachable,cyclicdatastructureTheoverheadofreferencecountingishighbecauseadditionaloperationsareintroducedwitheachreferenceassignment,andatprocedureentriesandexits.Thisoverheadisproportionaltotheamountofcomputationintheprogram,andnotjusttothenumberofobjectsinthesystem.Ofparticularconcernaretheupdatesmadetoreferencesintherootsetofaprogram.Theconceptofdeferredreferencecountinghasbeenproposedasameanstoeliminatetheoverheadassociatedwithupdatingthereferencecountsduetolocalstackaccesses.Thatis,referencecountsdonotincludereferencesfromtherootsetoftheprogram.Anobjectisnotconsideredtobegarbageuntiltheentirerootsetisscannedandnoreferencestotheobjectarefound.Theadvantageofreferencecounting,ontheotherhand,isthatgarbagecol-lectionisperformedinanincrementalfashion.Eventhoughthetotaloverheadcanbelarge,theoperationsarespreadthroughoutthemutator'scomputation.470CHAPTER7.RUN-TIMEENVIRONMENTSAlthoughremovingonereferencemayrenderalargenumberofobjectsun-reachable,theoperationofrecursivelymodifyingreferencecountscaneasilybedeferredandperformedpiecemealacrosstime.Thus,referencecountingispar-ticularlyattractivealgorithmwhentimingdeadlinesmustbemet,aswellasforinteractiveapplicationswherelong,suddenpausesareunacceptable.Anotheradvantageisthatgarbageiscollectedimmediately,keepingspaceusagelow.XABDGHIECFFigure7.19:Anetworkofobjects7.5.4ExercisesforSection7.5Exercise7.5.1:WhathappenstothereferencecountsoftheobjectsinFig.7.19if:a)ThepointerfromAtoBisdeleted.b)ThepointerfromXtoAisdeleted.c)ThenodeCisdeleted.Exercise7.5.2:WhathappenstoreferencecountswhenthepointerfromAtoDinFig.7.20isdeleted?7.6IntroductiontoTrace-BasedCollectionInsteadofcollectinggarbageasitiscreated,trace-basedcollectorsrunperiodi-callyto\fndunreachableobjectsandreclaimtheirspace.Typically,werunthe7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION471XADGHIEFYBCFigure7.20:Anothernetworkofobjectstrace-basedcollectorwheneverthefreespaceisexhaustedoritsamountdropsbelowsomethreshold.Webeginthissectionbyintroducingthesimplest\\mark-and-sweep\"gar-bagecollectionalgorithm.Wethendescribethevarietyoftrace-basedalgo-rithmsintermsoffourstatesthatchunksofmemorycanbeputin.Thissectionalsocontainsanumberofimprovementsonthebasicalgorithm,includ-ingthoseinwhichobjectrelocationisapartofthegarbage-collectionfunction.7.6.1ABasicMark-and-SweepCollectorMark-and-sweepgarbage-collectionalgorithmsarestraightforward,stop-the-worldalgorithmsthat\fndalltheunreachableobjects,andputthemonthelistoffreespace.Algorithm7.12visitsand\\marks\"allthereachableobjectsinthe\frsttracingstepandthen\\sweeps\"theentireheaptofreeupunreachableob-jects.Algorithm7.14,whichweconsiderafterintroducingageneralframeworkfortrace-basedalgorithms,isanoptimizationofAlgorithm7.12.Byusinganadditionallisttoholdalltheallocatedobjects,itvisitsthereachableobjectsonlyonce.Algorithm7.12:Mark-and-sweepgarbagecollection.INPUT:Arootsetofobjects,aheap,andafreelist,calledFree,withalltheunallocatedchunksoftheheap.AsinSection7.4.4,allchunksofspacearemarkedwithboundarytagstoindicatetheirfree/usedstatusandsize.OUTPUT:Amodi\fedFreelistafterallthegarbagehasbeenremoved.METHOD:Thealgorithm,showninFig.7.21,usesseveralsimpledatastruc-tures.ListFreeholdsobjectsknowntobefree.AlistcalledUnscanned,holdsobjectsthatwehavedeterminedarereached,butwhosesuccessorswehavenotyetconsidered.Thatis,wehavenotscannedtheseobjectstoseewhatother472CHAPTER7.RUN-TIMEENVIRONMENTS/*markingphase*/1)addeachobjectreferencedbytherootsettolistUnscannedandsetitsreached-bitto1;2)while(Unscanned6=;)f3)removesomeobjectofromUnscanned;4)for(eachobjecto0referencedino)f5)if(o0isunreached;i.e.,itsreached-bitis0)f6)setthereached-bitofo0to1;7)puto0inUnscanned;ggg/*sweepingphase*/8)Free=;;9)for(eachchunkofmemoryointheheap)f10)if(oisunreached,i.e.,itsreached-bitis0)addotoFree;11)elsesetthereached-bitofoto0;gFigure7.21:AMark-and-SweepGarbageCollectorobjectscanbereachedthroughthem.TheUnscannedlistisemptyinitially.Additionally,eachobjectincludesabittoindicatewhetherithasbeenreached(thereached-bit).Beforethealgorithmbegins,allallocatedobjectshavethereached-bitsetto0.Inline(1)ofFig.7.21,weinitializetheUnscannedlistbyplacingtherealltheobjectsreferencedbytherootset.Thereached-bitfortheseobjectsisalsosetto1.Lines(2)through(7)arealoop,inwhichwe,inturn,examineeachobjectothatiseverplacedontheUnscannedlist.Thefor-loopoflines(4)through(7)implementsthescanningofobjecto.Weexamineeachobjecto0forwhichwe\fndareferencewithino.Ifo0hasalreadybeenreached(itsreached-bitis1),thenthereisnoneedtodoanythingabouto0;iteitherhasbeenscannedpreviously,oritisontheUnscannedlisttobescannedlater.However,ifo0wasnotreachedalready,thenweneedtosetitsreached-bitto1inline(6)andaddo0totheUnscannedlistinline(7).Figure7.22illustratesthisprocess.ItshowsanUnscannedlistwithfourobjects.The\frstobjectonthislist,correspondingtoobjectointhediscussionabove,isintheprocessofbeingscanned.Thedashedlinescorrespondtothethreekindsofobjectsthatmightbereachedfromo:1.Apreviouslyscannedobjectthatneednotbescannedagain.2.AnobjectcurrentlyontheUnscannedlist.3.Anitemthatisreachable,butwaspreviouslythoughttobeunreached.7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION473reachedbit=0Freeandunreachedobjectsreachedbit=1UnscannedandpreviouslyscannedobjectsUnscannedFigure7.22:Therelationshipsamongobjectsduringthemarkingphaseofamark-and-sweepgarbagecollectorLines(8)through(11),thesweepingphase,reclaimthespaceofalltheobjectsthatremainunreachedattheendofthemarkingphase.NotethatthesewillincludeanyobjectsthatwereontheFreelistoriginally.Becausethesetofunreachedobjectscannotbeenumerateddirectly,thealgorithmsweepsthroughtheentireheap.Line(10)putsfreeandunreachedobjectsontheFreelist,oneatatime.Line(11)handlesthereachableobjects.Wesettheirreached-bitto0,inordertomaintaintheproperpreconditionsforthenextexecutionofthegarbage-collectionalgorithm.27.6.2BasicAbstractionAlltrace-basedalgorithmscomputethesetofreachableobjectsandthentakethecomplementofthisset.Memoryisthereforerecycledasfollows:a)Theprogramormutatorrunsandmakesallocationrequests.b)Thegarbagecollectordiscoversreachabilitybytracing.c)Thegarbagecollectorreclaimsthestorageforunreachableobjects.ThiscycleisillustratedinFig.7.23intermsoffourstatesforchunksofmemory:Free,Unreached,Unscanned,andScanned.Thestateofachunkmightbestoredinthechunkitself,oritmightbeimplicitinthedatastructuresusedbythegarbage-collectionalgorithm.Whiletrace-basedalgorithmsmaydi\u000berintheirimplementation,theycanallbedescribedintermsofthefollowingstates:1.Free.AchunkisintheFreestateifitisreadytobeallocated.Thus,aFreechunkmustnotholdareachableobject.2.Unreached.Chunksarepresumedunreachable,unlessprovenreachablebytracing.AchunkisintheUnreachedstateatanypointduringgarbage474CHAPTER7.RUN-TIMEENVIRONMENTSFreeScannedUnreachedUnscannedpointersscannedreachedfromrootset(b)DiscoveringreachabilitybytracingFreeScannedUnreacheddeallocatereadyfornextcollection(c)Reclaimingstorage(a)Beforetracing:actionofmutatorFreeUnreachedallocateFigure7.23:Statesofmemoryinagarbagecollectioncyclecollectionifitsreachabilityhasnotyetbeenestablished.Wheneverachunkisallocatedbythememorymanager,itsstateissettoUnreachedasillustratedinFig.7.23(a).Also,afteraroundofgarbagecollection,thestateofareachableobjectisresettoUnreachedtogetreadyforthenextround;seethetransitionfromScannedtoUnreached,whichisshowndashedtoemphasizethatitpreparesforthenextround.3.Unscanned.ChunksthatareknowntobereachableareeitherinstateUnscannedorstateScanned.AchunkisintheUnscannedstateifitisknowntobereachable,butitspointershavenotyetbeenscanned.ThetransitiontoUnscannedfromUnreachedoccurswhenwediscoverthatachunkisreachable;seeFig.7.23(b).4.Scanned.EveryUnscannedobjectwilleventuallybescannedandtran-sitiontotheScannedstate.Toscananobject,weexamineeachofthepointerswithinitandfollowthosepointerstotheobjectstowhichtheyrefer.IfareferenceistoanUnreachedobject,thenthatobjectisputintheUnscannedstate.Whenthescanofanobjectiscompleted,thatobjectisplacedintheScannedstate;seethelowertransitioninFig.7.23(b).AScannedobjectcanonlycontainreferencestootherScannedorUnscannedobjects,andnevertoUnreachedobjects.7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION475WhennoobjectsareleftintheUnscannedstate,thecomputationofreach-abilityiscomplete.ObjectsleftintheUnreachedstateattheendaretrulyunreachable.ThegarbagecollectorreclaimsthespacetheyoccupyandplacesthechunksintheFreestate,asillustratedbythesolidtransitioninFig.7.23(c).Togetreadyforthenextcycleofgarbagecollection,objectsintheScannedstatearereturnedtotheUnreachedstate;seethedashedtransitioninFig.7.23(c).Again,rememberthattheseobjectsreallyarereachablerightnow.TheUn-reachablestateisappropriatebecauseweshallwanttostartallobjectsoutinthisstatewhengarbagecollectionnextbegins,bywhichtimeanyofthecurrentlyreachableobjectsmayindeedhavebeenrenderedunreachable.Example7.13:LetusseehowthedatastructuresofAlgorithm7.12relatetothefourstatesintroducedabove.Usingthereached-bitandmembershiponlistsFreeandUnscanned,wecandistinguishamongallfourstates.ThetableofFig.7.24summarizesthecharacterizationofthefourstatesintermsofthedatastructureforAlgorithm7.12.2476CHAPTER7.RUN-TIMEENVIRONMENTScontainsbitstellingwhichofthefourstatesitisin.Initially,Freeisthefreelistmaintainedbythememorymanager,andallallocatedobjectsareontheUnreachedlist(alsomaintainedbythememorymanagerasitallocateschunkstoobjects).1)Scanned=Unscanned=;;2)moveobjectsreferencedbytherootsetfromUnreachedtoUnscanned;3)while(Unscanned6=;)f4)moveobjectofromUnscannedtoScanned;5)for(eachobjecto0referencedino)f6)if(o0isinUnreached)7)moveo0fromUnreachedtoUnscanned;gg8)Free=Free[Unreached;9)Unreached=Scanned;Figure7.25:Baker'smark-and-sweepalgorithmLines(1)and(2)initializeScannedtobetheemptylist,andUnscannedtohaveonlytheobjectsreachedfromtherootset.NotethattheseobjectswerepresumablyonthelistUnreachedandmustberemovedfromthere.Lines(3)through(7)areastraightforwardimplementationofthebasicmarkingalgo-rithm,usingtheselists.Thatis,thefor-loopoflines(5)through(7)examinesthereferencesinoneunscannedobjecto,andifanyofthosereferenceso0havenotyetbeenreached,line(7)changeso0totheUnscannedstate.Attheend,line(8)takesthoseobjectsthatarestillontheUnreachedlistanddeallocatestheirchunks,bymovingthemtotheFreelist.Then,line(9)takesalltheobjectsinstateScanned,whicharethereachableobjects,andreinitializestheUnreachedlisttobeexactlythoseobjects.Presumably,asthememorymanagercreatesnewobjects,thosetoowillbeaddedtotheUnreachedlistandremovedfromtheFreelist.2Inbothalgorithmsofthissection,wehaveassumedthatchunksreturnedtothefreelistremainastheywerebeforedeallocation.However,asdiscussedinSection7.4.4,itisoftenadvantageoustocombineadjacentfreechunksintolargerchunks.Ifwewishtodoso,theneverytimewereturnachunktothefreelist,eitheratline(10)ofFig.7.21orline(8)ofFig.7.25,weexaminethechunkstoitsleftandright,andmergeifoneisfree.7.6.4Mark-and-CompactGarbageCollectorsRelocatingcollectorsmovereachableobjectsaroundintheheaptoeliminatememoryfragmentation.Itiscommonthatthespaceoccupiedbyreachableob-jectsismuchsmallerthanthefreedspace.Thus,afteridentifyingalltheholes,7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION477insteadoffreeingthemindividually,oneattractivealternativeistorelocateallthereachableobjectsintooneendoftheheap,leavingtheentirerestoftheheapasonefreechunk.Afterall,thegarbagecollectorhasalreadyanalyzedeveryreferencewithinthereachableobjects,soupdatingthemtopointtothenewlocationsdoesnotrequiremuchmorework.These,plusthereferencesintherootset,areallthereferencesweneedtochange.Havingallthereachableobjectsincontiguouslocationsreducesfragmen-tationofthememoryspace,makingiteasiertohouselargeobjects.Also,bymakingthedataoccupyfewercachelinesandpages,relocationimprovesapro-gram'stemporalandspatiallocality,sincenewobjectscreatedataboutthesametimeareallocatednearbychunks.Objectsinnearbychunkscanbene-\ftfromprefetchingiftheyareusedtogether.Further,thedatastructureformaintainingfreespaceissimpli\fed;insteadofafreelist,allweneedisapointerfreetothebeginningoftheonefreeblock.Relocatingcollectorsvaryinwhethertheyrelocateinplaceorreservespaceaheadoftimefortherelocation:\u000fAmark-and-compactcollector,describedinthissection,compactsobjectsinplace.Relocatinginplacereducesmemoryusage.\u000fThemoree\u000ecientandpopularcopyingcollectorinSection7.6.5movesobjectsfromoneregionofmemorytoanother.Reservingextraspaceforrelocationallowsreachableobjectstobemovedastheyarediscovered.Themark-and-compactcollectorinAlgorithm7.15hasthreephases:1.Firstisamarkingphase,similartothatofthemark-and-sweepalgorithmsdescribedpreviously.2.Second,thealgorithmscanstheallocatedsectionoftheheapandcom-putesanewaddressforeachofthereachableobjects.Newaddressesareassignedfromthelowendoftheheap,sotherearenoholesbetweenreach-ableobjects.ThenewaddressforeachobjectisrecordedinastructurecalledNewLocation.3.Finally,thealgorithmcopiesobjectstotheirnewlocations,updatingallreferencesintheobjectstopointtothecorrespondingnewlocations.TheneededaddressesarefoundinNewLocation.Algorithm7.15:Amark-and-compactgarbagecollector.INPUT:Arootsetofobjects,aheap,andfree,apointermarkingthestartoffreespace.OUTPUT:Thenewvalueofpointerfree.METHOD:ThealgorithmisinFig.7.26;itusesthefollowingdatastructures:1.AnUnscannedlist,asinAlgorithm7.12.478CHAPTER7.RUN-TIMEENVIRONMENTS2.Reachedbitsinallobjects,alsoasinAlgorithm7.12.Tokeepourde-scriptionsimple,werefertoobjectsas\\reached\"or\\unreached,\"whenwemeanthattheirreached-bitis1or0,respectively.Initially,allobjectsareunreached.3.Thepointerfree,whichmarksthebeginningofunallocatedspaceintheheap.4.ThetableNewLocation.Thisstructurecouldbeahashtable,searchtree,oranotherstructurethatimplementsthetwooperations:(a)SetNewLocation(o)toanewaddressforobjecto.(b)Givenobjecto,getthevalueofNewLocation(o).Weshallnotconcernourselveswiththeexactstructureused,althoughyoumayassumethatNewLocationisahashtable,andtherefore,the\\set\"and\\get\"operationsareeachperformedinaverageconstanttime,independentofhowmanyobjectsareintheheap.The\frst,ormarking,phaseoflines(1)through(7)isessentiallythesameasthe\frstphaseofAlgorithm7.12.Thesecondphase,lines(8)through(12),visitseachchunkintheallocatedpartoftheheap,fromtheleft,orlowend.Asaresult,chunksareassignednewaddressesthatincreaseinthesameorderastheiroldaddresses.Thisorderingisimportant,sincewhenwerelocateobjects,wecandosoinawaythatassuresweonlymoveobjectsleft,intospacethatwasformerlyoccupiedbyobjectswehavemovedalready.Line(8)startsthefreepointeratthelowendoftheheap.Inthisphase,weusefreetoindicatethe\frstavailablenewaddress.Wecreateanewaddressonlyforthoseobjectsothataremarkedasreached.Objectoisgiventhenextavailableaddressatline(10),andatline(11)weincrementfreebytheamountofstoragethatobjectorequires,sofreeagainpointstothebeginningoffreespace.Inthe\fnalphase,lines(13)through(17),weagainvisitthereachedobjects,inthesamefrom-the-leftorderasinthesecondphase.Lines(15)and(16)replaceallinternalpointersofareachedobjectobytheirpropernewvalues,usingtheNewLocationtabletodeterminethereplacement.Then,line(17)movestheobjecto,withtherevisedinternalreferences,toitsnewlocation.Finally,lines(18)and(19)retargetpointersintheelementsoftherootsetthatarenotthemselvesheapobjects,e.g.,staticallyallocatedorstack-allocatedobjects.Figure7.27suggestshowthereachableobjects(thosethatarenotshaded)aremoveddowntheheap,whiletheinternalpointersarechangedtopointtothenewlocationsofthereachedobjects.27.6.5CopyingcollectorsAcopyingcollectorreserves,aheadoftime,spacetowhichtheobjectscanmove,thusbreakingthedependencybetweentracingand\fndingfreespace.7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION479/*mark*/1)Unscanned=setofobjectsreferencedbytherootset;2)while(Unscanned6=;)f3)removeobjectofromUnscanned;4)for(eachobjecto0referencedino)f5)if(o0isunreached)f6)marko0asreached;7)puto0onlistUnscanned;ggg/*computenewlocations*/8)free=startinglocationofheapstorage;9)for(eachchunkofmemoryointheheap,fromthelowend)f10)if(oisreached)f11)NewLocation(o)=free;12)free=free+sizeof(o);gg/*retargetreferencesandmovereachedobjects*/13)for(eachchunkofmemoryointheheap,fromthelowend)f14)if(oisreached)f15)for(eachreferenceo:rino)16)o:r=NewLocation(o:r);17)copyotoNewLocation(o);gg18)for(eachreferencerintherootset)19)r=NewLocation(r);Figure7.26:AMark-and-CompactCollectorThememoryspaceispartitionedintotwosemispaces,AandB.Themutatorallocatesmemoryinonesemispace,sayA,untilit\fllsup,atwhichpointthemutatorisstoppedandthegarbagecollectorcopiesthereachableobjectstotheotherspace,sayB.Whengarbagecollectioncompletes,therolesofthesemispacesarereversed.ThemutatorisallowedtoresumeandallocateobjectsinspaceB,andthenextroundofgarbagecollectionmovesreachableobjectstospaceA.ThefollowingalgorithmisduetoC.J.Cheney.Algorithm7.16:Cheney'scopyingcollector.INPUT:Arootsetofobjects,andaheapconsistingoftheFromsemispace,containingallocatedobjects,andtheTosemispace,allofwhichisfree.480CHAPTER7.RUN-TIMEENVIRONMENTSfreefreeFigure7.27:Movingreachedobjectstothefrontoftheheap,whilepreservinginternalpointersOUTPUT:Attheend,theTosemispaceholdstheallocatedobjects.AfreepointerindicatesthestartoffreespaceremainingintheTosemispace.TheFromsemispaceiscompletelyfree.METHOD:ThealgorithmisshowninFig.7.28.Cheney'salgorithm\fndsreachableobjectsintheFromsemispaceandcopiesthem,assoonastheyarereached,totheTosemispace.Thisplacementgroupsrelatedobjectstogetherandmayimprovespatiallocality.Beforeexaminingthealgorithmitself,whichisthefunctionCopyingCollec-torinFig.7.28,considertheauxiliaryfunctionLookupNewLocationinlines(11)through(16).Thisfunctiontakesanobjectoand\fndsanewlocationforitintheTospaceifohasnolocationthereyet.AllnewlocationsarerecordedinastructureNewLocation,andavalueofNULLindicatesohasnoassignedlocation.4AsinAlgorithm7.15,theexactformofstructureNewLocationmayvary,butitis\fnetoassumethatitisahashtable.Ifwe\fndatline(12)thatohasnolocation,thenitisassignedthebeginningofthefreespacewithintheTosemispace,atline(13).Line(14)incrementsthefreepointerbytheamountofspacetakenbyo,andatline(15)wecopyofromtheFromspacetotheTospace.Thus,themovementofobjectsfromonesemispacetotheotheroccursasasidee\u000bect,the\frsttimewelookupthenewlocationfortheobject.Regardlessofwhetherthelocationofowasorwasnotpreviouslyestablished,line(16)returnsthelocationofointheTospace.Now,wecanconsiderthealgorithmitself.Line(2)establishesthatnoneoftheobjectsintheFromspacehavenewaddressesyet.Atline(3),weinitializetwopointers,unscannedandfree,tothebeginningoftheTosemispace.PointerfreewillalwaysindicatethebeginningoffreespacewithintheTospace.AsweaddobjectstotheTospace,thosewithaddressesbelowunscannedwillbeintheScannedstate,whilethosebetweenunscannedandfreeareintheUnscanned7.6.INTRODUCTIONTOTRACE-BASEDCOLLECTION4811)CopyingCollector()f2)for(allobjectsoinFromspace)NewLocation(o)=NULL;3)unscanned=free=startingaddressofTospace;4)for(eachreferencerintherootset)5)replacerwithLookupNewLocation(r);6)while(unscanned6=free)f7)o=objectatlocationunscanned;8)for(eachreferenceo:rwithino)9)o:r=LookupNewLocation(o:r);10)unscanned=unscanned+sizeof(o);gg/*Lookupthenewlocationforobjectifithasbeenmoved.*//*PlaceobjectinUnscannedstateotherwise.*/11)LookupNewLocation(o)f12)if(NewLocation(o)=NULL)f13)NewLocation(o)=free;14)free=free+sizeof(o);15)copyotoNewLocation(o);g16)returnNewLocation(o);gFigure7.28:ACopyingGarbageCollectorstate.Thus,freealwaysleadsunscanned,andwhenthelattercatchesuptotheformer,therearenomoreUnscannedobjects,andwearedonewiththegarbagecollection.NoticethatwedoourworkwithintheTospace,althoughallreferenceswithinobjectsexaminedatline(8)leadusbacktotheFromspace.Lines(4)and(5)handletheobjectsreachedfromtherootset.Notethatasasidee\u000bect,someofthecallstoLookupNewLocationatline(5)willincreasefree,aschunksfortheseobjectsareallocatedwithinTo.Thus,theloopoflines(6)through(10)willbeenteredthe\frsttimeitisreached,unlesstherearenoobjectsreferencedbytherootset(inwhichcasetheentireheapisgarbage).ThisloopthenscanseachoftheobjectsthathasbeenaddedtoToandisintheUnscannedstate.Line(7)takesthenextunscannedobject,o.Then,atlines(8)and(9),eachreferencewithinoistranslatedfromitsvalueintheFromsemispacetoitsvalueintheTosemispace.Noticethat,asasidee\u000bect,ifareferencewithinoistoanobjectwehavenotreachedpreviously,thenthecalltoLookupNewLocationatline(9)createsspaceforthatobjectintheTospaceandmovestheobjectthere.Finally,line(10)incrementsunscannedtopointtothenextobject,justbeyondointheTospace.2482CHAPTER7.RUN-TIMEENVIRONMENTS7.6.6ComparingCostsCheney'salgorithmhastheadvantagethatitdoesnottouchanyoftheun-reachableobjects.Ontheotherhand,acopyinggarbagecollectormustmovethecontentsofallthereachableobjects.Thisprocessisespeciallyexpensiveforlargeobjectsandforlong-livedobjectsthatsurvivemultipleroundsofgarbagecollection.Wecansummarizetherunningtimeofeachofthefouralgorithmsdescribedinthissection,asfollows.Eachestimateignoresthecostofprocessingtherootset.\u000fBasicMark-and-Sweep(Algorithm7.12):Proportionaltothenumberofchunksintheheap.\u000fBaker'sMark-and-Sweep(Algorithm7.14):Proportionaltothenumberofreachedobjects.\u000fBasicMark-and-Compact(Algorithm7.15):Proportionaltothenumberofchunksintheheapplusthetotalsizeofthereachedobjects.\u000fCheney'sCopyingCollector(Algorithm7.16):Proportionaltothetotalsizeofthereachedobjects.7.6.7ExercisesforSection7.6Exercise7.6.1:Showthestepsofamark-and-sweepgarbagecollectorona)Fig.7.19withthepointerA!Bdeleted.b)Fig.7.19withthepointerA!Cdeleted.c)Fig.7.20withthepointerA!Ddeleted.d)Fig.7.20withtheobjectBdeleted.Exercise7.6.2:TheBakermark-and-sweepalgorithmmovesobjectsamongfourlists:Free,Unreached,Unscanned,andScanned.ForeachoftheobjectnetworksofExercise7.6.1,indicateforeachobjectthesequenceoflistsonwhichit\fndsitselffromjustbeforegarbagecollectionbeginsuntiljustafterit\fnishes.Exercise7.6.3:Supposeweperformamark-and-compactgarbagecollectiononeachofthenetworksofExercise7.6.1.Also,supposethati.Eachobjecthassize100bytes,andii.Initially,thenineobjectsintheheaparearrangedinalphabeticalorder,startingatbyte0oftheheap.Whatistheaddressofeachobjectaftergarbagecollection?7.7.SHORT-PAUSEGARBAGECOLLECTION483Exercise7.6.4:SupposeweexecuteCheney'scopyinggarbagecollectional-gorithmoneachofthenetworksofExercise7.6.1.Also,supposethati.Eachobjecthassize100bytes,ii.Theunscannedlistismanagedasaqueue,andwhenanobjecthasmorethanonepointer,thereachedobjectsareaddedtothequeueinalpha-beticalorder,andiii.TheFromsemispacestartsatlocation0,andtheTosemispacestartsatlocation10,000.WhatisthevalueofNewLocation(o)foreachobjectothatremainsaftergarbagecollection?7.7Short-PauseGarbageCollectionSimpletrace-basedcollectorsdostop-the-world-stylegarbagecollection,whichmayintroducelongpausesintotheexecutionofuserprograms.Wecanreducethelengthofthepausesbyperforminggarbagecollectiononepartatatime.Wecandividetheworkintime,byinterleavinggarbagecollectionwiththemutation,orwecandividetheworkinspacebycollectingasubsetofthegarbageatatime.Theformerisknownasincrementalcollectionandthelatterisknownaspartialcollection.Anincrementalcollectorbreaksupthereachabilityanalysisintosmallerunits,allowingthemutatortorunbetweentheseexecutionunits.Thereachablesetchangesasthemutatorexecutes,soincrementalcollectioniscomplex.AsweshallseeinSection7.7.1,\fndingaslightlyconservativeanswercanmaketracingmoree\u000ecient.Thebestknownofpartial-collectionalgorithmsisgenerationalgarbagecol-lection;itpartitionsobjectsaccordingtohowlongtheyhavebeenallocatedandcollectsthenewlycreatedobjectsmoreoftenbecausetheytendtohaveashorterlifetime.Analternativealgorithm,thetrainalgorithm,alsocollectsasubsetofgarbageatatime,andisbestappliedtomorematureobjects.Thesetwoalgorithmscanbeusedtogethertocreateapartialcollectorthathandlesyoungerandolderobjectsdi\u000berently.WediscussthebasicalgorithmbehindpartialcollectioninSection7.7.3,andthendescribeinmoredetailhowthegenerationalandtrainalgorithmswork.Ideasfrombothincrementalandpartialcollectioncanbeadaptedtocre-ateanalgorithmthatcollectsobjectsinparallelonamultiprocessor;seeSec-tion7.8.1.7.7.1IncrementalGarbageCollectionIncrementalcollectorsareconservative.Whileagarbagecollectormustnotcollectobjectsthatarenotgarbage,itdoesnothavetocollectallthegarbage484CHAPTER7.RUN-TIMEENVIRONMENTSineachround.Werefertothegarbageleftbehindaftercollectionas\roatinggarbage.Ofcourseitisdesirabletominimize\roatinggarbage.Inparticular,anincrementalcollectorshouldnotleavebehindanygarbagethatwasnotreachableatthebeginningofacollectioncycle.Ifwecanbesureofsuchacollectionguarantee,thenanygarbagenotcollectedinoneroundwillbecollectedinthenext,andnomemoryisleakedbecauseofthisapproachtogarbagecollection.Inotherwords,incrementalcollectorsplayitsafebyoverestimatingthesetofreachableobjects.They\frstprocesstheprogram'srootsetatomically,with-outinterferencefromthemutator.After\fndingtheinitialsetofunscannedobjects,themutator'sactionsareinterleavedwiththetracingstep.Duringthisperiod,anyofthemutator'sactionsthatmaychangereachabilityarerecordedsuccinctly,inasidetable,sothatthecollectorcanmakethenecessaryad-justmentswhenitresumesexecution.Ifspaceisexhaustedbeforetracingcom-pletes,thecollectorcompletesthetracingprocess,withoutallowingthemutatortoexecute.Inanyevent,whentracingisdone,spaceisreclaimedatomically.PrecisionofIncrementalCollectionOnceanobjectbecomesunreachable,itisnotpossiblefortheobjecttobecomereachableagain.Thus,asgarbagecollectionandmutationproceed,thesetofreachableobjectscanonly1.Growduetonewobjectsallocatedaftergarbagecollectionstarts,and2.Shrinkbylosingreferencestoallocatedobjects.LetthesetofreachableobjectsatthebeginningofgarbagecollectionbeR;letNewbethesetofallocatedobjectsduringgarbagecollection,andletLostbethesetofobjectsthathavebecomeunreachableduetolostreferencessincetracingbegan.Thesetofobjectsreachablewhentracingcompletesis(R[New)\u0000Lost:Itisexpensivetoreestablishanobject'sreachabilityeverytimeamutatorlosesareferencetotheobject,soincrementalcollectorsdonotattempttocollectallthegarbageattheendoftracing.Anygarbageleftbehind|\roatinggarbage|shouldbeasubsetoftheLostobjects.Expressedformally,thesetSofobjectsfoundbytracingmustsatisfy(R[New)\u0000Lost\u0012S\u0012(R[New)SimpleIncrementalTracingWe\frstdescribeastraightforwardtracingalgorithmthat\fndstheupperboundR[New.Thebehaviorofthemutatorismodi\fedduringthetracingasfollows:7.7.SHORT-PAUSEGARBAGECOLLECTION485\u000fAllreferencesthatexistedbeforegarbagecollectionarepreserved;thatis,beforethemutatoroverwritesareference,itsoldvalueisrememberedandtreatedlikeanadditionalunscannedobjectcontainingjustthatreference.\u000fAllobjectscreatedareconsideredreachableimmediatelyandareplacedintheUnscannedstate.Thisschemeisconservativebutcorrect,becauseit\fndsR,thesetofalltheobjectsreachablebeforegarbagecollection,plusNew,thesetofallthenewlyallocatedobjects.However,thecostishigh,becausethealgorithminterceptsallwriteoperationsandremembersalltheoverwrittenreferences.Someofthisworkisunnecessarybecauseitmayinvolveobjectsthatareunreachableattheendofgarbagecollection.Wecouldavoidsomeofthisworkandalsoimprovethealgorithm'sprecisionifwecoulddetectwhentheoverwrittenreferencespointtoobjectsthatareunreachablewhenthisroundofgarbagecollectionends.Thenextalgorithmgoesfairlyfarinthesetwodirections.7.7.2IncrementalReachabilityAnalysisIfweinterleavethemutatorwithabasictracingalgorithm,suchasAlgo-rithm7.12,thensomereachableobjectsmaybemisclassi\fedasunreachable.Theproblemisthattheactionsofthemutatorcanviolateakeyinvariantofthealgorithm;namely,aScannedobjectcanonlycontainreferencestootherScannedorUnscannedobjects,nevertoUnreachedobjects.Considerthefol-lowingscenario:1.Thegarbagecollector\fndsobjecto1reachableandscansthepointerswithino1,therebyputtingo1intheScannedstate.2.ThemutatorstoresareferencetoanUnreached(butreachable)objectointotheScannedobjecto1.Itdoessobycopyingareferencetoofromanobjecto2thatiscurrentlyintheUnreachedorUnscannedstate.3.Themutatorlosesthereferencetooinobjecto2.Itmayhaveoverwrit-teno2'sreferencetoobeforethereferenceisscanned,oro2mayhavebecomeunreachableandneverhavereachedtheUnscannedstatetohaveitsreferencesscanned.Now,oisreachablethroughobjecto1,butthegarbagecollectormayhaveseenneitherthereferencetooino1northereferencetooino2.Thekeytoamoreprecise,yetcorrect,incrementaltraceisthatwemustnoteallcopiesofreferencestocurrentlyunreachedobjectsfromanobjectthathasnotbeenscannedtoonethathas.Tointerceptproblematictransfersofreferences,thealgorithmcanmodifythemutator'sactionduringtracinginanyofthefollowingways:486CHAPTER7.RUN-TIMEENVIRONMENTS\u000fWriteBarriers.InterceptwritesofreferencesintoaScannedobjecto1,whenthereferenceistoanUnreachedobjecto.Inthiscase,classifyoasreachableandplaceitintheUnscannedset.Alternatively,placethewrittenobjecto1backintheUnscannedsetsowecanrescanit.\u000fReadBarriers.InterceptthereadsofreferencesinUnreachedorUn-scannedobjects.WheneverthemutatorreadsareferencetoanobjectofromanobjectineithertheUnreachedorUnscannedstate,classifyoasreachableandplaceitintheUnscannedset.\u000fTransferBarriers.InterceptthelossoftheoriginalreferenceinanUn-reachedorUnscannedobject.Wheneverthemutatoroverwritesaref-erenceinanUnreachedorUnscannedobject,savethereferencebeingoverwritten,classifyitasreachable,andplacethereferenceitselfintheUnscannedset.Noneoftheoptionsabove\fndsthesmallestsetofreachableobjects.Ifthetracingprocessdeterminesanobjecttobereachable,itstaysreachableeventhoughallreferencestoitareoverwrittenbeforetracingcompletes.Thatis,thesetofreachableobjectsfoundisbetween(R[New)\u0000Lostand(R[New).Writebarriersarethemoste\u000ecientoftheoptionsoutlinedabove.Readbarriersaremoreexpensivebecausetypicallytherearemanymorereadsthantherearewrites.Transferbarriersarenotcompetitive;becausemanyobjects\\dieyoung,\"thisapproachwouldretainmanyunreachableobjects.ImplementingWriteBarriersWecanimplementwritebarriersintwoways.The\frstapproachistore-member,duringamutationphase,allnewreferenceswrittenintotheScannedobjects.Wecanplaceallthesereferencesinalist;thesizeofthelistispropor-tionaltothenumberofwriteoperationstoScannedobjects,unlessduplicatesareremovedfromthelist.Notethatreferencesonthelistmaylaterbeover-writtenthemselvesandpotentiallycouldbeignored.Thesecond,moree\u000ecientapproachistorememberthelocationswherethewritesoccur.Wemayrememberthemasalistoflocationswritten,possiblywithduplicateseliminated.Noteitisnotimportantthatwepinpointtheexactlocationswritten,aslongasallthelocationsthathavebeenwrittenarerescanned.Thus,thereareseveraltechniquesthatallowustorememberlessdetailaboutexactlywheretherewrittenlocationsare.\u000fInsteadofrememberingtheexactaddressortheobjectand\feldthatiswritten,wecanrememberjusttheobjectsthatholdthewritten\felds.\u000fWecandividetheaddressspaceinto\fxed-sizeblocks,knownascards,anduseabitarraytorememberthecardsthathavebeenwritteninto.7.7.SHORT-PAUSEGARBAGECOLLECTION487\u000fWecanchoosetorememberthepagesthatcontainthewrittenlocations.WecansimplyprotectthepagescontainingScannedobjects.Then,anywritesintoScannedobjectswillbedetectedwithoutexecutinganyex-plicitinstructions,becausetheywillcauseaprotectionviolation,andtheoperatingsystemwillraiseaprogramexception.Ingeneral,bycoarseningthegranularityatwhichwerememberthewrittenlocations,lessstorageisneeded,attheexpenseofincreasingtheamountofrescanningperformed.Inthe\frstscheme,allreferencesinthemodi\fedobjectswillhavetoberescanned,regardlessofwhichreferencewasactuallymodi\fed.Inthelasttwoschemes,allreachableobjectsinthemodi\fedcardsormodi\fedpagesneedtoberescannedattheendofthetracingprocess.CombiningIncrementalandCopyingTechniquesTheabovemethodsaresu\u000ecientformark-and-sweepgarbagecollection.Copy-ingcollectionisslightlymorecomplicated,becauseofitsinteractionwiththemutator.ObjectsintheScannedorUnscannedstateshavetwoaddresses,oneintheFromsemispaceandoneintheTosemispace.AsinAlgorithm7.16,wemustkeepamappingfromtheoldaddressofanobjecttoitsrelocatedaddress.Therearetwochoicesforhowweupdatethereferences.First,wecanhavethemutatormakeallthechangesintheFromspace,andonlyattheendofgarbagecollectiondoweupdateallthepointersandcopyallthecontentsovertotheTospace.Second,wecaninsteadmakechangestotherepresentationintheTospace.WheneverthemutatordereferencesapointertotheFromspace,thepointeristranslatedtoanewlocationintheTospaceifoneexists.AllthepointersneedtobetranslatedtopointtotheTospaceintheend.7.7.3Partial-CollectionBasicsThefundamentalfactisthatobjectstypically\\dieyoung.\"Ithasbeenfoundthatusuallybetween80%and98%ofallnewlyallocatedobjectsdiewithinafewmillioninstructions,orbeforeanothermegabytehasbeenallocated.Thatis,objectsoftenbecomeunreachablebeforeanygarbagecollectionisinvoked.Thus,isitquitecoste\u000bectivetogarbagecollectnewobjectsfrequently.Yet,objectsthatsurviveacollectiononcearelikelytosurvivemanymorecollections.Withthegarbagecollectorsdescribedsofar,thesamematureobjectswillbefoundtobereachableoverandoveragainand,inthecaseofcopyingcollectors,copiedoverandoveragain,ineveryroundofgarbagecollection.Generationalgarbagecollectionworksmostfrequentlyontheareaoftheheapthatcontainstheyoungestobjects,soittendstocollectalotofgarbageforrelativelylittlework.Thetrainalgorithm,ontheotherhand,doesnotspendalargeproportionoftimeonyoungobjects,butitdoeslimitthepausesduetogarbagecollection.Thus,agoodcombinationofstrategiesistousegenerationalcollectionforyoungobjects,andonceanobjectbecomes488CHAPTER7.RUN-TIMEENVIRONMENTSsu\u000ecientlymature,to\\promote\"ittoaseparateheapthatismanagedbythetrainalgorithm.Werefertothesetofobjectstobecollectedononeroundofpartialcollectionasthetargetsetandtherestoftheobjectsasthestableset.Ideally,apartialcollectorshouldreclaimallobjectsinthetargetsetthatareunreachablefromtheprogram'srootset.However,doingsowouldrequiretracingallobjects,whichiswhatwetrytoavoidinthe\frstplace.Instead,partialcollectorsconservativelyreclaimonlythoseobjectsthatcannotbereachedthrougheithertherootsetoftheprogramorthestableset.Sincesomeobjectsinthestablesetmaythemselvesbeunreachable,itispossiblethatweshalltreatasreachablesomeobjectsinthetargetsetthatreallyhavenopathfromtherootset.WecanadaptthegarbagecollectorsdescribedinSections7.6.1and7.6.4toworkinapartialmannerbychangingthede\fnitionofthe\\rootset.\"Insteadofreferringtojusttheobjectsheldintheregisters,stackandglobalvariables,therootsetnowalsoincludesalltheobjectsinthestablesetthatpointtoobjectsinthetargetset.Referencesfromtargetobjectstoothertargetobjectsaretracedasbeforeto\fndallthereachableobjects.Wecanignoreallpointerstostableobjects,becausetheseobjectsareallconsideredreachableinthisroundofpartialcollection.Toidentifythosestableobjectsthatreferencetargetobjects,wecanadopttechniquessimilartothoseusedinincrementalgarbagecollection.Inincremen-talcollection,weneedtorememberallthewritesofreferencesfromscannedobjectstounreachedobjectsduringthetracingprocess.Hereweneedtore-memberallthewritesofreferencesfromthestableobjectstothetargetobjectsthroughoutthemutator'sexecution.Wheneverthemutatorstoresintoasta-bleobjectareferencetoanobjectinthetargetset,weremembereitherthereferenceorthelocationofthewrite.Werefertothesetofobjectsholdingreferencesfromthestabletothetargetobjectsastherememberedsetforthissetoftargetobjects.AsdiscussedinSection7.7.2,wecancompresstherepre-sentationofarememberedsetbyrecordingonlythecardorpageinwhichthewrittenobjectisfound.Partialgarbagecollectorsareoftenimplementedascopyinggarbagecollec-tors.Noncopyingcollectorscanalsobeimplementedbyusinglinkedliststokeeptrackofthereachableobjects.The\\generational\"schemedescribedbelowisanexampleofhowcopyingmaybecombinedwithpartialcollection.7.7.4GenerationalGarbageCollectionGenerationalgarbagecollectionisane\u000bectivewaytoexploitthepropertythatmostobjectsdieyoung.Theheapstorageingenerationalgarbagecollectionisseparatedintoaseriesofpartitions.Weshallusetheconventionofnumberingthem0;1;2;:::;n,withthelower-numberedpartitionsholdingtheyoungerobjects.Objectsare\frstcreatedinpartition0.Whenthispartition\fllsup,itisgarbagecollected,anditsreachableobjectsaremovedintopartition1.Now,withpartition0emptyagain,weresumeallocatingnewobjectsinthat7.7.SHORT-PAUSEGARBAGECOLLECTION489partition.Whenpartition0again\flls,5itisgarbagecollectedanditsreachableobjectscopiedintopartition1,wheretheyjointhepreviouslycopiedobjects.Thispatternrepeatsuntilpartition1also\fllsup,atwhichpointgarbagecollectionisappliedtopartitions0and1.Ingeneral,eachroundofgarbagecollectionisappliedtoallpartitionsnum-berediorbelow,forsomei;theproperitochooseisthehighest-numberedpartitionthatiscurrentlyfull.Eachtimeanobjectsurvivesacollection(i.e.,itisfoundtobereachable),itispromotedtothenexthigherpartitionfromtheoneitoccupies,untilitreachestheoldestpartition,theonenumberedn.UsingtheterminologyintroducedinSection7.7.3,whenpartitionsiandbelowaregarbagecollected,thepartitionsfrom0throughimakeupthetargetset,andallpartitionsaboveicomprisethestableset.Tosupport\fndingrootsetsforallpossiblepartialcollections,wekeepforeachpartitioniarememberedset,consistingofalltheobjectsinpartitionsaboveithatpointtoobjectsinseti.Therootsetforapartialcollectioninvokedonsetiincludestherememberedsetsforpartitioniandbelow.Inthisscheme,allpartitionsbelowiarecollectedwheneverwecollecti.Therearetworeasonsforthispolicy:1.Sinceyoungergenerationscontainmoregarbageandarecollectedmoreoftenanyway,wemayaswellcollectthemalongwithanoldergeneration.2.Followingthisstrategy,weneedtorememberonlythereferencespointingfromanoldergenerationtoanewergeneration.Thatis,neitherwritestoobjectsintheyoungestgenerationnorpromotingobjectstothenextgenerationcausesupdatestoanyrememberedset.Ifweweretocollectapartitionwithoutayoungerone,theyoungergenerationwouldbecomepartofthestableset,andwewouldhavetorememberreferencesthatpointfromyoungertooldergenerationsaswell.Insummary,thisschemecollectsyoungergenerationsmoreoften,andcol-lectionsofthesegenerationsareparticularlycoste\u000bective,since\\objectsdieyoung.\"Garbagecollectionofoldergenerationstakesmoretime,sinceitin-cludesthecollectionofalltheyoungergenerationsandcollectsproportionallylessgarbage.Nonetheless,oldergenerationsdoneedtobecollectedonceinawhiletoremoveunreachableobjects.Theoldestgenerationholdsthemostmatureobjects;itscollectionisexpensivebecauseitisequivalenttoafullcollec-tion.Thatis,generationalcollectorsoccasionallyrequirethatthefulltracingstepbeperformedandthereforecanintroducelongpausesintoaprogram'sexecution.Analternativeforhandlingmatureobjectsonlyisdiscussednext.490CHAPTER7.RUN-TIMEENVIRONMENTS7.7.5TheTrainAlgorithmWhilethegenerationalapproachisverye\u000ecientforthehandlingofimmatureobjects,itislesse\u000ecientforthematureobjects,sincematureobjectsaremovedeverytimethereisacollectioninvolvingthem,andtheyarequiteunlikelytobegarbage.Adi\u000berentapproachtoincrementalcollection,calledthetrainalgorithm,wasdevelopedtoimprovethehandlingofmatureobjects.Itcanbeusedforcollectingallgarbage,butitisprobablybettertousethegenerationalapproachforimmatureobjectsand,onlyaftertheyhavesurvivedafewroundsofcollection,\\promote\"themtoanotherheap,managedbythetrainalgorithm.Anotheradvantagetothetrainalgorithmisthatweneverhavetodoacompletegarbagecollection,aswedooccasionallyforgenerationalgarbagecollection.Tomotivatethetrainalgorithm,letuslookatasimpleexampleofwhyitisnecessary,inthegenerationalapproach,tohaveoccasionalall-inclusiveroundsofgarbagecollection.Figure7.29showstwomutuallylinkedobjectsintwopartitionsiandj,wherej>i.Sincebothobjectshavepointersfromoutsidetheirpartition,acollectionofonlypartitionioronlypartitionjcouldnevercollecteitheroftheseobjects.Yettheymayinfactbepartofacyclicgarbagestructurewithnolinksfromtheoutside.Ingeneral,the\\links\"betweentheobjectsshownmayinvolvemanyobjectsandlongchainsofreferences.PartitioniPartitionjFigure7.29:AcyclicstructureacrosspartitionsthatmaybecyclicgarbageIngenerationalgarbagecollection,weeventuallycollectpartitionj,andsincei<j,wealsocollectiatthattime.Then,thecyclicstructurewillbecompletelycontainedintheportionoftheheapbeingcollected,andwecantellifittrulyisgarbage.However,ifweneverhavearoundofcollectionthatincludesbothiandj,wewouldhaveaproblemwithcyclicgarbage,justaswedidwithreferencecountingforgarbagecollection.Thetrainalgorithmuses\fxed-lengthpartitions,calledcars;acarmightbeasinglediskblock,providedtherearenoobjectslargerthandiskblocks,orthecarsizecouldbelarger,butitis\fxedonceandforall.Carsareorganizedintotrains.Thereisnolimittothenumberofcarsinatrain,andnolimittothenumberoftrains.Thereisalexicographicordertocars:\frstorderbytrainnumber,andwithinatrain,orderbycarnumber,asinFig.7.30.Therearetwowaysthatgarbageiscollectedbythetrainalgorithm:\u000fThe\frstcarinlexicographicorder(thatis,the\frstremainingcarofthe\frstremainingtrain)iscollectedinoneincrementalgarbage-collectionstep.Thisstepissimilartocollectionofthe\frstpartitioninthegener-ationalalgorithm,sincewemaintaina\\remembered\"listofallpointers7.7.SHORT-PAUSEGARBAGECOLLECTION491\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001car33car32car31Train3\u0001\u0001\u0001car24car23car22car21Train2\u0001\u0001\u0001car12car11Train1Figure7.30:Organizationoftheheapforthetrainalgorithmfromoutsidethecar.Here,weidentifyobjectswithnoreferencesatall,aswellasgarbagecyclesthatarecontainedcompletelywithinthiscar.Reachableobjectsinthecararealwaysmovedtosomeothercar,soeachgarbage-collectedcarbecomesemptyandcanberemovedfromthetrain.\u000fSometimes,the\frsttrainhasnoexternalreferences.Thatis,therearenopointersfromtherootsettoanycarofthetrain,andtherememberedsetsforthecarscontainonlyreferencesfromothercarsinthetrain,notfromothertrains.Inthissituation,thetrainisahugecollectionofcyclicgarbage,andwedeletetheentiretrain.RememberedSetsWenowgivethedetailsofthetrainalgorithm.Eachcarhasarememberedsetconsistingofallreferencestoobjectsinthecarfroma)Objectsinhigher-numberedcarsofthesametrain,andb)Objectsinhigher-numberedtrains.Inaddition,eachtrainhasarememberedsetconsistingofallreferencesfromhigher-numberedtrains.Thatis,therememberedsetforatrainistheunionoftherememberedsetsforitscars,exceptforthosereferencesthatareinternaltothetrain.Itisthuspossibletorepresentbothkindsofrememberedsetsbydividingtherememberedsetsforthecarsinto\\internal\"(sametrain)and\\external\"(othertrains)portions.Notethatreferencestoobjectscancomefromanywhere,notjustfromlexicographicallyhighercars.However,thetwogarbage-collectionprocessesdealwiththe\frstcarofthe\frsttrain,andtheentire\frsttrain,respectively.Thus,whenitistimetousetherememberedsetsinagarbagecollection,thereisnothingearlierfromwhichreferencescouldcome,andthereforethereisnopointinrememberingreferencestohighercarsatanytime.Wemustbecareful,ofcourse,tomanagetherememberedsetsproperly,changingthemwheneverthemutatormodi\fesreferencesinanyobject.492CHAPTER7.RUN-TIMEENVIRONMENTSManagingTrainsOurobjectiveistodrawoutofthe\frsttrainallobjectsthatarenotcyclicgarbage.Then,the\frsttraineitherbecomesnothingbutcyclicgarbageandisthereforecollectedatthenextroundofgarbagecollection,orifthegarbageisnotcyclic,thenitscarsmaybecollectedoneatatime.Wethereforeneedtostartnewtrainsoccasionally,eventhoughthereisnolimitonthenumberofcarsinonetrain,andwecouldinprinciplesimplyaddnewcarstoasingletrain,everytimeweneededmorespace.Forexample,wecouldstartanewtrainaftereverykobjectcreations,forsomek.Thatis,ingeneral,anewobjectisplacedinthelastcarofthelasttrain,ifthereisroom,orinanewcarthatisaddedtotheendofthelasttrain,ifthereisnoroom.However,periodically,weinsteadstartanewtrainwithonecar,andplacethenewobjectthere.GarbageCollectingaCarTheheartofthetrainalgorithmishowweprocessthe\frstcarofthe\frsttrainduringaroundofgarbagecollection.Initially,thereachablesetistakentobetheobjectsofthatcarwithreferencesfromtherootsetandthosewithreferencesintherememberedsetforthatcar.Wethenscantheseobjectsasinamark-and-sweepcollector,butwedonotscananyreachedobjectsoutsidetheonecarbeingcollected.Afterthistracing,someobjectsinthecarmaybeidenti\fedasgarbage.Thereisnoneedtoreclaimtheirspace,becausetheentirecarisgoingtodisappearanyway.However,therearelikelytobesomereachableobjectsinthecar,andthesemustbemovedsomewhereelse.Therulesformovinganobjectare:\u000fIfthereisareferenceintherememberedsetfromanyothertrain(whichwillbehigher-numberedthanthetrainofthecarbeingcollected),thenmovetheobjecttooneofthosetrains.Ifthereisroom,theobjectcangoinsomeexistingcarofthetrainfromwhichareferenceemanates,oritcangoinanew,lastcarifthereisnoroom.\u000fIfthereisnoreferencefromothertrains,buttherearereferencesfromtherootsetorfromthe\frsttrain,thenmovetheobjecttoanyothercarofthesametrain,creatinganew,lastcarifthereisnoroom.Ifpossible,pickacarfromwhichthereisareference,tohelpbringcyclicstructurestoasinglecar.Aftermovingallthereachableobjectsfromthe\frstcar,wedeletethatcar.PanicModeThereisoneproblemwiththerulesabove.Inordertobesurethatallgarbagewilleventuallybecollected,weneedtobesurethateverytraineventuallybecomesthe\frsttrain,andifthistrainisnotcyclicgarbage,theneventually7.7.SHORT-PAUSEGARBAGECOLLECTION493allcarsofthattrainareremovedandthetraindisappearsonecaratatime.However,byrule(2)above,collectingthe\frstcarofthe\frsttraincanproduceanewlastcar.Itcannotproducetwoormorenewcars,sincesurelyalltheobjectsofthe\frstcarcan\ftinthenew,lastcar.However,couldwebeinasituationwhereeachcollectionstepforatrainresultsinanewcarbeingadded,andweneverget\fnishedwiththistrainandmoveontotheothertrains?Theansweris,unfortunately,thatsuchasituationispossible.Theproblemarisesifwehavealarge,cyclic,nongarbagestructure,andthemutatormanagestochangereferencesinsuchawaythatweneversee,atthetimewecollectacar,anyreferencesfromhighertrainsintherememberedset.Ifevenoneobjectisremovedfromthetrainduringthecollectionofacar,thenweareOK,sincenonewobjectsareaddedtothe\frsttrain,andthereforethe\frsttrainwillsurelyrunoutofobjectseventually.However,theremaybenogarbageatallthatwecancollectatastage,andweruntheriskofaloopwhereweperpetuallygarbagecollectonlythecurrent\frsttrain.Toavoidthisproblem,weneedtobehavedi\u000berentlywheneverweencounterafutilegarbagecollection,thatis,acarfromwhichnotevenoneobjectcanbedeletedasgarbageormovedtoanothertrain.Inthis\\panicmode,\"wemaketwochanges:1.Whenareferencetoanobjectinthe\frsttrainisrewritten,wemaintainthereferenceasanewmemberoftherootset.2.Whengarbagecollecting,ifanobjectinthe\frstcarhasareferencefromtherootset,includingdummyreferencessetupbypoint(1),thenwemovethatobjecttoanothertrain,evenifithasnoreferencesfromothertrains.Itisnotimportantwhichtrainwemoveitto,aslongasitisnotthe\frsttrain.Inthisway,ifthereareanyreferencesfromoutsidethe\frsttraintoobjectsinthe\frsttrain,thesereferencesareconsideredaswecollecteverycar,andeventuallysomeobjectwillberemovedfromthattrain.Wecanthenleavepanicmodeandproceednormally,surethatthecurrent\frsttrainisnowsmallerthanitwas.7.7.6ExercisesforSection7.7Exercise7.7.1:SupposethatthenetworkofobjectsfromFig.7.20ismanagedbyanincrementalalgorithmthatusesthefourlistsUnreached,Unscanned,Scanned,andFree,asinBaker'salgorithm.Tobespeci\fc,theUnscannedlistismanagedasaqueue,andwhenmorethanoneobjectistobeplacedonthislistduetothescanningofoneobject,wedosoinalphabeticalorder.Supposealsothatweusewritebarrierstoassurethatnoreachableobjectismadegarbage.StartingwithAandBontheUnscannedlist,supposethefollowingeventsoccur:i.Aisscanned.494CHAPTER7.RUN-TIMEENVIRONMENTSii.ThepointerA!DisrewrittentobeA!H.iii.Bisscanned.iv.Disscanned.v.ThepointerB!CisrewrittentobeB!I.Simulatetheentireincrementalgarbagecollection,assumingnomorepointersarerewritten.Whichobjectsaregarbage?WhichobjectsareplacedontheFreelist?Exercise7.7.2:RepeatExercise7.7.1ontheassumptionthata)Events(ii)and(v)areinterchangedinorder.b)Events(ii)and(v)occurbefore(i),(iii),and(iv).Exercise7.7.3:SupposetheheapconsistsofexactlytheninecarsonthreetrainsshowninFig.7.30(i.e.,ignoretheellipses).Objectoincar11hasreferencesfromcars12,23,and32.Whenwegarbagecollectcar11,wheremightowindup?Exercise7.7.4:RepeatExercise7.7.3forthecasesthatohasa)Onlyreferencesfromcars22and31.b)Noreferencesotherthanfromcar11.Exercise7.7.5:SupposetheheapconsistsofexactlytheninecarsonthreetrainsshowninFig.7.30(i.e.,ignoretheellipses).Wearecurrentlyinpanicmode.Objecto1incar11hasonlyonereference,fromobjecto2incar12.Thatreferenceisrewritten.Whenwegarbagecollectcar11,whatcouldhappentoo1?7.8AdvancedTopicsinGarbageCollectionWecloseourinvestigationofgarbagecollectionwithbrieftreatmentsoffouradditionaltopics:1.Garbagecollectioninparallelenvironments.2.Partialrelocationsofobjects.3.Garbagecollectionforlanguagesthatarenottype-safe.4.Theinteractionbetweenprogrammer-controlledandautomaticgarbagecollection.7.8.ADVANCEDTOPICSINGARBAGECOLLECTION4957.8.1ParallelandConcurrentGarbageCollectionGarbagecollectionbecomesevenmorechallengingwhenappliedtoapplicationsrunninginparallelonamultiprocessormachine.Itisnotuncommonforserverapplicationstohavethousandsofthreadsrunningatthesametime;eachofthesethreadsisamutator.Typically,theheapwillconsistofgigabytesofmemory.Scalablegarbage-collectionalgorithmsmusttakeadvantageofthepresenceofmultipleprocessors.Wesayagarbagecollectorisparallelifitusesmultiplethreads;itisconcurrentifitrunssimultaneouslywiththemutator.Weshalldescribeaparallel,andmostlyconcurrent,collectorthatusesaconcurrentandparallelphasethatdoesmostofthetracingwork,andthenastop-the-worldphasethatguaranteesallthereachableobjectsarefoundandre-claimsthestorage.Thisalgorithmintroducesnonewbasicconceptsingarbagecollectionperse;itshowshowwecancombinetheideasdescribedsofartocreateafullsolutiontotheparallel-and-concurrentcollectionproblem.How-ever,therearesomenewimplementationissuesthatariseduetothenatureofparallelexecution.Weshalldiscusshowthisalgorithmcoordinatesmultiplethreadsinaparallelcomputationusingarathercommonwork-queuemodel.Tounderstandthedesignofthealgorithmwemustkeepinmindthescaleoftheproblem.Eventherootsetofaparallelapplicationismuchlarger,consistingofeverythread'sstack,registersetandgloballyaccessiblevariables.Theamountofheapstoragecanbeverylarge,andsoistheamountofreachabledata.Therateatwhichmutationstakeplaceisalsomuchgreater.Toreducethepausetime,wecanadaptthebasicideasdevelopedforin-crementalanalysistooverlapgarbagecollectionwithmutation.Recallthatanincrementalanalysis,asdiscussedinSection7.7,performsthefollowingthreesteps:1.Findtherootset.Thisstepisnormallyperformedatomically,thatis,withthemutator(s)stopped.2.Interleavethetracingofthereachableobjectswiththeexecutionofthemutator(s).Inthisperiod,everytimeamutatorwritesareferencethatpointsfromaScannedobjecttoanUnreachedobject,werememberthatreference.AsdiscussedinSection7.7.2,wehaveoptionsregardingthegranularitywithwhichthesereferencesareremembered.Inthissection,weshallassumethecard-basedscheme,wherewedividetheheapintosectionscalled\\cards\"andmaintainabitmapindicatingwhichcardsaredirty(havehadoneormorereferenceswithinthemrewritten).3.Stopthemutator(s)againtorescanallthecardsthatmayholdreferencestounreachedobjects.Foralargemultithreadedapplication,thesetofobjectsreachedbytherootsetcanbeverylarge.Itisinfeasibletotakethetimeandspacetovisitallsuchobjectswhileallmutationscease.Also,duetothelargeheapandthelarge496CHAPTER7.RUN-TIMEENVIRONMENTSnumberofmutationthreads,manycardsmayneedtoberescannedafterallobjectshavebeenscannedonce.Itisthusadvisabletoscansomeofthesecardsinparallel,whilethemutatorsareallowedtocontinuetoexecuteconcurrently.Toimplementthetracingofstep(2)above,inparallel,weshallusemultiplegarbage-collectingthreadsconcurrentlywiththemutatorthreadstotracemostofthereachableobjects.Then,toimplementstep(3),westopthemutatorsanduseparallelthreadstoensurethatallreachableobjectsarefound.Thetracingofstep(2)iscarriedoutbyhavingeachmutatorthreadper-formpartofthegarbagecollection,alongwithitsownwork.Inaddition,weusethreadsthatarededicatedpurelytocollectinggarbage.Oncegarbagecol-lectionhasbeeninitiated,wheneveramutatorthreadperformssomememory-allocationoperation,italsoperformssometracingcomputation.Thepuregarbage-collectingthreadsareputtouseonlywhenamachinehasidlecycles.Asinincrementalanalysis,wheneveramutatorwritesareferencethatpointsfromaScannedobjecttoanUnreachedobject,thecardthatholdsthisreferenceismarkeddirtyandneedstoberescanned.Hereisanoutlineoftheparallel,concurrentgarbage-collectionalgorithm.1.Scantherootsetforeachmutatorthread,andputallobjectsdirectlyreachablefromthatthreadintotheUnscannedstate.Thesimplestincre-mentalapproachtothisstepistowaituntilamutatorthreadcallsthememorymanager,andhaveitscanitsownrootsetifthathasnotalreadybeendone.Ifsomemutatorthreadhasnotcalledamemoryallocationfunction,butalltherestoftracingisdone,thenthisthreadmustbeinterruptedtohaveitsrootsetscanned.2.ScanobjectsthatareintheUnscannedstate.Tosupportparallelcom-putation,weuseaworkqueueof\fxed-sizeworkpackets,eachofwhichholdsanumberofUnscannedobjects.Unscannedobjectsareplacedinworkpacketsastheyarediscovered.Threadslookingforworkwillde-queuetheseworkpacketsandtracetheUnscannedobjectstherein.Thisstrategyallowstheworktobespreadevenlyamongworkersinthetracingprocess.Ifthesystemrunsoutofspace,andwecannot\fndthespacetocreatetheseworkpackets,wesimplymarkthecardsholdingtheobjectstoforcethemtobescanned.Thelatterisalwayspossiblebecausethebitarrayholdingthemarksforthecardshasalreadybeenallocated.3.Scantheobjectsindirtycards.WhentherearenomoreUnscannedob-jectsleftintheworkqueue,andallthreads'rootsetshavebeenscanned,thecardsarerescannedforreachableobjects.Aslongasthemutatorscontinuetoexecute,dirtycardscontinuetobeproduced.Thus,weneedtostopthetracingprocessusingsomecriterion,suchasallowingcardstoberescannedonlyonceora\fxednumberoftimes,orwhenthenumberofoutstandingcardsisreducedtosomethreshold.Asaresult,thisparal-lelandconcurrentstepnormallyterminatesbeforecompletingthetrace,whichis\fnishedbythe\fnalstep,below.7.8.ADVANCEDTOPICSINGARBAGECOLLECTION4974.The\fnalstepguaranteesthatallreachableobjectsaremarkedasreached.Withallthemutatorsstopped,therootsetsforallthethreadscannowbefoundquicklyusingalltheprocessorsinthesystem.Becausethereachabilityofmostobjectshasbeentraced,onlyasmallnumberofobjectsareexpectedtobeplacedintheUnscannedstate.Allthethreadsthenparticipateintracingtherestofthereachableobjectsandrescanningallthecards.Itisimportantthatwecontroltherateatwhichtracingtakesplace.Thetracingphaseislikearace.Themutatorscreatenewobjectsandnewreferencesthatmustbescanned,andthetracingtriestoscanallthereachableobjectsandrescanthedirtycardsgeneratedinthemeanwhile.Itisnotdesirabletostartthetracingtoomuchbeforeagarbagecollectionisneeded,becausethatwillincreasetheamountof\roatinggarbage.Ontheotherhand,wecannotwaituntilthememoryisexhaustedbeforethetracingstarts,becausethenmutatorswillnotbeabletomakeforwardprogressandthesituationdegeneratestothatofastop-the-worldcollector.Thus,thealgorithmmustchoosethetimetocommencethecollectionandtherateoftracingappropriately.Anestimateofthemutationratefrompreviouscyclesofcollectioncanbeusedtohelpinthedecision.Thetracingrateisdynamicallyadjustedtoaccountfortheworkperformedbythepuregarbage-collectingthreads.7.8.2PartialObjectRelocationAsdiscussedstartinginSection7.6.4,copyingorcompactingcollectorsaread-vantageousbecausetheyeliminatefragmentation.However,thesecollectorshavenontrivialoverheads.Acompactingcollectorrequiresmovingallobjectsandupdatingallthereferencesattheendofgarbagecollection.Acopyingcollector\fguresoutwherethereachableobjectsgoastracingproceeds;iftrac-ingisperformedincrementally,weneedeithertotranslateamutator'severyreference,ortomovealltheobjectsandupdatetheirreferencesattheend.Bothoptionsareveryexpensive,especiallyforalargeheap.Wecaninsteaduseacopyinggenerationalgarbagecollector.Itise\u000bectiveincollectingimmatureobjectsandreducingfragmentation,butcanbeexpensivewhencollectingmatureobjects.Wecanusethetrainalgorithmtolimittheamountofmaturedataanalyzedeachtime.However,theoverheadofthetrainalgorithmissensitivetothesizeoftherememberedsetforeachpartition.Thereisahybridcollectionschemethatusesconcurrenttracingtoreclaimalltheunreachableobjectsandatthesametimemovesonlyapartoftheobjects.Thismethodreducesfragmentationwithoutincurringthefullcostofrelocationineachcollectioncycle.1.Beforetracingbegins,chooseapartoftheheapthatwillbeevacuated.2.Asthereachableobjectsaremarked,alsorememberallthereferencespointingtoobjectsinthedesignatedarea.498CHAPTER7.RUN-TIMEENVIRONMENTS3.Whentracingiscomplete,sweepthestorageinparalleltoreclaimthespaceoccupiedbyunreachableobjects.4.Finally,evacuatethereachableobjectsoccupyingthedesignatedareaand\fxupthereferencestotheevacuatedobjects.7.8.3ConservativeCollectionforUnsafeLanguagesAsdiscussedinSection7.5.1,itisimpossibletobuildagarbagecollectorthatisguaranteedtoworkforallCandC++programs.Sincewecanalwayscomputeanaddresswitharithmeticoperations,nomemorylocationsinCandC++caneverbeshowntobeunreachable.However,manyCorC++programsneverfabricateaddressesinthisway.Ithasbeendemonstratedthataconservativegarbagecollector|onethatdoesnotnecessarilydiscardallgarbage|canbebuilttoworkwellinpracticeforthisclassofprograms.Aconservativegarbagecollectorassumesthatwecannotfabricateanad-dress,orderivetheaddressofanallocatedchunkofmemorywithoutanad-dresspointingsomewhereinthesamechunk.Wecan\fndallthegarbageinprogramssatisfyingsuchanassumptionbytreatingasavalidaddressanybitpatternfoundanywhereinreachablememory,aslongasthatbitpatternmaybeconstruedasamemorylocation.Thisschememayclassifysomedataerro-neouslyasaddresses.Itiscorrect,however,sinceitonlycausesthecollectortobeconservativeandkeepmoredatathannecessary.Objectrelocation,requiringallreferencestotheoldlocationsbeupdatedtopointtothenewlocations,isincompatiblewithconservativegarbagecollection.Sinceaconservativegarbagecollectordoesnotknowifaparticularbitpatternreferstoanactualaddress,itcannotchangethesepatternstopointtonewaddresses.Hereishowaconservativegarbagecollectorworks.First,thememorymanagerismodi\fedtokeepadatamapofalltheallocatedchunksofmemory.Thismapallowsusto\fndeasilythestartingandendingboundaryofthechunkofmemorythatspansacertainaddress.Thetracingstartsbyscanningtheprogram'srootsetto\fndanybitpatternthatlookslikeamemorylocation,withoutworryingaboutitstype.Bylookingupthesepotentialaddressesinthedatamap,wecan\fndthestartingaddressesofthosechunksofmemorythatmightbereached,andplacethemintheUnscannedstate.Wethenscanalltheunscannedchunks,\fndmore(presumably)reachablechunksofmemory,andplacethemontheworklistuntiltheworklistbecomesempty.Aftertracingisdone,wesweepthroughtheheapstorageusingthedatamaptolocateandfreealltheunreachablechunksofmemory.7.8.4WeakReferencesSometimes,programmersusealanguagewithgarbagecollection,butalsowishtomanagememory,orpartsofmemory,themselves.Thatis,aprogrammermayknowthatcertainobjectsarenevergoingtobeaccessedagain,eventhough7.8.ADVANCEDTOPICSINGARBAGECOLLECTION499referencestotheobjectsremain.Anexamplefromcompilingwillsuggesttheproblem.Example7.17:Wehaveseenthatthelexicalanalyzeroftenmanagesasym-boltablebycreatinganobjectforeachidenti\feritsees.Theseobjectsmayappearaslexicalvaluesattachedtoleavesoftheparsetreerepresentingthoseidenti\fers,forinstance.However,itisalsousefultocreateahashtable,keyedbytheidenti\fer'sstring,tolocatetheseobjects.Thattablemakesiteasierforthelexicalanalyzerto\fndtheobjectwhenitencountersalexemethatisanidenti\fer.Whenthecompilerpassesthescopeofanidenti\ferI,itssymbol-tableobjectnolongerhasanyreferencesfromtheparsetree,orprobablyanyotherintermediatestructureusedbythecompiler.However,areferencetotheobjectisstillsittinginthehashtable.Sincethehashtableispartoftherootsetofthecompiler,theobjectcannotbegarbagecollected.Ifanotheridenti\ferwiththesamelexemeasIisencountered,thenitwillbediscoveredthatIisoutofscope,andthereferencetoitsobjectwillbedeleted.However,ifnootheridenti\ferwiththislexemeisencountered,thenI'sobjectmayremainasuncollectable,yetuseless,throughoutcompilation.2IftheproblemsuggestedbyExample7.17isimportant,thenthecompilerwritercouldarrangetodeletefromthehashtableallreferencestoobjectsassoonastheirscopeends.However,atechniqueknownasweakreferencesallowstheprogrammertorelyonautomaticgarbagecollection,andyetnothavetheheapburdenedwithreachable,yettrulyunused,objects.Suchasystemallowscertainreferencestobedeclared\\weak.\"Anexamplewouldbeallthereferencesinthehashtablewehavebeendiscussing.Whenthegarbagecollectorscansanobject,itdoesnotfollowweakreferenceswithinthatobject,anddoesnotmaketheobjectstheypointtoreachable.Ofcourse,suchanobjectmaystillbereachableifthereisanotherreferencetoitthatisnotweak.7.8.5ExercisesforSection7.8!Exercise7.8.1:InSection7.8.3wesuggestedthatitwaspossibletogarbagecollectforCprogramsthatdonotfabricateexpressionsthatpointtoaplacewithinachunkunlessthereisanaddressthatpointssomewherewithinthatsamechunk.Thus,weruleoutcodelikep=12345;x=*p;because,whilepmightpointtosomechunkaccidentally,therecouldbenootherpointertothatchunk.Ontheotherhand,withthecodeabove,itismorelikelythatppointsnowhere,andexecutingthatcodewillresultinasegmentationfault.However,inCitispossibletowritecodesuchthatavariablelikepisguaranteedtopointtosomechunk,andyetthereisnopointertothatchunk.Writesuchaprogram.500CHAPTER7.RUN-TIMEENVIRONMENTS7.9SummaryofChapter7 ✦Run-TimeOrganization.Toimplementtheabstractionsembodiedinthesourcelanguage,acompilercreatesandmanagesarun-timeenvironmentinconcertwiththeoperatingsystemandthetargetmachine.Therun-timeenvironmenthasstaticdataareasfortheobjectcodeandthestaticdataobjectscreatedatcompiletime.Italsohasdynamicstackandheapareasformanagingobjectscreatedanddestroyedasthetargetprogramexecutes. ✦ControlStack.Procedurecallsandreturnsareusuallymanagedbyarun-timestackcalledthecontrolstack.Wecanuseastackbecauseprocedurecallsoractivationsnestintime;thatis,ifpcallsq,thenthisactivationofqisnestedwithinthisactivationofp. ✦StackAllocation.Storageforlocalvariablescanbeallocatedonarun-timestackforlanguagesthatalloworrequirelocalvariablestobecomeinaccessiblewhentheirproceduresend.Forsuchlanguages,eachliveactivationhasanactivationrecord(orframe)onthecontrolstack,withtherootoftheactivationtreeatthebottom,andtheentiresequenceofactivationrecordsonthestackcorrespondingtothepathintheactivationtreetotheactivationwherecontrolcurrentlyresides.Thelatteractivationhasitsrecordatthetopofthestack. ✦AccesstoNonlocalDataontheStack.ForlanguageslikeCthatdonotallownestedproceduredeclarations,thelocationforavariableiseitherglobalorfoundintheactivationrecordontopoftherun-timestack.Forlanguageswithnestedprocedures,wecanaccessnonlocaldataonthestackthroughaccesslinks,whicharepointersaddedtoeachactivationrecord.Thedesirednonlocaldataisfoundbyfollowingachainofaccesslinkstotheappropriateactivationrecord.Adisplayisanauxiliaryarray,usedinconjunctionwithaccesslinks,thatprovidesane\u000ecientshort-cutalternativetoachainofaccesslinks. ✦HeapManagement.Theheapistheportionofthestorethatisusedfordatathatcanliveinde\fnitely,oruntiltheprogramdeletesitexplicitly.Thememorymanagerallocatesanddeallocatesspacewithintheheap.Garbagecollection\fndsspaceswithintheheapthatarenolongerinuseandcanthereforebereallocatedtohouseotherdataitems.Forlanguagesthatrequireit,thegarbagecollectorisanimportantsubsystemofthememorymanager. ✦ExploitingLocality.Bymakinggooduseofthememoryhierarchy,mem-orymanagerscanin\ruencetheruntimeofaprogram.Thetimetakentoaccessdi\u000berentpartsofmemorycanvaryfromnanosecondstomillisec-onds.Fortunately,mostprogramsspendmostoftheirtimeexecutingarelativelysmallfractionofthecodeandtouchingonlyasmallfractionof7.9.SUMMARYOFCHAPTER7501thedata.Aprogramhastemporallocalityifitislikelytoaccessthesamememorylocationsagainsoon;ithasspatiallocalityifitislikelytoaccessnearbymemorylocationssoon. ✦ReducingFragmentation.Astheprogramallocatesanddeallocatesmem-ory,theheapmaygetfragmented,orbrokenintolargenumbersofsmallnoncontiguousfreespacesorholes.Thebest\ftstrategy|allocatethesmallestavailableholethatsatis\fesarequest|hasbeenfoundempir-icallytoworkwell.Whilebest\fttendstoimprovespaceutilization,itmaynotbebestforspatiallocality.Fragmentationcanbereducedbycombiningorcoalescingadjacentholes. ✦ManualDeallocation.Manualmemorymanagementhastwocommonfailings:notdeletingdatathatcannotbereferencedisamemory-leakerror,andreferencingdeleteddataisadangling-pointer-dereferenceerror. ✦Reachability.Garbageisdatathatcannotbereferencedorreached.Therearetwobasicwaysof\fndingunreachableobjects:eithercatchthetran-sitionasareachableobjectturnsunreachable,orperiodicallylocateallreachableobjectsandinferthatallremainingobjectsareunreachable. ✦Reference-CountingCollectorsmaintainacountofthereferencestoanob-ject;whenthecounttransitionstozero,theobjectbecomesunreachable.Suchcollectorsintroducetheoverheadofmaintainingreferencesandcanfailto\fnd\\cyclic\"garbage,whichconsistsofunreachableobjectsthatreferenceeachother,perhapsthroughachainofreferences. ✦Trace-BasedGarbageCollectorsiterativelyexamineortraceallreferencesto\fndreachableobjects,startingwiththerootsetconsistingofobjectsthatcanbeaccesseddirectlywithouthavingtodereferenceanypointers. ✦Mark-and-SweepCollectorsvisitandmarkallreachableobjectsina\frsttracingstepandthensweeptheheaptofreeupunreachableobjects. ✦Mark-and-CompactCollectorsimproveuponmark-and-sweep;theyrelo-catereachableobjectsintheheaptoeliminatememoryfragmentation. ✦CopyingCollectorsbreakthedependencybetweentracingand\fndingfreespace.Theypartitionthememoryintotwosemispaces,AandB.Allocationrequestsaresatis\fedfromonesemispace,sayA,untilit\fllsup,atwhichpointthegarbagecollectortakesover,copiesthereachableobjectstotheotherspace,sayB,andreversestherolesofthesemispaces. ✦IncrementalCollectors.Simpletrace-basedcollectorsstoptheuserpro-gramwhilegarbageiscollected.Incrementalcollectorsinterleavetheactionsofthegarbagecollectorandthemutatororuserprogram.Themutatorcaninterferewithincrementalreachabilityanalysis,sinceitcan502CHAPTER7.RUN-TIMEENVIRONMENTSchangethereferenceswithinpreviouslyscannedobjects.Incrementalcol-lectorsthereforeplayitsafebyoverestimatingthesetofreachableobjects;any\\\roatinggarbage\"canbepickedupinthenextroundofcollection. ✦PartialCollectorsalsoreducepauses;theycollectasubsetofthegarbageatatime.Thebestknownofpartial-collectionalgorithms,generationalgarbagecollection,partitionsobjectsaccordingtohowlongtheyhavebeenallocatedandcollectsthenewlycreatedobjectsmoreoftenbecausetheytendtohaveshorterlifetimes.Analternativealgorithm,thetrainalgorithm,uses\fxedlengthpartitions,calledcars,thatarecollectedintotrains.Eachcollectionstepisappliedtothe\frstremainingcarofthe\frstremainingtrain.Whenacariscollected,reachableobjectsaremovedouttoothercars,sothiscarisleftwithgarbageandcanberemovedfromthetrain.Thesetwoalgorithmscanbeusedtogethertocreateapartialcollectorthatappliesthegenerationalalgorithmtoyoungerobjectsandthetrainalgorithmtomorematureobjects.7.10ReferencesforChapter7Inmathematicallogic,scoperulesandparameterpassingbysubstitutiondatebacktoFrege[8].Church'slambdacalculus[3]useslexicalscope;ithasbeenusedasamodelforstudyingprogramminglanguages.Algol60anditssucces-sors,includingCandJava,uselexicalscope.OnceintroducedbytheinitialimplementationofLisp,dynamicscopebecameafeatureofthelanguage;Mc-Carthy[14]givesthehistory.ManyoftheconceptsrelatedtostackallocationwerestimulatedbyblocksandrecursioninAlgol60.TheideaofadisplayforaccessingnonlocalsinalexicallyscopedlanguageisduetoDijkstra[5].Adetaileddescriptionofstackallocation,theuseofadisplay,anddynamicallocationofarraysappearsinRandellandRussell[16].JohnsonandRitchie[10]discussthedesignofacallingsequencethatallowsthenumberofargumentsofaproceduretovaryfromcalltocall.Garbagecollectionhasbeenanactiveareaofinvestigation;seeforexampleWilson[17].ReferencecountingdatesbacktoCollins[4].Trace-basedcollectiondatesbacktoMcCarthy[13],whodescribesamark-sweepalgorithmfor\fxed-lengthcells.Theboundary-tagformanagingfreespacewasdesignedbyKnuthin1962andpublishedin[11].Algorithm7.14isbasedonBaker[1].Algorithm7.16isbasedonCheney's[2]nonrecursiveversionofFenichelandYochelson's[7]copyingcollector.IncrementalreachabilityanalysisisexploredbyDijkstraetal.[6].Lieber-manandHewitt[12]presentagenerationalcollectorasanextensionofcopyingcollection.ThetrainalgorithmbeganwithHudsonandMoss[9].1.Baker,H.G.Jr.,\\Thetreadmill:real-timegarbagecollectionwithoutmotionsickness,\"ACMSIGPLANNotices27:3(Mar.,1992),pp.66{70.7.10.REFERENCESFORCHAPTER75032.Cheney,C.J.,\\Anonrecursivelistcompactingalgorithm,\"Comm.ACM13:11(Nov.,1970),pp.677{678.3.Church,A.,TheCalculiofLambdaConversion,AnnalsofMath.Studies,No.6,PrincetonUniversityPress,Princeton,N.J.,1941.4.Collins,G.E.,\\Amethodforoverlappinganderasureoflists,\"Comm.ACM2:12(Dec.,1960),pp.655{657.5.Dijkstra,E.W.,\\Recursiveprogramming,\"NumerischeMath.2(1960),pp.312{318.6.Dijkstra,E.W.,L.Lamport,A.J.Martin,C.S.Scholten,andE.F.M.Ste\u000bens,\\On-the-\rygarbagecollection:anexerciseincooperation,\"Comm.ACM21:11(1978),pp.966{975.7.Fenichel,R.R.andJ.C.Yochelson,\\ALispgarbage-collectorforvirtual-memorycomputersystems\",Comm.ACM12:11(1969),pp.611{612.8.Frege,G.,\\Begri\u000bsschrift,aformulalanguage,modeleduponthatofarithmetic,forpurethought,\"(1879).InJ.vanHeijenoort,FromFregetoG\u0000odel,HarvardUniv.Press,CambridgeMA,1967.9.Hudson,R.L.andJ.E.B.Moss,\\IncrementalCollectionofMatureObjects\",Proc.Intl.WorkshoponMemoryManagement,LectureNotesInComputerScience637(1992),pp.388{403.10.Johnson,S.C.andD.M.Ritchie,\\TheClanguagecallingsequence,\"ComputingScienceTechnicalReport102,BellLaboratories,MurrayHillNJ,1981.11.Knuth,D.E.,ArtofComputerProgramming,Volume1:FundamentalAlgorithms,Addison-Wesley,BostonMA,1968.12.Lieberman,H.andC.Hewitt,\\Areal-timegarbagecollectorbasedonthelifetimesofobjects,\"Comm.ACM26:6(June,1983),pp.419{429.13.McCarthy,J.,\\Recursivefunctionsofsymbolicexpressionsandtheircom-putationbymachine,\"Comm.ACM3:4(Apr.,1960),pp.184{195.14.McCarthy,J.,\\HistoryofLisp.\"Seepp.173{185inR.L.Wexelblat(ed.),HistoryofProgrammingLanguages,AcademicPress,NewYork,1981.15.Minsky,M.,\\ALISPgarbagecollectoralgorithmusingsecondarystor-age,\"A.I.Memo58,MITProjectMAC,CambridgeMA,1963.16.Randell,B.andL.J.Russell,Algol60Implementation,AcademicPress,NewYork,1964.17.Wilson,P.R.,\\Uniprocessorgarbagecollectiontechniques,\"ftp://ftp.cs.utexas.edu/pub/garbage/bigsurv.ps This page intentionally left blank Chapter8CodeGenerationThe\fnalphaseinourcompilermodelisthecodegenerator.Ittakesasinputtheintermediaterepresentation(IR)producedbythefrontendofthecom-piler,alongwithrelevantsymboltableinformation,andproducesasoutputasemanticallyequivalenttargetprogram,asshowninFig.8.1.Therequirementsimposedonacodegeneratoraresevere.Thetargetpro-grammustpreservethesemanticmeaningofthesourceprogramandbeofhighquality;thatis,itmustmakee\u000bectiveuseoftheavailableresourcesofthetargetmachine.Moreover,thecodegeneratoritselfmustrune\u000eciently.Thechallengeisthat,mathematically,theproblemofgeneratinganoptimaltargetprogramforagivensourceprogramisundecidable;manyofthesubprob-lemsencounteredincodegenerationsuchasregisterallocationarecomputa-tionallyintractable.Inpractice,wemustbecontentwithheuristictechniquesthatgenerategood,butnotnecessarilyoptimal,code.Fortunately,heuristicshavematuredenoughthatacarefullydesignedcodegeneratorcanproducecodethatisseveraltimesfasterthancodeproducedbyanaiveone.Compilersthatneedtoproducee\u000ecienttargetprograms,includeanop-timizationphasepriortocodegeneration.TheoptimizermapstheIRintoIRfromwhichmoree\u000ecientcodecanbegenerated.Ingeneral,thecode-optimizationandcode-generationphasesofacompiler,oftenreferredtoasthebackend,maymakemultiplepassesovertheIRbeforegeneratingthetargetprogram.CodeoptimizationisdiscussedindetailinChapter9.Thetech-niquespresentedinthischaptercanbeusedwhetherornotanoptimizationphaseoccursbeforecodegeneration.Acodegeneratorhasthreeprimarytasks:instructionselection,registerprogramtargetGeneratorCodecodeintermediateOptimizerCodecodeintermediateEndFrontprogramsourceFigure8.1:Positionofcodegenerator505506CHAPTER8.CODEGENERATIONallocationandassignment,andinstructionordering.TheimportanceofthesetasksisoutlinedinSection8.1.Instructionselectioninvolveschoosingappro-priatetarget-machineinstructionstoimplementtheIRstatements.Registerallocationandassignmentinvolvesdecidingwhatvaluestokeepinwhichreg-isters.Instructionorderinginvolvesdecidinginwhatordertoscheduletheexecutionofinstructions.Thischapterpresentsalgorithmsthatcodegeneratorscanusetotrans-latetheIRintoasequenceoftargetlanguageinstructionsforsimpleregistermachines.ThealgorithmswillbeillustratedbyusingthemachinemodelinSec-tion8.2.Chapter10coverstheproblemofcodegenerationforcomplexmodernmachinesthatsupportagreatdealofparallelismwithinasingleinstruction.Afterdiscussingthebroadissuesinthedesignofacodegenerator,weshowwhatkindoftargetcodeacompilerneedstogeneratetosupporttheabstrac-tionsembodiedinatypicalsourcelanguage.InSection8.3,weoutlineimple-mentationsofstaticandstackallocationofdataareas,andshowhownamesintheIRcanbeconvertedintoaddressesinthetargetcode.ManycodegeneratorspartitionIRinstructionsinto\\basicblocks,\"whichconsistofsequencesofinstructionsthatarealwaysexecutedtogether.ThepartitioningoftheIRintobasicblocksisthesubjectofSection8.4.Thefollowingsectionpresentssimplelocaltransformationsthatcanbeusedtotransformbasicblocksintomodi\fedbasicblocksfromwhichmoree\u000ecientcodecanbegenerated.Thesetransformationsarearudimentaryformofcodeoptimization,althoughthedeepertheoryofcodeoptimizationwillnotbetakenupuntilChapter9.Anexampleofauseful,localtransformationisthediscoveryofcommonsubexpressionsatthelevelofintermediatecodeandtheresultantreplacementofarithmeticoperationsbysimplercopyoperations.Section8.6presentsasimplecode-generationalgorithmthatgeneratescodeforeachstatementinturn,keepingoperandsinregistersaslongaspossible.TheoutputofthiskindofcodegeneratorcanbereadilyimprovedbypeepholeoptimizationtechniquessuchasthosediscussedinthefollowingSection8.7.Theremainingsectionsexploreinstructionselectionandregisterallocation.8.1IssuesintheDesignofaCodeGeneratorWhilethedetailsaredependentonthespeci\fcsoftheintermediaterepresen-tation,thetargetlanguage,andtherun-timesystem,taskssuchasinstructionselection,registerallocationandassignment,andinstructionorderingareen-counteredinthedesignofalmostallcodegenerators.Themostimportantcriterionforacodegeneratoristhatitproducecor-rectcode.Correctnesstakesonspecialsigni\fcancebecauseofthenumberofspecialcasesthatacodegeneratormightface.Giventhepremiumoncorrect-ness,designingacodegeneratorsoitcanbeeasilyimplemented,tested,andmaintainedisanimportantdesigngoal.8.1.ISSUESINTHEDESIGNOFACODEGENERATOR5078.1.1InputtotheCodeGeneratorTheinputtothecodegeneratoristheintermediaterepresentationofthesourceprogramproducedbythefrontend,alongwithinformationinthesymboltablethatisusedtodeterminetherun-timeaddressesofthedataobjectsdenotedbythenamesintheIR.ThemanychoicesfortheIRincludethree-addressrepresentationssuchasquadruples,triples,indirecttriples;virtualmachinerepresentationssuchasbytecodesandstack-machinecode;linearrepresentationssuchaspost\fxno-tation;andgraphicalrepresentationssuchassyntaxtreesandDAG's.ManyofthealgorithmsinthischapterarecouchedintermsoftherepresentationsconsideredinChapter6:three-addresscode,trees,andDAG's.Thetechniqueswediscusscanbeapplied,however,totheotherintermediaterepresentationsaswell.Inthischapter,weassumethatthefrontendhasscanned,parsed,andtranslatedthesourceprogramintoarelativelylow-levelIR,sothatthevaluesofthenamesappearingintheIRcanberepresentedbyquantitiesthatthetargetmachinecandirectlymanipulate,suchasintegersand\roating-pointnumbers.Wealsoassumethatallsyntacticandstaticsemanticerrorshavebeendetected,thatthenecessarytypecheckinghastakenplace,andthattype-conversionoperatorshavebeeninsertedwherevernecessary.Thecodegeneratorcanthereforeproceedontheassumptionthatitsinputisfreeofthesekindsoferrors.8.1.2TheTargetProgramTheinstruction-setarchitectureofthetargetmachinehasasigni\fcantim-pactonthedi\u000ecultyofconstructingagoodcodegeneratorthatproduceshigh-qualitymachinecode.Themostcommontarget-machinearchitecturesareRISC(reducedinstructionsetcomputer),CISC(complexinstructionsetcomputer),andstackbased.ARISCmachinetypicallyhasmanyregisters,three-addressinstructions,simpleaddressingmodes,andarelativelysimpleinstruction-setarchitecture.Incontrast,aCISCmachinetypicallyhasfewregisters,two-addressinstruc-tions,avarietyofaddressingmodes,severalregisterclasses,variable-lengthinstructions,andinstructionswithsidee\u000bects.Inastack-basedmachine,operationsaredonebypushingoperandsontoastackandthenperformingtheoperationsontheoperandsatthetopofthestack.Toachievehighperformancethetopofthestackistypicallykeptinregisters.Stack-basedmachinesalmostdisappearedbecauseitwasfeltthatthestackorganizationwastoolimitingandrequiredtoomanyswapandcopyoperations.However,stack-basedarchitectureswererevivedwiththeintroductionoftheJavaVirtualMachine(JVM).TheJVMisasoftwareinterpreterforJavabytecodes,anintermediatelanguageproducedbyJavacompilers.Theinter-508CHAPTER8.CODEGENERATIONpreterprovidessoftwarecompatibilityacrossmultipleplatforms,amajorfactorinthesuccessofJava.Toovercomethehighperformancepenaltyofinterpretation,whichcanbeontheorderofafactorof10,just-in-time(JIT)Javacompilershavebeencreated.TheseJITcompilerstranslatebytecodesduringruntimetothenativehardwareinstructionsetofthetargetmachine.AnotherapproachtoimprovingJavaperformanceistobuildacompilerthatcompilesdirectlyintothemachineinstructionsofthetargetmachine,bypassingtheJavabytecodesentirely.Producinganabsolutemachine-languageprogramasoutputhasthead-vantagethatitcanbeplacedina\fxedlocationinmemoryandimmediatelyexecuted.Programscanbecompiledandexecutedquickly.Producingarelocatablemachine-languageprogram(oftencalledanobjectmodule)asoutputallowssubprogramstobecompiledseparately.Asetofrelocatableobjectmodulescanbelinkedtogetherandloadedforexecutionbyalinkingloader.Althoughwemustpaytheaddedexpenseoflinkingandloadingifweproducerelocatableobjectmodules,wegainagreatdealof\rexibilityinbeingabletocompilesubroutinesseparatelyandtocallotherpreviouslycompiledprogramsfromanobjectmodule.Ifthetargetmachinedoesnothandlerelocationautomatically,thecompilermustprovideexplicitrelocationinformationtotheloadertolinktheseparatelycompiledprogrammodules.Producinganassembly-languageprogramasoutputmakestheprocessofcodegenerationsomewhateasier.Wecangeneratesymbolicinstructionsandusethemacrofacilitiesoftheassemblertohelpgeneratecode.Thepricepaidistheassemblystepaftercodegeneration.Inthischapter,weshalluseaverysimpleRISC-likecomputerasourtargetmachine.WeaddtoitsomeCISC-likeaddressingmodessothatwecanalsodiscusscode-generationtechniquesforCISCmachines.Forreadability,weuseassemblycodeasthetargetlanguage.Aslongasaddressescanbecalculatedfromo\u000bsetsandotherinformationstoredinthesymboltable,thecodegener-atorcanproducerelocatableorabsoluteaddressesfornamesjustaseasilyassymbolicaddresses.8.1.3InstructionSelectionThecodegeneratormustmaptheIRprogramintoacodesequencethatcanbeexecutedbythetargetmachine.Thecomplexityofperformingthismappingisdeterminedbyfactorssuchas\u000ftheleveloftheIR\u000fthenatureoftheinstruction-setarchitecture\u000fthedesiredqualityofthegeneratedcode.IftheIRishighlevel,thecodegeneratormaytranslateeachIRstatementintoasequenceofmachineinstructionsusingcodetemplates.Suchstatement-by-statementcodegeneration,however,oftenproducespoorcodethatneeds8.1.ISSUESINTHEDESIGNOFACODEGENERATOR509furtheroptimization.IftheIRre\rectssomeofthelow-leveldetailsoftheun-derlyingmachine,thenthecodegeneratorcanusethisinformationtogeneratemoree\u000ecientcodesequences.Thenatureoftheinstructionsetofthetargetmachinehasastronge\u000bectonthedi\u000ecultyofinstructionselection.Forexample,theuniformityandcom-pletenessoftheinstructionsetareimportantfactors.Ifthetargetmachinedoesnotsupporteachdatatypeinauniformmanner,theneachexceptiontothegeneralrulerequiresspecialhandling.Onsomemachines,forexample,\roating-pointoperationsaredoneusingseparateregisters.Instructionspeedsandmachineidiomsareotherimportantfactors.Ifwedonotcareaboutthee\u000eciencyofthetargetprogram,instructionselectionisstraightforward.Foreachtypeofthree-addressstatement,wecandesignacodeskeletonthatde\fnesthetargetcodetobegeneratedforthatconstruct.Forexample,everythree-addressstatementoftheformx=y+z,wherex,y,andzarestaticallyallocated,canbetranslatedintothecodesequenceLDR0,y//R0=y(loadyintoregisterR0)ADDR0,R0,z//R0=R0+z(addztoR0)STx,R0//x=R0(storeR0intox)Thisstrategyoftenproducesredundantloadsandstores.Forexample,thesequenceofthree-addressstatementsa=b+cd=a+ewouldbetranslatedintoLDR0,b//R0=bADDR0,R0,c//R0=R0+cSTa,R0//a=R0LDR0,a//R0=aADDR0,R0,e//R0=R0+eSTd,R0//d=R0Here,thefourthstatementisredundantsinceitloadsavaluethathasjustbeenstored,andsoisthethirdifaisnotsubsequentlyused.Thequalityofthegeneratedcodeisusuallydeterminedbyitsspeedandsize.Onmostmachines,agivenIRprogramcanbeimplementedbymanydi\u000berentcodesequences,withsigni\fcantcostdi\u000berencesbetweenthedi\u000berentimplementations.Anaivetranslationoftheintermediatecodemaythereforeleadtocorrectbutunacceptablyine\u000ecienttargetcode.Forexample,ifthetargetmachinehasan\\increment\"instruction(INC),thenthethree-addressstatementa=a+1maybeimplementedmoree\u000ecientlybythesingleinstructionINCa,ratherthanbyamoreobvioussequencethatloadsaintoaregister,addsonetotheregister,andthenstorestheresultbackintoa:510CHAPTER8.CODEGENERATIONLDR0,a//R0=aADDR0,R0,#1//R0=R0+1STa,R0//a=R0Weneedtoknowinstructioncostsinordertodesigngoodcodesequencesbut,unfortunately,accuratecostinformationisoftendi\u000eculttoobtain.De-cidingwhichmachine-codesequenceisbestforagiventhree-addressconstructmayalsorequireknowledgeaboutthecontextinwhichthatconstructappears.InSection8.9weshallseethatinstructionselectioncanbemodeledasatree-patternmatchingprocessinwhichwerepresenttheIRandthemachineinstructionsastrees.Wethenattemptto\\tile\"anIRtreewithasetofsub-treesthatcorrespondtomachineinstructions.Ifweassociateacostwitheachmachine-instructionsubtree,wecanusedynamicprogrammingtogenerateop-timalcodesequences.DynamicprogrammingisdiscussedinSection8.11.8.1.4RegisterAllocationAkeyproblemincodegenerationisdecidingwhatvaluestoholdinwhatregisters.Registersarethefastestcomputationalunitonthetargetmachine,butweusuallydonothaveenoughofthemtoholdallvalues.Valuesnotheldinregistersneedtoresideinmemory.Instructionsinvolvingregisteroperandsareinvariablyshorterandfasterthanthoseinvolvingoperandsinmemory,soe\u000ecientutilizationofregistersisparticularlyimportant.Theuseofregistersisoftensubdividedintotwosubproblems:1.Registerallocation,duringwhichweselectthesetofvariablesthatwillresideinregistersateachpointintheprogram.2.Registerassignment,duringwhichwepickthespeci\fcregisterthatavariablewillresidein.Findinganoptimalassignmentofregisterstovariablesisdi\u000ecult,evenwithsingle-registermachines.Mathematically,theproblemisNP-complete.Theproblemisfurthercomplicatedbecausethehardwareand/ortheoperatingsystemofthetargetmachinemayrequirethatcertainregister-usageconventionsbeobserved.Example8.1:Certainmachinesrequireregister-pairs(anevenandnextodd-numberedregister)forsomeoperandsandresults.Forexample,onsomema-chines,integermultiplicationandintegerdivisioninvolveregisterpairs.ThemultiplicationinstructionisoftheformMx,ywherex,themultiplicand,istheoddregisterofaneven/oddregisterpairandy,themultiplier,canbeanywhere.Theproductoccupiestheentireeven/oddregisterpair.Thedivisioninstructionisoftheform8.1.ISSUESINTHEDESIGNOFACODEGENERATOR511Dx,ywherethedividendoccupiesaneven/oddregisterpairwhoseevenregisterisx;thedivisorisy.Afterdivision,theevenregisterholdstheremainderandtheoddregisterthequotient.Now,considerthetwothree-addresscodesequencesinFig.8.2inwhichtheonlydi\u000berencein(a)and(b)istheoperatorinthesecondstatement.Theshortestassembly-codesequencesfor(a)and(b)aregiveninFig.8.3.t=a+bt=a+bt=t*ct=t+ct=t/dt=t/d(a)(b)Figure8.2:Twothree-addresscodesequencesLR1,aLR0,aAR1,bAR0,bMR0,cAR0,cDR0,dSRDAR0,32STR1,tDR0,dSTR1,t(a)(b)Figure8.3:Optimalmachine-codesequencesRistandsforregisteri.SRDAstandsforShift-Right-Double-ArithmeticandSRDAR0,32shiftsthedividendintoR1andclearsR0soallbitsequalitssignbit.L,ST,andAstandforload,store,andadd,respectively.Notethattheoptimalchoicefortheregisterintowhichaistobeloadeddependsonwhatwillultimatelyhappentot.2StrategiesforregisterallocationandassignmentarediscussedinSection8.8.Section8.10showsthatforcertainclassesofmachineswecanconstructcodesequencesthatevaluateexpressionsusingasfewregistersaspossible.8.1.5EvaluationOrderTheorderinwhichcomputationsareperformedcana\u000bectthee\u000eciencyofthetargetcode.Asweshallsee,somecomputationordersrequirefewerregisterstoholdintermediateresultsthanothers.However,pickingabestorderinthegeneralcaseisadi\u000ecultNP-completeproblem.Initially,weshallavoid512CHAPTER8.CODEGENERATIONtheproblembygeneratingcodeforthethree-addressstatementsintheorderinwhichtheyhavebeenproducedbytheintermediatecodegenerator.InChapter10,weshallstudycodeschedulingforpipelinedmachinesthatcanexecuteseveraloperationsinasingleclockcycle.8.2TheTargetLanguageFamiliaritywiththetargetmachineanditsinstructionsetisaprerequisitefordesigningagoodcodegenerator.Unfortunately,inageneraldiscussionofcodegenerationitisnotpossibletodescribeanytargetmachineinsu\u000ecientdetailtogenerategoodcodeforacompletelanguageonthatmachine.Inthischapter,weshalluseasatargetlanguageassemblycodeforasimplecomputerthatisrepresentativeofmanyregistermachines.However,thecode-generationtechniquespresentedinthischaptercanbeusedonmanyotherclassesofmachinesaswell.8.2.1ASimpleTargetMachineModelOurtargetcomputermodelsathree-addressmachinewithloadandstoreoper-ations,computationoperations,jumpoperations,andconditionaljumps.Theunderlyingcomputerisabyte-addressablemachinewithngeneral-purposereg-isters,R0;R1;:::;Rn\u00001.Afull-\redgedassemblylanguagewouldhavescoresofinstructions.Toavoidhidingtheconceptsinamyriadofdetails,weshalluseaverylimitedsetofinstructionsandassumethatalloperandsareintegers.Mostinstructionsconsistsofanoperator,followedbyatarget,followedbyalistofsourceoperands.Alabelmayprecedeaninstruction.Weassumethefollowingkindsofinstructionsareavailable:\u000fLoadoperations:TheinstructionLDdst,addrloadsthevalueinlocationaddrintolocationdst.Thisinstructiondenotestheassignmentdst=addr.ThemostcommonformofthisinstructionisLDr;xwhichloadsthevalueinlocationxintoregisterr.AninstructionoftheformLDr1;r2isaregister-to-registercopyinwhichthecontentsofregisterr2arecopiedintoregisterr1.\u000fStoreoperations:TheinstructionSTx;rstoresthevalueinregisterrintothelocationx.Thisinstructiondenotestheassignmentx=r.\u000fComputationoperationsoftheformOPdst;src1;src2,whereOPisaop-eratorlikeADDorSUB,anddst,src1,andsrc2arelocations,notnecessarilydistinct.Thee\u000bectofthismachineinstructionistoapplytheoperationrepresentedbyOPtothevaluesinlocationssrc1andsrc2,andplacetheresultofthisoperationinlocationdst.Forexample,SUBr1;r2;r3com-putesr1=r2\u0000r3.Anyvalueformerlystoredinr1islost,butifr1isr2orr3,theoldvalueisread\frst.Unaryoperatorsthattakeonlyoneoperanddonothaveasrc2.8.2.THETARGETLANGUAGE513\u000fUnconditionaljumps:TheinstructionBRLcausescontroltobranchtothemachineinstructionwithlabelL.(BRstandsforbranch.)\u000fConditionaljumpsoftheformBcondr;L,whererisaregister,Lisalabel,andcondstandsforanyofthecommontestsonvaluesintheregisterr.Forexample,BLTZr;LcausesajumptolabelLifthevalueinregisterrislessthanzero,andallowscontroltopasstothenextmachineinstructionifnot.Weassumeourtargetmachinehasavarietyofaddressingmodes:\u000fIninstructions,alocationcanbeavariablenamexreferringtothemem-orylocationthatisreservedforx(thatis,thel-valueofx).\u000fAlocationcanalsobeanindexedaddressoftheforma(r),whereaisavariableandrisaregister.Thememorylocationdenotedbya(r)iscomputedbytakingthel-valueofaandaddingtoitthevalueinregisterr.Forexample,theinstructionLDR1,a(R2)hasthee\u000bectofsettingR1=contents(a+contents(R2)),wherecontents(x)denotesthecontentsoftheregisterormemorylocationrepresentedbyx.Thisaddressingmodeisusefulforaccessingarrays,whereaisthebaseaddressofthearray(thatis,theaddressofthe\frstelement),andrholdsthenumberofbytespastthataddresswewishtogotoreachoneoftheelementsofarraya.\u000fAmemorylocationcanbeanintegerindexedbyaregister.Forex-ample,LDR1,100(R2)hasthee\u000bectofsettingR1=contents(100+contents(R2)),thatis,ofloadingintoR1thevalueinthememoryloca-tionobtainedbyadding100tothecontentsofregisterR2.Thisfeatureisusefulforfollowingpointers,asweshallseeintheexamplebelow.\u000fWealsoallowtwoindirectaddressingmodes:*rmeansthememorylo-cationfoundinthelocationrepresentedbythecontentsofregisterrand*100(r)meansthememorylocationfoundinthelocationobtainedbyadding100tothecontentsofr.Forexample,LDR1,*100(R2)hasthee\u000bectofsettingR1=contents(contents(100+contents(R2))),thatis,ofloadingintoR1thevalueinthememorylocationstoredinthememorylocationobtainedbyadding100tothecontentsofregisterR2.\u000fFinally,weallowanimmediateconstantaddressingmode.Theconstantispre\fxedby#.TheinstructionLDR1,#100loadstheinteger100intoregisterR1,andADDR1,R1,#100addstheinteger100intoregisterR1.Commentsattheendofinstructionsareprecededby//.Example8.2:Thethree-addressstatementx=y-zcanbeimplementedbythemachineinstructions:514CHAPTER8.CODEGENERATIONLDR1,y//R1=yLDR2,z//R2=zSUBR1,R1,R2//R1=R1-R2STx,R1//x=R1Wecandobetter,perhaps.Oneofthegoalsofagoodcode-generationalgorithmistoavoidusingallfouroftheseinstructions,wheneverpossible.Forexample,yand/orzmayhavebeencomputedinaregister,andifsowecanavoidtheLDstep(s).Likewise,wemightbeabletoavoideverstoringxifitsvalueisusedwithintheregistersetandisnotsubsequentlyneeded.Supposeaisanarraywhoseelementsare8-bytevalues,perhapsrealnum-bers.Alsoassumeelementsofaareindexedstartingat0.Wemayexecutethethree-addressinstructionb=a[i]bythemachineinstructions:LDR1,i//R1=iMULR1,R1,8//R1=R1*8LDR2,a(R1)//R2=contents(a+contents(R1))STb,R2//b=R2Thatis,thesecondstepcomputes8i,andthethirdstepplacesinregisterR2thevalueintheithelementofa|theonefoundinthelocationthatis8ibytespastthebaseaddressofthearraya.Similarly,theassignmentintothearrayarepresentedbythree-addressin-structiona[j]=cisimplementedby:LDR1,c//R1=cLDR2,j//R2=jMULR2,R2,8//R2=R2*8STa(R2),R1//contents(a+contents(R2))=R1Toimplementasimplepointerindirection,suchasthethree-addressstate-mentx=*p,wecanusemachineinstructionslike:LDR1,p//R1=pLDR2,0(R1)//R2=contents(0+contents(R1))STx,R2//x=R2Theassignmentthroughapointer*p=yissimilarlyimplementedinmachinecodeby:LDR1,p//R1=pLDR2,y//R2=yST0(R1),R2//contents(0+contents(R1))=R2Finally,consideraconditional-jumpthree-addressinstructionlikeifx<ygotoL8.2.THETARGETLANGUAGE515Themachine-codeequivalentwouldbesomethinglike:LDR1,x//R1=xLDR2,y//R2=ySUBR1,R1,R2//R1=R1-R2BLTZR1,M//ifR1<0jumptoMHere,Misthelabelthatrepresentsthe\frstmachineinstructiongeneratedfromthethree-addressinstructionthathaslabelL.Asforanythree-addressinstruc-tion,wehopethatwecansavesomeofthesemachineinstructionsbecausetheneededoperandsarealreadyinregistersorbecausetheresultneedneverbestored.28.2.2ProgramandInstructionCostsWeoftenassociateacostwithcompilingandrunningaprogram.Dependingonwhataspectofaprogramweareinterestedinoptimizing,somecommoncostmeasuresarethelengthofcompilationtimeandthesize,runningtimeandpowerconsumptionofthetargetprogram.Determiningtheactualcostofcompilingandrunningaprogramisacom-plexproblem.Findinganoptimaltargetprogramforagivensourceprogramisanundecidableproblemingeneral,andmanyofthesubproblemsinvolvedareNP-hard.Aswehaveindicated,incodegenerationwemustoftenbecontentwithheuristictechniquesthatproducegoodbutnotnecessarilyoptimaltargetprograms.Fortheremainderofthischapter,weshallassumeeachtarget-languageinstructionhasanassociatedcost.Forsimplicity,wetakethecostofanin-structiontobeoneplusthecostsassociatedwiththeaddressingmodesoftheoperands.Thiscostcorrespondstothelengthinwordsoftheinstruction.Addressingmodesinvolvingregistershavezeroadditionalcost,whilethosein-volvingamemorylocationorconstantinthemhaveanadditionalcostofone,becausesuchoperandshavetobestoredinthewordsfollowingtheinstruction.Someexamples:\u000fTheinstructionLDR0,R1copiesthecontentsofregisterR1intoregisterR0.Thisinstructionhasacostofonebecausenoadditionalmemorywordsarerequired.\u000fTheinstructionLDR0,MloadsthecontentsofmemorylocationMintoregisterR0.ThecostistwosincetheaddressofmemorylocationMisinthewordfollowingtheinstruction.\u000fTheinstructionLDR1,*100(R2)loadsintoregisterR1thevaluegivenbycontents(contents(100+contents(R2))).Thecostistwobecausetheconstant100isstoredinthewordfollowingtheinstruction.516CHAPTER8.CODEGENERATIONInthischapterweassumethecostofatarget-languageprogramonagiveninputisthesumofcostsoftheindividualinstructionsexecutedwhenthepro-gramisrunonthatinput.Goodcode-generationalgorithmsseektominimizethesumofthecostsoftheinstructionsexecutedbythegeneratedtargetpro-gramontypicalinputs.Weshallseethatinsomesituationswecanactuallygenerateoptimalcodeforexpressionsoncertainclassesofregistermachines.8.2.3ExercisesforSection8.2Exercise8.2.1:Generatecodeforthefollowingthree-addressstatementsas-sumingallvariablesarestoredinmemorylocations.a)x=1b)x=ac)x=a+1d)x=a+be)Thetwostatementsx=b*cy=a+xExercise8.2.2:Generatecodeforthefollowingthree-addressstatementsas-sumingaandbarearrayswhoseelementsare4-bytevalues.a)Thefour-statementsequencex=a[i]y=b[j]a[i]=yb[j]=xb)Thethree-statementsequencex=a[i]y=b[i]z=x*yc)Thethree-statementsequencex=a[i]y=b[x]a[i]=y8.2.THETARGETLANGUAGE517Exercise8.2.3:Generatecodeforthefollowingthree-addresssequenceas-sumingthatpandqareinmemorylocations:y=*qq=q+4*p=yp=p+4Exercise8.2.4:Generatecodeforthefollowingsequenceassumingthatx,y,andzareinmemorylocations:ifx<ygotoL1z=0gotoL2L1:z=1Exercise8.2.5:Generatecodeforthefollowingsequenceassumingthatnisinamemorylocation:s=0i=0L1:ifi>ngotoL2s=s+ii=i+1gotoL1L2:Exercise8.2.6:Determinethecostsofthefollowinginstructionsequences:a)LDR0,yLDR1,zADDR0,R0,R1STx,R0b)LDR0,iMULR0,R0,8LDR1,a(R0)STb,R1c)LDR0,cLDR1,iMULR1,R1,8STa(R1),R0d)LDR0,pLDR1,0(R0)STx,R1518CHAPTER8.CODEGENERATIONe)LDR0,pLDR1,xST0(R0),R1f)LDR0,xLDR1,ySUBR0,R0,R1BLTZ*R3,R08.3AddressesintheTargetCodeInthissection,weshowhownamesintheIRcanbeconvertedintoaddressesinthetargetcodebylookingatcodegenerationforsimpleprocedurecallsandreturnsusingstaticandstackallocation.InSection7.1,wedescribedhoweachexecutingprogramrunsinitsownlogicaladdressspacethatwaspartitionedintofourcodeanddataareas:1.AstaticallydeterminedareaCodethatholdstheexecutabletargetcode.Thesizeofthetargetcodecanbedeterminedatcompiletime.2.AstaticallydetermineddataareaStaticforholdingglobalconstantsandotherdatageneratedbythecompiler.Thesizeoftheglobalconstantsandcompilerdatacanalsobedeterminedatcompiletime.3.AdynamicallymanagedareaHeapforholdingdataobjectsthatareallo-catedandfreedduringprogramexecution.ThesizeoftheHeapcannotbedeterminedatcompiletime.4.AdynamicallymanagedareaStackforholdingactivationrecordsastheyarecreatedanddestroyedduringprocedurecallsandreturns.LiketheHeap,thesizeoftheStackcannotbedeterminedatcompiletime.8.3.1StaticAllocationToillustratecodegenerationforsimpli\fedprocedurecallsandreturns,weshallfocusonthefollowingthree-addressstatements:\u000fcallcallee\u000freturn\u000fhalt\u000faction,whichisaplaceholderforotherthree-addressstatements.Thesizeandlayoutofactivationrecordsaredeterminedbythecodegener-atorviatheinformationaboutnamesstoredinthesymboltable.Weshall\frstillustratehowtostorethereturnaddressinanactivationrecordonaprocedure8.3.ADDRESSESINTHETARGETCODE519callandhowtoreturncontroltoitaftertheprocedurecall.Forconvenience,weassumethe\frstlocationintheactivationrecordholdsthereturnaddress.Letus\frstconsiderthecodeneededtoimplementthesimplestcase,staticallocation.Here,acallcalleestatementintheintermediatecodecanbeim-plementedbyasequenceoftwotarget-machineinstructions:STcallee.staticArea,#here+20BRcallee.codeAreaTheSTinstructionsavesthereturnaddressatthebeginningoftheactivationrecordforcallee,andtheBRtransferscontroltothetargetcodeforthecalledprocedurecallee.Theattributecallee.staticAreaisaconstantthatgivestheaddressofthebeginningoftheactivationrecordforcallee,andtheattributecallee.codeAreaisaconstantreferringtotheaddressofthe\frstinstructionofthecalledprocedurecalleeintheCodeareaoftherun-timememory.Theoperand#here+20intheSTinstructionistheliteralreturnaddress;itistheaddressoftheinstructionfollowingtheBRinstruction.Weassumethat#hereistheaddressofthecurrentinstructionandthatthethreeconstantsplusthetwoinstructionsinthecallingsequencehavealengthof5wordsor20bytes.Thecodeforaprocedureendswithareturntothecallingprocedure,exceptthatthe\frstprocedurehasnocaller,soits\fnalinstructionisHALT,whichre-turnscontroltotheoperatingsystem.AreturnstatementcanbeimplementedbyasimplejumpinstructionBR*callee.staticAreawhichtransferscontroltotheaddresssavedatthebeginningoftheactivationrecordforcallee.Example8.3:Supposewehavethefollowingthree-addresscode://codeforcaction1callpaction2halt//codeforpaction3returnFigure8.4showsthetargetprogramforthisthree-addresscode.WeusethepseudoinstructionACTIONtorepresentthesequenceofmachineinstructionstoexecutethestatementaction,whichrepresentsthree-addresscodethatisnotrelevantforthisdiscussion.Wearbitrarilystartthecodeforprocedurecataddress100andforprocedurepataddress200.WeassumethateachACTIONinstructiontakes20bytes.Wefurtherassumethattheactivationrecordsfortheseproceduresarestaticallyallocatedstartingatlocations300and364,re-spectively.Theinstructionsstartingataddress100implementthestatements520CHAPTER8.CODEGENERATIONaction1;callp;action2;haltofthe\frstprocedurec.ExecutionthereforestartswiththeinstructionACTION1ataddress100.TheSTinstructionataddress120savesthereturnaddress140inthemachine-status\feld,whichisthe\frstwordintheactivationrecordofp.TheBRinstructionataddress132transferscontrolthe\frstinstructioninthetargetcodeofthecalledprocedurep.//codeforc100:ACTION1//codeforaction1120:ST364,#140//savereturnaddress140inlocation364132:BR200//callp140:ACTION2160:HALT//returntooperatingsystem...//codeforp200:ACTION3220:BR*364//returntoaddresssavedinlocation364...//300-363holdactivationrecordforc300://returnaddress304://localdataforc...//364-451holdactivationrecordforp364://returnaddress368://localdataforpFigure8.4:TargetcodeforstaticallocationAfterexecutingACTION3,thejumpinstructionatlocation220isexecuted.Sincelocation140wassavedataddress364bythecallsequenceabove,*364represents140whentheBRstatementataddress220isexecuted.Therefore,whenprocedurepterminates,controlreturnstoaddress140andexecutionofprocedurecresumes.28.3.2StackAllocationStaticallocationcanbecomestackallocationbyusingrelativeaddressesforstorageinactivationrecords.Instackallocation,however,thepositionofanactivationrecordforaprocedureisnotknownuntilruntime.Thispositionisusuallystoredinaregister,sowordsintheactivationrecordcanbeaccessedaso\u000bsetsfromthevalueinthisregister.Theindexedaddressmodeofourtargetmachineisconvenientforthispurpose.Relativeaddressesinanactivationrecordcanbetakenaso\u000bsetsfromanyknownpositionintheactivationrecord,aswesawinChapter7.Forconve-8.3.ADDRESSESINTHETARGETCODE521nience,weshallusepositiveo\u000bsetsbymaintaininginaregisterSPapointertothebeginningoftheactivationrecordontopofthestack.Whenaprocedurecalloccurs,thecallingprocedureincrementsSPandtransferscontroltothecalledprocedure.Aftercontrolreturnstothecaller,wedecrementSP,therebydeallocatingtheactivationrecordofthecalledprocedure.Thecodeforthe\frstprocedureinitializesthestackbysettingSPtothestartofthestackareainmemory:LDSP,#stackStart//initializethestackcodeforthe\frstprocedureHALT//terminateexecutionAprocedurecallsequenceincrementsSP,savesthereturnaddress,andtransferscontroltothecalledprocedure:ADDSP,SP,#caller.recordSize//incrementstackpointerST0(SP),#here+16//savereturnaddressBRcallee.codeArea//jumptothecalleeTheoperand#caller.recordSizerepresentsthesizeofanactivationrecord,sotheADDinstructionmakesSPpointtothenextactivationrecord.Theoperand#here+16intheSTinstructionistheaddressoftheinstructionfollowingBR;itissavedintheaddresspointedtobySP.Thereturnsequenceconsistsoftwoparts.ThecalledproceduretransferscontroltothereturnaddressusingBR*0(SP)//returntocallerThereasonforusing*0(SP)intheBRinstructionisthatweneedtwolevelsofindirection:0(SP)istheaddressofthe\frstwordintheactivationrecordand*0(SP)isthereturnaddresssavedthere.Thesecondpartofthereturnsequenceisinthecaller,whichdecrementsSP,therebyrestoringSPtoitspreviousvalue.Thatis,afterthesubtractionSPpointstothebeginningoftheactivationrecordofthecaller:SUBSP,SP,#caller.recordSize//decrementstackpointerChapter7containsabroaderdiscussionofcallingsequencesandthetrade-o\u000bsinthedivisionoflaborbetweenthecallingandcalledprocedures.Example8.4:TheprograminFig.8.5isanabstractionofthequicksortprograminthepreviouschapter.Procedureqisrecursive,somorethanoneactivationofqcanbealiveatthesametime.Supposethatthesizesoftheactivationrecordsforproceduresm,p,andqhavebeendeterminedtobemsize,psize,andqsize,respectively.The\frstwordineachactivationrecordwillholdareturnaddress.Wearbitrarilyassumethatthecodefortheseproceduresstartsataddresses100,200,and300,respectively,522CHAPTER8.CODEGENERATION//codeformaction1callqaction2halt//codeforpaction3return//codeforqaction4callpaction5callqaction6callqreturnFigure8.5:CodeforExample8.4andthatthestackstartsataddress600.ThetargetprogramisshowninFigure8.6.WeassumethatACTION4containsaconditionaljumptotheaddress456ofthereturnsequencefromq;otherwise,therecursiveprocedureqiscondemnedtocallitselfforever.Letmsize,psize,andqsizebe20,40,and60,respectively.The\frstinstruc-tionataddress100initializestheSPto600,thestartingaddressofthestack.SPholds620justbeforecontroltransfersfrommtoq,becausemsizeis20.Sub-sequently,whenqcallsp,theinstructionataddress320incrementsSPto680,wheretheactivationrecordforpbegins;SPrevertsto620aftercontrolreturnstoq.Ifthenexttworecursivecallsofqreturnimmediately,themaximumvalueofSPduringthisexecutionis680.Note,however,thatthelaststacklocationusedis739,sincetheactivationrecordofqstartingatlocation680extendsfor60bytes.28.3.3Run-TimeAddressesforNamesThestorage-allocationstrategyandthelayoutoflocaldatainanactivationrecordforaproceduredeterminehowthestoragefornamesisaccessed.InChapter6,weassumedthatanameinathree-addressstatementisreallyapointertoasymbol-tableentryforthatname.Thisapproachhasasigni\fcantadvantage;itmakesthecompilermoreportable,sincethefrontendneednotbechangedevenwhenthecompilerismovedtoadi\u000berentmachinewhereadi\u000berentrun-timeorganizationisneeded.Ontheotherhand,generatingthespeci\fcsequenceofaccessstepswhilegeneratingintermediatecodecanbeof8.3.ADDRESSESINTHETARGETCODE523//codeform100:LDSP,#600//initializethestack108:ACTION1//codeforaction1128:ADDSP,SP,#msize//callsequencebegins136:ST0(SP),#152//pushreturnaddress144:BR300//callq152:SUBSP,SP,#msize//restoreSP160:ACTION2180:HALT...//codeforp200:ACTION3220:BR*0(SP)//return...//codeforq300:ACTION4//containsaconditionaljumpto456320:ADDSP,SP,#qsize328:ST0(SP),#344//pushreturnaddress336:BR200//callp344:SUBSP,SP,#qsize352:ACTION5372:ADDSP,SP,#qsize380:ST0(SP),#396//pushreturnaddress388:BR300//callq396:SUBSP,SP,#qsize404:ACTION6424:ADDSP,SP,#qsize432:ST0(SP),#440//pushreturnaddress440:BR300//callq448:SUBSP,SP,#qsize456:BR*0(SP)//return...600://stackstartshereFigure8.6:Targetcodeforstackallocation524CHAPTER8.CODEGENERATIONsigni\fcantadvantageinanoptimizingcompiler,sinceitletstheoptimizertakeadvantageofdetailsitwouldnotseeinthesimplethree-addressstatement.Ineithercase,namesmusteventuallybereplacedbycodetoaccessstoragelocations.Wethusconsidersomeelaborationsofthesimplethree-addresscopystatementx=0.Afterthedeclarationsinaprocedureareprocessed,supposethesymbol-tableentryforxcontainsarelativeaddress12forx.Forexample,considerthecaseinwhichxisinastaticallyallocatedareabeginningataddressstatic.Thentheactualrun-timeaddressofxisstatic+12.Althoughthecompilercaneventuallydeterminethevalueofstatic+12atcompiletime,thepositionofthestaticareamaynotbeknownwhenintermediatecodetoaccessthenameisgenerated.Inthatcase,itmakessensetogeneratethree-addresscodeto\\compute\"static+12,withtheunderstandingthatthiscomputationwillbecarriedoutduringthecodegenerationphase,orpossiblybytheloader,beforetheprogramruns.Theassignmentx=0thentranslatesintostatic[12]=0Ifthestaticareastartsataddress100,thetargetcodeforthisstatementisLD112,#08.3.4ExercisesforSection8.3Exercise8.3.1:Generatecodeforthefollowingthree-addressstatementsas-sumingstackallocationwhereregisterSPpointstothetopofthestack.callpcallqreturncallrreturnreturnExercise8.3.2:Generatecodeforthefollowingthree-addressstatementsas-sumingstackallocationwhereregisterSPpointstothetopofthestack.a)x=1b)x=ac)x=a+1d)x=a+be)Thetwostatementsx=b*cy=a+x8.4.BASICBLOCKSANDFLOWGRAPHS525Exercise8.3.3:Generatecodeforthefollowingthree-addressstatementsagainassumingstackallocationandassumingaandbarearrayswhoseele-mentsare4-bytevalues.a)Thefour-statementsequencex=a[i]y=b[j]a[i]=yb[j]=xb)Thethree-statementsequencex=a[i]y=b[i]z=x*yc)Thethree-statementsequencex=a[i]y=b[x]a[i]=y8.4BasicBlocksandFlowGraphsThissectionintroducesagraphrepresentationofintermediatecodethatishelp-fulfordiscussingcodegenerationevenifthegraphisnotconstructedexplicitlybyacode-generationalgorithm.Codegenerationbene\ftsfromcontext.Wecandoabetterjobofregisterallocationifweknowhowvaluesarede\fnedandused,asweshallseeinSection8.8.Wecandoabetterjobofinstructionselectionbylookingatsequencesofthree-addressstatements,asweshallseeinSection8.9.Therepresentationisconstructedasfollows:1.Partitiontheintermediatecodeintobasicblocks,whicharemaximalse-quencesofconsecutivethree-addressinstructionswiththepropertiesthat(a)The\rowofcontrolcanonlyenterthebasicblockthroughthe\frstinstructionintheblock.Thatis,therearenojumpsintothemiddleoftheblock.(b)Controlwillleavetheblockwithouthaltingorbranching,exceptpossiblyatthelastinstructionintheblock.2.Thebasicblocksbecomethenodesofa\rowgraph,whoseedgesindicatewhichblockscanfollowwhichotherblocks.526CHAPTER8.CODEGENERATION8.4.BASICBLOCKSANDFLOWGRAPHS5272.Anyinstructionthatisthetargetofaconditionalorunconditionaljumpisaleader.3.Anyinstructionthatimmediatelyfollowsaconditionalorunconditionaljumpisaleader.Then,foreachleader,itsbasicblockconsistsofitselfandallinstructionsuptobutnotincludingthenextleaderortheendoftheintermediateprogram.21)i=12)j=13)t1=10*i4)t2=t1+j5)t3=8*t26)t4=t3-887)a[t4]=0.08)j=j+19)ifj<=10goto(3)10)i=i+111)ifi<=10goto(2)12)i=113)t5=i-114)t6=88*t515)a[t6]=1.016)i=i+117)ifi<=10goto(13)Figure8.7:Intermediatecodetoseta10\u000210matrixtoanidentitymatrixExample8.6:TheintermediatecodeinFig.8.7turnsa10\u000210matrixaintoanidentitymatrix.Althoughitisnotimportantwherethiscodecomesfrom,itmightbethetranslationofthepseudocodeinFig.8.8.Ingeneratingtheintermediatecode,wehaveassumedthatthereal-valuedarrayelementstake8byteseach,andthatthematrixaisstoredinrow-majorform.forifrom1to10doforjfrom1to10doa[i;j]=0:0;forifrom1to10doa[i;i]=1:0;Figure8.8:SourcecodeforFig.8.7528CHAPTER8.CODEGENERATIONFirst,instruction1isaleaderbyrule(1)ofAlgorithm8.5.To\fndtheotherleaders,we\frstneedto\fndthejumps.Inthisexample,therearethreejumps,allconditional,atinstructions9,11,and17.Byrule(2),thetargetsofthesejumpsareleaders;theyareinstructions3,2,and13,respectively.Then,byrule(3),eachinstructionfollowingajumpisaleader;thoseareinstructions10and12.Notethatnoinstructionfollows17inthiscode,butiftherewerecodefollowing,the18thinstructionwouldalsobealeader.Weconcludethattheleadersareinstructions1,2,3,10,12,and13.Thebasicblockofeachleadercontainsalltheinstructionsfromitselfuntiljustbeforethenextleader.Thus,thebasicblockof1isjust1,forleader2theblockisjust2.Leader3,however,hasabasicblockconsistingofinstructions3through9,inclusive.Instruction10'sblockis10and11;instruction12'sblockisjust12,andinstruction13'sblockis13through17.28.4.2Next-UseInformationKnowingwhenthevalueofavariablewillbeusednextisessentialforgeneratinggoodcode.Ifthevalueofavariablethatiscurrentlyinaregisterwillneverbereferencedsubsequently,thenthatregistercanbeassignedtoanothervariable.Theuseofanameinathree-addressstatementisde\fnedasfollows.Supposethree-addressstatementiassignsavaluetox.Ifstatementjhasxasanoperand,andcontrolcan\rowfromstatementitojalongapaththathasnointerveningassignmentstox,thenwesaystatementjusesthevalueofxcomputedatstatementi.Wefurthersaythatxisliveatstatementi.Wewishtodetermineforeachthree-addressstatementx=y+zwhatthenextusesofx,y,andzare.Forthepresent,wedonotconcernourselveswithusesoutsidethebasicblockcontainingthisthree-addressstatement.Ouralgorithmtodeterminelivenessandnext-useinformationmakesaback-wardpassovereachbasicblock.Westoretheinformationinthesymboltable.Wecaneasilyscanastreamofthree-addressstatementsto\fndtheendsofba-sicblocksasinAlgorithm8.5.Sinceprocedurescanhavearbitrarysidee\u000bects,weassumeforconveniencethateachprocedurecallstartsanewbasicblock.Algorithm8.7:Determiningthelivenessandnext-useinformationforeachstatementinabasicblock.INPUT:AbasicblockBofthree-addressstatements.WeassumethatthesymboltableinitiallyshowsallnontemporaryvariablesinBasbeingliveonexit.OUTPUT:Ateachstatementi:x=y+zinB,weattachtoithelivenessandnext-useinformationofx,y,andz.METHOD:WestartatthelaststatementinBandscanbackwardstothebeginningofB.Ateachstatementi:x=y+zinB,wedothefollowing:1.Attachtostatementitheinformationcurrentlyfoundinthesymboltableregardingthenextuseandlivenessofx,y,andz.8.4.BASICBLOCKSANDFLOWGRAPHS5292.Inthesymboltable,setxto\\notlive\"and\\nonextuse.\"3.Inthesymboltable,setyandzto\\live\"andthenextusesofyandztoi.Herewehaveused+asasymbolrepresentinganyoperator.Ifthethree-addressstatementiisoftheformx=+yorx=y,thestepsarethesameasabove,ignoringz.Notethattheorderofsteps(2)and(3)maynotbeinterchangedbecausexmaybeyorz.28.4.3FlowGraphsOnceanintermediate-codeprogramispartitionedintobasicblocks,werepre-sentthe\rowofcontrolbetweenthembya\rowgraph.Thenodesofthe\rowgrapharethebasicblocks.ThereisanedgefromblockBtoblockCifandonlyifitispossibleforthe\frstinstructioninblockCtoimmediatelyfollowthelastinstructioninblockB.Therearetwowaysthatsuchanedgecouldbejusti\fed:\u000fThereisaconditionalorunconditionaljumpfromtheendofBtothebeginningofC.\u000fCimmediatelyfollowsBintheoriginalorderofthethree-addressinstruc-tions,andBdoesnotendinanunconditionaljump.WesaythatBisapredecessorofC,andCisasuccessorofB.Oftenweaddtwonodes,calledtheentryandexit,thatdonotcorrespondtoexecutableintermediateinstructions.Thereisanedgefromtheentrytothe\frstexecutablenodeofthe\rowgraph,thatis,tothebasicblockthatcomesfromthe\frstinstructionoftheintermediatecode.Thereisanedgetotheexitfromanybasicblockthatcontainsaninstructionthatcouldbethelastexecutedinstructionoftheprogram.Ifthe\fnalinstructionoftheprogramisnotanunconditionaljump,thentheblockcontainingthe\fnalinstructionoftheprogramisonepredecessoroftheexit,butsoisanybasicblockthathasajumptocodethatisnotpartoftheprogram.Example8.8:ThesetofbasicblocksconstructedinExample8.6yieldsthe\rowgraphofFig.8.9.TheentrypointstobasicblockB1,sinceB1containsthe\frstinstructionoftheprogram.TheonlysuccessorofB1isB2,becauseB1doesnotendinanunconditionaljump,andtheleaderofB2immediatelyfollowstheendofB1.BlockB3hastwosuccessors.Oneisitself,becausetheleaderofB3,instruc-tion3,isthetargetoftheconditionaljumpattheendofB3,instruction9.TheothersuccessorisB4,becausecontrolcanfallthroughtheconditionaljumpattheendofB3andnextentertheleaderofB4.OnlyB6pointstotheexitofthe\rowgraph,sincetheonlywaytogettocodethatfollowstheprogramfromwhichweconstructedthe\rowgraphistofallthroughtheconditionaljumpthatendsB6.2530CHAPTER8.CODEGENERATIONB2t1=10*it2=t1+jt3=8*t2t4=t3-88a[t4]=0.0j=j+1ifj<=10gotoB3B3i=i+1ifi<=10gotoB2B4i=1B5t5=i-1t6=88*t5a[t6]=1.0i=i+1ifi<=10gotoB6B6EXITj=1ENTRYi=1B1Figure8.9:FlowgraphfromFig.8.78.4.4RepresentationofFlowGraphsFirst,notefromFig.8.9thatinthe\rowgraph,itisnormaltoreplacethejumpstoinstructionnumbersorlabelsbyjumpstobasicblocks.Recallthateveryconditionalorunconditionaljumpistotheleaderofsomebasicblock,anditistothisblockthatthejumpwillnowrefer.Thereasonforthischangeisthatafterconstructingthe\rowgraph,itiscommontomakesubstantialchangestotheinstructionsinthevariousbasicblocks.Ifjumpsweretoinstructions,wewouldhaveto\fxthetargetsofthejumpseverytimeoneofthetargetinstructionswaschanged.Flowgraphs,beingquiteordinarygraphs,canberepresentedbyanyofthedatastructuresappropriateforgraphs.Thecontentofnodes(basicblocks)needtheirownrepresentation.Wemightrepresentthecontentofanodebya8.4.BASICBLOCKSANDFLOWGRAPHS531pointertotheleaderinthearrayofthree-addressinstructions,togetherwithacountofthenumberofinstructionsorasecondpointertothelastinstruction.However,sincewemaybechangingthenumberofinstructionsinabasicblockfrequently,itislikelytobemoree\u000ecienttocreatealinkedlistofinstructionsforeachbasicblock.8.4.5LoopsProgramming-languageconstructslikewhile-statements,do-while-statements,andfor-statementsnaturallygiverisetoloopsinprograms.Sincevirtuallyeveryprogramspendsmostofitstimeinexecutingitsloops,itisespeciallyimportantforacompilertogenerategoodcodeforloops.Manycodetransformationsdependupontheidenti\fcationof\\loops\"ina\rowgraph.WesaythatasetofnodesLina\rowgraphisaloopifLcontainsanodeecalledtheloopentry,suchthat:1.eisnotENTRY,theentryoftheentire\rowgraph.2.NonodeinLbesidesehasapredecessoroutsideL.Thatis,everypathfromENTRYtoanynodeinLgoesthroughe.3.EverynodeinLhasanonemptypath,completelywithinL,toe.Example8.9:The\rowgraphofFig.8.9hasthreeloops:1.B3byitself.2.B6byitself.3.fB2;B3;B4g.The\frsttwoaresinglenodeswithanedgetothenodeitself.Forinstance,B3formsaloopwithB3asitsentry.NotethatthelastrequirementforaloopisthattherebeanonemptypathfromB3toitself.Thus,asinglenodelikeB2,whichdoesnothaveanedgeB2!B2,isnotaloop,sincethereisnononemptypathfromB2toitselfwithinfB2g.Thethirdloop,L=fB2;B3;B4g,hasB2asitsloopentry.Notethatamongthesethreenodes,onlyB2hasapredecessor,B1,thatisnotinL.Further,eachofthethreenodeshasanonemptypathtoB2stayingwithinL.Forinstance,B2hasthepathB2!B3!B4!B2.28.4.6ExercisesforSection8.4Exercise8.4.1:Figure8.10isasimplematrix-multiplicationprogram.a)Translatetheprogramintothree-addressstatementsofthetypewehavebeenusinginthissection.Assumethematrixentriesarenumbersthatrequire8bytes,andthatmatricesarestoredinrow-majororder.532CHAPTER8.CODEGENERATIONb)Constructthe\rowgraphforyourcodefrom(a).c)Identifytheloopsinyour\rowgraphfrom(b).for(i=0;i<n;i++)for(j=0;j<n;j++)c[i][j]=0.0;for(i=0;i<n;i++)for(j=0;j<n;j++)for(k=0;k<n;k++)c[i][j]=c[i][j]+a[i][k]*b[k][j];Figure8.10:Amatrix-multiplicationalgorithmExercise8.4.2:Figure8.11iscodetocountthenumberofprimesfrom2ton,usingthesievemethodonasuitablylargearraya.Thatis,a[i]isTRUEattheendonlyifthereisnoprimep8.5.OPTIMIZATIONOFBASICBLOCKS5338.5OptimizationofBasicBlocksWecanoftenobtainasubstantialimprovementintherunningtimeofcodemerelybyperforminglocaloptimizationwithineachbasicblockbyitself.Morethoroughglobaloptimization,whichlooksathowinformation\rowsamongthebasicblocksofaprogram,iscoveredinlaterchapters,startingwithChapter9.Itisacomplexsubject,withmanydi\u000berenttechniquestoconsider.8.5.1TheDAGRepresentationofBasicBlocksManyimportanttechniquesforlocaloptimizationbeginbytransformingabasicblockintoaDAG(directedacyclicgraph).InSection6.1.1,weintroducedtheDAGasarepresentationforsingleexpressions.Theideaextendsnaturallytothecollectionofexpressionsthatarecreatedwithinonebasicblock.WeconstructaDAGforabasicblockasfollows:1.ThereisanodeintheDAGforeachoftheinitialvaluesofthevariablesappearinginthebasicblock.2.ThereisanodeNassociatedwitheachstatementswithintheblock.ThechildrenofNarethosenodescorrespondingtostatementsthatarethelastde\fnitions,priortos,oftheoperandsusedbys.3.NodeNislabeledbytheoperatorappliedats,andalsoattachedtoNisthelistofvariablesforwhichitisthelastde\fnitionwithintheblock.4.Certainnodesaredesignatedoutputnodes.Thesearethenodeswhosevariablesareliveonexitfromtheblock;thatis,theirvaluesmaybeusedlater,inanotherblockofthe\rowgraph.Calculationofthese\\livevariables\"isamatterforglobal\rowanalysis,discussedinSection9.2.5.TheDAGrepresentationofabasicblockletsusperformseveralcode-improvingtransformationsonthecoderepresentedbytheblock.a)Wecaneliminatelocalcommonsubexpressions,thatis,instructionsthatcomputeavaluethathasalreadybeencomputed.b)Wecaneliminatedeadcode,thatis,instructionsthatcomputeavaluethatisneverused.c)Wecanreorderstatementsthatdonotdependononeanother;suchreorderingmayreducethetimeatemporaryvalueneedstobepreservedinaregister.d)Wecanapplyalgebraiclawstoreorderoperandsofthree-addressinstruc-tions,andsometimestherebysimplifythecomputation.534CHAPTER8.CODEGENERATION8.5.2FindingLocalCommonSubexpressionsCommonsubexpressionscanbedetectedbynoticing,asanewnodeMisabouttobeadded,whetherthereisanexistingnodeNwiththesamechildren,inthesameorder,andwiththesameoperator.Ifso,NcomputesthesamevalueasMandmaybeusedinitsplace.Thistechniquewasintroducedasthe\\value-number\"methodofdetectingcommonsubexpressionsinSection6.1.1.Example8.10:ADAGfortheblocka=b+cb=a-dc=b+cd=a-disshowninFig.8.12.Whenweconstructthenodeforthethirdstatementc=b+c,weknowthattheuseofbinb+creferstothenodeofFig.8.12labeled\u0000,becausethatisthemostrecentde\fnitionofb.Thus,wedonotconfusethevaluescomputedatstatementsoneandthree.ab,dc+\u0000d0+c0b0Figure8.12:DAGforbasicblockinExample8.10However,thenodecorrespondingtothefourthstatementd=a-dhastheoperator\u0000andthenodeswithattachedvariablesaandd0aschildren.Sincetheoperatorandthechildrenarethesameasthoseforthenodecorrespondingtostatementtwo,wedonotcreatethisnode,butadddtothelistofde\fnitionsforthenodelabeled\u0000.2Itmightappearthat,sincethereareonlythreenonleafnodesintheDAGofFig.8.12,thebasicblockinExample8.10canbereplacedbyablockwithonlythreestatements.Infact,ifbisnotliveonexitfromtheblock,thenwedonotneedtocomputethatvariable,andcanusedtoreceivethevaluerepresentedbythenodelabeled\u0000inFig.8.12.Theblockthenbecomesa=b+cd=a-dc=d+c8.5.OPTIMIZATIONOFBASICBLOCKS535However,ifbothbanddareliveonexit,thenafourthstatementmustbeusedtocopythevaluefromonetotheother.1Example8.11:Whenwelookforcommonsubexpressions,wereallyarelook-ingforexpressionsthatareguaranteedtocomputethesamevalue,nomatterhowthatvalueiscomputed.Thus,theDAGmethodwillmissthefactthattheexpressioncomputedbythe\frstandfourthstatementsinthesequencea=b+cb=b-dc=c+de=b+cisthesame,namelyb0+c0.Thatis,eventhoughbandcbothchangebetweenthe\frstandlaststatements,theirsumremainsthesame,becauseb+c=(b\u0000d)+(c+d).TheDAGforthissequenceisshowninFig.8.13,butdoesnotexhibitanycommonsubexpressions.However,algebraicidentitiesappliedtotheDAG,asdiscussedinSection8.5.4,mayexposetheequivalence.2cbae++b0c0\u0000+d0Figure8.13:DAGforbasicblockinExample8.118.5.3DeadCodeEliminationTheoperationonDAG'sthatcorrespondstodead-codeeliminationcanbeim-plementedasfollows.WedeletefromaDAGanyroot(nodewithnoancestors)thathasnolivevariablesattached.RepeatedapplicationofthistransformationwillremoveallnodesfromtheDAGthatcorrespondtodeadcode.Example8.12:If,inFig.8.13,aandbarelivebutcandearenot,wecanimmediatelyremovetherootlabelede.Then,thenodelabeledcbecomesarootandcanberemoved.Therootslabeledaandbremain,sincetheyeachhavelivevariablesattached.2536CHAPTER8.CODEGENERATION8.5.4TheUseofAlgebraicIdentitiesAlgebraicidentitiesrepresentanotherimportantclassofoptimizationsonbasicblocks.Forexample,wemayapplyarithmeticidentities,suchasx+0=0+x=xx\u00000=xx\u00021=1\u0002x=xx=1=xtoeliminatecomputationsfromabasicblock.Anotherclassofalgebraicoptimizationsincludeslocalreductioninstrength,thatis,replacingamoreexpensiveoperatorbyacheaperoneasin:EXPENSIVECHEAPERx2=x\u0002x2\u0002x=x+xx=2=x\u00020:5Athirdclassofrelatedoptimizationsisconstantfolding.Hereweevaluateconstantexpressionsatcompiletimeandreplacetheconstantexpressionsbytheirvalues.2Thustheexpression2\u00033:14wouldbereplacedby6.28.Manyconstantexpressionsariseinpracticebecauseofthefrequentuseofsymbolicconstantsinprograms.TheDAG-constructionprocesscanhelpusapplytheseandothermoregeneralalgebraictransformationssuchascommutativityandassociativity.Forexample,supposethelanguagereferencemanualspeci\festhat\u0003iscommutative;thatis,x\u0003y=y\u0003x.Beforewecreateanewnodelabeled\u0003withleftchildMandrightchildN,wealwayscheckwhethersuchanodealreadyexists.However,because\u0003iscommutative,weshouldthencheckforanodehavingoperator\u0003,leftchildN,andrightchildM.Therelationaloperatorssuchas<and=sometimesgenerateunexpectedcommonsubexpressions.Forexample,theconditionx>ycanalsobetestedbysubtractingtheargumentsandperformingatestontheconditioncodesetbythesubtraction.3Thus,onlyonenodeoftheDAGmayneedtobegeneratedforx\u0000yandx>y.Associativelawsmightalsobeapplicabletoexposecommonsubexpressions.Forexample,ifthesourcecodehastheassignmentsa=b+c;e=c+d+b;thefollowingintermediatecodemightbegenerated:8.5.OPTIMIZATIONOFBASICBLOCKS537a=b+ct=c+de=t+bIftisnotneededoutsidethisblock,wecanchangethissequencetoa=b+ce=a+dusingboththeassociativityandcommutativityof+.Thecompilerwritershouldexaminethelanguagereferencemanualcare-fullytodeterminewhatrearrangementsofcomputationsarepermitted,since(becauseofpossibleover\rowsorunder\rows)computerarithmeticdoesnotal-waysobeythealgebraicidentitiesofmathematics.Forexample,theFortranstandardstatesthatacompilermayevaluateanymathematicallyequivalentexpression,providedthattheintegrityofparenthesesisnotviolated.Thus,acompilermayevaluatex\u0003y\u0000x\u0003zasx\u0003(y\u0000z),butitmaynotevaluatea+(b\u0000c)as(a+b)\u0000c.AFortrancompilermustthereforekeeptrackofwhereparentheseswerepresentinthesourcelanguageexpressionsifitistooptimizeprogramsinaccordancewiththelanguagede\fnition.8.5.5RepresentationofArrayReferencesAt\frstglance,itmightappearthatthearray-indexinginstructionscanbetreatedlikeanyotheroperator.Considerforinstancethesequenceofthree-addressstatements:x=a[i]a[j]=yz=a[i]Ifwethinkofa[i]asanoperationinvolvingaandi,similartoa+i,thenitmightappearasifthetwousesofa[i]wereacommonsubexpression.Inthatcase,wemightbetemptedto\\optimize\"byreplacingthethirdinstructionz=a[i]bythesimplerz=x.However,sincejcouldequali,themiddlestatementmayinfactchangethevalueofa[i];thus,itisnotlegaltomakethischange.TheproperwaytorepresentarrayaccessesinaDAGisasfollows.1.Anassignmentfromanarray,likex=a[i],isrepresentedbycreatinganodewithoperator=[]andtwochildrenrepresentingtheinitialvalueofthearray,a0inthiscase,andtheindexi.Variablexbecomesalabelofthisnewnode.2.Anassignmenttoanarray,likea[j]=y,isrepresentedbyanewnodewithoperator[]=andthreechildrenrepresentinga0,jandy.Thereisnovariablelabelingthisnode.Whatisdi\u000berentisthatthecreationof538CHAPTER8.CODEGENERATIONthisnodekillsallcurrentlyconstructednodeswhosevaluedependsona0.Anodethathasbeenkilledcannotreceiveanymorelabels;thatis,itcannotbecomeacommonsubexpression.Example8.13:TheDAGforthebasicblockx=a[i]a[j]=yz=a[i]isshowninFig.8.14.ThenodeNforxiscreated\frst,butwhenthenodelabeled[]=iscreated,Niskilled.Thus,whenthenodeforziscreated,itcannotbeidenti\fedwithN,andanewnodewiththesameoperandsa0andi0mustbecreatedinstead.2killedxz=[]=[]a0i0[]=j0y0Figure8.14:TheDAGforasequenceofarrayassignmentsExample8.14:Sometimes,anodemustbekilledeventhoughnoneofitschildrenhaveanarraylikea0inExample8.13asattachedvariable.Likewise,anodecankillifithasadescendantthatisanarray,eventhoughnoneofitschildrenarearraynodes.Forinstance,considerthethree-addresscodeb=12+ax=b[i]b[j]=yWhatishappeninghereisthat,fore\u000eciencyreasons,bhasbeende\fnedtobeapositioninanarraya.Forexample,iftheelementsofaarefourbyteslong,thenbrepresentsthefourthelementofa.Ifjandirepresentthesamevalue,thenb[i]andb[j]representthesamelocation.Thereforeitisimportanttohavethethirdinstruction,b[j]=y,killthenodewithxasitsattachedvariable.However,asweseeinFig.8.15,boththekillednodeandthenodethatdoesthekillinghavea0asagrandchild,notasachild.28.5.OPTIMIZATIONOFBASICBLOCKS539killed12a0+i0[]==[]j0y0Figure8.15:Anodethatkillsauseofanarrayneednothavethatarrayasachild8.5.6PointerAssignmentsandProcedureCallsWhenweassignindirectlythroughapointer,asintheassignmentsx=*p*q=ywedonotknowwhatporqpointto.Ine\u000bect,x=*pisauseofeveryvariablewhatsoever,and*q=yisapossibleassignmenttoeveryvariable.Asaconsequence,theoperator=\u0003musttakeallnodesthatarecurrentlyassociatedwithidenti\fersasarguments,whichisrelevantfordead-codeelimination.Moreimportantly,the\u0003=operatorkillsallothernodessofarconstructedintheDAG.Thereareglobalpointeranalysesonecouldperformthatmightlimitthesetofvariablesapointercouldreferenceatagivenplaceinthecode.Evenlocalanalysiscouldrestrictthescopeofapointer.Forinstance,inthesequencep=&x*p=yweknowthatx,andnoothervariable,isgiventhevalueofy,sowedon'tneedtokillanynodebutthenodetowhichxwasattached.Procedurecallsbehavemuchlikeassignmentsthroughpointers.Intheabsenceofglobaldata-\rowinformation,wemustassumethataprocedureusesandchangesanydatatowhichithasaccess.Thus,ifprocedurePisinthescopeofvariablex,acalltoPbothusesthenodewithattachedvariablexandkillsthatnode.8.5.7ReassemblingBasicBlocksFromDAG'sAfterweperformwhateveroptimizationsarepossiblewhileconstructingtheDAGorbymanipulatingtheDAGonceconstructed,wemayreconstitutethethree-addresscodeforthebasicblockfromwhichwebuilttheDAG.Foreach540CHAPTER8.CODEGENERATIONnodethathasoneormoreattachedvariables,weconstructathree-addressstatementthatcomputesthevalueofoneofthosevariables.Weprefertocomputetheresultintoavariablethatisliveonexitfromtheblock.However,ifwedonothavegloballive-variableinformationtoworkfrom,weneedtoassumethateveryvariableoftheprogram(butnottemporariesthataregeneratedbythecompilertoprocessexpressions)isliveonexitfromtheblock.Ifthenodehasmorethanonelivevariableattached,thenwehavetoin-troducecopystatementstogivethecorrectvaluetoeachofthosevariables.Sometimes,globaloptimizationcaneliminatethosecopies,ifwecanarrangetouseoneoftwovariablesinplaceoftheother.Example8.15:RecalltheDAGofFig.8.12.InthediscussionfollowingExample8.10,wedecidedthatifbisnotliveonexitfromtheblock,thenthethreestatementsa=b+cd=a-dc=d+csu\u000ecetoreconstructthebasicblock.Thethirdinstruction,c=d+c,mustusedasanoperandratherthanb,becausetheoptimizedblocknevercomputesb.Ifbothbanddareliveonexit,orifwearenotsurewhetherornottheyareliveonexit,thenweneedtocomputebaswellasd.Wecandosowiththesequencea=b+cd=a-db=dc=d+cThisbasicblockisstillmoree\u000ecientthantheoriginal.Althoughthenumberofinstructionsisthesame,wehavereplacedasubtractionbyacopy,whichtendstobelessexpensiveonmostmachines.Further,itmaybethatbydoingaglobalanalysis,wecaneliminatetheuseofthiscomputationofboutsidetheblockbyreplacingitbyusesofd.Inthatcase,wecancomebacktothisbasicblockandeliminateb=dlater.Intuitively,wecaneliminatethiscopyifwhereverthisvalueofbisused,disstillholdingthesamevalue.Thatsituationmayormaynotbetrue,dependingonhowtheprogramrecomputesd.2WhenreconstructingthebasicblockfromaDAG,wenotonlyneedtoworryaboutwhatvariablesareusedtoholdthevaluesoftheDAG'snodes,butwealsoneedtoworryabouttheorderinwhichwelisttheinstructionscomputingthevaluesofthevariousnodes.Therulestorememberare1.TheorderofinstructionsmustrespecttheorderofnodesintheDAG.Thatis,wecannotcomputeanode'svalueuntilwehavecomputedavalueforeachofitschildren.8.5.OPTIMIZATIONOFBASICBLOCKS5412.Assignmentstoanarraymustfollowallpreviousassignmentsto,oreval-uationsfrom,thesamearray,accordingtotheorderoftheseinstructionsintheoriginalbasicblock.3.Evaluationsofarrayelementsmustfollowanyprevious(accordingtotheoriginalblock)assignmentstothesamearray.Theonlypermutationallowedisthattwoevaluationsfromthesamearraymaybedoneineitherorder,aslongasneithercrossesoveranassignmenttothatarray.4.Anyuseofavariablemustfollowallprevious(accordingtotheoriginalblock)procedurecallsorindirectassignmentsthroughapointer.5.Anyprocedurecallorindirectassignmentthroughapointermustfollowallprevious(accordingtotheoriginalblock)evaluationsofanyvariable.Thatis,whenreorderingcode,nostatementmaycrossaprocedurecallorassignmentthroughapointer,andusesofthesamearraymaycrosseachotheronlyifbotharearrayaccesses,butnotassignmentstoelementsofthearray.8.5.8ExercisesforSection8.5Exercise8.5.1:ConstructtheDAGforthebasicblockd=b*ce=a+bb=b*ca=e-dExercise8.5.2:Simplifythethree-addresscodeofExercise8.5.1,assuminga)Onlyaisliveonexitfromtheblock.b)a,b,andcareliveonexitfromtheblock.Exercise8.5.3:ConstructtheDAGforthecodeinblockB6ofFig.8.9.Donotforgettoincludethecomparisoni\u001410.Exercise8.5.4:ConstructtheDAGforthecodeinblockB3ofFig.8.9.Exercise8.5.5:ExtendAlgorithm8.7toprocessthree-statementsoftheforma)a[i]=bb)a=b[i]c)a=*bc)*a=bExercise8.5.6:ConstructtheDAGforthebasicblock542CHAPTER8.CODEGENERATIONa[i]=b*p=cd=a[j]e=*p*p=a[i]ontheassumptionthata)pcanpointanywhere.b)pcanpointonlytobord.!Exercise8.5.7:Ifapointerorarrayexpression,suchasa[i]or*pisassignedandthenused,withoutthepossibilityofbeingchangedintheinterim,wecantakeadvantageofthesituationtosimplifytheDAG.Forexample,inthecodeofExercise8.5.6,ifpcannotpointtod,thenthefourthstatemente=*pcanbereplacedbye=c.RevisetheDAG-constructionalgorithmtotakeadvantageofsuchsituations,andapplyyouralgorithmtothecodeofExercise8.5.6.Exercise8.5.8:SupposeabasicblockisformedfromtheCassignmentstate-mentsx=a+b+c+d+e+f;y=a+c+e;a)Givethethree-addressstatements(onlyoneadditionperstatement)forthisblock.b)Usetheassociativeandcommutativelawstomodifytheblocktousethefewestpossiblenumberofinstructions,assumingbothxandyareliveonexitfromtheblock.8.6ASimpleCodeGeneratorInthissection,weshallconsideranalgorithmthatgeneratescodeforasinglebasicblock.Itconsiderseachthree-addressinstructioninturn,andkeepstrackofwhatvaluesareinwhatregisterssoitcanavoidgeneratingunnecessaryloadsandstores.Oneoftheprimaryissuesduringcodegenerationisdecidinghowtouseregisterstobestadvantage.Therearefourprincipalusesofregisters:\u000fInmostmachinearchitectures,someoralloftheoperandsofanoperationmustbeinregistersinordertoperformtheoperation.\u000fRegistersmakegoodtemporaries|placestoholdtheresultofasubex-pressionwhilealargerexpressionisbeingevaluated,ormoregenerally,aplacetoholdavariablethatisusedonlywithinasinglebasicblock.8.6.ASIMPLECODEGENERATOR543\u000fRegistersareusedtohold(global)valuesthatarecomputedinonebasicblockandusedinotherblocks,forexample,aloopindexthatisincre-mentedgoingaroundtheloopandisusedseveraltimeswithintheloop.\u000fRegistersareoftenusedtohelpwithrun-timestoragemanagement,forexample,tomanagetherun-timestack,includingthemaintenanceofstackpointersandpossiblythetopelementsofthestackitself.Thesearecompetingneeds,sincethenumberofregistersavailableislimited.Thealgorithminthissectionassumesthatsomesetofregistersisavailabletoholdthevaluesthatareusedwithintheblock.Typically,thissetofregis-tersdoesnotincludealltheregistersofthemachine,sincesomeregistersarereservedforglobalvariablesandmanagingthestack.Weassumethatthebasicblockhasalreadybeentransformedintoapreferredsequenceofthree-addressinstructions,bytransformationssuchascombiningcommonsubexpressions.Wefurtherassumethatforeachoperator,thereisexactlyonemachineinstruc-tionthattakesthenecessaryoperandsinregistersandperformsthatoperation,leavingtheresultinaregister.Themachineinstructionsareoftheform\u000fLDreg,mem\u000fSTmem,reg\u000fOPreg,reg,reg8.6.1RegisterandAddressDescriptorsOurcode-generationalgorithmconsiderseachthree-addressinstructioninturnanddecideswhatloadsarenecessarytogettheneededoperandsintoregisters.Aftergeneratingtheloads,itgeneratestheoperationitself.Then,ifthereisaneedtostoretheresultintoamemorylocation,italsogeneratesthatstore.Inordertomaketheneededdecisions,werequireadatastructurethattellsuswhatprogramvariablescurrentlyhavetheirvalueinaregister,andwhichregisterorregisters,ifso.Wealsoneedtoknowwhetherthememorylocationforagivenvariablecurrentlyhasthepropervalueforthatvariable,sinceanewvalueforthevariablemayhavebeencomputedinaregisterandnotyetstored.Thedesireddatastructurehasthefollowingdescriptors:1.Foreachavailableregister,aregisterdescriptorkeepstrackofthevariablenameswhosecurrentvalueisinthatregister.Sinceweshalluseonlythoseregistersthatareavailableforlocalusewithinabasicblock,weassumethatinitially,allregisterdescriptorsareempty.Asthecodegenerationprogresses,eachregisterwillholdthevalueofzeroormorenames.2.Foreachprogramvariable,anaddressdescriptorkeepstrackoftheloca-tionorlocationswherethecurrentvalueofthatvariablecanbefound.Thelocationmightbearegister,amemoryaddress,astacklocation,orsomesetofmorethanoneofthese.Theinformationcanbestoredinthesymbol-tableentryforthatvariablename.544CHAPTER8.CODEGENERATION8.6.2TheCode-GenerationAlgorithmAnessentialpartofthealgorithmisafunctiongetReg(I),whichselectsregis-tersforeachmemorylocationassociatedwiththethree-addressinstructionI.FunctiongetReghasaccesstotheregisterandaddressdescriptorsforallthevariablesofthebasicblock,andmayalsohaveaccesstocertainusefuldata-\rowinformationsuchasthevariablesthatareliveonexitfromtheblock.WeshalldiscussgetRegafterpresentingthebasicalgorithm.Whilewedonotknowthetotalnumberofregistersavailableforlocaldatabelongingtoabasicblock,weassumethatthereareenoughregisterssothat,afterfreeingallavailableregis-tersbystoringtheirvaluesinmemory,thereareenoughregisterstoaccomplishanythree-addressoperation.Inathree-addressinstructionsuchasx=y+z,weshalltreat+asagenericoperatorandADDastheequivalentmachineinstruction.Wedonot,therefore,takeadvantageofcommutativityof+.Thus,whenweimplementtheoperation,thevalueofymustbeinthesecondregistermentionedintheADDinstruction,neverthethird.Apossibleimprovementtothealgorithmistogeneratecodeforbothx=y+zandx=z+ywhenever+isacommutativeoperator,andpickthebettercodesequence.MachineInstructionsforOperationsForathree-addressinstructionsuchasx=y+z,dothefollowing:1.UsegetReg(x=y+z)toselectregistersforx,y,andz.CalltheseRx,Ry,andRz.2.IfyisnotinRy(accordingtotheregisterdescriptorforRy),thenissueaninstructionLDRy;y0,wherey0isoneofthememorylocationsfory(accordingtotheaddressdescriptorfory).3.Similarly,ifzisnotinRz,issueaninstructionLDRz;z0,wherez0isalocationforz.4.IssuetheinstructionADDRx;Ry;Rz.MachineInstructionsforCopyStatementsThereisanimportantspecialcase:athree-addresscopystatementoftheformx=y.WeassumethatgetRegwillalwayschoosethesameregisterforbothxandy.IfyisnotalreadyinthatregisterRy,thengeneratethemachineinstructionLDRy;y.IfywasalreadyinRy,wedonothing.ItisonlynecessarythatweadjusttheregisterdescriptorforRysothatitincludesxasoneofthevaluesfoundthere.8.6.ASIMPLECODEGENERATOR545EndingtheBasicBlockAswehavedescribedthealgorithm,variablesusedbytheblockmaywindupwiththeironlylocationbeingaregister.Ifthevariableisatemporaryusedonlywithintheblock,thatis\fne;whentheblockends,wecanforgetaboutthevalueofthetemporaryandassumeitsregisterisempty.However,ifthevariableisliveonexitfromtheblock,orifwedon'tknowwhichvariablesareliveonexit,thenweneedtoassumethatthevalueofthevariableisneededlater.Inthatcase,foreachvariablexwhoseaddressdescriptordoesnotsaythatitsvalueislocatedinthememorylocationforx,wemustgeneratetheinstructionSTx;R,whereRisaregisterinwhichx'svalueexistsattheendoftheblock.ManagingRegisterandAddressDescriptorsAsthecode-generationalgorithmissuesload,store,andothermachineinstruc-tions,itneedstoupdatetheregisterandaddressdescriptors.Therulesareasfollows:1.FortheinstructionLDR;x(a)ChangetheregisterdescriptorforregisterRsoitholdsonlyx.(b)ChangetheaddressdescriptorforxbyaddingregisterRasanad-ditionallocation.2.FortheinstructionSTx;R,changetheaddressdescriptorforxtoincludeitsownmemorylocation.3.ForanoperationsuchasADDRx;Ry;Rzimplementingathree-addressinstructionx=y+z(a)ChangetheregisterdescriptorforRxsothatitholdsonlyx.(b)ChangetheaddressdescriptorforxsothatitsonlylocationisRx.Notethatthememorylocationforxisnotnowintheaddressde-scriptorforx.(c)RemoveRxfromtheaddressdescriptorofanyvariableotherthanx.4.Whenweprocessacopystatementx=y,aftergeneratingtheloadforyintoregisterRy,ifneeded,andaftermanagingdescriptorsasforallloadstatements(perrule1):(a)AddxtotheregisterdescriptorforRy.(b)ChangetheaddressdescriptorforxsothatitsonlylocationisRy.Example8.16:Letustranslatethebasicblockconsistingofthethree-addressstatements546CHAPTER8.CODEGENERATIONt=a-bu=a-cv=t+ua=dd=v+uHereweassumethatt,u,andvaretemporaries,localtotheblock,whilea,b,c,anddarevariablesthatareliveonexitfromtheblock.SincewehavenotyetdiscussedhowthefunctiongetRegmightwork,weshallsimplyassumethatthereareasmanyregistersasweneed,butthatwhenaregister'svalueisnolongerneeded(forexample,itholdsonlyatemporary,allofwhoseuseshavebeenpassed),thenwereuseitsregister.Asummaryofallthemachine-codeinstructionsgeneratedisinFig.8.16.The\fgurealsoshowstheregisterandaddressdescriptorsbeforeandafterthetranslationofeachthree-addressinstruction.LDR3,cSUBR1,R1,R3utcabc;R3dR2R1v=t+uADDR3,R2,R1utvabu=a-cbcdt=a-bLDR1,aLDR2,bSUBR2,R1,R2ata;R1bcdR2cR2bcR1R3exitSTa,R2STd,R1dava;R2bcd;R1R3vdR2R1R3a=dLDR2,dua;dvR2bcd;R2R1R3d=v+uADDR1,R3,R1daaR1R2R3abcdtuvFigure8.16:InstructionsgeneratedandthechangesintheregisterandaddressdescriptorsForthe\frstthree-addressinstruction,t=a-bweneedtoissuethreein-structions,sincenothingisinaregisterinitially.Thus,weseeaandbloaded8.6.ASIMPLECODEGENERATOR547intoregistersR1andR2,andthevaluetproducedinregisterR2.NoticethatwecanuseR2fortbecausethevaluebpreviouslyinR2isnotneededwithintheblock.Sincebispresumablyliveonexitfromtheblock,haditnotbeeninitsownmemorylocation(asindicatedbyitsaddressdescriptor),wewouldhavehadtostoreR2intob\frst.Thedecisiontodoso,hadweneededR2,wouldbetakenbygetReg.Thesecondinstruction,u=a-c,doesnotrequirealoadofa,sinceitisalreadyinregisterR1.Further,wecanreuseR1fortheresult,u,sincethevalueofa,previouslyinthatregister,isnolongerneededwithintheblock,anditsvalueisinitsownmemorylocationifaisneededoutsidetheblock.NotethatwechangetheaddressdescriptorforatoindicatethatitisnolongerinR1,butisinthememorylocationcalleda.Thethirdinstruction,v=t+u,requiresonlytheaddition.Further,wecanuseR3fortheresult,v,sincethevalueofcinthatregisterisnolongerneededwithintheblock,andchasitsvalueinitsownmemorylocation.Thecopyinstruction,a=d,requiresaloadofd,sinceitisnotinaregister.WeshowregisterR2'sdescriptorholdingbothaandd.Theadditionofatotheregisterdescriptoristheresultofourprocessingthecopystatement,andisnottheresultofanymachineinstruction.The\ffthinstruction,d=v+u,usestwovaluesthatareinregisters.Sinceuisatemporarywhosevalueisnolongerneeded,wehavechosentoreuseitsregisterR1forthenewvalueofd.NoticethatdisnowinonlyR1,andisnotinitsownmemorylocation.Thesameholdsfora,whichisinR2andnotinthememorylocationcalleda.Asaresult,weneeda\\coda\"tothemachinecodeforthebasicblockthatstoresthelive-on-exitvariablesaanddintotheirmemorylocations.Weshowtheseasthelasttwoinstructions.28.6.3DesignoftheFunctiongetRegLastly,letusconsiderhowtoimplementgetReg(I),forathree-addressin-structionI.Therearemanyoptions,althoughtherearealsosomeabsoluteprohibitionsagainstchoicesthatleadtoincorrectcodeduetothelossofthevalueofoneormorelivevariables.Webeginourexaminationwiththecaseofanoperationstep,forwhichweagainusex=y+zasthegenericexample.First,wemustpickaregisterforyandaregisterforz.Theissuesarethesame,soweshallconcentrateonpickingregisterRyfory.Therulesareasfollows:1.Ifyiscurrentlyinaregister,pickaregisteralreadycontainingyasRy.Donotissueamachineinstructiontoloadthisregister,asnoneisneeded.2.Ifyisnotinaregister,butthereisaregisterthatiscurrentlyempty,pickonesuchregisterasRy.3.Thedi\u000ecultcaseoccurswhenyisnotinaregister,andthereisnoregisterthatiscurrentlyempty.Weneedtopickoneoftheallowableregistersanyway,andweneedtomakeitsafetoreuse.LetRbeacandidate548CHAPTER8.CODEGENERATIONregister,andsupposevisoneofthevariablesthattheregisterdescriptorforRsaysisinR.Weneedtomakesurethatv'svalueeitherisnotreallyneeded,orthatthereissomewhereelsewecangotogetthevalueofv.Thepossibilitiesare:(a)IftheaddressdescriptorforvsaysthatvissomewherebesidesR,thenweareOK.(b)Ifvisx,thevariablebeingcomputedbyinstructionI,andxisnotalsooneoftheotheroperandsofinstructionI(zinthisexample),thenweareOK.Thereasonisthatinthiscase,weknowthisvalueofxisneveragaingoingtobeused,sowearefreetoignoreit.(c)Otherwise,ifvisnotusedlater(thatis,aftertheinstructionI,therearenofurtherusesofv,andifvisliveonexitfromtheblock,thenvisrecomputedwithintheblock),thenweareOK.(d)IfwearenotOKbyoneofthe\frstthreecases,thenweneedtogeneratethestoreinstructionSTv;Rtoplaceacopyofvinitsownmemorylocation.Thisoperationiscalledaspill.SinceRmayholdseveralvariablesatthemoment,werepeattheabovestepsforeachsuchvariablev.Attheend,R's\\score\"isthenumberofstoreinstructionsweneededtogenerate.Pickoneoftheregisterswiththelowestscore.Now,considertheselectionoftheregisterRx.Theissuesandoptionsarealmostasfory,soweshallonlymentionthedi\u000berences.1.Sinceanewvalueofxisbeingcomputed,aregisterthatholdsonlyxisalwaysanacceptablechoiceforRx.Thisstatementholdsevenifxisoneofyandz,sinceourmachineinstructionsallowstworegisterstobethesameinoneinstruction.2.IfyisnotusedafterinstructionI,inthesensedescribedforvariablevinitem(3c),andRyholdsonlyyafterbeingloaded,ifnecessary,thenRycanalsobeusedasRx.AsimilaroptionholdsregardingzandRz.ThelastmattertoconsiderspeciallyisthecasewhenIisacopyinstructionx=y.WepicktheregisterRyasabove.Then,wealwayschooseRx=Ry.8.6.4ExercisesforSection8.6Exercise8.6.1:ForeachofthefollowingCassignmentstatementsa)x=a+b*c;b)x=a/(b+c)-d*(e+f);c)x=a[i]+1;8.7.PEEPHOLEOPTIMIZATION549d)a[i]=b[c[i]];e)a[i][j]=b[i][k]+c[k][j];f)*p++=*q++;generatethree-addresscode,assumingthatallarrayelementsareintegerstak-ingfourbyteseach.Inparts(d)and(e),assumethata,b,andcareconstantsgivingthelocationofthe\frst(0th)elementsofthearrayswiththosenames,asinallpreviousexamplesofarrayaccessesinthischapter.!Exercise8.6.2:RepeatExercise8.6.1parts(d)and(e),assumingthatthearraysa,b,andcarelocatedviapointers,pa,pb,andpc,respectively,pointingtothelocationsoftheirrespective\frstelements.Exercise8.6.3:Convertyourthree-addresscodefromExercise8.6.1intoma-chinecodeforthemachinemodelofthissection.Youmayuseasmanyregistersasyouneed.Exercise8.6.4:Convertyourthree-addresscodefromExercise8.6.1intoma-chinecode,usingthesimplecode-generationalgorithmofthissection,assumingthreeregistersareavailable.Showtheregisterandaddressdescriptorsaftereachstep.Exercise8.6.5:RepeatExercise8.6.4,butassumingonlytworegistersareavailable.8.7PeepholeOptimizationWhilemostproductioncompilersproducegoodcodethroughcarefulinstruc-tionselectionandregisterallocation,afewuseanalternativestrategy:theygeneratenaivecodeandthenimprovethequalityofthetargetcodebyapplying\\optimizing\"transformationstothetargetprogram.Theterm\\optimizing\"issomewhatmisleadingbecausethereisnoguaranteethattheresultingcodeisoptimalunderanymathematicalmeasure.Nevertheless,manysimpletransfor-mationscansigni\fcantlyimprovetherunningtimeorspacerequirementofthetargetprogram.Asimplebute\u000bectivetechniqueforlocallyimprovingthetargetcodeispeepholeoptimization,whichisdonebyexaminingaslidingwindowoftargetinstructions(calledthepeephole)andreplacinginstructionsequenceswithinthepeepholebyashorterorfastersequence,wheneverpossible.Peepholeoptimizationcanalsobeapplieddirectlyafterintermediatecodegenerationtoimprovetheintermediaterepresentation.Thepeepholeisasmall,slidingwindowonaprogram.Thecodeinthepeepholeneednotbecontiguous,althoughsomeimplementationsdorequirethis.Itischaracteristicofpeepholeoptimizationthateachimprovementmay550CHAPTER8.CODEGENERATIONspawnopportunitiesforadditionalimprovements.Ingeneral,repeatedpassesoverthetargetcodearenecessarytogetthemaximumbene\ft.Inthissec-tion,weshallgivethefollowingexamplesofprogramtransformationsthatarecharacteristicofpeepholeoptimizations:\u000fRedundant-instructionelimination\u000fFlow-of-controloptimizations\u000fAlgebraicsimpli\fcations\u000fUseofmachineidioms8.7.1EliminatingRedundantLoadsandStoresIfweseetheinstructionsequenceLDR0,aSTa,R0inatargetprogram,wecandeletethestoreinstructionbecausewheneveritisexecuted,the\frstinstructionwillensurethatthevalueofahasalreadybeenloadedintoregisterR0.Notethatifthestoreinstructionhadalabel,wecouldnotbesurethatthe\frstinstructionisalwaysexecutedbeforethesecond,sowecouldnotremovethestoreinstruction.Putanotherway,thetwoinstructionshavetobeinthesamebasicblockforthistransformationtobesafe.Redundantloadsandstoresofthisnaturewouldnotbegeneratedbythesimplecodegenerationalgorithmoftheprevioussection.However,anaivecodegenerationalgorithmliketheoneinSection8.1.3wouldgenerateredundantsequencessuchasthese.8.7.2EliminatingUnreachableCodeAnotheropportunityforpeepholeoptimizationistheremovalofunreachableinstructions.Anunlabeledinstructionimmediatelyfollowinganunconditionaljumpmayberemoved.Thisoperationcanberepeatedtoeliminateasequenceofinstructions.Forexample,fordebuggingpurposes,alargeprogrammayhavewithinitcertaincodefragmentsthatareexecutedonlyifavariabledebugisequalto1.Intheintermediaterepresentation,thiscodemaylooklikeifdebug==1gotoL1gotoL2L1:printdebugginginformationL2:Oneobviouspeepholeoptimizationistoeliminatejumpsoverjumps.Thus,nomatterwhatthevalueofdebug,thecodesequenceabovecanbereplacedby8.7.PEEPHOLEOPTIMIZATION551ifdebug!=1gotoL2printdebugginginformationL2:Ifdebugissetto0atthebeginningoftheprogram,constantpropagationwouldtransformthissequenceintoif0!=1gotoL2printdebugginginformationL2:Nowtheargumentofthe\frststatementalwaysevaluatestotrue,sothestatementcanbereplacedbygotoL2.Thenallstatementsthatprintdebug-ginginformationareunreachableandcanbeeliminatedoneatatime.8.7.3Flow-of-ControlOptimizationsSimpleintermediatecode-generationalgorithmsfrequentlyproducejumpstojumps,jumpstoconditionaljumps,orconditionaljumpstojumps.Theseunnecessaryjumpscanbeeliminatedineithertheintermediatecodeorthetargetcodebythefollowingtypesofpeepholeoptimizations.WecanreplacethesequencegotoL1\u0001\u0001\u0001L1:gotoL2bythesequencegotoL2\u0001\u0001\u0001L1:gotoL2IftherearenownojumpstoL1,thenitmaybepossibletoeliminatethestatementL1:gotoL2provideditisprecededbyanunconditionaljump.Similarly,thesequenceifa<bgotoL1\u0001\u0001\u0001L1:gotoL2canbereplacedbythesequenceifa<bgotoL2\u0001\u0001\u0001L1:gotoL2Finally,supposethereisonlyonejumptoL1andL1isprecededbyanunconditionalgoto.Thenthesequence552CHAPTER8.CODEGENERATIONgotoL1...L1:ifa<bgotoL2L3:maybereplacedbythesequenceifa<bgotoL2gotoL3...L3:Whilethenumberofinstructionsinthetwosequencesisthesame,wesometimesskiptheunconditionaljumpinthesecondsequence,butneverinthe\frst.Thus,thesecondsequenceissuperiortothe\frstinexecutiontime.8.7.4AlgebraicSimpli\fcationandReductioninStrengthInSection8.5wediscussedalgebraicidentitiesthatcouldbeusedtosimplifyDAG's.Thesealgebraicidentitiescanalsobeusedbyapeepholeoptimizertoeliminatethree-addressstatementssuchasx=x+0orx=x*1inthepeephole.Similarly,reduction-in-strengthtransformationscanbeappliedinthepeep-holetoreplaceexpensiveoperationsbyequivalentcheaperonesonthetargetmachine.Certainmachineinstructionsareconsiderablycheaperthanothersandcanoftenbeusedasspecialcasesofmoreexpensiveoperators.Forex-ample,x2isinvariablycheapertoimplementasx\u0003xthanasacalltoanexponentiationroutine.Fixed-pointmultiplicationordivisionbyapoweroftwoischeapertoimplementasashift.Floating-pointdivisionbyaconstantcanbeapproximatedasmultiplicationbyaconstant,whichmaybecheaper.8.7.5UseofMachineIdiomsThetargetmachinemayhavehardwareinstructionstoimplementcertainspe-ci\fcoperationse\u000eciently.Detectingsituationsthatpermittheuseoftheseinstructionscanreduceexecutiontimesigni\fcantly.Forexample,somema-chineshaveauto-incrementandauto-decrementaddressingmodes.Theseaddorsubtractonefromanoperandbeforeorafterusingitsvalue.Theuseofthemodesgreatlyimprovesthequalityofcodewhenpushingorpoppingastack,asinparameterpassing.Thesemodescanalsobeusedincodeforstatementslikex=x+1.8.8.REGISTERALLOCATIONANDASSIGNMENT5538.7.6ExercisesforSection8.7Exercise8.7.1:Constructanalgorithmthatwillperformredundant-instruc-tioneliminationinaslidingpeepholeontargetmachinecode.Exercise8.7.2:Constructanalgorithmthatwilldo\row-of-controloptimiza-tionsinaslidingpeepholeontargetmachinecode.Exercise8.7.3:Constructanalgorithmthatwilldosimplealgebraicsimpli-\fcationsandreductionsinstrengthinaslidingpeepholeontargetmachinecode.8.8RegisterAllocationandAssignmentInstructionsinvolvingonlyregisteroperandsarefasterthanthoseinvolvingmemoryoperands.Onmodernmachines,processorspeedsareoftenanorderofmagnitudeormorefasterthanmemoryspeeds.Therefore,e\u000ecientutilizationofregistersisvitallyimportantingeneratinggoodcode.Thissectionpresentsvariousstrategiesfordecidingateachpointinaprogramwhatvaluesshouldresideinregisters(registerallocation)andinwhichregistereachvalueshouldreside(registerassignment).Oneapproachtoregisterallocationandassignmentistoassignspeci\fcvaluesinthetargetprogramtocertainregisters.Forexample,wecoulddecidetoassignbaseaddressestoonegroupofregisters,arithmeticcomputationstoanother,thetopofthestacktoa\fxedregister,andsoon.Thisapproachhastheadvantagethatitsimpli\festhedesignofacodegener-ator.Itsdisadvantageisthat,appliedtoostrictly,itusesregistersine\u000eciently;certainregistersmaygounusedoversubstantialportionsofcode,whileunnec-essaryloadsandstoresaregeneratedintotheotherregisters.Nevertheless,itisreasonableinmostcomputingenvironmentstoreserveafewregistersforbaseregisters,stackpointers,andthelike,andtoallowtheremainingregisterstobeusedbythecodegeneratorasitsees\ft.8.8.1GlobalRegisterAllocationThecodegenerationalgorithminSection8.6usedregisterstoholdvaluesforthedurationofasinglebasicblock.However,alllivevariableswerestoredattheendofeachblock.Tosavesomeofthesestoresandcorrespondingloads,wemightarrangetoassignregisterstofrequentlyusedvariablesandkeeptheseregistersconsistentacrossblockboundaries(globally).Sinceprogramsspendmostoftheirtimeininnerloops,anaturalapproachtoglobalregisterassignmentistotrytokeepafrequentlyusedvalueina\fxedregisterthroughoutaloop.Forthetimebeing,assumethatweknowtheloopstructureofa\rowgraph,andthatweknowwhatvaluescomputedinabasicblockareusedoutsidethatblock.Thenextchaptercoverstechniquesforcomputingthisinformation.554CHAPTER8.CODEGENERATIONOnestrategyforglobalregisterallocationistoassignsome\fxednumberofregisterstoholdthemostactivevaluesineachinnerloop.Theselectedvaluesmaybedi\u000berentindi\u000berentloops.RegistersnotalreadyallocatedmaybeusedtoholdvalueslocaltooneblockasinSection8.6.Thisapproachhasthedrawbackthatthe\fxednumberofregistersisnotalwaystherightnumbertomakeavailableforglobalregisterallocation.YetthemethodissimpletoimplementandwasusedinFortranH,theoptimizingFortrancompilerdevelopedbyIBMforthe360-seriesmachinesinthelate1960s.WithearlyCcompilers,aprogrammercoulddosomeregisterallocationexplicitlybyusingregisterdeclarationstokeepcertainvaluesinregistersforthedurationofaprocedure.Judicioususeofregisterdeclarationsdidspeedupmanyprograms,butprogrammerswereencouragedto\frstpro\fletheirprogramstodeterminetheprogram'shotspotsbeforedoingtheirownregisterallocation.8.8.2UsageCountsInthissectionweshallassumethatthesavingstoberealizedbykeepingavariablexinaregisterforthedurationofaloopLisoneunitofcostforeachreferencetoxifxisalreadyinaregister.However,ifweusetheapproachinSection8.6togeneratecodeforablock,thereisagoodchancethatafterxhasbeencomputedinablockitwillremaininaregisteriftherearesubsequentusesofxinthatblock.ThuswecountasavingsofoneforeachuseofxinloopLthatisnotprecededbyanassignmenttoxinthesameblock.Wealsosavetwounitsifwecanavoidastoreofxattheendofablock.Thus,ifxisallocatedaregister,wecountasavingsoftwoforeachblockinloopLforwhichxisliveonexitandinwhichxisassignedavalue.Onthedebitside,ifxisliveonentrytotheloopheader,wemustloadxintoitsregisterjustbeforeenteringloopL.Thisloadcoststwounits.Similarly,foreachexitblockBofloopLatwhichxisliveonentrytosomesuccessorofBoutsideofL,wemuststorexatacostoftwo.However,ontheassumptionthattheloopisiteratedmanytimes,wemayneglectthesedebitssincetheyoccuronlyonceeachtimeweentertheloop.Thus,anapproximateformulaforthebene\fttoberealizedfromallocatingaregisterforxwithinloopLisXblocksBinLuse(x;B)+2\u0003live(x;B)(8.1)whereuse(x;B)isthenumberoftimesxisusedinBpriortoanyde\fnitionofx;live(x;B)is1ifxisliveonexitfromBandisassignedavalueinB,andlive(x;B)is0otherwise.Notethat(8.1)isapproximate,becausenotallblocksinaloopareexecutedwithequalfrequencyandalsobecause(8.1)isbasedontheassumptionthataloopisiteratedmanytimes.Onspeci\fcmachinesaformulaanalogousto(8.1),butpossiblyquitedi\u000berentfromit,wouldhavetobedeveloped.8.8.REGISTERALLOCATIONANDASSIGNMENT555Example8.17:ConsiderthebasicblocksintheinnerloopdepictedinFig.8.17,wherejumpandconditionaljumpstatementshavebeenomitted.AssumeregistersR0,R1,andR2areallocatedtoholdvaluesthroughouttheloop.Vari-ablesliveonentryintoandonexitfromeachblockareshowninFig.8.17forconvenience,immediatelyaboveandbeloweachblock,respectively.Therearesomesubtlepointsaboutlivevariablesthatweaddressinthenextchapter.Forexample,noticethatbotheandfareliveattheendofB1,butofthese,onlyeisliveonentrytoB2andonlyfonentrytoB3.Ingeneral,thevariablesliveattheendofablockaretheunionofthoseliveatthebeginningofeachofitssuccessorblocks.b=d+fe=a-cB3b=d+cB4B2b;d;e;fliveb;c;d;e;flivebcdfacdefacdecdefacdfbcdefcdefbcdeff=a-da=b+cd=d-be=a+fB1Figure8.17:FlowgraphofaninnerloopToevaluate(8.1)forx=a,weobservethataisliveonexitfromB1andisassignedavaluethere,butisnotliveonexitfromB2,B3,orB4.Thus,PBinLuse(a;B)=2.Hencethevalueof(8.1)forx=ais4.Thatis,fourunitsofcostcanbesavedbyselectingaforoneoftheglobalregisters.Thevaluesof(8.1)forb,c,d,e,andfare5,3,6,4,and4,respectively.Thus,wemayselecta,b,anddforregistersR0,R1,andR2,respectively.UsingR0foreorfinsteadofawouldbeanotherchoicewiththesameapparentbene\ft.Figure8.18showstheassemblycodegeneratedfromFig.8.17,assumingthatthestrategyofSection8.6isusedtogeneratecodeforeachblock.WedonotshowthegeneratedcodefortheomittedconditionalorunconditionaljumpsthatendeachblockinFig.8.17,andwethereforedonotshowthegeneratedcodeasasinglestreamasitwouldappearinpractice.2556CHAPTER8.CODEGENERATIONLDR3,fADDR3,R0,R3STe,R3B1SUBR3,R0,R2STf,R3B2LDR3,fADDR1,R2,R3LDR3,cSUBR3,R0,R3STe,R3B3LDR3,cADDR1,R2,R3B4STb,R1STd,R2STb,R1STa,R2SUBR2,R2,R1LDR1,bLDR2,dLDR3,cADDR0,R1,R3Figure8.18:Codesequenceusingglobalregisterassignment8.8.3RegisterAssignmentforOuterLoopsHavingassignedregistersandgeneratedcodeforinnerloops,wemayapplythesameideatoprogressivelylargerenclosingloops.IfanouterloopL1containsaninnerloopL2,thenamesallocatedregistersinL2neednotbeallocatedregistersinL1\u0000L2.However,ifwechoosetoallocatexaregisterinL2butnotL1,wemustloadxonentrancetoL2andstorexonexitfromL2.WeleaveasanexercisethederivationofacriterionforselectingnamestobeallocatedregistersinanouterloopL,giventhatchoiceshavealreadybeenmadeforallloopsnestedwithinL.8.8.4RegisterAllocationbyGraphColoringWhenaregisterisneededforacomputationbutallavailableregistersareinuse,thecontentsofoneoftheusedregistersmustbestored(spilled)intoamemorylocationinordertofreeuparegister.Graphcoloringisasimple,systematictechniqueforallocatingregistersandmanagingregisterspills.Inthemethod,twopassesareused.Inthe\frst,target-machineinstruc-tionsareselectedasthoughthereareanin\fnitenumberofsymbolicregisters;ine\u000bect,namesusedintheintermediatecodebecomenamesofregistersand8.8.REGISTERALLOCATIONANDASSIGNMENT557thethree-addressinstructionsbecomemachine-languageinstructions.Ifac-cesstovariablesrequiresinstructionsthatusestackpointers,displaypointers,baseregisters,orotherquantitiesthatassistaccess,thenweassumethatthesequantitiesareheldinregistersreservedforeachpurpose.Normally,theiruseisdirectlytranslatableintoanaccessmodeforanaddressmentionedinamachineinstruction.Ifaccessismorecomplex,theaccessmustbebrokenintoseveralmachineinstructions,andatemporarysymbolicregister(orseveral)mayneedtobecreated.Oncetheinstructionshavebeenselected,asecondpassassignsphysicalregisterstosymbolicones.Thegoalisto\fndanassignmentthatminimizesthecostofspills.Inthesecondpass,foreachprocedurearegister-interferencegraphiscon-structedinwhichthenodesaresymbolicregistersandanedgeconnectstwonodesifoneisliveatapointwheretheotherisde\fned.Forexample,aregister-interferencegraphforFig.8.17wouldhavenodesfornamesaandd.InblockB1,aisliveatthesecondstatement,whichde\fnesd;therefore,inthegraphtherewouldbeanedgebetweenthenodesforaandd.Anattemptismadetocolortheregister-interferencegraphusingkcolors,wherekisthenumberofassignableregisters.Agraphissaidtobecoloredifeachnodehasbeenassignedacolorinsuchawaythatnotwoadjacentnodeshavethesamecolor.Acolorrepresentsaregister,andthecolormakessurethatnotwosymbolicregistersthatcaninterferewitheachotherareassignedthesamephysicalregister.Althoughtheproblemofdeterminingwhetheragraphisk-colorableisNP-completeingeneral,thefollowingheuristictechniquecanusuallybeusedtodothecoloringquicklyinpractice.SupposeanodeninagraphGhasfewerthankneighbors(nodesconnectedtonbyanedge).RemovenanditsedgesfromGtoobtainagraphG0.Ak-coloringofG0canbeextendedtoak-coloringofGbyassigningnacolornotassignedtoanyofitsneighbors.Byrepeatedlyeliminatingnodeshavingfewerthankedgesfromtheregister-interferencegraph,eitherweobtaintheemptygraph,inwhichcasewecanproduceak-coloringfortheoriginalgraphbycoloringthenodesinthereverseorderinwhichtheywereremoved,orweobtainagraphinwhicheachnodehaskormoreadjacentnodes.Inthelattercaseak-coloringisnolongerpossible.Atthispointanodeisspilledbyintroducingcodetostoreandreloadtheregister.Chaitinhasdevisedseveralheuristicsforchoosingthenodetospill.Ageneralruleistoavoidintroducingspillcodeintoinnerloops.8.8.5ExercisesforSection8.8Exercise8.8.1:Constructtheregister-interferencegraphfortheprograminFig.8.17.Exercise8.8.2:Devisearegister-allocationstrategyontheassumptionthatweautomaticallystoreallregistersonthestackbeforeeachprocedurecallandrestorethemafterthereturn.558CHAPTER8.CODEGENERATION8.9InstructionSelectionbyTreeRewritingInstructionselectioncanbealargecombinatorialtask,especiallyformachinesthatarerichinaddressingmodes,suchasCISCmachines,oronmachineswithspecial-purposeinstructions,say,forsignalprocessing.Evenifweassumethattheorderofevaluationisgivenandthatregistersareallocatedbyaseparatemechanism,instructionselection|theproblemofselectingtarget-languageinstructionstoimplementtheoperatorsintheintermediaterepresentation|remainsalargecombinatorialtask.Inthissection,wetreatinstructionselectionasatree-rewritingproblem.Treerepresentationsoftargetinstructionshavebeenusede\u000bectivelyincode-generatorgenerators,whichautomaticallyconstructtheinstruction-selectionphaseofacodegeneratorfromahigh-levelspeci\fcationofthetargetmachine.BettercodemightbeobtainedforsomemachinesbyusingDAG'sratherthantrees,butDAGmatchingismorecomplexthantreematching.8.9.1Tree-TranslationSchemesThroughoutthissection,theinputtothecode-generationprocesswillbeasequenceoftreesatthesemanticlevelofthetargetmachine.Thetreesarewhatwemightgetafterinsertingrun-timeaddressesintotheintermediaterepresentation,asdescribedinSection8.3.Inaddition,theleavesofthetreescontaininformationaboutthestoragetypesoftheirlabels.Example8.18:Figure8.19containsatreefortheassignmentstatementa[i]=b+1,wherethearrayaisstoredontherun-timestackandthevari-ablebisaglobalinmemorylocationMb.Therun-timeaddressesoflocalsaandiaregivenasconstanto\u000bsetsCaandCifromSP,theregistercontainingthepointertothebeginningofthecurrentactivationrecord.Theassignmenttoa[i]isanindirectassignmentinwhichther-valueofthelocationfora[i]issettother-valueoftheexpressionb+1.TheaddressesofarrayaandvariableiaregivenbyaddingthevaluesoftheconstantCaandCi,respectively,tothecontentsofregisterSP.Wesimplifyarray-addresscalcu-lationsbyassumingthatallvaluesareone-bytecharacters.(Someinstructionsetsmakespecialprovisionsformultiplicationsbyconstants,suchas2,4,and8,duringaddresscalculations.)Inthetree,theindoperatortreatsitsargumentasamemoryaddress.Astheleftchildofanassignmentoperator,theindnodegivesthelocationintowhichther-valueontherightsideoftheassignmentoperatoristobestored.Ifanargumentofa+orindoperatorisamemorylocationoraregister,thenthecontentsofthatmemorylocationorregisteraretakenasthevalue.Theleavesinthetreearelabeledwithattributes;asubscriptindicatesthevalueoftheattribute.2Thetargetcodeisgeneratedbyapplyingasequenceoftree-rewritingrulestoreducetheinputtreetoasinglenode.Eachtree-rewritingrulehastheform8.9.INSTRUCTIONSELECTIONBYTREEREWRITING559RSPCa+RSPCi+=ind+indC1Mb+Figure8.19:Intermediate-codetreefora[i]=b+1replacement templatefactiongwherereplacementisasinglenode,templateisatree,andactionisacodefragment,asinasyntax-directedtranslationscheme.Asetoftree-rewritingrulesiscalledatree-translationscheme.Eachtree-rewritingrulerepresentsthetranslationofaportionofthetreegivenbythetemplate.Thetranslationconsistsofapossiblyemptysequenceofmachineinstructionsthatisemittedbytheactionassociatedwiththetemplate.Theleavesofthetemplateareattributeswithsubscripts,asintheinputtree.Sometimes,certainrestrictionsapplytothevaluesofthesubscriptsinthetemplates;theserestrictionsarespeci\fedassemanticpredicatesthatmustbesatis\fedbeforethetemplateissaidtomatch.Forexample,apredicatemightspecifythatthevalueofaconstantfallinacertainrange.Atree-translationschemeisaconvenientwaytorepresenttheinstruction-selectionphaseofacodegenerator.Asanexampleofatree-rewritingrule,considertherulefortheregister-to-registeraddinstruction:Ri fADDRi,Ri,Rjg+RiRjThisruleisusedasfollows.Iftheinputtreecontainsasubtreethatmatchesthistreetemplate,thatis,asubtreewhoserootislabeledbytheoperator+andwhoseleftandrightchildrenarequantitiesinregistersiandj,thenwecanreplacethatsubtreebyasinglenodelabeledRiandemittheinstructionADDRi,Ri,Rjasoutput.Wecallthisreplacementatilingofthesubtree.Morethanonetemplatemaymatchasubtreeatagiventime;weshalldescribeshortlysomemechanismsfordecidingwhichruletoapplyincasesofcon\rict.Example8.19:Figure8.20containstree-rewritingrulesforafewinstructionsofourtargetmachine.Theseruleswillbeusedinarunningexamplethroughoutthissection.The\frsttworulescorrespondtoloadinstructions,thenexttwo560CHAPTER8.CODEGENERATIONtostoreinstructions,andtheremaindertoindexedloadsandadditions.Notethatrule(8)requiresthevalueoftheconstanttobe1.Thisconditionwouldbespeci\fedbyasemanticpredicate.28.9.2CodeGenerationbyTilinganInputTreeAtree-translationschemeworksasfollows.Givenaninputtree,thetemplatesinthetree-rewritingrulesareappliedtotileitssubtrees.Ifatemplatematches,thematchingsubtreeintheinputtreeisreplacedwiththereplacementnodeoftheruleandtheactionassociatedwiththeruleisdone.Iftheactioncontainsasequenceofmachineinstructions,theinstructionsareemitted.Thisprocessisrepeateduntilthetreeisreducedtoasinglenode,oruntilnomoretemplatesmatch.Thesequenceofmachineinstructionsgeneratedastheinputtreeisreducedtoasinglenodeconstitutestheoutputofthetree-translationschemeonthegiveninputtree.Theprocessofspecifyingacodegeneratorbecomessimilartothatofus-ingasyntax-directedtranslationschemetospecifyatranslator.Wewriteatree-translationschemetodescribetheinstructionsetofatargetmachine.Inpractice,wewouldliketo\fndaschemethatcausesaminimal-costinstructionsequencetobegeneratedforeachinputtree.Severaltoolsareavailabletohelpbuildacodegeneratorautomaticallyfromatree-translationscheme.Example8.20:Letususethetree-translationschemeinFig.8.20togeneratecodefortheinputtreeinFig.8.19.Supposethatthe\frstruleisappliedtoloadtheconstantCaintoregisterR0:1)R0 fLDR0,#agCaThelabeloftheleftmostleafthenchangesfromCatoR0andtheinstructionLDR0,#aisgenerated.Theseventhrulenowmatchestheleftmostsubtreewithrootlabeled+:7)R0 fADDR0,R0,SPg+R0RSPUsingthisrule,werewritethissubtreeasasinglenodelabeledR0andgeneratetheinstructionADDR0,R0,SP.NowthetreelookslikeR0RSPCi+ind=+indC1Mb+8.9.INSTRUCTIONSELECTIONBYTREEREWRITING561fLDRi,a(Rj)g Ri5)fST*Ri,Rjg M4)fSTx,RigMRi6)Ri fADDRi,Ri,a(Rj)g7)Ri fADDRi,Ri,Rjg8) fINCRig fLDRi,#agRi1)CaRi fLDRi,xg3)Mx2)Ri+RiRjMx=+RiC1RjCa+indRi+=indRiRjCa+indRjFigure8.20:Tree-rewritingrulesforsometarget-machineinstructions562CHAPTER8.CODEGENERATIONAtthispoint,wecouldapplyrule(5)toreducethesubtreeind+CiRSPtoasinglenodelabeled,say,R1.Wecouldalsouserule(6)toreducethelargersubtree+ind+CiRSPR0toasinglenodelabeledR0andgeneratetheinstructionADDR0,R0,i(SP).Assumingthatitismoree\u000ecienttouseasingleinstructiontocomputethelargersubtreeratherthanthesmallerone,wechooserule(6)toget=+MbC1indR0Intherightsubtree,rule(2)appliestotheleafMb.ItgeneratesaninstructiontoloadbintoregisterR1,say.Now,usingrule(8)wecanmatchthesubtree+R1C1andgeneratetheincrementinstructionINCR1.Atthispoint,theinputtreehasbeenreducedto=R1indR0Thisremainingtreeismatchedbyrule(4),whichreducesthetreetoasinglenodeandgeneratestheinstructionST*R0,R1.Wegeneratethefollowingcodesequence:LDR0,#aADDR0,R0,SPADDR0,R0,i(SP)LDR1,bINCR1ST*R0,R18.9.INSTRUCTIONSELECTIONBYTREEREWRITING563intheprocessofreducingthetreetoasinglenode.2Inordertoimplementthetree-reductionprocessinExample8.18,wemustaddresssomeissuesrelatedtotree-patternmatching:\u000fHowistree-patternmatchingtobedone?Thee\u000eciencyofthecode-generationprocess(atcompiletime)dependsonthee\u000eciencyofthetree-matchingalgorithm.\u000fWhatdowedoifmorethanonetemplatematchesatagiventime?Thee\u000eciencyofthegeneratedcode(atruntime)maydependontheorderinwhichtemplatesarematched,sincedi\u000berentmatchsequenceswillingeneralleadtodi\u000berenttarget-machinecodesequences,somemoree\u000ecientthanothers.Ifnotemplatematches,thenthecode-generationprocessblocks.Attheotherextreme,weneedtoguardagainstthepossibilityofasinglenodebeingrewritteninde\fnitely,generatinganin\fnitesequenceofregistermoveinstruc-tionsoranin\fnitesequenceofloadsandstores.Topreventblocking,weassumethateachoperatorintheintermediatecodecanbeimplementedbyoneormoretarget-machineinstructions.Wefurtherassumethatthereareenoughregisterstocomputeeachtreenodebyitself.Then,nomatterhowthetreematchingproceeds,theremainingtreecanalwaysbetranslatedintotarget-machineinstructions.8.9.3PatternMatchingbyParsingBeforeconsideringgeneraltreematching,weconsideraspecializedapproachthatusesanLRparsertodothepatternmatching.Theinputtreecanbetreatedasastringbyusingitspre\fxrepresentation.Forexample,thepre\fxrepresentationforthetreeinFig.8.19is=ind++CaRSPind+CiRSP+MbC1Thetree-translationschemecanbeconvertedintoasyntax-directedtrans-lationschemebyreplacingthetree-rewritingruleswiththeproductionsofacontext-freegrammarinwhichtherightsidesarepre\fxrepresentationsoftheinstructiontemplates.Example8.21:Thesyntax-directedtranslationschemeinFig.8.21isbasedonthetree-translationschemeinFig.8.20.ThenonterminalsoftheunderlyinggrammarareRandM.Theterminalmrepresentsaspeci\fcmemorylocation,suchasthelocationfortheglobalvariablebinExample8.18.TheproductionM!minRule(10)canbethoughtofasmatchingMwithmpriortousingoneofthetemplatesinvolvingM.Similarly,weintroduceaterminalspforregisterSPandaddtheproductionR!sp.Finally,terminalcrepresentsconstants.Usingtheseterminals,thestringfortheinputtreeinFig.8.19is564CHAPTER8.CODEGENERATION1)Ri!cafLDRi,#ag2)Ri!MxfLDRi,xg3)M!=MxRifSTx,Rig4)M!=indRiRjfST*Ri,Rjg5)Ri!ind+caRjfLDRi,a(Rj)g6)Ri!+Riind+caRjfADDRi,Ri,a(Rj)g7)Ri!+RiRjfADDRi,Ri,Rjg8)Ri!+Ric1fINCRig9)R!sp10)M!mFigure8.21:Syntax-directedtranslationschemeconstructedfromFig.8.20=ind++caspind+cisp+mbc12FromtheproductionsofthetranslationschemewebuildanLRparserusingoneoftheLR-parserconstructiontechniquesofChapter4.Thetargetcodeisgeneratedbyemittingthemachineinstructioncorrespondingtoeachreduction.Acode-generationgrammarisusuallyhighlyambiguous,andsomecareneedstobegiventohowtheparsing-actioncon\rictsareresolvedwhentheparserisconstructed.Intheabsenceofcostinformation,ageneralruleistofavorlargerreductionsoversmallerones.Thismeansthatinareduce-reducecon\rict,thelongerreductionisfavored;inashift-reducecon\rict,theshiftmoveischosen.This\\maximalmunch\"approachcausesalargernumberofoperationstobeperformedwithasinglemachineinstruction.Therearesomebene\ftstousingLRparsingincodegeneration.First,theparsingmethodise\u000ecientandwellunderstood,soreliableande\u000ecientcodegeneratorscanbeproducedusingthealgorithmsdescribedinChapter4.Second,itisrelativelyeasytoretargettheresultingcodegenerator;acodeselectorforanewmachinecanbeconstructedbywritingagrammartodescribetheinstructionsofthenewmachine.Third,thethecodegeneratedcanbemademoree\u000ecientbyaddingspecial-caseproductionstotakeadvantageofmachineidioms.However,therearesomechallengesaswell.Aleft-to-rightorderofevalua-tionis\fxedbytheparsingmethod.Also,forsomemachineswithlargenumbersofaddressingmodes,themachine-descriptiongrammarandresultingparsercanbecomeinordinatelylarge.Asaconsequence,specializedtechniquesareneces-sarytoencodeandprocessthemachine-descriptiongrammars.Wemustalsobecarefulthattheresultingparserdoesnotblock(hasnonextmove)whileparsinganexpressiontree,eitherbecausethegrammardoesnothandlesomeoperatorpatternsorbecausetheparserhasmadethewrongresolutionofsomeparsing-actioncon\rict.Wemustalsomakesuretheparserdoesnotgetintoan8.9.INSTRUCTIONSELECTIONBYTREEREWRITING565in\fniteloopofreductionsofproductionswithsinglesymbolsontherightside.Theloopingproblemcanbesolvedusingastate-splittingtechniqueatthetimetheparsertablesaregenerated.8.9.4RoutinesforSemanticCheckingInacode-generationtranslationscheme,thesameattributesappearasinaninputtree,butoftenwithrestrictionsonwhatvaluesthesubscriptscanhave.Forexample,amachineinstructionmayrequirethatanattributevaluefallinacertainrangeorthatthevaluesoftwoattributesberelated.Theserestrictionsonattributevaluescanbespeci\fedaspredicatesthatareinvokedbeforeareductionismade.Infact,thegeneraluseofsemanticactionsandpredicatescanprovidegreater\rexibilityandeaseofdescriptionthanapurelygrammaticalspeci\fcationofacodegenerator.Generictemplatescanbeusedtorepresentclassesofinstructionsandthesemanticactionscanthenbeusedtopickinstructionsforspeci\fccases.Forexample,twoformsoftheadditioninstructioncanberepresentedwithonetemplate:Ri ADDRi,Ri,#agelseINCRifif(a=1)+CaRiParsing-actioncon\rictscanberesolvedbydisambiguatingpredicatesthatcanallowdi\u000berentselectionstrategiestobeusedindi\u000berentcontexts.Asmallerdescriptionofatargetmachineispossiblebecausecertainaspectsofthemachinearchitecture,suchasaddressingmodes,canbefactoredintotheattributes.Thecomplicationinthisapproachisthatitmaybecomedi\u000eculttoverifytheaccuracyofthetranslationschemeasafaithfuldescriptionofthetargetmachine,althoughthisproblemissharedtosomedegreebyallcodegenerators.8.9.5GeneralTreeMatchingTheLR-parsingapproachtopatternmatchingbasedonpre\fxrepresentationsfavorstheleftoperandofabinaryoperator.Inapre\fxrepresentationopE1E2,thelimited-lookaheadLRparsingdecisionsmustbemadeonthebasisofsomepre\fxofE1,sinceE1canbearbitrarilylong.Thus,patternmatchingcanmissnuancesofthetarget-instructionsetthatareduetorightoperands.Insteadpre\fxrepresentation,wecoulduseapost\fxrepresentation.But,thenanLR-parsingapproachtopatternmatchingwouldfavortherightoper-and.Forahand-writtencodegenerator,wecanusetreetemplates,asinFig.8.20,asaguideandwriteanad-hocmatcher.Forexample,iftherootoftheinputtreeislabeledind,thentheonlypatternthatcouldmatchisforrule(5);otherwise,iftherootislabeled+,thenthepatternsthatcouldmatchareforrules(6-8).566CHAPTER8.CODEGENERATIONForacode-generatorgenerator,weneedageneraltree-matchingalgorithm.Ane\u000ecienttop-downalgorithmcanbedevelopedbyextendingthestring-pattern-matchingtechniquesofChapter3.Theideaistorepresenteachtem-plateasasetofstrings,whereastringcorrespondstoapathfromtheroottoaleafinthetemplate.Wetreatalloperandsequallybyincludingthepositionnumberofachild,fromlefttoright,inthestrings.Example8.22:Inbuildingthesetofstringsforaninstructionset,weshalldropthesubscripts,sincepatternmatchingisbasedontheattributesalone,notontheirvalues.ThetemplatesinFig.8.22havethefollowingsetofstringsfromtheroottoaleaf:C+1R+2ind1+1C+2ind1+2R+2RThestringCrepresentsthetemplatewithCattheroot.Thestring+1Rrepresentsthe+anditsleftoperandRinthetwotemplatesthathave+attheroot.2 Ri RiRiCa +Riind+CaRj+RiRjFigure8.22:AninstructionsetfortreematchingUsingsetsofstringsasinExample8.22,atree-patternmatchercanbecon-structedbyusingtechniquesfore\u000ecientlymatchingmultiplestringsinparallel.Inpractice,thetree-rewritingprocesscanbeimplementedbyrunningthetree-patternmatcherduringadepth-\frsttraversaloftheinputtreeandper-formingthereductionsasthenodesarevisitedforthelasttime.Instructioncostscanbetakenintoaccountbyassociatingwitheachtree-rewritingrulethecostofthesequenceofmachineinstructionsgeneratedifthatruleisapplied.InSection8.11,wediscussadynamicprogrammingalgorithmthatcanbeusedinconjunctionwithtree-patternmatching.Byrunningthedynamicprogrammingalgorithmconcurrently,wecanselectanoptimalsequenceofmatchesusingthecostinformationassociatedwitheachrule.Wemayneedtodeferdecidinguponamatchuntilthecostofallalternativesisknown.Usingthisapproach,asmall,e\u000ecientcodegeneratorcan8.10.OPTIMALCODEGENERATIONFOREXPRESSIONS567beconstructedquicklyfromatree-rewritingscheme.Moreover,thedynamicprogrammingalgorithmfreesthecode-generatordesignerfromhavingtoresolvecon\rictingmatchesordecideuponanorderfortheevaluation.8.9.6ExercisesforSection8.9Exercise8.9.1:Constructsyntaxtreesforeachofthefollowingstatementsassumingallnonconstantoperandsareinmemorylocations:a)x=a*b+c*d;b)x[i]=y[j]*z[k];c)x=x+1;Usethetree-rewritingschemeinFig.8.20togeneratecodeforeachstatement.Exercise8.9.2:RepeatExercise8.9.1aboveusingthesyntax-directedtrans-lationschemeinFig.8.21inplaceofthetree-rewritingscheme.!Exercise8.9.3:Extendthetree-rewritingschemeinFig.8.20toapplytowhile-statements.!Exercise8.9.4:HowwouldyouextendtreerewritingtoapplytoDAG's?8.10OptimalCodeGenerationforExpressionsWecanchooseregistersoptimallywhenabasicblockconsistsofasingleexpres-sionevaluation,orifweacceptthatitissu\u000ecienttogeneratecodeforablockoneexpressionatatime.Inthefollowingalgorithm,weintroduceanumberingschemeforthenodesofanexpressiontree(asyntaxtreeforanexpression)thatallowsustogenerateoptimalcodeforanexpressiontreewhenthereisa\fxednumberofregisterswithwhichtoevaluatetheexpression.8.10.1ErshovNumbersWebeginbyassigningtoeachnodeofanexpressiontreeanumberthattellshowmanyregistersareneededtoevaluatethatnodewithoutstoringanytem-poraries.ThesenumbersaresometimescalledErshovnumbers,afterA.Ershov,whousedasimilarschemeformachineswithasinglearithmeticregister.Forourmachinemodel,therulesare:1.Labelallleaves1.2.Thelabelofaninteriornodewithonechildisthelabelofitschild.3.Thelabelofaninteriornodewithtwochildrenis568CHAPTER8.CODEGENERATION(a)Thelargerofthelabelsofitschildren,ifthoselabelsaredi\u000berent.(b)Oneplusthelabelofitschildrenifthelabelsarethesame.Example8.23:InFig.8.23weseeanexpressiontree(withoperatorsomitted)thatmightbethetreeforexpression(a\u0000b)+e\u0002(c+d)orthethree-addresscode:t1=a-bt2=c+dt3=e*t2t4=t1+t3Eachofthe\fveleavesislabeled1byrule(1).Then,wecanlabeltheinteriornodefort1=a-b,sincebothofitschildrenarelabeled.Rule(3b)applies,soitgetslabelonemorethanthelabelsofitschildren,thatis,2.Thesameholdsfortheinteriornodefort2=c+d.321121211bt3aet2ct4dt1Figure8.23:AtreelabeledwithErshovnumbersNow,wecanworkonthenodefort3=e*t2.Itschildrenhavelabels1and2,sothelabelofthenodefort3isthemaximum,2,byrule(3a).Finally,theroot,thenodefort4=t1+t3,hastwochildrenwithlabel2,andthereforeitgetslabel3.28.10.2GeneratingCodeFromLabeledExpressionTreesItcanbeprovedthat,inourmachinemodel,wherealloperandsmustbeinregisters,andregisterscanbeusedbybothanoperandandtheresultofanoperation,thelabelofanodeisthefewestregisterswithwhichtheexpressioncanbeevaluatedusingnostoresoftemporaryresults.Sinceinthismodel,weareforcedtoloadeachoperand,andweareforcedtocomputetheresultcor-respondingtoeachinteriornode,theonlythingthatcanmakethegeneratedcodeinferiortotheoptimalcodeisifthereareunnecessarystoresoftempo-raries.Theargumentforthisclaimisembeddedinthefollowingalgorithmforgeneratingcodewithnostoresoftemporaries,usinganumberofregistersequaltothelabeloftheroot.Algorithm8.24:Generatingcodefromalabeledexpressiontree.8.10.OPTIMALCODEGENERATIONFOREXPRESSIONS569INPUT:Alabeledtreewitheachoperandappearingonce(thatis,nocommonsubexpressions).OUTPUT:Anoptimalsequenceofmachineinstructionstoevaluatetherootintoaregister.METHOD:Thefollowingisarecursivealgorithmtogeneratethemachinecode.Thestepsbelowareapplied,startingattherootofthetree.Ifthealgorithmisappliedtoanodewithlabelk,thenonlykregisterswillbeused.However,thereisa\\base\"b\u00151fortheregistersusedsothattheactualregistersusedareRb;Rb+1;:::;Rb+k\u00001.TheresultalwaysappearsinRb+k\u00001.1.Togeneratemachinecodeforaninteriornodewithlabelkandtwochil-drenwithequallabels(whichmustbek\u00001)dothefollowing:(a)Recursivelygeneratecodefortherightchild,usingbaseb+1.TheresultoftherightchildappearsinregisterRb+k\u00001.(b)Recursivelygeneratecodefortheleftchild,usingbaseb;theresultappearsinRb+k\u00002.(c)GeneratetheinstructionOPRb+k\u00001;Rb+k\u00002;Rb+k\u00001,whereOPistheappropriateoperationfortheinteriornodeinquestion.2.Supposewehaveaninteriornodewithlabelkandchildrenwithunequallabels.Thenoneofthechildren,whichwe'llcallthe\\big\"child,haslabelk,andtheotherchild,the\\little\"child,hassomelabelm<k.Dothefollowingtogeneratecodeforthisinteriornode,usingbaseb:(a)Recursivelygeneratecodeforthebigchild,usingbaseb;theresultappearsinregisterRb+k\u00001.(b)Recursivelygeneratecodeforthelittlechild,usingbaseb;theresultappearsinregisterRb+m\u00001.Notethatsincem<k,neitherRb+k\u00001noranyhigher-numberedregisterisused.(c)GeneratetheinstructionOPRb+k\u00001;Rb+m\u00001;Rb+k\u00001ortheinstruc-tionOPRb+k\u00001;Rb+k\u00001;Rb+m\u00001,dependingonwhetherthebigchildistherightorleftchild,respectively.3.Foraleafrepresentingoperandx,ifthebaseisbgeneratetheinstructionLDRb;x.2Example8.25:LetusapplyAlgorithm8.24tothetreeofFig.8.23.Sincethelabeloftherootis3,theresultwillappearinR3,andonlyR1,R2,andR3willbeused.Thebasefortherootisb=1.Sincetheroothaschildrenofequallabels,wegeneratecodefortherightchild\frst,withbase2.Whenwegeneratecodefortherightchildoftheroot,labeledt3,we\fndthebigchildistherightchildandthelittlechildistheleftchild.Wethusgeneratecodefortherightchild\frst,withb=2.Applyingtherulesforequal-labeledchildrenandleaves,wegeneratethefollowingcodeforthenodelabeledt2:570CHAPTER8.CODEGENERATIONLDR3,dLDR2,cADDR3,R2,R3Next,wegeneratecodefortheleftchildoftherightchildoftheroot;thisnodeistheleaflabelede.Sinceb=2,theproperinstructionisLDR2,eNowwecancompletethecodefortherightchildoftherootbyaddingtheinstructionMULR3,R2,R3Thealgorithmproceedstogeneratecodefortheleftchildoftheroot,leavingtheresultinR2,andwithbase1.ThecompletesequenceofinstructionsisshowninFig.8.24.2LDR3,dLDR2,cADDR3,R2,R3LDR2,eMULR3,R2,R3LDR2,bLDR1,aSUBR2,R1,R2ADDR3,R2,R3Figure8.24:Optimalthree-registercodeforthetreeofFig.8.238.10.3EvaluatingExpressionswithanInsu\u000ecientSupplyofRegistersWhentherearefewerregistersavailablethanthelabeloftherootofthetree,wecannotapplyAlgorithm8.24directly.Weneedtointroducesomestoreinstructionsthatspillvaluesofsubtreesintomemory,andwethenneedtoloadthosevaluesbackintoregistersasneeded.Hereisthemodi\fedalgorithmthattakesintoaccountalimitationonthenumberofregisters.Algorithm8.26:Generatingcodefromalabeledexpressiontree.INPUT:Alabeledtreewitheachoperandappearingonce(i.e.,nocommonsubexpressions)andanumberofregistersr\u00152.OUTPUT:Anoptimalsequenceofmachineinstructionstoevaluatetherootintoaregister,usingnomorethanrregisters,whichweassumeareR1;R2;:::;Rr.8.10.OPTIMALCODEGENERATIONFOREXPRESSIONS571METHOD:Applythefollowingrecursivealgorithm,startingattherootofthetree,withbaseb=1.ForanodeNwithlabelrorless,thealgorithmisexactlythesameasAlgorithm8.24,andweshallnotrepeatthosestepshere.However,forinteriornodeswithalabelk>r,weneedtoworkoneachsideofthetreeseparatelyandstoretheresultofthelargersubtree.ThatresultisbroughtbackfrommemoryjustbeforenodeNisevaluated,andthe\fnalstepwilltakeplaceinregistersRr\u00001andRr.Themodi\fcationstothebasicalgorithmareasfollows:1.NodeNhasatleastonechildwithlabelrorgreater.Pickthelargerchild(oreitheriftheirlabelsarethesame)tobethe\\big\"childandlettheotherchildbethe\\little\"child.2.Recursivelygeneratecodeforthebigchild,usingbaseb=1.TheresultofthisevaluationwillappearinregisterRr.3.GeneratethemachineinstructionSTtk;Rr,wheretkisatemporaryvari-ableusedfortemporaryresultsusedtohelpevaluatenodeswithlabelk.4.Generatecodeforthelittlechildasfollows.Ifthelittlechildhaslabelrorgreater,pickbaseb=1.Ifthelabelofthelittlechildisj<r,thenpickb=r\u0000j.Thenrecursivelyapplythisalgorithmtothelittlechild;theresultappearsinRr.5.GeneratetheinstructionLDRr\u00001;tk.6.IfthebigchildistherightchildofN,thengeneratetheinstructionOPRr;Rr;Rr\u00001.Ifthebigchildistheleftchild,generateOPRr;Rr\u00001;Rr.2Example8.27:LetusrevisittheexpressionrepresentedbyFig.8.23,butnowassumethatr=2;thatis,onlyregistersR1andR2areavailabletoholdtem-porariesusedintheevaluationofexpressions.WhenweapplyAlgorithm8.26toFig.8.23,weseethattheroot,withlabel3,hasalabelthatislargerthanr=2.Thus,weneedtoidentifyoneofthechildrenasthe\\big\"child.Sincetheyhaveequallabels,eitherwoulddo.Supposewepicktherightchildasthebigchild.Sincethelabelofthebigchildoftherootis2,thereareenoughregisters.WethusapplyAlgorithm8.24tothissubtree,withb=1andtworegisters.TheresultlooksverymuchlikethecodewegeneratedinFig.8.24,butwithregistersR1andR2inplaceofR2andR3.ThiscodeisLDR2,dLDR1,cADDR2,R1,R2LDR1,eMULR2,R1,R2572CHAPTER8.CODEGENERATIONNow,sinceweneedbothregistersfortheleftchildoftheroot,weneedtogeneratetheinstructionSTt3,R2Next,theleftchildoftherootishandled.Again,thenumberofregistersissu\u000ecientforthischild,andthecodeisLDR2,bLDR1,aSUBR2,R1,R2Finally,wereloadthetemporarythatholdstherightchildoftherootwiththeinstructionLDR1,t3andexecutetheoperationattherootofthetreewiththeinstructionADDR2,R2,R1ThecompletesequenceofinstructionsisshowninFig.8.25.2LDR2,dLDR1,cADDR2,R1,R2LDR1,eMULR2,R1,R2STt3,R2LDR2,bLDR1,aSUBR2,R1,R2LDR1,t3ADDR2,R2,R1Figure8.25:Optimalthree-registercodeforthetreeofFig.8.23,usingonlytworegisters8.10.4ExercisesforSection8.10Exercise8.10.1:ComputeErshovnumbersforthefollowingexpressions:a)a=(b+c)\u0000d\u0003(e+f).b)a+b\u0003\u0000c\u0003(d+e)\u0001.8.11.DYNAMICPROGRAMMINGCODE-GENERATION573c)(\u0000a+\u0003p)\u0003\u0000(b\u0000\u0003q)=(\u0000c+\u0003r)\u0001.Exercise8.10.2:GenerateoptimalcodeusingtworegistersforeachoftheexpressionsofExercise8.10.1.Exercise8.10.3:GenerateoptimalcodeusingthreeregistersforeachoftheexpressionsofExercise8.10.1.!Exercise8.10.4:GeneralizethecomputationofErshovnumberstoexpressiontreeswithinteriornodeswiththreeormorechildren.!Exercise8.10.5:Anassignmenttoanarrayelement,suchasa[i]=x,ap-pearstobeanoperatorwiththreeoperands:a,i,andx.Howwouldyoumodifythetree-labelingschemetogenerateoptimalcodeforthismachinemodel?!Exercise8.10.6:TheoriginalErshovnumberswereusedforamachinethatallowedtherightoperandofanexpressiontobeinmemory,ratherthanaregister.Howwouldyoumodifythetree-labelingschemetogenerateoptimalcodeforthismachinemodel?!Exercise8.10.7:Somemachinesrequiretworegistersforcertainsingle-pre-cisionvalues.Supposethattheresultofamultiplicationofsingle-registerquan-titiesrequirestwoconsecutiveregisters,andwhenwedividea=b,thevalueofamustbeheldintwoconsecutiveregisters.Howwouldyoumodifythetree-labelingschemetogenerateoptimalcodeforthismachinemodel?8.11DynamicProgrammingCode-GenerationAlgorithm8.26inSection8.10producesoptimalcodefromanexpressiontreeusinganamountoftimethatisalinearfunctionofthesizeofthetree.Thisprocedureworksformachinesinwhichallcomputationisdoneinregistersandinwhichinstructionsconsistofanoperatorappliedtotworegistersortoaregisterandamemorylocation.Analgorithmbasedontheprincipleofdynamicprogrammingcanbeusedtoextendtheclassofmachinesforwhichoptimalcodecanbegeneratedfromexpressiontreesinlineartime.Thedynamicprogrammingalgorithmappliestoabroadclassofregistermachineswithcomplexinstructionsets.ThedynamicprogrammingalgorithmcanbeusedtogeneratecodeforanymachinewithrinterchangeableregistersR0;R1;:::;Rr\u00001andload,store,andoperationinstructions.Forsimplicity,weassumeeveryinstructioncostsoneunit,althoughthedynamicprogrammingalgorithmcaneasilybemodi\fedtoworkevenifeachinstructionhasitsowncost.574CHAPTER8.CODEGENERATION8.11.1ContiguousEvaluationThedynamicprogrammingalgorithmpartitionstheproblemofgeneratingop-timalcodeforanexpressionintothesubproblemsofgeneratingoptimalcodeforthesubexpressionsofthegivenexpression.Asasimpleexample,consideranexpressionEoftheformE1+E2.AnoptimalprogramforEisformedbycombiningoptimalprogramsforE1andE2,inoneortheotherorder,followedbycodetoevaluatetheoperator+.ThesubproblemsofgeneratingoptimalcodeforE1andE2aresolvedsimilarly.Anoptimalprogramproducedbythedynamicprogrammingalgorithmhasanimportantproperty.ItevaluatesanexpressionE=E1opE2\\contigu-ously.\"WecanappreciatewhatthismeansbylookingatthesyntaxtreeTforE:T1T2opHereT1andT2aretreesforE1andE2,respectively.WesayaprogramPevaluatesatreeTcontiguouslyifit\frstevaluatesthosesubtreesofTthatneedtobecomputedintomemory.Then,itevaluatestheremainderofTeitherintheorderT1,T2,andthentheroot,orintheorderT2,T1,andthentheroot,ineithercaseusingthepreviouslycomputedvaluesfrommemorywhenevernecessary.Asanexampleofnoncontiguousevaluation,Pmight\frstevaluatepartofT1leavingthevalueinaregister(insteadofmemory),nextevaluateT2,andthenreturntoevaluatetherestofT1.Fortheregistermachineinthissection,wecanprovethatgivenanymach-ine-languageprogramPtoevaluateanexpressiontreeT,wecan\fndanequiv-alentprogramP0suchthat1.P0isofnohighercostthanP,2.P0usesnomoreregistersthanP,and3.P0evaluatesthetreecontiguously.Thisresultimpliesthateveryexpressiontreecanbeevaluatedoptimallybyacontiguousprogram.Bywayofcontrast,machineswitheven-oddregisterpairsdonotalwayshaveoptimalcontiguousevaluations;thex86architectureusesregisterpairsformul-tiplicationanddivision.Forsuchmachines,wecangiveexamplesofexpressiontreesinwhichanoptimalmachinelanguageprogrammust\frstevaluateintoaregisteraportionoftheleftsubtreeoftheroot,thenaportionoftherightsubtree,thenanotherpartoftheleftsubtree,thenanotherpartoftheright,andsoon.Thistypeofoscillationisunnecessaryforanoptimalevaluationofanyexpressiontreeusingthemachineinthissection.8.11.DYNAMICPROGRAMMINGCODE-GENERATION575Thecontiguousevaluationpropertyde\fnedaboveensuresthatforanyex-pressiontreeTtherealwaysexistsanoptimalprogramthatconsistsofoptimalprogramsforsubtreesoftheroot,followedbyaninstructiontoevaluatetheroot.ThispropertyallowsustouseadynamicprogrammingalgorithmtogenerateanoptimalprogramforT.8.11.2TheDynamicProgrammingAlgorithmThedynamicprogrammingalgorithmproceedsinthreephases(supposethetargetmachinehasrregisters):1.Computebottom-upforeachnodenoftheexpressiontreeTanarrayCofcosts,inwhichtheithcomponentC[i]istheoptimalcostofcomputingthesubtreeSrootedatnintoaregister,assumingiregistersareavailableforthecomputation,for1\u0014i\u0014r.2.TraverseT,usingthecostvectorstodeterminewhichsubtreesofTmustbecomputedintomemory.3.Traverseeachtreeusingthecostvectorsandassociatedinstructionstogeneratethe\fnaltargetcode.Thecodeforthesubtreescomputedintomemorylocationsisgenerated\frst.Eachofthesephasescanbeimplementedtorunintimelinearlyproportionaltothesizeoftheexpressiontree.ThecostofcomputinganodenincludeswhateverloadsandstoresarenecessarytoevaluateSinthegivennumberofregisters.ItalsoincludesthecostofcomputingtheoperatorattherootofS.ThezerothcomponentofthecostvectoristheoptimalcostofcomputingthesubtreeSintomemory.ThecontiguousevaluationpropertyensuresthatanoptimalprogramforScanbegeneratedbyconsideringcombinationsofoptimalprogramsonlyforthesubtreesoftherootofS.Thisrestrictionreducesthenumberofcasesthatneedtobeconsidered.InordertocomputethecostsC[i]atnoden,weviewtheinstructionsastree-rewritingrules,asinSection8.9.ConsidereachtemplateEthatmatchestheinputtreeatnoden.Byexaminingthecostvectorsatthecorrespondingdescendantsofn,determinethecostsofevaluatingtheoperandsattheleavesofE.ForthoseoperandsofEthatareregisters,considerallpossibleordersinwhichthecorrespondingsubtreesofTcanbeevaluatedintoregisters.Ineachordering,the\frstsubtreecorrespondingtoaregisteroperandcanbeevaluatedusingiavailableregisters,thesecondusingi\u00001registers,andsoon.Toaccountfornoden,addinthecostoftheinstructionassociatedwiththetemplateE.ThevalueC[i]isthentheminimumcostoverallpossibleorders.ThecostvectorsfortheentiretreeTcanbecomputedbottomupintimelinearlyproportionaltothenumberofnodesinT.ItisconvenienttostoreateachnodetheinstructionusedtoachievethebestcostforC[i]foreachvalue576CHAPTER8.CODEGENERATIONofi.ThesmallestcostinthevectorfortherootofTgivestheminimumcostofevaluatingT.Example8.28:ConsideramachinehavingtworegistersR0andR1,andthefollowinginstructions,eachofunitcost:LDRi,Mj//Ri=MjopRi,Ri,Rj//Ri=RiopRjopRi,Ri,Mj//Ri=RiopMjLDRi,Rj//Ri=RjSTMi,Rj//Mi=RjIntheseinstructions,RiiseitherR0orR1,andMjisamemorylocation.Theoperatoroprepresentsanyarithmeticoperator.LetusapplythedynamicprogrammingalgorithmtogenerateoptimalcodeforthesyntaxtreeinFig.8.26.Inthe\frstphase,wecomputethecostvectorsshownateachnode.Toillustratethiscostcomputation,considerthecostvectorattheleafa.C[0],thecostofcomputingaintomemory,is0sinceitisalreadythere.C[1],thecostofcomputingaintoaregister,is1sincewecanloaditintoaregisterwiththeinstructionLDR0,a.C[2],thecostofloadingaintoaregisterwithtworegistersavailable,isthesameasthatwithoneregisteravailable.Thecostvectoratleafaistherefore(0;1;1).(8;8;7)(3;2;2)(0;1;1)(5;5;4)(0;1;1)(0;1;1)(3;2;2)(0;1;1)(0;1;1)b*ac/-de+Figure8.26:Syntaxtreefor(a-b)+c*(d/e)withcostvectorateachnodeConsiderthecostvectorattheroot.We\frstdeterminetheminimumcostofcomputingtherootwithoneandtworegistersavailable.ThemachineinstructionADDR0,R0,Mmatchestheroot,becausetherootislabeledwiththeoperator+.Usingthisinstruction,theminimumcostofevaluatingtherootwithoneregisteravailableistheminimumcostofcomputingitsrightsubtreeintomemory,plustheminimumcostofcomputingitsleftsubtreeintotheregister,plus1fortheinstruction.Nootherwayexists.Thecostvectorsattherightandleftchildrenoftherootshowthattheminimumcostofcomputingtherootwithoneregisteravailableis5+2+1=8.Nowconsidertheminimumcostofevaluatingtherootwithtworegistersavailable.Threecasesarisedependingonwhichinstructionisusedtocomputetherootandinwhatordertheleftandrightsubtreesoftherootareevaluated.8.11.DYNAMICPROGRAMMINGCODE-GENERATION5771.ComputetheleftsubtreewithtworegistersavailableintoregisterR0,computetherightsubtreewithoneregisteravailableintoregisterR1,andusetheinstructionADDR0,R0,R1tocomputetheroot.Thissequencehascost2+5+1=8.2.ComputetherightsubtreewithtworegistersavailableintoR1,computetheleftsubtreewithoneregisteravailableintoR0,andusetheinstructionADDR0,R0,R1.Thissequencehascost4+2+1=7.3.ComputetherightsubtreeintomemorylocationM,computetheleftsub-treewithtworegistersavailableintoregisterR0,andusetheinstructionADDR0,R0,M.Thissequencehascost5+2+1=8.Thesecondchoicegivestheminimumcost7.Theminimumcostofcomputingtherootintomemoryisdeterminedbyaddingonetotheminimumcostofcomputingtherootwithallregistersavail-able;thatis,wecomputetherootintoaregisterandthenstoretheresult.Thecostvectorattherootistherefore(8;8;7).Fromthecostvectorswecaneasilyconstructthecodesequencebymakingatraversalofthetree.FromthetreeinFig.8.26,assumingtworegistersareavailable,anoptimalcodesequenceisLDR0,c//R0=cLDR1,d//R1=dDIVR1,R1,e//R1=R1/eMULR0,R0,R1//R0=R0*R1LDR1,a//R1=aSUBR1,R1,b//R1=R1-bADDR1,R1,R0//R1=R1+R02Dynamicprogrammingtechniqueshavebeenusedinanumberofcompilers,includingthesecondversionoftheportableCcompiler,PCC2.Thetechniquefacilitatesretargetingbecauseoftheapplicabilityofthedynamicprogrammingtechniquetoabroadclassofmachines.8.11.3ExercisesforSection8.11Exercise8.11.1:Augmentthetree-rewritingschemeinFig.8.20withcosts,andusedynamicprogrammingandtreematchingtogeneratecodeforthestatementsinExercise8.9.1.!!Exercise8.11.2:HowwouldyouextenddynamicprogrammingtodooptimalcodegenerationonDAG's?578CHAPTER8.CODEGENERATION8.12SummaryofChapter8 ✦Codegenerationisthe\fnalphaseofacompiler.Thecodegeneratormapstheintermediaterepresentationproducedbythefrontend,orifthereisacodeoptimizationphasebythecodeoptimizer,intothetargetprogram. ✦Instructionselectionistheprocessofchoosingtarget-languageinstruc-tionsforeachIRstatement. ✦RegisterallocationistheprocessofdecidingwhichIRvaluestokeepinregisters.Graphcoloringisane\u000bectivetechniquefordoingregisterallocationincompilers. ✦RegisterassignmentistheprocessofdecidingwhichregistershouldholdagivenIRvalue. ✦Aretargetablecompilerisonethatcangeneratecodeformultipleinstruc-tionsets. ✦AvirtualmachineisaninterpreterforabytecodeintermediatelanguageproducedforlanguagessuchasJavaandC#. ✦ACISCmachineistypicallyatwo-addressmachinewithrelativelyfewregisters,severalregisterclasses,andvariable-lengthinstructionswithcomplexaddressingmodes. ✦ARISCmachineistypicallyathree-addressmachinewithmanyregistersinwhichoperationsaredoneinregisters. ✦Abasicblockisamaximalsequenceofconsecutivethree-addressstate-mentsinwhich\rowofcontrolcanonlyenteratthe\frststatementoftheblockandleaveatthelaststatementwithouthaltingorbranchingexceptpossiblyatthelaststatementinthebasicblock. ✦A\rowgraphisagraphicalrepresentationofaprograminwhichthenodesofthegrapharebasicblocksandtheedgesofthegraphshowhowcontrolcan\rowamongtheblocks. ✦Aloopina\rowgraphisastronglyconnectedregionwithasingleentrypointcalledtheloopentry. ✦ADAGrepresentationofabasicblockisadirectedacyclicgraphinwhichthenodesoftheDAGrepresentthestatementswithintheblockandeachchildofanodecorrespondstothestatementthatisthelastde\fnitionofanoperandusedinthestatement. ✦Peepholeoptimizationsarelocalcode-improvingtransformationsthatcanbeappliedtoaprogram,usuallythroughaslidingwindow.8.13.REFERENCESFORCHAPTER8579 ✦Instructionselectioncanbedonebyatree-rewritingprocessinwhichtreepatternscorrespondingtomachineinstructionsareusedtotileasyntaxtree.Wecanassociatecostswiththetree-rewritingrulesandapplydynamicprogrammingtoobtainanoptimaltilingforusefulclassesofmachinesandexpressions. ✦AnErshovnumbertellshowmanyregistersareneededtoevaluateanexpressionwithoutstoringanytemporaries. ✦Spillcodeisaninstructionsequencethatstoresavalueinaregisterintomemoryinordertomakeroomtoholdanothervalueinthatregister.8.13ReferencesforChapter8Manyofthetechniquescoveredinthischapterhavetheiroriginsintheearliestcompilers.Ershov'slabelingalgorithmappearedin1958[7].SethiandUllman[16]usedthislabelinginanalgorithmthattheyprovegeneratedoptimalcodeforarithmeticexpressions.AhoandJohnson[1]useddynamicprogrammingtogenerateoptimalcodeforexpressiontreesonCISCmachines.HennessyandPatterson[12]hasagooddiscussionontheevolutionofCISCandRISCmachinearchitecturesandthetradeo\u000bsinvolvedindesigningagoodinstructionset.RISCarchitecturesbecamepopularafter1990,althoughtheiroriginsgobacktocomputersliketheCDC6600,\frstdeliveredin1964.Manyofthecomputersdesignedbefore1990wereCISCmachines,butmostofthegeneral-purposecomputersinstalledafter1990arestillCISCmachinesbecausetheyarebasedontheIntel80x86architectureanditsdescendants,suchasthePentium.TheBurroughsB5000deliveredin1963wasanearlystack-basedmachine.Manyoftheheuristicsforcodegenerationproposedinthischapterhavebeenusedinvariouscompilers.Ourstrategyofallocatinga\fxednumberofregisterstoholdvariablesforthedurationofaloopwasusedintheimplementationofFortranHbyLowryandMedlock[13].E\u000ecientregisterallocationtechniqueshavealsobeenstudiedfromthetimeoftheearliestcompilers.Graphcoloringasaregister-allocationtechniquewasproposedbyCocke,Ershov[8],andSchwartz[15].Manyvariantsofgraph-coloringalgorithmshavebeenproposedforregisterallocation.OurtreatmentofgraphcoloringfollowsChaitin[3][4].ChowandHennessydescribetheirpriority-basedcoloringalgorithmforregisterallocationin[5].See[6]foradiscussionofmorerecentgraph-splittingandrewritingtechniquesforregisterallocation.Lexicalanalyzerandparsergeneratorsspurredthedevelopmentofpattern-directedinstructionselection.GlanvilleandGraham[11]usedLR-parsergen-erationtechniquesforautomatedinstructionselection.Table-drivencodegen-eratorsevolvedintoavarietyoftree-patternmatchingcode-generationtools[14].Aho,Ganapathi,andTjiang[2]combinede\u000ecienttree-patternmatching580CHAPTER8.CODEGENERATIONtechniqueswithdynamicprogramminginthecodegenerationtooltwig.Fraser,Hanson,andProebsting[10]furtherre\fnedtheseideasintheirsimplee\u000ecientcode-generatorgenerator.1.Aho,A.V.andS.C.Johnson,\\Optimalcodegenerationforexpressiontrees,\"J.ACM23:3,pp.488{501.2.Aho,A.V.,M.Ganapathi,andS.W.K.Tjiang,\\Codegenerationusingtreematchinganddynamicprogramming,\"ACMTrans.ProgrammingLanguagesandSystems11:4(1989),pp.491{516.3.Chaitin,G.J.,M.A.Auslander,A.K.Chandra,J.Cocke,M.E.Hop-kins,andP.W.Markstein,\\Registerallocationviacoloring,\"ComputerLanguages6:1(1981),pp.47{57.4.Chaitin,G.J.,\\Registerallocationandspillingviagraphcoloring,\"ACMSIGPLANNotices17:6(1982),pp.201{207.5.Chow,F.andJ.L.Hennessy,\\Thepriority-basedcoloringapproachtoregisterallocation,\"ACMTrans.ProgrammingLanguagesandSystems12:4(1990),pp.501{536.6.Cooper,K.D.andL.Torczon,EngineeringaCompiler,MorganKauf-mann,SanFranciscoCA,2004.7.Ershov,A.P.,\\Onprogrammingofarithmeticoperations,\"Comm.ACM1:8(1958),pp.3{6.Also,Comm.ACM1:9(1958),p.16.8.Ershov,A.P.,TheAlphaAutomaticProgrammingSystem,AcademicPress,NewYork,1971.9.Fischer,C.N.andR.J.LeBlanc,CraftingaCompilerwithC,Benjamin-Cummings,RedwoodCity,CA,1991.10.Fraser,C.W.,D.R.Hanson,andT.A.Proebsting,\\Engineeringasim-ple,e\u000ecientcodegeneratorgenerator,\"ACMLettersonProgrammingLanguagesandSystems1:3(1992),pp.213{226.11.Glanville,R.S.andS.L.Graham,\\Anewmethodforcompilercodegen-eration,\"Conf.Rec.FifthACMSymposiumonPrinciplesofProgrammingLanguages(1978),pp.231{240.12.Hennessy,J.L.andD.A.Patterson,ComputerArchitecture:AQuanti-tativeApproach,ThirdEdition,MorganKaufman,SanFrancisco,2003.13.Lowry,E.S.andC.W.Medlock,\\Objectcodeoptimization,\"Comm.ACM12:1(1969),pp.13{22.8.13.REFERENCESFORCHAPTER858114.Pelegri-Llopart,E.andS.L.Graham,\\Optimalcodegenerationforex-pressionstrees:anapplicationofBURStheory,\"Conf.Rec.FifteenthAn-nualACMSymposiumonPrinciplesofProgrammingLanguages(1988),pp.294{308.15.Schwartz,J.T.,OnProgramming:AnInterimReportontheSETLProject,TechnicalReport,CourantInstituteofMathematicalSciences,NewYork,1973.16.Sethi,R.andJ.D.Ullman,\\Thegenerationofoptimalcodeforarithmeticexpressions,\"J.ACM17:4(1970),pp.715{728. This page intentionally left blank Chapter9Machine-IndependentOptimizationsHigh-levellanguageconstructscanintroducesubstantialrun-timeoverheadifwenaivelytranslateeachconstructindependentlyintomachinecode.Thischapterdiscusseshowtoeliminatemanyoftheseine\u000eciencies.Eliminationofunnecessaryinstructionsinobjectcode,orthereplacementofonesequenceofinstructionsbyafastersequenceofinstructionsthatdoesthesamethingisusuallycalled\\codeimprovement\"or\\codeoptimization.\"Localcodeoptimization(codeimprovementwithinabasicblock)wasintro-ducedinSection8.5.Thischapterdealswithglobalcodeoptimization,whereimprovementstakeintoaccountwhathappensacrossbasicblocks.WebegininSection9.1withadiscussionoftheprincipalopportunitiesforcodeimprove-ment.Mostglobaloptimizationsarebasedondata-\rowanalyses,whicharealgo-rithmstogatherinformationaboutaprogram.Theresultsofdata-\rowanalysesallhavethesameform:foreachinstructionintheprogram,theyspecifysomepropertythatmustholdeverytimethatinstructionisexecuted.Theanalysesdi\u000berinthepropertiestheycompute.Forexample,aconstant-propagationanalysiscomputes,foreachpointintheprogram,andforeachvariableusedbytheprogram,whetherthatvariablehasauniqueconstantvalueatthatpoint.Thisinformationmaybeusedtoreplacevariablereferencesbyconstantvalues,forinstance.Asanotherexample,alivenessanalysisdetermines,foreachpointintheprogram,whetherthevalueheldbyaparticularvariableatthatpointissuretobeoverwrittenbeforeitisread.Ifso,wedonotneedtopreservethatvalue,eitherinaregisterorinamemorylocation.Weintroducedata-\rowanalysisinSection9.2,includingseveralimportantexamplesofthekindofinformationwegathergloballyandthenusetoimprovethecode.Section9.3introducesthegeneralideaofadata-\rowframework,ofwhichthedata-\rowanalysesinSection9.2arespecialcases.Wecanuseessentiallythesamealgorithmsforalltheseinstancesofdata-\rowanalysis,and583584CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSwecanmeasuretheperformanceofthesealgorithmsandshowtheircorrectnessonallinstances,aswell.Section9.4isanexampleofthegeneralframeworkthatdoesmorepowerfulanalysisthantheearlierexamples.Then,inSection9.5weconsiderapowerfultechnique,called\\partialredundancyelimination,\"foroptimizingtheplacementofeachexpressionevaluationintheprogram.Thesolutiontothisproblemrequiresthesolutionofavarietyofdi\u000berentdata-\rowproblems.InSection9.6wetakeupthediscoveryandanalysisofloopsinprograms.Theidenti\fcationofloopsleadstoanotherfamilyofalgorithmsforsolvingdata-\rowproblemsthatisbasedonthehierarchicalstructureoftheloopsofawell-formed(\\reducible\")program.Thisapproachtodata-\rowanalysisiscoveredinSection9.7.Finally,Section9.8useshierarchicalanalysistoeliminateinductionvariables(essentially,variablesthatcountthenumberofiterationsaroundaloop).Thiscodeimprovementisoneofthemostimportantwecanmakeforprogramswrittenincommonlyusedprogramminglanguages.9.1ThePrincipalSourcesofOptimizationAcompileroptimizationmustpreservethesemanticsoftheoriginalprogram.Exceptinveryspecialcircumstances,onceaprogrammerchoosesandimple-mentsaparticularalgorithm,thecompilercannotunderstandenoughabouttheprogramtoreplaceitwithasubstantiallydi\u000berentandmoree\u000eciental-gorithm.Acompilerknowsonlyhowtoapplyrelativelylow-levelsemantictransformations,usinggeneralfactssuchasalgebraicidentitieslikei+0=iorprogramsemanticssuchasthefactthatperformingthesameoperationonthesamevaluesyieldsthesameresult.9.1.1CausesofRedundancyTherearemanyredundantoperationsinatypicalprogram.Sometimestheredundancyisavailableatthesourcelevel.Forinstance,aprogrammermay\fnditmoredirectandconvenienttorecalculatesomeresult,leavingittothecompilertorecognizethatonlyonesuchcalculationisnecessary.Butmoreoften,theredundancyisasidee\u000bectofhavingwrittentheprograminahigh-levellanguage.Inmostlanguages(otherthanCorC++,wherepointerarithmeticisallowed),programmershavenochoicebuttorefertoelementsofanarrayor\feldsinastructurethroughaccesseslikeA[i][j]orX!f1.Asaprogramiscompiled,eachofthesehigh-leveldata-structureaccessesexpandsintoanumberoflow-levelarithmeticoperations,suchasthecomputa-tionofthelocationofthe(i;j)thelementofamatrixA.Accessestothesamedatastructureoftensharemanycommonlow-leveloperations.Programmersarenotawareoftheselow-leveloperationsandcannoteliminatetheredundan-ciesthemselves.Itis,infact,preferablefromasoftware-engineeringperspec-tivethatprogrammersonlyaccessdataelementsbytheirhigh-levelnames;the9.1.THEPRINCIPALSOURCESOFOPTIMIZATION585programsareeasiertowriteand,moreimportantly,easiertounderstandandevolve.Byhavingacompilereliminatetheredundancies,wegetthebestofbothworlds:theprogramsarebothe\u000ecientandeasytomaintain.9.1.2ARunningExample:QuicksortInthefollowing,weshalluseafragmentofasortingprogramcalledquicksorttoillustrateseveralimportantcode-improvingtransformations.TheCprograminFig.9.1isderivedfromSedgewick,1whodiscussedthehand-optimizationofsuchaprogram.Weshallnotdiscussallthesubtlealgorithmicaspectsofthisprogramhere,forexample,thefactthata[0]mustcontainthesmallestofthesortedelements,anda[max]thelargest.voidquicksort(intm,intn)/*recursivelysortsa[m]througha[n]*/{inti,j;intv,x;if(n<=m)return;/*fragmentbeginshere*/i=m-1;j=n;v=a[n];while(1){doi=i+1;while(a[i]<v);doj=j-1;while(a[j]>v);if(i>=j)break;x=a[i];a[i]=a[j];a[j]=x;/*swapa[i],a[j]*/}x=a[i];a[i]=a[n];a[n]=x;/*swapa[i],a[n]*//*fragmentendshere*/quicksort(m,j);quicksort(i+1,n);}Figure9.1:CcodeforquicksortBeforewecanoptimizeawaytheredundanciesinaddresscalculations,theaddressoperationsinaprogram\frstmustbebrokendownintolow-levelarith-meticoperationstoexposetheredundancies.Intherestofthischapter,weas-sumethattheintermediaterepresentationconsistsofthree-addressstatements,wheretemporaryvariablesareusedtoholdalltheresultsofintermediateex-pressions.IntermediatecodeforthemarkedfragmentoftheprograminFig.9.1isshowninFig.9.2.Inthisexampleweassumethatintegersoccupyfourbytes.Theassignmentx=a[i]istranslatedasinSection6.4.4intothetwothree-addressstatements586CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS(1)i=m-1(16)t7=4*i(2)j=n(17)t8=4*j(3)t1=4*n(18)t9=a[t8](4)v=a[t1](19)a[t7]=t9(5)i=i+1(20)t10=4*j(6)t2=4*i(21)a[t10]=x(7)t3=a[t2](22)goto(5)(8)ift3<vgoto(5)(23)t11=4*i(9)j=j-1(24)x=a[t11](10)t4=4*j(25)t12=4*i(11)t5=a[t4](26)t13=4*n(12)ift5>vgoto(9)(27)t14=a[t13](13)ifi>=jgoto(23)(28)a[t12]=t14(14)t6=4*i(29)t15=4*n(15)x=a[t6](30)a[t15]=xFigure9.2:Three-addresscodeforfragmentinFig.9.1t6=4*ix=a[t6]asshowninsteps(14)and(15)ofFig.9.2.Similarly,a[j]=xbecomest10=4*ja[t10]=xinsteps(20)and(21).Noticethateveryarrayaccessintheoriginalprogramtranslatesintoapairofsteps,consistingofamultiplicationandanarray-subscriptingoperation.Asaresult,thisshortprogramfragmenttranslatesintoaratherlongsequenceofthree-addressoperations.Figure9.3isthe\rowgraphfortheprograminFig.9.2.BlockB1istheentrynode.AllconditionalandunconditionaljumpstostatementsinFig.9.2havebeenreplacedinFig.9.3byjumpstotheblockofwhichthestatementsareleaders,asinSection8.4.InFig.9.3,therearethreeloops.BlocksB2andB3areloopsbythemselves.BlocksB2,B3,B4,andB5togetherformaloop,withB2theonlyentrypoint.9.1.3Semantics-PreservingTransformationsThereareanumberofwaysinwhichacompilercanimproveaprogramwithoutchangingthefunctionitcomputes.Common-subexpressionelimination,copypropagation,dead-codeelimination,andconstantfoldingarecommonexamplesofsuchfunction-preserving(orsemantics-preserving)transformations;weshallconsidereachinturn.9.1.THEPRINCIPALSOURCESOFOPTIMIZATION587 B 6 B 2 B 3 B 1 B 4 t6 = 4*i x = a[t6] t7 = 4*i t8 = 4*j t9 = a[t8] a[t7] = t9 t10 = 4*j a[t10] = x goto B 5 B 6t11 = 4*i x = a[t11] t12 = 4*i t13 = 4*n t14 = a[t13] a[t12] = t14 t15 = 4*n a[t15] = x B 2 B 3 B 2 i = m−1 j = n t1 = 4*n v = a[t1] i = i+1 t2 = 4*i t3 = a[t2] if t3<v goto j = j−1 t4 = 4*j t5 = a[t4] if t5>v goto if i>=j gotoFigure9.3:Flowgraphforthequicksortfragment588CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSFrequently,aprogramwillincludeseveralcalculationsofthesamevalue,suchasano\u000bsetinanarray.AsmentionedinSection9.1.2,someoftheseduplicatecalculationscannotbeavoidedbytheprogrammerbecausetheyliebelowthelevelofdetailaccessiblewithinthesourcelanguage.Forexample,blockB5showninFig.9.4(a)recalculates4\u0003iand4\u0003j,althoughnoneofthesecalculationswererequestedexplicitlybytheprogrammer. B 5 B 2 t6 = 4*i x = a[t6] t7 = 4*i t8 = 4*j t9 = a[t8] a[t7] = t9 t10 = 4*j a[t10] = x goto t6 = 4*i x = a[t6] t8 = 4*j t9 = a[t8] a[t6] = t9 a[t8] = x goto B B 5 2 (a) Before. (b) After.Figure9.4:Localcommon-subexpressionelimination9.1.4GlobalCommonSubexpressionsAnoccurrenceofanexpressionEiscalledacommonsubexpressionifEwaspreviouslycomputedandthevaluesofthevariablesinEhavenotchangedsincethepreviouscomputation.WeavoidrecomputingEifwecanuseitspreviouslycomputedvalue;thatis,thevariablextowhichthepreviouscomputationofEwasassignedhasnotchangedintheinterim.2Example9.1:Theassignmentstot7andt10inFig.9.4(a)computethecommonsubexpressions4\u0003iand4\u0003j,respectively.ThesestepshavebeeneliminatedinFig.9.4(b),whichusest6insteadoft7andt8insteadoft10.2Example9.2:Figure9.5showstheresultofeliminatingbothglobalandlocalcommonsubexpressionsfromblocksB5andB6inthe\rowgraphofFig.9.3.We\frstdiscussthetransformationofB5andthenmentionsomesubtletiesinvolvingarrays.Afterlocalcommonsubexpressionsareeliminated,B5stillevaluates4\u0003iand4\u0003j,asshowninFig.9.4(b).Botharecommonsubexpressions;inparticular,thethreestatements9.1.THEPRINCIPALSOURCESOFOPTIMIZATION589 B 6 B 2 B 3 B 1 B 4 B 6B 5 B 2 B 3 B 2 i = m−1 j = n t1 = 4*n v = a[t1] i = i+1 t2 = 4*i t3 = a[t2] if t3<v goto j = j−1 t4 = 4*j t5 = a[t4] if t5>v goto if i>=j goto x = t3 a[t2] = t5 x = t3 t14 = a[t1] a[t2] = t14 a[t1] = xgoto a[t4] = xFigure9.5:B5andB6aftercommon-subexpressioneliminationt8=4*jt9=a[t8]a[t8]=xinB5canbereplacedbyt9=a[t4]a[t4]=xusingt4computedinblockB3.InFig.9.5,observethatascontrolpassesfromtheevaluationof4\u0003jinB3toB5,thereisnochangetojandnochangetot4,sot4canbeusedif4\u0003jisneeded.AnothercommonsubexpressioncomestolightinB5aftert4replacest8.Thenewexpressiona[t4]correspondstothevalueofa[j]atthesourcelevel.NotonlydoesjretainitsvalueascontrolleavesB3andthenentersB5,but590CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSa[j],avaluecomputedintoatemporaryt5,doestoo,becausetherearenoassignmentstoelementsofthearrayaintheinterim.Thestatementst9=a[t4]a[t6]=t9inB5thereforecanbereplacedbya[t6]=t5Analogously,thevalueassignedtoxinblockB5ofFig.9.4(b)isseentobethesameasthevalueassignedtot3inblockB2.BlockB5inFig.9.5istheresultofeliminatingcommonsubexpressionscorrespondingtothevaluesofthesourcelevelexpressionsa[i]anda[j]fromB5inFig.9.4(b).AsimilarseriesoftransformationshasbeendonetoB6inFig.9.5.Theexpressiona[t1]inblocksB1andB6ofFig.9.5isnotconsideredacommonsubexpression,althought1canbeusedinbothplaces.AftercontrolleavesB1andbeforeitreachesB6,itcangothroughB5,wherethereareassignmentstoa.Hence,a[t1]maynothavethesamevalueonreachingB6asitdidonleavingB1,anditisnotsafetotreata[t1]asacommonsubexpression.29.1.5CopyPropagationBlockB5inFig.9.5canbefurtherimprovedbyeliminatingx,usingtwonewtransformations.Oneconcernsassignmentsoftheformu=vcalledcopystate-ments,orcopiesforshort.HadwegoneintomoredetailinExample9.2,copieswouldhavearisenmuchsooner,becausethenormalalgorithmforeliminatingcommonsubexpressionsintroducesthem,asdoseveralotheralgorithms. a = d+e b = d+e c = d+e t = d+e a = t t = d+e b = t c = t (b)(a)Figure9.6:CopiesintroducedduringcommonsubexpressioneliminationExample9.3:Inordertoeliminatethecommonsubexpressionfromthestate-mentc=d+einFig.9.6(a),wemustuseanewvariablettoholdthevalueofd+e.Thevalueofvariablet,insteadofthatoftheexpressiond+e,isassignedtocinFig.9.6(b).Sincecontrolmayreachc=d+eeitheraftertheassignmenttoaoraftertheassignmenttob,itwouldbeincorrecttoreplacec=d+ebyeitherc=aorbyc=b.29.1.THEPRINCIPALSOURCESOFOPTIMIZATION591Theideabehindthecopy-propagationtransformationistousevforu,whereverpossibleafterthecopystatementu=v.Forexample,theassignmentx=t3inblockB5ofFig.9.5isacopy.CopypropagationappliedtoB5yieldsthecodeinFig.9.7.Thischangemaynotappeartobeanimprovement,but,asweshallseeinSection9.1.6,itgivesustheopportunitytoeliminatetheassignmenttox.x=t3a[t2]=t5a[t4]=t3gotoB2Figure9.7:BasicblockB5aftercopypropagation9.1.6Dead-CodeEliminationAvariableisliveatapointinaprogramifitsvaluecanbeusedsubsequently;otherwise,itisdeadatthatpoint.Arelatedideaisdead(oruseless)code|statementsthatcomputevaluesthatnevergetused.Whiletheprogrammerisunlikelytointroduceanydeadcodeintentionally,itmayappearastheresultofprevioustransformations.Example9.4:SupposedebugissettoTRUEorFALSEatvariouspointsintheprogram,andusedinstatementslikeif(debug)print...Itmaybepossibleforthecompilertodeducethateachtimetheprogramreachesthisstatement,thevalueofdebugisFALSE.Usually,itisbecausethereisoneparticularstatementdebug=FALSEthatmustbethelastassignmenttodebugpriortoanytestsofthevalueofdebug,nomatterwhatsequenceofbranchestheprogramactuallytakes.IfcopypropagationreplacesdebugbyFALSE,thentheprintstatementisdeadbecauseitcannotbereached.Wecaneliminateboththetestandtheprintoperationfromtheobjectcode.Moregenerally,deducingatcompiletimethatthevalueofanexpressionisaconstantandusingtheconstantinsteadisknownasconstantfolding.2Oneadvantageofcopypropagationisthatitoftenturnsthecopystate-mentintodeadcode.Forexample,copypropagationfollowedbydead-codeeliminationremovestheassignmenttoxandtransformsthecodeinFig9.7into592CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSa[t2]=t5a[t4]=t3gotoB2ThiscodeisafurtherimprovementofblockB5inFig.9.5.9.1.7CodeMotionLoopsareaveryimportantplaceforoptimizations,especiallytheinnerloopswhereprogramstendtospendthebulkoftheirtime.Therunningtimeofaprogrammaybeimprovedifwedecreasethenumberofinstructionsinaninnerloop,evenifweincreasetheamountofcodeoutsidethatloop.Animportantmodi\fcationthatdecreasestheamountofcodeinaloopiscodemotion.Thistransformationtakesanexpressionthatyieldsthesameresultindependentofthenumberoftimesaloopisexecuted(aloop-invariantcomputation)andevaluatestheexpressionbeforetheloop.Notethatthenotion\\beforetheloop\"assumestheexistenceofanentryfortheloop,thatis,onebasicblocktowhichalljumpsfromoutsidetheloopgo(seeSection8.4.5).Example9.5:Evaluationoflimit\u00002isaloop-invariantcomputationinthefollowingwhile-statement:while(i<=limit-2)/*statementdoesnotchangelimit*/Codemotionwillresultintheequivalentcodet=limit-2while(i<=t)/*statementdoesnotchangelimitort*/Now,thecomputationoflimit\u00002isperformedonce,beforeweentertheloop.Previously,therewouldben+1calculationsoflimit\u00002ifweiteratedthebodyoftheloopntimes.29.1.8InductionVariablesandReductioninStrengthAnotherimportantoptimizationisto\fndinductionvariablesinloopsandoptimizetheircomputation.Avariablexissaidtobean\\inductionvariable\"ifthereisapositiveornegativeconstantcsuchthateachtimexisassigned,itsvalueincreasesbyc.Forinstance,iandt2areinductionvariablesintheloopcontainingB2ofFig.9.5.Inductionvariablescanbecomputedwithasingleincrement(additionorsubtraction)perloopiteration.Thetransformationofreplacinganexpensiveoperation,suchasmultiplication,byacheaperone,suchasaddition,isknownasstrengthreduction.Butinductionvariablesnotonlyallowussometimestoperformastrengthreduction;oftenitispossibletoeliminateallbutoneofagroupofinductionvariableswhosevaluesremaininlockstepaswegoaroundtheloop.9.1.THEPRINCIPALSOURCESOFOPTIMIZATION593 B 6 B 2 B 3 B 4 B 6B 5 B 1i = m−1 j = n t1 = 4*n v = a[t1] B 2 B 3 B 2 i = i+1 t2 = 4*i t3 = a[t2] if t3<v goto j = j−1 t5 = a[t4] if t5>v goto if i>=j goto x = t3 a[t2] = t5 x = t3 t14 = a[t1] a[t2] = t14 a[t1] = x t4 = t4−4 t4 = 4*j goto a[t4] = xFigure9.8:Strengthreductionappliedto4\u0003jinblockB3Whenprocessingloops,itisusefultowork\\inside-out\";thatis,weshallstartwiththeinnerloopsandproceedtoprogressivelylarger,surroundingloops.Thus,weshallseehowthisoptimizationappliestoourquicksortexamplebybeginningwithoneoftheinnermostloops:B3byitself.Notethatthevaluesofjandt4remaininlockstep;everytimethevalueofjdecreasesby1,thevalueoft4decreasesby4,because4\u0003jisassignedtot4.Thesevariables,jandt4,thusformagoodexampleofapairofinductionvariables.Whentherearetwoormoreinductionvariablesinaloop,itmaybepossibletogetridofallbutone.FortheinnerloopofB3inFig.9.5,wecannotgetridofeitherjort4completely;t4isusedinB3andjisusedinB4.However,wecanillustratereductioninstrengthandapartoftheprocessofinduction-variableelimination.Eventually,jwillbeeliminatedwhentheouterloopconsistingofblocksB2;B3;B4andB5isconsidered.594CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSExample9.6:Astherelationshipt4=4\u0003jsurelyholdsafterassignmenttot4inFig.9.5,andt4isnotchangedelsewhereintheinnerlooparoundB3,itfollowsthatjustafterthestatementj=j-1therelationshipt4=4\u0003j+4musthold.Wemaythereforereplacetheassignmentt4=4*jbyt4=t4-4.Theonlyproblemisthatt4doesnothaveavaluewhenweenterblockB3forthe\frsttime.Sincewemustmaintaintherelationshipt4=4\u0003jonentrytotheblockB3,weplaceaninitializationoft4attheendoftheblockwherejitselfisinitialized,shownbythedashedadditiontoblockB1inFig.9.8.Althoughwehaveaddedonemoreinstruction,whichisexecutedonceinblockB1,thereplacementofamultiplicationbyasubtractionwillspeeduptheobjectcodeifmultiplicationtakesmoretimethanadditionorsubtraction,asisthecaseonmanymachines.2 B 2 B 6B 5 B 1 B 3 t14 = a[t1] a[t2] = t14 a[t1] = t3B 2 B 4B 6 B 2 B 3 t4 = 4*j t2 = 4*i v = a[t1] t1 = 4*n j = n i = m−1 t2 = t2+4 t3 = a[t2] a[t7] = t5 a[t10] = t3 goto if t2>t4 goto t5 = a[t4] t4 = t4−4 if t5>v goto if t3<v gotoFigure9.9:Flowgraphafterinduction-variableeliminationWeconcludethissectionwithonemoreinstanceofinduction-variableelim-9.1.THEPRINCIPALSOURCESOFOPTIMIZATION595ination.ThisexampletreatsiandjinthecontextoftheouterloopcontainingB2,B3,B4,andB5.Example9.7:AfterreductioninstrengthisappliedtotheinnerloopsaroundB2andB3,theonlyuseofiandjistodeterminetheoutcomeofthetestinblockB4.Weknowthatthevaluesofiandt2satisfytherelationshipt2=4\u0003i,whilethoseofjandt4satisfytherelationshipt4=4\u0003j.Thus,thetestt2\u0015t4cansubstitutefori\u0015j.Oncethisreplacementismade,iinblockB2andjinblockB3becomedeadvariables,andtheassignmentstothemintheseblocksbecomedeadcodethatcanbeeliminated.Theresulting\rowgraphisshowninFig.9.9.2 (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) a = 1 b = 2 c = a+b d = c−a d = b+d d = a+b e = e+1 b = a+b e = c−a a = b*d b = a−d B B B B B B 1 2 5 6 3 4 ENTRY EXITFigure9.10:FlowgraphforExercise9.1.1Thecode-improvingtransformationswehavediscussedhavebeene\u000bective.InFig.9.9,thenumbersofinstructionsinblocksB2andB3havebeenreducedfrom4to3,comparedwiththeoriginal\rowgraphinFig.9.3.InB5,thenumber596CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONShasbeenreducedfrom9to3,andinB6from8to3.True,B1hasgrownfromfourinstructionstosix,butB1isexecutedonlyonceinthefragment,sothetotalrunningtimeisbarelya\u000bectedbythesizeofB1.9.1.9ExercisesforSection9.1Exercise9.1.1:Forthe\rowgraphinFig.9.10:a)Identifytheloopsofthe\rowgraph.b)Statements(1)and(2)inB1arebothcopystatements,inwhichaandbaregivenconstantvalues.Forwhichusesofaandbcanweperformcopypropagationandreplacetheseusesofvariablesbyusesofaconstant?Doso,whereverpossible.c)Identifyanyglobalcommonsubexpressionsforeachloop.d)Identifyanyinductionvariablesforeachloop.Besuretotakeintoaccountanyconstantsintroducedin(b).e)Identifyanyloop-invariantcomputationsforeachloop.Exercise9.1.2:Applythetransformationsofthissectiontothe\rowgraphofFig.8.9.Exercise9.1.3:Applythetransformationsofthissectiontoyour\rowgraphsfrom(a)Exercise8.4.1;(b)Exercise8.4.2.Exercise9.1.4:InFig.9.11isintermediatecodetocomputethedotproductoftwovectorsAandB.Optimizethiscodebyeliminatingcommonsubexpres-sions,performingreductioninstrengthoninductionvariables,andeliminatingalltheinductionvariablesyoucan.dp=0.i=0L:t1=i*8t2=A[t1]t3=i*8t4=B[t3]t5=t2*t4dp=dp+t5i=i+1ifi<ngotoLFigure9.11:Intermediatecodetocomputethedotproduct9.2.INTRODUCTIONTODATA-FLOWANALYSIS5979.2IntroductiontoData-FlowAnalysisAlltheoptimizationsintroducedinSection9.1dependondata-\rowanalysis.\\Data-\rowanalysis\"referstoabodyoftechniquesthatderiveinformationaboutthe\rowofdataalongprogramexecutionpaths.Forexample,onewaytoimplementglobalcommonsubexpressioneliminationrequiresustodeterminewhethertwotextuallyidenticalexpressionsevaluatetothesamevaluealonganypossibleexecutionpathoftheprogram.Asanotherexample,iftheresultofanassignmentisnotusedalonganysubsequentexecutionpath,thenwecaneliminatetheassignmentasdeadcode.Theseandmanyotherimportantquestionscanbeansweredbydata-\rowanalysis.9.2.1TheData-FlowAbstractionFollowingSection1.6.2,theexecutionofaprogramcanbeviewedasaseriesoftransformationsoftheprogramstate,whichconsistsofthevaluesofallthevariablesintheprogram,includingthoseassociatedwithstackframesbelowthetopoftherun-timestack.Eachexecutionofanintermediate-codestatementtransformsaninputstatetoanewoutputstate.Theinputstateisassociatedwiththeprogrampointbeforethestatementandtheoutputstateisassociatedwiththeprogrampointafterthestatement.Whenweanalyzethebehaviorofaprogram,wemustconsiderallthepos-siblesequencesofprogrampoints(\\paths\")througha\rowgraphthatthepro-gramexecutioncantake.Wethenextract,fromthepossibleprogramstatesateachpoint,theinformationweneedfortheparticulardata-\rowanalysisproblemwewanttosolve.Inmorecomplexanalyses,wemustconsiderpathsthatjumpamongthe\rowgraphsforvariousprocedures,ascallsandreturnsareexecuted.However,tobeginourstudy,weshallconcentrateonthepathsthroughasingle\rowgraphforasingleprocedure.Letusseewhatthe\rowgraphtellsusaboutthepossibleexecutionpaths.\u000fWithinonebasicblock,theprogrampointafterastatementisthesameastheprogrampointbeforethenextstatement.\u000fIfthereisanedgefromblockB1toblockB2,thentheprogrampointafterthelaststatementofB1maybefollowedimmediatelybytheprogrampointbeforethe\frststatementofB2.Thus,wemayde\fneanexecutionpath(orjustpath)frompointp1topointpntobeasequenceofpointsp1;p2;:::;pnsuchthatforeachi=1;2;:::;n\u00001,either1.piisthepointimmediatelyprecedingastatementandpi+1isthepointimmediatelyfollowingthatsamestatement,or2.piistheendofsomeblockandpi+1isthebeginningofasuccessorblock.598CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSIngeneral,thereisanin\fnitenumberofpossibleexecutionpathsthroughaprogram,andthereisno\fniteupperboundonthelengthofanexecutionpath.Programanalysessummarizeallthepossibleprogramstatesthatcanoccuratapointintheprogramwitha\fnitesetoffacts.Di\u000berentanalysesmaychoosetoabstractoutdi\u000berentinformation,andingeneral,noanalysisisnecessarilyaperfectrepresentationofthestate.Example9.8:EventhesimpleprograminFig.9.12describesanunboundednumberofexecutionpaths.Notenteringtheloopatall,theshortestcom-pleteexecutionpathconsistsoftheprogrampoints(1;2;3;4;9).Thenextshortestpathexecutesoneiterationoftheloopandconsistsofthepoints(1;2;3;4;5;6;7;8;3;4;9).Weknowthat,forexample,the\frsttimeprogrampoint(5)isexecuted,thevalueofais1duetode\fnitiond1.Wesaythatd1reachespoint(5)inthe\frstiteration.Insubsequentiterations,d3reachespoint(5)andthevalueofais243. a = 1d1 : B 4 B 3 B 2 B 1 B 4 2B (1) (2) (3) (4) (9) (5) (8) (7) (6) b = a a = 243 goto d d 2 3 : : if read()<=0 gotoFigure9.12:Exampleprogramillustratingthedata-\rowabstractionIngeneral,itisnotpossibletokeeptrackofalltheprogramstatesforallpossiblepaths.Indata-\rowanalysis,wedonotdistinguishamongthepathstakentoreachaprogrampoint.Moreover,wedonotkeeptrackofentirestates;rather,weabstractoutcertaindetails,keepingonlythedataweneedforthepurposeoftheanalysis.Twoexampleswillillustratehowthesameprogramstatesmayleadtodi\u000berentinformationabstractedatapoint.1.Tohelpusersdebugtheirprograms,wemaywishto\fndoutwhatareallthevaluesavariablemayhaveataprogrampoint,andwherethesevaluesmaybede\fned.Forinstance,wemaysummarizealltheprogramstatesatpoint(5)bysayingthatthevalueofaisoneoff1;243g,andthatitmaybede\fnedbyoneoffd1;d3g.Thede\fnitionsthatmayreachaprogrampointalongsomepathareknownasreachingde\fnitions.9.2.INTRODUCTIONTODATA-FLOWANALYSIS5992.Suppose,instead,weareinterestedinimplementingconstantfolding.Ifauseofthevariablexisreachedbyonlyonede\fnition,andthatde\fnitionassignsaconstanttox,thenwecansimplyreplacexbytheconstant.If,ontheotherhand,severalde\fnitionsofxmayreachasingleprogrampoint,thenwecannotperformconstantfoldingonx.Thus,forconstantfoldingwewishto\fndthosede\fnitionsthataretheuniquede\fnitionoftheirvariabletoreachagivenprogrampoint,nomatterwhichexecutionpathistaken.Forpoint(5)ofFig.9.12,thereisnode\fnitionthatmustbethede\fnitionofaatthatpoint,sothissetisemptyforaatpoint(5).Evenifavariablehasauniquede\fnitionatapoint,thatde\fnitionmustassignaconstanttothevariable.Thus,wemaysimplydescribecertainvariablesas\\notaconstant,\"insteadofcollectingalltheirpossiblevaluesoralltheirpossiblede\fnitions.Thus,weseethatthesameinformationmaybesummarizeddi\u000berently,de-pendingonthepurposeoftheanalysis.29.2.2TheData-FlowAnalysisSchemaIneachapplicationofdata-\rowanalysis,weassociatewitheveryprogrampointadata-\rowvaluethatrepresentsanabstractionofthesetofallpossibleprogramstatesthatcanbeobservedforthatpoint.Thesetofpossibledata-\rowvaluesisthedomainforthisapplication.Forexample,thedomainofdata-\rowvaluesforreachingde\fnitionsisthesetofallsubsetsofde\fnitionsintheprogram.Aparticulardata-\rowvalueisasetofde\fnitions,andwewanttoassociatewitheachpointintheprogramtheexactsetofde\fnitionsthatcanreachthatpoint.Asdiscussedabove,thechoiceofabstractiondependsonthegoaloftheanalysis;tobee\u000ecient,weonlykeeptrackofinformationthatisrelevant.Wedenotethedata-\rowvaluesbeforeandaftereachstatementsbyIN[s]andOUT[s],respectively.Thedata-\rowproblemisto\fndasolutiontoasetofconstraintsontheIN[s]'sandOUT[s]'s,forallstatementss.Therearetwosetsofconstraints:thosebasedonthesemanticsofthestatements(\\transferfunctions\")andthosebasedonthe\rowofcontrol.TransferFunctionsThedata-\rowvaluesbeforeandafterastatementareconstrainedbythese-manticsofthestatement.Forexample,supposeourdata-\rowanalysisinvolvesdeterminingtheconstantvalueofvariablesatpoints.Ifvariableahasvaluevbeforeexecutingstatementb=a,thenbothaandbwillhavethevaluevafterthestatement.Thisrelationshipbetweenthedata-\rowvaluesbeforeandaftertheassignmentstatementisknownasatransferfunction.Transferfunctionscomeintwo\ravors:informationmaypropagateforwardalongexecutionpaths,oritmay\rowbackwardsuptheexecutionpaths.Inaforward-\rowproblem,thetransferfunctionofastatements,whichweshall600CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSusuallydenotefs,takesthedata-\rowvaluebeforethestatementandproducesanewdata-\rowvalueafterthestatement.Thatis,OUT[s]=fs(IN[s]):Conversely,inabackward-\rowproblem,thetransferfunctionfsforstatementsconvertsadata-\rowvalueafterthestatementtoanewdata-\rowvaluebeforethestatement.Thatis,IN[s]=fs(OUT[s]):Control-FlowConstraintsThesecondsetofconstraintsondata-\rowvaluesisderivedfromthe\rowofcontrol.Withinabasicblock,control\rowissimple.IfablockBconsistsofstatementss1;s2;:::;sninthatorder,thenthecontrol-\rowvalueoutofsiisthesameasthecontrol-\rowvalueintosi+1.Thatis,IN[si+1]=OUT[si],foralli=1;2;:::;n\u00001.However,control-\rowedgesbetweenbasicblockscreatemorecomplexcon-straintsbetweenthelaststatementofonebasicblockandthe\frststatementofthefollowingblock.Forexample,ifweareinterestedincollectingallthede\fnitionsthatmayreachaprogrampoint,thenthesetofde\fnitionsreachingtheleaderstatementofabasicblockistheunionofthede\fnitionsafterthelaststatementsofeachofthepredecessorblocks.Thenextsectiongivesthedetailsofhowdata\rowsamongtheblocks.9.2.3Data-FlowSchemasonBasicBlocksWhileadata-\rowschematechnicallyinvolvesdata-\rowvaluesateachpointintheprogram,wecansavetimeandspacebyrecognizingthatwhatgoesoninsideablockisusuallyquitesimple.Control\rowsfromthebeginningtotheendoftheblock,withoutinterruptionorbranching.Thus,wecanrestatetheschemaintermsofdata-\rowvaluesenteringandleavingtheblocks.Wedenotethedata-\rowvaluesimmediatelybeforeandimmediatelyaftereachbasicblockBbyIN[B]andOUT[B],respectively.TheconstraintsinvolvingIN[B]andOUT[B]canbederivedfromthoseinvolvingIN[s]andOUT[s]forthevariousstatementssinBasfollows.SupposeblockBconsistsofstatementss1;:::;sn,inthatorder.Ifs1isthe\frststatementofbasicblockB,thenIN[B]=IN[s1],Similarly,ifsnisthelaststatementofbasicblockB,thenOUT[B]=OUT[sn].ThetransferfunctionofabasicblockB,whichwedenotefB,canbederivedbycomposingthetransferfunctionsofthestatementsintheblock.Thatis,letfsibethetransferfunctionofstatementsi.ThenfB=fsn\u000e:::\u000efs2\u000efs1.TherelationshipbetweenthebeginningandendoftheblockisOUT[B]=fB(IN[B]):9.2.INTRODUCTIONTODATA-FLOWANALYSIS601Theconstraintsduetocontrol\rowbetweenbasicblockscaneasilyberewrit-tenbysubstitutingIN[B]andOUT[B]forIN[s1]andOUT[sn],respectively.Forinstance,ifdata-\rowvaluesareinformationaboutthesetsofconstantsthatmaybeassignedtoavariable,thenwehaveaforward-\rowprobleminwhichIN[B]=[PapredecessorofBOUT[P]:Whenthedata-\rowisbackwardsasweshallsoonseeinlive-variableanaly-sis,theequationsaresimilar,butwiththerolesoftheIN'sandOUT'sreversed.Thatis,IN[B]=fB(OUT[B])OUT[B]=[SasuccessorofBIN[S]:Unlikelineararithmeticequations,thedata-\rowequationsusuallydonothaveauniquesolution.Ourgoalisto\fndthemost\\precise\"solutionthatsatis\festhetwosetsofconstraints:control-\rowandtransferconstraints.Thatis,weneedasolutionthatencouragesvalidcodeimprovements,butdoesnotjustifyunsafetransformations|thosethatchangewhattheprogramcom-putes.Thisissueisdiscussedbrie\ryintheboxon\\Conservatism\"andmoreextensivelyinSection9.3.4.Inthefollowingsubsections,wediscusssomeofthemostimportantexamplesofproblemsthatcanbesolvedbydata-\rowanalysis.9.2.4ReachingDe\fnitions\\Reachingde\fnitions\"isoneofthemostcommonandusefuldata-\rowschemas.Byknowingwhereinaprogrameachvariablexmayhavebeende\fnedwhencontrolreacheseachpointp,wecandeterminemanythingsaboutx.Forjusttwoexamples,acompilerthenknowswhetherxisaconstantatpointp,andadebuggercantellwhetheritispossibleforxtobeanunde\fnedvariable,shouldxbeusedatp.Wesayade\fnitiondreachesapointpifthereisapathfromthepointimmediatelyfollowingdtop,suchthatdisnot\\killed\"alongthatpath.Wekillade\fnitionofavariablexifthereisanyotherde\fnitionofxanywherealongthepath.3Intuitively,ifade\fnitiondofsomevariablexreachespointp,thendmightbetheplaceatwhichthevalueofxusedatpwaslastde\fned.Ade\fnitionofavariablexisastatementthatassigns,ormayassign,avaluetox.Procedureparameters,arrayaccesses,andindirectreferencesallmayhavealiases,anditisnoteasytotellifastatementisreferringtoaparticularvariablex.Programanalysismustbeconservative;ifwedonot602CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.2.INTRODUCTIONTODATA-FLOWANALYSIS603604CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS gen B1 kill B1 d 1 d2 3d : : : i = m−1 j = n a = u1 d 4 d5 : : i = i+1 j = j−1 gen B2 kill B2 gen B3 killB3 d 6 : a = u2 gen B4 kill B4 d 7 : i = u3 B 1 B 2 B 4 B 3 d 1 d 2 d 3 d 4 d 5 d 6 d 7 d 4 d 5 d 1 d 2 d 7 d6 d3 d 7 d 1 d 4 EXIT = { = { = { = { = { = { = { = { ,, ,,, , ,, , } } } } } } } } ENTRYFigure9.13:Flowgraphforillustratingreachingde\fnitionsf2\u0000f1(x)\u0001=gen2[\u0000gen1[(x\u0000kill1)\u0000kill2\u0001=\u0000gen2[(gen1\u0000kill2)\u0001[\u0000x\u0000(kill1[kill2)\u0001Thisruleextendstoablockconsistingofanynumberofstatements.SupposeblockBhasnstatements,withtransferfunctionsfi(x)=geni[(x\u0000killi)fori=1;2;:::;n.ThenthetransferfunctionforblockBmaybewrittenas:fB(x)=genB[(x\u0000killB);wherekillB=kill1[kill2[\u0001\u0001\u0001[killnandgenB=genn[(genn\u00001\u0000killn)[(genn\u00002\u0000killn\u00001\u0000killn)[\u0001\u0001\u0001[(gen1\u0000kill2\u0000kill3\u0000\u0001\u0001\u0001\u0000killn)9.2.INTRODUCTIONTODATA-FLOWANALYSIS605Thus,likeastatement,abasicblockalsogeneratesasetofde\fnitionsandkillsasetofde\fnitions.Thegensetcontainsallthede\fnitionsinsidetheblockthatare\\visible\"immediatelyaftertheblock|werefertothemasdownwardsexposed.Ade\fnitionisdownwardsexposedinabasicblockonlyifitisnot\\killed\"byasubsequentde\fnitiontothesamevariableinsidethesamebasicblock.Abasicblock'skillsetissimplytheunionofallthede\fnitionskilledbytheindividualstatements.Noticethatade\fnitionmayappearinboththegenandkillsetofabasicblock.Ifso,thefactthatitisingentakesprecedence,becauseingen-killform,thekillsetisappliedbeforethegenset.Example9.10:Thegensetforthebasicblockd1:a=3d2:a=4isfd2gsinced1isnotdownwardsexposed.Thekillsetcontainsbothd1andd2,sinced1killsd2andviceversa.Nonetheless,sincethesubtractionofthekillsetprecedestheunionoperationwiththegenset,theresultofthetransferfunctionforthisblockalwaysincludesde\fnitiond2.2Control-FlowEquationsNext,weconsiderthesetofconstraintsderivedfromthecontrol\rowbetweenbasicblocks.Sinceade\fnitionreachesaprogrampointaslongasthereexistsatleastonepathalongwhichthede\fnitionreaches,OUT[P]\u0012IN[B]wheneverthereisacontrol-\rowedgefromPtoB.However,sinceade\fnitioncannotreachapointunlessthereisapathalongwhichitreaches,IN[B]needstobenolargerthantheunionofthereachingde\fnitionsofallthepredecessorblocks.Thatis,itissafetoassumeIN[B]=[PapredecessorofBOUT[P]Werefertounionasthemeetoperatorforreachingde\fnitions.Inanydata-\rowschema,themeetoperatoristheoneweusetocreateasummaryofthecontributionsfromdi\u000berentpathsatthecon\ruenceofthosepaths.IterativeAlgorithmforReachingDe\fnitionsWeassumethateverycontrol-\rowgraphhastwoemptybasicblocks,anentrynode,whichrepresentsthestartingpointofthegraph,andanexitnodetowhichallexitsoutofthegraphgo.Sincenode\fnitionsreachthebeginningofthegraph,thetransferfunctionfortheentryblockisasimpleconstantfunctionthatreturns;asananswer.Thatis,OUT[entry]=;.Thereachingde\fnitionsproblemisde\fnedbythefollowingequations:OUT[entry]=;606CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSandforallbasicblocksBotherthanentry,OUT[B]=genB[(IN[B]\u0000killB)IN[B]=[PapredecessorofBOUT[P]:Theseequationscanbesolvedusingthefollowingalgorithm.Theresultofthealgorithmistheleast\fxedpointoftheequations,i.e.,thesolutionwhoseassignedvaluestotheIN'sandOUT'siscontainedinthecorrespondingvaluesforanyothersolutiontotheequations.Theresultofthealgorithmbelowisacceptable,sinceanyde\fnitioninoneofthesetsINorOUTsurelymustreachthepointdescribed.Itisadesirablesolution,sinceitdoesnotincludeanyde\fnitionsthatwecanbesuredonotreach.Algorithm9.11:Reachingde\fnitions.INPUT:A\rowgraphforwhichkillBandgenBhavebeencomputedforeachblockB.OUTPUT:IN[B]andOUT[B],thesetofde\fnitionsreachingtheentryandexitofeachblockBofthe\rowgraph.METHOD:Weuseaniterativeapproach,inwhichwestartwiththe\\estimate\"OUT[B]=;forallBandconvergetothedesiredvaluesofINandOUT.AswemustiterateuntiltheIN's(andhencetheOUT's)converge,wecoulduseabooleanvariablechangetorecord,oneachpassthroughtheblocks,whetheranyOUThaschanged.However,inthisandinsimilaralgorithmsdescribedlater,weassumethattheexactmechanismforkeepingtrackofchangesisunderstood,andweelidethosedetails.ThealgorithmissketchedinFig.9.14.The\frsttwolinesinitializecertaindata-\rowvalues.4Line(3)startstheloopinwhichweiterateuntilconvergence,andtheinnerloopoflines(4)through(6)appliesthedata-\rowequationstoeveryblockotherthantheentry.2Intuitively,Algorithm9.11propagatesde\fnitionsasfarastheywillgowith-outbeingkilled,thussimulatingallpossibleexecutionsoftheprogram.Algo-rithm9.11willeventuallyhalt,becauseforeveryB,OUT[B]nevershrinks;onceade\fnitionisadded,itstaysthereforever.(SeeExercise9.2.6.)Sincethesetofallde\fnitionsis\fnite,eventuallytheremustbeapassofthewhile-loopduringwhichnothingisaddedtoanyOUT,andthealgorithmthenterminates.WearesafeterminatingthenbecauseiftheOUT'shavenotchanged,theIN'swill9.2.INTRODUCTIONTODATA-FLOWANALYSIS6071)OUT[entry]=;;2)for(eachbasicblockBotherthanentry)OUT[B]=;;3)while(changestoanyOUToccur)4)for(eachbasicblockBotherthanentry)f5)IN[B]=SPapredecessorofBOUT[P];6)OUT[B]=genB[(IN[B]\u0000killB);gFigure9.14:Iterativealgorithmtocomputereachingde\fnitionsnotchangeonthenextpass.And,iftheIN'sdonotchange,theOUT'scannot,soonallsubsequentpassestherecanbenochanges.Thenumberofnodesinthe\rowgraphisanupperboundonthenumberoftimesaroundthewhile-loop.Thereasonisthatifade\fnitionreachesapoint,itcandosoalongacycle-freepath,andthenumberofnodesina\rowgraphisanupperboundonthenumberofnodesinacycle-freepath.Eachtimearoundthewhile-loop,eachde\fnitionprogressesbyatleastonenodealongthepathinquestion,anditoftenprogressesbymorethanonenode,dependingontheorderinwhichthenodesarevisited.Infact,ifweproperlyordertheblocksinthefor-loopofline(4),thereisempiricalevidencethattheaveragenumberofiterationsofthewhile-loopisunder5(seeSection9.6.7).Sincesetsofde\fnitionscanberepresentedbybitvectors,andtheoperationsonthesesetscanbeimplementedbylogicaloperationsonthebitvectors,Algorithm9.11issurprisinglye\u000ecientinpractice.Example9.12:Weshallrepresentthesevende\fnitionsd1;d2;:::;d7inthe\rowgraphofFig.9.13bybitvectors,wherebitifromtheleftrepresentsde\fnitiondi.TheunionofsetsiscomputedbytakingthelogicalORofthecorrespondingbitvectors.Thedi\u000berenceoftwosetsS\u0000TiscomputedbycomplementingthebitvectorofT,andthentakingthelogicalANDofthatcomplement,withthebitvectorforS.ShowninthetableofFig.9.15arethevaluestakenonbytheINandOUTsetsinAlgorithm9.11.Theinitialvalues,indicatedbyasuperscript0,asinOUT[B]0,areassigned,bytheloopofline(2)ofFig.9.14.Theyareeachtheemptyset,representedbybitvector0000000.Thevaluesofsubsequentpassesofthealgorithmarealsoindicatedbysuperscripts,andlabeledIN[B]1andOUT[B]1forthe\frstpassandIN[B]2andOUT[B]2forthesecond.Supposethefor-loopoflines(4)through(6)isexecutedwithBtakingonthevaluesB1;B2;B3;B4;exitinthatorder.WithB=B1,sinceOUT[entry]=;,IN[B1]1istheemptyset,andOUT[B1]1isgenB1.Thisvaluedi\u000bersfromthepreviousvalueOUT[B1]0,so608CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.2.INTRODUCTIONTODATA-FLOWANALYSIS609necessarytostorethatvalueifitisdeadattheendoftheblock.Also,ifallregistersarefullandweneedanotherregister,weshouldfavorusingaregisterwithadeadvalue,sincethatvaluedoesnothavetobestored.Here,wede\fnethedata-\rowequationsdirectlyintermsofIN[B]andOUT[B],whichrepresentthesetofvariablesliveatthepointsimmediatelybeforeandafterblockB,respectively.Theseequationscanalsobederivedby\frstde\fningthetransferfunctionsofindividualstatementsandcomposingthemtocreatethetransferfunctionofabasicblock.De\fne1.defBasthesetofvariablesde\fned(i.e.,de\fnitelyassignedvalues)inBpriortoanyuseofthatvariableinB,and2.useBasthesetofvariableswhosevaluesmaybeusedinBpriortoanyde\fnitionofthevariable.Example9.13:Forinstance,blockB2inFig.9.13de\fnitelyusesi.Italsousesjbeforeanyrede\fnitionofj,unlessitispossiblethatiandjarealiasesofoneanother.AssumingtherearenoaliasesamongthevariablesinFig.9.13,thenuseB2=fi;jg.Also,B2clearlyde\fnesiandj.Assumingtherearenoaliases,defB2=fi;jg,aswell.2Asaconsequenceofthede\fnitions,anyvariableinuseBmustbeconsideredliveonentrancetoblockB,whilede\fnitionsofvariablesindefBde\fnitelyaredeadatthebeginningofB.Ine\u000bect,membershipindefB\\kills\"anyopportunityforavariabletobelivebecauseofpathsthatbeginatB.Thus,theequationsrelatingdefandusetotheunknownsINandOUTarede\fnedasfollows:IN[exit]=;andforallbasicblocksBotherthanexit,IN[B]=useB[(OUT[B]\u0000defB)OUT[B]=[SasuccessorofBIN[S]The\frstequationspeci\festheboundarycondition,whichisthatnovariablesareliveonexitfromtheprogram.Thesecondequationsaysthatavariableislivecomingintoablockifeitheritisusedbeforerede\fnitionintheblockoritislivecomingoutoftheblockandisnotrede\fnedintheblock.Thethirdequationsaysthatavariableislivecomingoutofablockifandonlyifitislivecomingintooneofitssuccessors.Therelationshipbetweentheequationsforlivenessandthereaching-defin-itionsequationsshouldbenoticed:610CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS\u000fBothsetsofequationshaveunionasthemeetoperator.Thereasonisthatineachdata-\rowschemawepropagateinformationalongpaths,andwecareonlyaboutwhetheranypathwithdesiredpropertiesexist,ratherthanwhethersomethingistruealongallpaths.\u000fHowever,information\rowforlivenesstravels\\backward,\"oppositetothedirectionofcontrol\row,becauseinthisproblemwewanttomakesurethattheuseofavariablexatapointpistransmittedtoallpointspriortopinanexecutionpath,sothatwemayknowatthepriorpointthatxwillhaveitsvalueused.Tosolveabackwardproblem,insteadofinitializingOUT[entry],weini-tializeIN[exit].SetsINandOUThavetheirrolesinterchanged,anduseanddefsubstituteforgenandkill,respectively.Asforreachingde\fnitions,thesolutiontothelivenessequationsisnotnecessarilyunique,andwewanttheso-lutionwiththesmallestsetsoflivevariables.ThealgorithmusedisessentiallyabackwardsversionofAlgorithm9.11.Algorithm9.14:Live-variableanalysis.INPUT:A\rowgraphwithdefandusecomputedforeachblock.OUTPUT:IN[B]andOUT[B],thesetofvariablesliveonentryandexitofeachblockBofthe\rowgraph.METHOD:ExecutetheprograminFig.9.16.2IN[exit]=;;for(eachbasicblockBotherthanexit)IN[B]=;;while(changestoanyINoccur)for(eachbasicblockBotherthanexit)fOUT[B]=SSasuccessorofBIN[S];IN[B]=useB[(OUT[B]\u0000defB);gFigure9.16:Iterativealgorithmtocomputelivevariables9.2.6AvailableExpressionsAnexpressionx+yisavailableatapointpifeverypathfromtheentrynodetopevaluatesx+y,andafterthelastsuchevaluationpriortoreachingp,therearenosubsequentassignmentstoxory.5Fortheavailable-expressionsdata-\rowschemawesaythatablockkillsexpressionx+yifitassigns(ormay9.2.INTRODUCTIONTODATA-FLOWANALYSIS611assign)xoryanddoesnotsubsequentlyrecomputex+y.Ablockgeneratesexpressionx+yifitde\fnitelyevaluatesx+yanddoesnotsubsequentlyde\fnexory.Notethatthenotionof\\killing\"or\\generating\"anavailableexpressionisnotexactlythesameasthatforreachingde\fnitions.Nevertheless,thesenotionsof\\kill\"and\\generate\"behaveessentiallyastheydoforreachingde\fnitions.Theprimaryuseofavailable-expressioninformationisfordetectingglobalcommonsubexpressions.Forexample,inFig.9.17(a),theexpression4\u0003iinblockB3willbeacommonsubexpressionif4\u0003iisavailableattheentrypointofblockB3.ItwillbeavailableifiisnotassignedanewvalueinblockB2,orif,asinFig.9.17(b),4\u0003iisrecomputedafteriisassignedinB2. t1 = 4*i t2 = 4*i B B B 1 2 3 t1 = 4*i t2 = 4*i B B B 1 2 3 ? i = t1 = 4*i (a) (b)Figure9.17:PotentialcommonsubexpressionsacrossblocksWecancomputethesetofgeneratedexpressionsforeachpointinablock,workingfrombeginningtoendoftheblock.Atthepointpriortotheblock,noexpressionsaregenerated.IfatpointpsetSofexpressionsisavailable,andqisthepointafterp,withstatementx=y+zbetweenthem,thenweformthesetofexpressionsavailableatqbythefollowingtwosteps.1.AddtoStheexpressiony+z.2.DeletefromSanyexpressioninvolvingvariablex.Notethestepsmustbedoneinthecorrectorder,asxcouldbethesameasyorz.Afterwereachtheendoftheblock,Sisthesetofgeneratedexpressionsfortheblock.Thesetofkilledexpressionsisallexpressions,sayy+z,suchthateitheryorzisde\fnedintheblock,andy+zisnotgeneratedbytheblock.Example9.15:ConsiderthefourstatementsofFig.9.18.Afterthe\frst,b+cisavailable.Afterthesecondstatement,a\u0000dbecomesavailable,butb+cisnolongeravailable,becausebhasbeenrede\fned.Thethirdstatementdoesnotmakeb+cavailableagain,becausethevalueofcisimmediatelychanged.612CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSAfterthelaststatement,a\u0000disnolongeravailable,becausedhaschanged.Thusnoexpressionsaregenerated,andallexpressionsinvolvinga,b,c,ordarekilled.29.2.INTRODUCTIONTODATA-FLOWANALYSIS613Theuseof\\ratherthan[makestheavailable-expressionequationsbehavedi\u000berentlyfromthoseofreachingde\fnitions.Whileneithersethasauniquesolution,forreachingde\fnitions,itisthesolutionwiththesmallestsetsthatcorrespondstothede\fnitionof\\reaching,\"andweobtainedthatsolutionbystartingwiththeassumptionthatnothingreachedanywhere,andbuildinguptothesolution.Inthatway,weneverassumedthatade\fnitiondcouldreachapointpunlessanactualpathpropagatingdtopcouldbefound.Incontrast,foravailableexpressionequationswewantthesolutionwiththelargestsetsofavailableexpressions,sowestartwithanapproximationthatistoolargeandworkdown.Itmaynotbeobviousthatbystartingwiththeassumption\\everything(i.e.,thesetU)isavailableeverywhereexceptattheendoftheentryblock\"andeliminatingonlythoseexpressionsforwhichwecandiscoverapathalongwhichitisnotavailable,wedoreachasetoftrulyavailableexpressions.Inthecaseofavailableexpressions,itisconservativetoproduceasubsetoftheexactsetofavailableexpressions.Theargumentforsubsetsbeingconservativeisthatourintendeduseoftheinformationistoreplacethecomputationofanavailableexpressionbyapreviouslycomputedvalue.Notknowinganexpres-sionisavailableonlyinhibitsusfromimprovingthecode,whilebelievinganexpressionisavailablewhenitisnotcouldcauseustochangewhattheprogramcomputes. B B 1 2Figure9.19:InitializingtheOUTsetsto;istoorestrictive.Example9.16:Weshallconcentrateonasingleblock,B2inFig.9.19,toillustratethee\u000bectoftheinitialapproximationofOUT[B2]onIN[B2].LetGandKabbreviatee614CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSapproximationsofIN[B2]andOUT[B2],respectively:Ij+1=OUT[B1]\\OjOj+1=G[(Ij+1\u0000K)StartingwithO0=;,wegetI1=OUT[B1]\\O0=;.However,ifwestartwithO0=U,thenwegetI1=OUT[B1]\\O0=OUT[B1],asweshould.Intu-itively,thesolutionobtainedstartingwithO0=Uismoredesirable,becauseitcorrectlyre\rectsthefactthatexpressionsinOUT[B1]thatarenotkilledbyB2areavailableattheendofB2.2Algorithm9.17:Availableexpressions.INPUT:A\rowgraphwithe9.2.INTRODUCTIONTODATA-FLOWANALYSIS615thedata-\rowproblem,sinceitisanartifactneededfortheiterativealgorithm.Thereareotherwaysofsolvingtheproblem.Forexample,wesawhowthetransferfunctionofabasicblockcanbederivedbycomposingthetransferfunctionsoftheindividualstatementsintheblock;asimilarcompositionalapproachmaybeusedtocomputeatransferfunctionfortheentireprocedure,ortransferfunctionsfromtheentryoftheproceduretoanyprogrampoint.WeshalldiscusssuchanapproachinSection9.7.616CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.2.INTRODUCTIONTODATA-FLOWANALYSIS617!Exercise9.2.7:ShowthecorrectnessofAlgorithm9.11.Thatis,showthata)Ifde\fnitiondisputinIN[B]orOUT[B],thenthereisapathfromdtothebeginningorendofblockB,respectively,alongwhichthevariablede\fnedbydmightnotberede\fned.b)Ifde\fnitiondisnotputinIN[B]orOUT[B],thenthereisnopathfromdtothebeginningorendofblockB,respectively,alongwhichthevariablede\fnedbydmightnotberede\fned.!Exercise9.2.8:ProvethefollowingaboutAlgorithm9.14:a)TheIN'sandOUT'snevershrink.b)IfvariablexisputinIN[B]orOUT[B],thenthereisapathfromthebeginningorendofblockB,respectively,alongwhichxmightbeused.c)IfvariablexisnotputinIN[B]orOUT[B],thenthereisnopathfromthebeginningorendofblockB,respectively,alongwhichxmightbeused.!Exercise9.2.9:ProvethefollowingaboutAlgorithm9.17:a)TheIN'sandOUT'snevergrow;thatis,successivevaluesofthesesetsaresubsets(notnecessarilyproper)oftheirpreviousvalues.b)IfexpressioneisremovedfromIN[B]orOUT[B],thenthereisapathfromtheentryofthe\rowgraphtothebeginningorendofblockB,respectively,alongwhicheiseithernevercomputed,orafteritslastcomputation,oneofitsargumentsmightberede\fned.c)IfexpressioneremainsinIN[B]orOUT[B],thenalongeverypathfromtheentryofthe\rowgraphtothebeginningorendofblockB,respectively,eiscomputed,andafterthelastcomputation,noargumentofecouldberede\fned.!Exercise9.2.10:TheastutereaderwillnoticethatinAlgorithm9.11wecouldhavesavedsometimebyinitializingOUT[B]togenBforallblocksB.Likewise,inAlgorithm9.14wecouldhaveinitializedIN[B]togenB.Wedidnotdosoforuniformityinthetreatmentofthesubject,asweshallseeinAlgorithm9.25.However,isitpossibletoinitializeOUT[B]toe618CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.3FoundationsofData-FlowAnalysisHavingshownseveralusefulexamplesofthedata-\rowabstraction,wenowstudythefamilyofdata-\rowschemasasawhole,abstractly.Weshallanswerseveralbasicquestionsaboutdata-\rowalgorithmsformally:1.Underwhatcircumstancesistheiterativealgorithmusedindata-\rowanalysiscorrect?2.Howpreciseisthesolutionobtainedbytheiterativealgorithm?3.Willtheiterativealgorithmconverge?4.Whatisthemeaningofthesolutiontotheequations?InSection9.2,weaddressedeachofthequestionsaboveinformallywhendescribingthereaching-de\fnitionsproblem.Insteadofansweringthesamequestionsforeachsubsequentproblemfromscratch,wereliedonanalogieswiththeproblemswehadalreadydiscussedtoexplainthenewproblems.Herewepresentageneralapproachthatanswersallthesequestions,onceandforall,rigorously,andforalargefamilyofdata-\rowproblems.We\frstiden-tifythepropertiesdesiredofdata-\rowschemasandprovetheimplicationsofthesepropertiesonthecorrectness,precision,andconvergenceofthedata-\rowalgorithm,aswellasthemeaningofthesolution.Thus,tounderstandoldalgorithmsorformulatenewones,wesimplyshowthattheproposeddata-\rowproblemde\fnitionshavecertainproperties,andtheanswerstoalltheabovedi\u000ecultquestionsareavailableimmediately.Theconceptofhavingacommontheoreticalframeworkforaclassofsche-masalsohaspracticalimplications.Theframeworkhelpsusidentifythereusablecomponentsofthealgorithminoursoftwaredesign.Notonlyiscod-inge\u000bortreduced,butprogrammingerrorsarereducedbynothavingtorecodesimilardetailsseveraltimes.Adata-\rowanalysisframework(D;V;^;F)consistsof1.Adirectionofthedata\rowD,whichiseitherforwardsorbackwards.2.Asemilattice(seeSection9.3.1forthede\fnition),whichincludesado-mainofvaluesVandameetoperator^.3.AfamilyFoftransferfunctionsfromVtoV.Thisfamilymustincludefunctionssuitablefortheboundaryconditions,whichareconstanttransferfunctionsforthespecialnodesentryandexitinany\rowgraph.9.3.1SemilatticesAsemilatticeisasetVandabinarymeetoperator^suchthatforallx,y,andzinV:9.3.FOUNDATIONSOFDATA-FLOWANALYSIS6191.x^x=x(meetisidempotent).2.x^y=y^x(meetiscommutative).3.x^(y^z)=(x^y)^z(meetisassociative).Asemilatticehasatopelement,denoted>,suchthatforallxinV,>^x=x.Optionally,asemilatticemayhaveabottomelement,denoted?,suchthatforallxinV,?^x=?.PartialOrdersAsweshallsee,themeetoperatorofasemilatticede\fnesapartialorderonthevaluesofthedomain.Arelation\u0014isapartialorderonasetVifforallx,y,andzinV:1.x\u0014x(thepartialorderisre\rexive).2.Ifx\u0014yandy\u0014x,thenx=y(thepartialorderisantisymmetric).3.Ifx\u0014yandy\u0014z,thenx\u0014z(thepartialorderistransitive).Thepair(V;\u0014)iscalledaposet,orpartiallyorderedset.Itisalsoconvenienttohavea<relationforaposet,de\fnedasx<yifandonlyif(x\u0014y)and(x6=y).ThePartialOrderforaSemilatticeItisusefultode\fneapartialorder\u0014forasemilattice(V;^).ForallxandyinV,wede\fnex\u0014yifandonlyifx^y=x.Becausethemeetoperator^isidempotent,commutative,andassociative,the\u0014orderasde\fnedisre\rexive,antisymmetric,andtransitive.Toseewhy,observethat:\u000fRe\rexivity:forallx,x\u0014x.Theproofisthatx^x=xsincemeetisidempotent.\u000fAntisymmetry:ifx\u0014yandy\u0014x,thenx=y.Inproof,x\u0014ymeansx^y=xandy\u0014xmeansy^x=y.Bycommutativityof^,x=(x^y)=(y^x)=y.620CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS\u000fTransitivity:ifx\u0014yandy\u0014z,thenx\u0014z.Inproof,x\u0014yandy\u0014zmeansthatx^y=xandy^z=y.Then(x^z)=\u0000(x^y)^z\u0001=\u0000x^(y^z)\u0001=(x^y)=x,usingassociativityofmeet.Sincex^z=xhasbeenshown,wehavex\u0014z,provingtransitivity.Example9.18:ThemeetoperatorsusedintheexamplesinSection9.2aresetunionandsetintersection.Theyarebothidempotent,commutative,andassociative.Forsetunion,thetopelementis;andthebottomelementisU,theuniversalset,sinceforanysubsetxofU,;[x=xandU[x=U.Forsetintersection,>isUand?is;.V,thedomainofvaluesofthesemilattice,isthesetofallsubsetsofU,whichissometimescalledthepowersetofUanddenoted2U.ForallxandyinV,x[y=ximpliesx\u0013y;therefore,thepartialorderimposedbysetunionis\u0013,setinclusion.Correspondingly,thepartialorderimposedbysetintersectionis\u0012,setcontainment.Thatis,forsetintersection,setswithfewerelementsareconsideredtobesmallerinthepartialorder.How-ever,forsetunion,setswithmoreelementsareconsideredtobesmallerinthepartialorder.Tosaythatsetslargerinsizearesmallerinthepartialorderiscounterintuitive;however,thissituationisanunavoidableconsequenceofthede\fnitions.6AsdiscussedinSection9.2,thereareusuallymanysolutionstoasetofdata-\rowequations,withthegreatestsolution(inthesenseofthepartialorder\u0014)beingthemostprecise.Forexample,inreachingde\fnitions,themostpreciseamongallthesolutionstothedata-\rowequationsistheonewiththesmallestnumberofde\fnitions,whichcorrespondstothegreatestelementinthepartialorderde\fnedbythemeetoperation,union.Inavailableexpressions,themostprecisesolutionistheonewiththelargestnumberofexpressions.Again,itisthegreatestsolutioninthepartialorderde\fnedbyintersectionasthemeetoperation.2GreatestLowerBoundsThereisanotherusefulrelationshipbetweenthemeetoperationandthepartialorderingitimposes.Suppose(V;^)isasemilattice.Agreatestlowerbound(orglb)ofdomainelementsxandyisanelementgsuchthat1.g\u0014x,2.g\u0014y,and3.Ifzisanyelementsuchthatz\u0014xandz\u0014y,thenz\u0014g.Itturnsoutthatthemeetofxandyistheironlygreatestlowerbound.Toseewhy,letg=x^y.Observethat:9.3.FOUNDATIONSOFDATA-FLOWANALYSIS621622CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONStoyaslongasthereisanotherpathfromxtoyleftinthediagram.Thus,althoughfd1;d2;d3g\u0014fd1g,wedonotdrawthisedgesinceitisrepresentedbythepaththroughfd1;d2g,forexample. d1 d2 d1 d3 d2 d3 d 1 d 2 d 3{ } { } { } d1 d2 d3 { , } { , } { , } {} ( ) { , , } ( )Figure9.22:Latticeofsubsetsofde\fnitionsItisalsousefultonotethatwecanreadthemeeto\u000bsuchdiagrams.Sincex^yistheglb,itisalwaysthehighestzforwhichtherearepathsdownwardtozfrombothxandy.Forexample,ifxisfd1gandyisfd2g,thenzinFig.9.22isfd1;d2g,whichmakessense,becausethemeetoperatorisunion.Thetopelementwillappearatthetopofthelatticediagram;thatis,thereisapathdownwardfrom>toeachelement.Likewise,thebottomelementwillappearatthebottom,withapathdownwardfromeveryelementto?.ProductLatticesWhileFig.9.22involvesonlythreede\fnitions,thelatticediagramofatypicalprogramcanbequitelarge.Thesetofdata-\rowvaluesisthepowersetofthede\fnitions,whichthereforecontains2nelementsiftherearende\fnitionsintheprogram.However,whetherade\fnitionreachesaprogramisindependentofthereachabilityoftheotherde\fnitions.Wemaythusexpressthelattice7ofde\fnitionsintermsofa\\productlattice,\"builtfromonesimplelatticeforeachde\fnition.Thatis,iftherewereonlyonede\fnitiondintheprogram,thenthelatticewouldhavetwoelements:fg,theemptyset,whichisthetopelement,andfdg,whichisthebottomelement.Formally,wemaybuildproductlatticesasfollows.Suppose(A;^A)and(B;^B)are(semi)lattices.Theproductlatticeforthesetwolatticesisde\fnedasfollows:1.ThedomainoftheproductlatticeisA\u0002B.9.3.FOUNDATIONSOFDATA-FLOWANALYSIS6232.Themeet^fortheproductlatticeisde\fnedasfollows.If(a;b)and(a0;b0)aredomainelementsoftheproductlattice,then(a;b)^(a0;b0)=(a^Aa0;b^Bb0).(9.19)Itissimpletoexpressthe\u0014partialorderfortheproductlatticeintermsofthepartialorders\u0014Aand\u0014BforAandB(a;b)\u0014(a0;b0)ifandonlyifa\u0014Aa0andb\u0014Bb0.(9.20)Toseewhy(9.20)followsfrom(9.19),observethat(a;b)^(a0;b0)=(a^Aa0;b^Bb0):Sowemightaskunderwhatcircumstancesdoes(a^Aa0;b^Bb0)=(a;b)?Thathappensexactlywhena^Aa0=aandb^Bb0=b.Butthesetwoconditionsarethesameasa\u0014Aa0andb\u0014Bb0.Theproductoflatticesisanassociativeoperation,soonecanshowthattherules(9.19)and(9.20)extendtoanynumberoflattices.Thatis,ifwearegivenlattices(Ai;^i)fori=1;2;:::;k,thentheproductofallklattices,inthisorder,hasdomainA1\u0002A2\u0002\u0001\u0001\u0001\u0002Ak,ameetoperatorde\fnedby(a1;a2;:::;ak)^(b1;b2;:::;bk)=(a1^1b1;a2^2b2;:::;ak^kbk)andapartialorderde\fnedby(a1;a2;:::;ak)\u0014(b1;b2;:::;bk)ifandonlyifai\u0014biforalli.HeightofaSemilatticeWemaylearnsomethingabouttherateofconvergenceofadata-\rowanalysisalgorithmbystudyingthe\\height\"oftheassociatedsemilattice.Anascendingchaininaposet(V;\u0014)isasequencewherex1<x2<:::<xn.Theheightofasemilatticeisthelargestnumberof<relationsinanyascendingchain;thatis,theheightisonelessthanthenumberofelementsinthechain.Forexample,theheightofthereachingde\fnitionssemilatticeforaprogramwithnde\fnitionsisn.Showingconvergenceofaniterativedata-\rowalgorithmismucheasierifthesemilatticehas\fniteheight.Clearly,alatticeconsistingofa\fnitesetofvalueswillhavea\fniteheight;itisalsopossibleforalatticewithanin\fnitenumberofvaluestohavea\fniteheight.ThelatticeusedintheconstantpropagationalgorithmisonesuchexamplethatweshallexaminecloselyinSection9.4.9.3.2TransferFunctionsThefamilyoftransferfunctionsF:V!Vinadata-\rowframeworkhasthefollowingproperties:624CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS1.FhasanidentityfunctionI,suchthatI(x)=xforallxinV.2.Fisclosedundercomposition;thatis,foranytwofunctionsfandginF,thefunctionhde\fnedbyh(x)=g\u0000f(x)\u0001isinF.Example9.21:Inreachingde\fnitions,Fhastheidentity,thefunctionwheregenandkillareboththeemptyset.ClosureundercompositionwasactuallyshowninSection9.2.4;werepeattheargumentsuccinctlyhere.Supposewehavetwofunctionsf1(x)=G1[(x\u0000K1)andf2(x)=G2[(x\u0000K2).Thenf2\u0000f1(x)\u0001=G2[\u0010\u0000G1[(x\u0000K1)\u0001\u0000K2\u0011:Therightsideoftheaboveisalgebraicallyequivalentto\u0000G2[(G1\u0000K2)\u0001[\u0000x\u0000(K1[K2)\u0001:IfweletK=K1[K2andG=G2[(G1\u0000K2),thenwehaveshownthatthecompositionoff1andf2,whichisf(x)=G[(x\u0000K),isoftheformthatmakesitamemberofF.Ifweconsideravailableexpressions,thesameargumentsusedforreachingde\fnitionsalsoshowthatFhasanidentityandisclosedundercomposition.2MonotoneFrameworksTomakeaniterativealgorithmfordata-\rowanalysiswork,weneedforthedata-\rowframeworktosatisfyonemorecondition.WesaythataframeworkismonotoneifwhenweapplyanytransferfunctionfinFtotwomembersofV,the\frstbeingnogreaterthanthesecond,thenthe\frstresultisnogreaterthanthesecondresult.Formally,adata-\rowframework(D;F;V;^)ismonotoneifForallxandyinVandfinF,x\u0014yimpliesf(x)\u0014f(y).(9.22)Equivalently,monotonicitycanbede\fnedasForallxandyinVandfinF,f(x^y)\u0014f(x)^f(y).(9.23)Equation(9.23)saysthatifwetakethemeetoftwovaluesandthenapplyf,theresultisnevergreaterthanwhatisobtainedbyapplyingftothevaluesindividually\frstandthen\\meeting\"theresults.Becausethetwode\fnitionsofmonotonicityseemsodi\u000berent,theyarebothuseful.Weshall\fndoneortheothermoreusefulunderdi\u000berentcircumstances.Later,wesketchaprooftoshowthattheyareindeedequivalent.9.3.FOUNDATIONSOFDATA-FLOWANALYSIS625Weshall\frstassume(9.22)andshowthat(9.23)holds.Sincex^yisthegreatestlowerboundofxandy,weknowthatx^y\u0014xandx^y\u0014y:Thus,by(9.22),f(x^y)\u0014f(x)andf(x^y)\u0014f(y):Sincef(x)^f(y)isthegreatestlowerboundoff(x)andf(y),wehave(9.23).Conversely,letusassume(9.23)andprove(9.22).Wesupposex\u0014yanduse(9.23)toconcludef(x)\u0014f(y),thusproving(9.22).Equation(9.23)tellsusf(x^y)\u0014f(x)^f(y):Butsincex\u0014yisassumed,x^y=x,byde\fnition.Thus(9.23)saysf(x)\u0014f(x)^f(y):Sincef(x)^f(y)istheglboff(x)andf(y),weknowf(x)^f(y)\u0014f(y).Thusf(x)\u0014f(x)^f(y)\u0014f(y)and(9.23)implies(9.22).DistributiveFrameworksOften,aframeworkobeysaconditionstrongerthan(9.23),whichwecallthedistributivitycondition,f(x^y)=f(x)^f(y)forallxandyinVandfinF.Certainly,ifa=b,thena^b=abyidempot-ence,soa\u0014b.Thus,distributivityimpliesmonotonicity,althoughtheconverseisnottrue.Example9.24:Letyandzbesetsofde\fnitionsinthereaching-de\fnitionsframework.Letfbeafunctionde\fnedbyf(x)=G[(x\u0000K)forsomesetsofde\fnitionsGandK.Wecanverifythatthereaching-de\fnitionsframeworksatis\festhedistributivitycondition,bycheckingthatG[\u0000(y[z)\u0000K\u0001=\u0000G[(y\u0000K)\u0001[(G[(z\u0000K)\u0001:Whiletheequationabovemayappearformidable,consider\frstthosede\fnitionsinG.Thesede\fnitionsaresurelyinthesetsde\fnedbyboththeleftandrightsides.Thus,wehaveonlytoconsiderde\fnitionsthatarenotinG.Inthatcase,wecaneliminateGeverywhere,andverifytheequality(y[z)\u0000K=(y\u0000K)[(z\u0000K):ThelatterequalityiseasilycheckedusingaVenndiagram.2626CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.3.3TheIterativeAlgorithmforGeneralFrameworksWecangeneralizeAlgorithm9.11tomakeitworkforalargevarietyofdata-\rowproblems.Algorithm9.25:Iterativesolutiontogeneraldata-\rowframeworks.INPUT:Adata-\rowframeworkwiththefollowingcomponents:1.Adata-\rowgraph,withspeciallylabeledentryandexitnodes,2.Adirectionofthedata-\rowD,3.AsetofvaluesV,4.Ameetoperator^,5.AsetoffunctionsF,wherefBinFisthetransferfunctionforblockB,and6.AconstantvalueventryorvexitinV,representingtheboundaryconditionforforwardandbackwardframeworks,respectively.OUTPUT:ValuesinVforIN[B]andOUT[B]foreachblockBinthedata-\rowgraph.METHOD:Thealgorithmsforsolvingforwardandbackwarddata-\rowprob-lemsareshowninFig.9.23(a)and9.23(b),respectively.Aswiththefamiliariterativedata-\rowalgorithmsfromSection9.2,wecomputeINandOUTforeachblockbysuccessiveapproximation.2ItispossibletowritetheforwardandbackwardversionsofAlgorithm9.25sothatafunctionimplementingthemeetoperationisaparameter,asisafunctionthatimplementsthetransferfunctionforeachblock.The\rowgraphitselfandtheboundaryvaluearealsoparameters.Inthisway,thecompilerimplementorcanavoidrecodingthebasiciterativealgorithmforeachdata-\rowframeworkusedbytheoptimizationphaseofthecompiler.Wecanusetheabstractframeworkdiscussedsofartoproveanumberofusefulpropertiesoftheiterativealgorithm:1.IfAlgorithm9.25converges,theresultisasolutiontothedata-\rowequa-tions.2.Iftheframeworkismonotone,thenthesolutionfoundisthemaximum\fxedpoint(MFP)ofthedata-\rowequations.Amaximum\fxedpointisasolutionwiththepropertythatinanyothersolution,thevaluesofIN[B]andOUT[B]are\u0014thecorrespondingvaluesoftheMFP.3.Ifthesemilatticeoftheframeworkismonotoneandof\fniteheight,thenthealgorithmisguaranteedtoconverge.9.3.FOUNDATIONSOFDATA-FLOWANALYSIS6271)OUT[entry]=ventry;2)for(eachbasicblockBotherthanentry)OUT[B]=>;3)while(changestoanyOUToccur)4)for(eachbasicblockBotherthanentry)f5)IN[B]=VPapredecessorofBOUT[P];6)OUT[B]=fB(IN[B]);g(a)Iterativealgorithmforaforwarddata-\rowproblem.1)IN[exit]=vexit;2)for(eachbasicblockBotherthanexit)IN[B]=>;3)while(changestoanyINoccur)4)for(eachbasicblockBotherthanexit)f5)OUT[B]=VSasuccessorofBIN[S];6)IN[B]=fB(OUT[B]);g(b)Iterativealgorithmforabackwarddata-\rowproblem.Figure9.23:ForwardandbackwardversionsoftheiterativealgorithmWeshallarguethesepointsassumingthattheframeworkisforward.Thecaseofbackwardsframeworksisessentiallythesame.The\frstpropertyiseasytoshow.Iftheequationsarenotsatis\fedbythetimethewhile-loopends,thentherewillbeatleastonechangetoanOUT(intheforwardcase)orIN(inthebackwardcase),andwemustgoaroundtheloopagain.Toprovethesecondproperty,we\frstshowthatthevaluestakenonbyIN[B]andOUT[B]foranyBcanonlydecrease(inthesenseofthe\u0014relationshipforlattices)asthealgorithmiterates.Thisclaimcanbeprovenbyinduction.BASIS:ThebasecaseistoshowthatthevalueofIN[B]andOUT[B]afterthe\frstiterationisnotgreaterthantheinitializedvalue.ThisstatementistrivialbecauseIN[B]andOUT[B]forallblocksB6=entryareinitializedwith>.INDUCTION:Assumethatafterthekthiteration,thevaluesareallnogreaterthanthoseafterthe(k\u00001)stiteration,andshowthesameforiterationk+1comparedwithiterationk.Line(5)ofFig.9.23(a)hasIN[B]=^PapredecessorofBOUT[P]:LetususethenotationIN[B]iandOUT[B]itodenotethevaluesofIN[B]andOUT[B]afteriterationi.AssumingOUT[P]k\u0014OUT[P]k\u00001,weknowthatIN[B]k+1\u0014IN[B]kbecauseofthepropertiesofthemeetoperator.Next,line(6)628CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSsaysOUT[B]=fB(IN[B]):SinceIN[B]k+1\u0014IN[B]k,wehaveOUT[B]k+1\u0014OUT[B]kbymonotonicity.NotethateverychangeobservedforvaluesofIN[B]andOUT[B]isnecessarytosatisfytheequation.Themeetoperatorsreturnthegreatestlowerboundoftheirinputs,andthetransferfunctionsreturntheonlysolutionthatisconsis-tentwiththeblockitselfanditsgiveninput.Thus,iftheiterativealgorithmterminates,theresultmusthavevaluesthatareatleastasgreatasthecorre-spondingvaluesinanyothersolution;thatis,theresultofAlgorithm9.25istheMFPoftheequations.Finally,considerthethirdpoint,wherethedata-\rowframeworkhas\fniteheight.SincethevaluesofeveryIN[B]andOUT[B]decreasewitheachchange,andthealgorithmstopsifatsomeroundnothingchanges,thealgorithmisguaranteedtoconvergeafteranumberofroundsnogreaterthantheproductoftheheightoftheframeworkandthenumberofnodesofthe\rowgraph.9.3.4MeaningofaData-FlowSolutionWenowknowthatthesolutionfoundusingtheiterativealgorithmisthemax-imum\fxedpoint,butwhatdoestheresultrepresentfromaprogram-semanticspointofview?Tounderstandthesolutionofadata-\rowframework(D;F;V;^),letus\frstdescribewhatanidealsolutiontotheframeworkwouldbe.Weshowthattheidealcannotbeobtainedingeneral,butthatAlgorithm9.25approxi-matestheidealconservatively.TheIdealSolutionWithoutlossofgenerality,weshallassumefornowthatthedata-\rowframeworkofinterestisaforward-\rowingproblem.ConsidertheentrypointofabasicblockB.Theidealsolutionbeginsby\fndingallthepossibleexecutionpathsleadingfromtheprogramentrytothebeginningofB.Apathis\\possible\"onlyifthereissomecomputationoftheprogramthatfollowsexactlythatpath.Theidealsolutionwouldthencomputethedata-\rowvalueattheendofeachpossiblepathandapplythemeetoperatortothesevaluesto\fndtheirgreatestlowerbound.Thennoexecutionoftheprogramcanproduceasmallervalueforthatprogrampoint.Inaddition,theboundistight;thereisnogreaterdata-\rowvaluethatisaglbforthevaluecomputedalongeverypossiblepathtoBinthe\rowgraph.Wenowtrytode\fnetheidealsolutionmoreformally.ForeachblockBina\rowgraph,letfBbethetransferfunctionforB.ConsideranypathP=entry!B1!B2!:::!Bk\u00001!BkfromtheinitialnodeentrytosomeblockBk.Theprogrampathmayhavecycles,soonebasicblockmayappearseveraltimesonthepathP.De\fnethe9.3.FOUNDATIONSOFDATA-FLOWANALYSIS629transferfunctionforP,fP,tobethecompositionoffB1;fB2:::;fBk\u00001.NotethatfBkisnotpartofthecomposition,re\rectingthefactthatthispathistakentoreachthebeginningofblockBk,notitsend.Thedata-\rowvaluecreatedbyexecutingthispathisthusfP(ventry),whereventryistheresultoftheconstanttransferfunctionrepresentingtheinitialnodeentry.TheidealresultforblockBisthusIDEAL[B]=^P;apossiblepathfromentrytoBfP(ventry):Weclaimthat,intermsofthelattice-theoreticpartialorder\u0014fortheframeworkinquestion,\u000fAnyanswerthatisgreaterthanIDEALisincorrect.\u000fAnyvaluesmallerthanorequaltotheidealisconservative,i.e.,safe.Intuitively,thecloserthevaluetotheidealthemorepreciseitis.8Toseewhysolutionsmustbe\u0014theidealsolution,notethatanysolutiongreaterthanIDEALforanyblockcouldbeobtainedbyignoringsomeexecutionpaththattheprogramcouldtake,andwecannotbesurethatthereisnotsomee\u000bectalongthatpathtoinvalidateanyprogramimprovementwemightmakebasedonthegreatersolution.Conversely,anysolutionlessthanIDEALcanbeviewedasincludingcertainpathsthateitherdonotexistinthe\rowgraph,orthatexistbutthattheprogramcanneverfollow.Thislessersolutionwillallowonlytransformationsthatarecorrectforallpossibleexecutionsoftheprogram,butmayforbidsometransformationsthatIDEALwouldpermit.TheMeet-Over-PathsSolutionHowever,asdiscussedinSection9.1,\fndingallpossibleexecutionpathsisundecidable.Wemustthereforeapproximate.Inthedata-\rowabstraction,weassumethateverypathinthe\rowgraphcanbetaken.Thus,wecande\fnethemeet-over-pathssolutionforBtobeMOP[B]=^P;apathfromentrytoBfP(ventry):Notethat,asforIDEAL,thesolutionMOP[B]givesvaluesforIN[B]inforward-\rowframeworks.Ifweweretoconsiderbackward-\rowframeworks,thenwewouldthinkofMOP[B]asavalueforOUT[B].ThepathsconsideredintheMOPsolutionareasupersetofallthepathsthatarepossiblyexecuted.Thus,theMOPsolutionmeetstogethernotonlythedata-\rowvaluesofalltheexecutablepaths,butalsoadditionalvaluesassociated630CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSwiththepathsthatcannotpossiblybeexecuted.Takingthemeetoftheidealsolutionplusadditionaltermscannotcreateasolutionlargerthantheideal.Thus,forallBwehaveMOP[B]\u0014IDEAL[B],andwewillsimplysaythatMOP\u0014IDEAL.TheMaximumFixedpointVersustheMOPSolutionNoticethatintheMOPsolution,thenumberofpathsconsideredisstillun-boundedifthe\rowgraphcontainscycles.Thus,theMOPde\fnitiondoesnotlenditselftoadirectalgorithm.Theiterativealgorithmcertainlydoesnot\frst\fndallthepathsleadingtoabasicblockbeforeapplyingthemeetoperator.Rather,1.Theiterativealgorithmvisitsbasicblocks,notnecessarilyintheorderofexecution.2.Ateachcon\ruencepoint,thealgorithmappliesthemeetoperatortothedata-\rowvaluesobtainedsofar.Someofthesevaluesusedwereintroducedarti\fciallyintheinitializationprocess,notrepresentingtheresultofanyexecutionfromthebeginningoftheprogram.SowhatistherelationshipbetweentheMOPsolutionandthesolutionMFPproducedbyAlgorithm9.25?We\frstdiscusstheorderinwhichthenodesarevisited.Inaniteration,wemayvisitabasicblockbeforehavingvisiteditspredecessors.Ifthepredecessoristheentrynode,OUT[entry]wouldhavealreadybeeninitializedwiththeproper,constantvalue.Otherwise,ithasbeeninitializedto>,avaluenosmallerthanthe\fnalanswer.Bymonotonicity,theresultobtainedbyusing>asinputisnosmallerthanthedesiredsolution.Inasense,wecanthinkof>asrepresentingnoinformation. BB B B ENTRY 2 3 4 1Figure9.24:Flowgraphillustratingthee\u000bectofearlymeetoverpathsWhatisthee\u000bectofapplyingthemeetoperatorearly?ConsiderthesimpleexampleofFig.9.24,andsupposeweareinterestedinthevalueofIN[B4].By9.3.FOUNDATIONSOFDATA-FLOWANALYSIS631thede\fnitionofMOP,MOP[B4]=\u0000(fB3\u000efB1)^(fB3\u000efB2)\u0001(ventry)Intheiterativealgorithm,ifwevisitthenodesintheorderB1;B2;B3;B4,thenIN[B4]=fB3\u0010\u0000fB1(ventry)^fB2(ventry)\u0001\u0011Whilethemeetoperatorisappliedattheendinthede\fnitionofMOP,theiterativealgorithmappliesitearly.Theansweristhesameonlyifthedata-\rowframeworkisdistributive.Ifthedata-\rowframeworkismonotonebutnotdistributive,westillhaveIN[B4]\u0014MOP[B4].RecallthatingeneralasolutionIN[B]issafe(conservative)ifIN[B]\u0014IDEAL[B]forallblocksB.Surely,MOP[B]\u0014IDEAL[B].WenowprovideaquicksketchofwhyingeneraltheMFPsolutionprovidedbytheiterativealgorithmisalwayssafe.Aneasyinductiononishowsthatthevaluesobtainedafteriiterationsaresmallerthanorequaltothemeetoverallpathsoflengthiorless.Buttheiterativealgorithmterminatesonlyifitarrivesatthesameansweraswouldbeobtainedbyiteratinganunboundednumberoftimes.Thus,theresultisnogreaterthantheMOPsolution.SinceMOP\u0014IDEALandMFP\u0014MOP,weknowthatMFP\u0014IDEAL,andthereforethesolutionMFPprovidedbytheiterativealgorithmissafe.9.3.5ExercisesforSection9.3Exercise9.3.1:Constructalatticediagramfortheproductofthreelattices,eachbasedonasinglede\fnitiondi,fori=1;2;3.HowisyourlatticediagramrelatedtothatinFig.9.22?!Exercise9.3.2:InSection9.3.3wearguedthatiftheframeworkhas\fniteheight,thentheiterativealgorithmconverges.Hereisanexamplewheretheframeworkdoesnothave\fniteheight,andtheiterativealgorithmdoesnotconverge.LetthesetofvaluesVbethenonnegativerealnumbers,andletthemeetoperatorbetheminimum.Therearethreetransferfunctions:i.Theidentity,fI(x)=x.ii.\\half,\"thatis,thefunctionfH(x)=x=2.iii.\\one.\"thatis,thefunctionfO(x)=1.ThesetoftransferfunctionsFisthesethreeplusthefunctionsformedbycomposingtheminallpossibleways.a)DescribethesetF.b)Whatisthe\u0014relationshipforthisframework?632CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSc)Giveanexampleofa\rowgraphwithassignedtransferfunctions,suchthatAlgorithm9.25doesnotconverge.d)Isthisframeworkmonotone?Isitdistributive?!Exercise9.3.3:WearguedthatAlgorithm9.25convergesiftheframeworkismonotoneandof\fniteheight.Hereisanexampleofaframeworkthatshowsmonotonicityisessential;\fniteheightisnotenough.ThedomainVisf1;2g,themeetoperatorismin,andthesetoffunctionsFisonlytheidentity(fI)andthe\\switch\"function(fS(x)=3\u0000x)thatswaps1and2.a)Showthatthisframeworkisof\fniteheightbutnotmonotone.b)Giveanexampleofa\rowgraphandassignmentoftransferfunctionssothatAlgorithm9.25doesnotconverge.!Exercise9.3.4:LetMOPi[B]bethemeetoverallpathsoflengthiorlessfromtheentrytoblockB.ProvethatafteriiterationsofAlgorithm9.25,IN[B]\u0014MOPi[B].Also,showthatasaconsequence,ifAlgorithm9.25converges,thenitconvergestosomethingthatis\u0014theMOPsolution.!Exercise9.3.5:SupposethesetFoffunctionsforaframeworkareallofgen-killform.Thatis,thedomainVisthepowersetofsomeset,andf(x)=G[(x\u0000K)forsomesetsGandK.Provethatifthemeetoperatoriseither(a)unionor(b)intersection,thentheframeworkisdistributive.9.4ConstantPropagationAllthedata-\rowschemasdiscussedinSection9.2areactuallysimpleexamplesofdistributiveframeworkswith\fniteheight.Thus,theiterativeAlgorithm9.25appliestothemineitheritsforwardorbackwardversionandproducestheMOPsolutionineachcase.Inthissection,weshallexamineindetailausefuldata-\rowframeworkwithmoreinterestingproperties.Recallthatconstantpropagation,or\\constantfolding,\"replacesexpressionsthatevaluatetothesameconstanteverytimetheyareexecuted,bythatcon-stant.Theconstant-propagationframeworkdescribedbelowisdi\u000berentfromallthedata-\rowproblemsdiscussedsofar,inthata)ithasanunboundedsetofpossibledata-\rowvalues,evenfora\fxed\rowgraph,andb)itisnotdistributive.Constantpropagationisaforwarddata-\rowproblem.Thesemilatticerep-resentingthedata-\rowvaluesandthefamilyoftransferfunctionsarepresentednext.9.4.CONSTANTPROPAGATION6339.4.1Data-FlowValuesfortheConstant-PropagationFrameworkThesetofdata-\rowvaluesisaproductlattice,withonecomponentforeachvariableinaprogram.Thelatticeforasinglevariableconsistsofthefollowing:1.Allconstantsappropriateforthetypeofthevariable.2.Thevaluenac,whichstandsfornot-a-constant.Avariableismappedtothisvalueifitisdeterminednottohaveaconstantvalue.Thevariablemayhavebeenassignedaninputvalue,orderivedfromavariablethatisnotaconstant,orassigneddi\u000berentconstantsalongdi\u000berentpathsthatleadtothesameprogrampoint.3.Thevalueundef,whichstandsforunde\fned.Avariableisassignedthisvalueifnothingmayyetbeasserted;presumably,node\fnitionofthevariablehasbeendiscoveredtoreachthepointinquestion.Notethatnacandundefarenotthesame;theyareessentiallyopposites.nacsayswehaveseensomanywaysavariablecouldbede\fnedthatweknowitisnotconstant;undefsayswehaveseensolittleaboutthevariablethatwecannotsayanythingatall.Thesemilatticeforatypicalinteger-valuedvariableisshowninFig.9.25.Herethetopelementisundef,andthebottomelementisnac.Thatis,thegreatestvalueinthepartialorderisundefandtheleastisnac.Theconstantvaluesareunordered,buttheyarealllessthanundefandgreaterthannac.AsdiscussedinSection9.3.1,themeetoftwovaluesistheirgreatestlowerbound.Thus,forallvaluesv,undef^v=vandnac^v=nac:Foranyconstantc,c^c=candgiventwodistinctconstantsc1andc2,c1^c2=nac:Adata-\rowvalueforthisframeworkisamapfromeachvariableintheprogramtooneofthevaluesintheconstantsemilattice.Thevalueofavariablevinamapmisdenotedbym(v).9.4.2TheMeetfortheConstant-PropagationFrameworkThesemilatticeofdata-\rowvaluesissimplytheproductofthesemilatticeslikeFig.9.25,oneforeachvariable.Thus,m\u0014m0ifandonlyifforallvariablesvwehavem(v)\u0014m0(v).Putanotherway,m^m0=m00ifm00(v)=m(v)^m0(v)forallvariablesv.634CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS −3 −2 −1 0 1. . . NAC UNDEF 23 . . .Figure9.25:Semilatticerepresentingthepossible\\values\"ofasingleintegervariable9.4.3TransferFunctionsfortheConstant-PropagationFrameworkWeassumeinthefollowingthatabasicblockcontainsonlyonestatement.Transferfunctionsforbasicblockscontainingseveralstatementscanbecon-structedbycomposingthefunctionscorrespondingtoindividualstatements.ThesetFconsistsofcertaintransferfunctionsthatacceptamapofvariablestovaluesintheconstantlatticeandreturnanothersuchmap.Fcontainstheidentityfunction,whichtakesamapasinputandreturnsthesamemapasoutput.Falsocontainstheconstanttransferfunctionfortheentrynode.Thistransferfunction,givenanyinputmap,returnsamapm0,wherem0(v)=undef,forallvariablesv.Thisboundaryconditionmakessense,becausebeforeexecutinganyprogramstatementstherearenode\fnitionsforanyvariables.Ingeneral,letfsbethetransferfunctionofstatements,andletmandm0representdata-\rowvaluessuchthatm0=fs(m).Weshalldescribefsintermsoftherelationshipbetweenmandm0.1.Ifsisnotanassignmentstatement,thenfsissimplytheidentityfunction.2.Ifsisanassignmenttovariablex,thenm0(v)=m(v),forallvariablesv6=x,andm0(x)isde\fnedasfollows:(a)Iftheright-hand-side(RHS)ofthestatementsisaconstantc,thenm0(x)=c.(b)IftheRHSisoftheformy+z,then9m0(x)=8<:m(y)+m(z)ifm(y)andm(z)areconstantvaluesnacifeitherm(y)orm(z)isnacundefotherwise(c)IftheRHSisanyotherexpression(e.g.afunctioncallorassignmentthroughapointer),thenm0(x)=nac.9.4.CONSTANTPROPAGATION6359.4.4MonotonicityoftheConstant-PropagationFrameworkLetusshowthattheconstantpropagationframeworkismonotone.First,wecanconsiderthee\u000bectofafunctionfsonasinglevariable.Inallbutcase2(b),fseitherdoesnotchangethevalueofm(x),oritchangesthemaptoreturnaconstantornac.Inthesecases,fsmustsurelybemonotone.Forcase2(b),thee\u000bectoffsistabulatedinFig9.26.The\frstandsecondcolumnsrepresentthepossibleinputvaluesofyandz;thelastrepresentstheoutputvalueofx.Thevaluesareorderedfromthegreatesttothesmallestineachcolumnorsubcolumn.Toshowthatthefunctionismonotone,wecheckthatforeachpossibleinputvalueofy,thevalueofxdoesnotgetbiggerasthevalueofzgetssmaller.Forexample,inthecasewhereyhasaconstantvaluec1,asthevalueofzvariesfromundeftoc2tonac,thevalueofxvariesfromundef,toc1+c2,andthentonac,respectively.Wecanrepeatthisprocedureforallthepossiblevaluesofy.Becauseofsymmetry,wedonotevenneedtorepeattheprocedureforthesecondoperandbeforeweconcludethattheoutputvaluecannotgetlargerastheinputgetssmaller.636CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS x = 2 y = 3 y = 2 x = 3 BB B 12 3 EXIT z = x+yFigure9.27:Anexampledemonstratingthattheconstantpropagationframe-workisnotdistributiveyieldsanac,theoutputproducedbyAlgorithm9.25isthatz=nacattheexitoftheprogram.Thisresultissafe,butimprecise.Algorithm9.25isimprecisebecauseitdoesnotkeeptrackofthecorrelationthatwheneverxis2,yis3,andviceversa.Itispossible,butsigni\fcantlymoreexpensive,touseamorecomplexframeworkthattracksallthepossibleequalitiesthatholdamongpairsofexpressionsinvolvingthevariablesintheprogram;thisapproachisdiscussedinExercise9.4.2.Theoretically,wecanattributethislossofprecisiontothenondistributivityoftheconstantpropagationframework.Letf1,f2,andf3bethetransferfunctionsrepresentingblocksB1,B2andB3,respectively.AsshowninFig9.28,f3\u0000f1(m0)^f2(m0)\u0001<f3\u0000f1(m0)\u0001^f3\u0000f2(m0)\u0001renderingtheframeworknondistributive.29.4.CONSTANTPROPAGATION6379.4.6InterpretationoftheResultsThevalueundefisusedintheiterativealgorithmfortwopurposes:toinitializetheentrynodeandtoinitializetheinteriorpointsoftheprogrambeforetheiterations.Themeaningisslightlydi\u000berentinthetwocases.The\frstsaysthatvariablesareunde\fnedatthebeginningoftheprogramexecution;thesecondsaysthatforlackofinformationatthebeginningoftheiterativeprocess,weapproximatethesolutionwiththetopelementundef.Attheendoftheiterativeprocess,thevariablesattheexitoftheentrynodewillstillholdtheundefvalue,sinceOUT[entry]neverchanges.Itispossiblethatundef'smayshowupatsomeotherprogrampoints.Whentheydo,itmeansthatnode\fnitionshavebeenobservedforthatvariablealonganyofthepathsleadinguptothatprogrampoint.Noticethatwiththewaywede\fnethemeetoperator,aslongasthereexistsapaththatde\fnesavariablereachingaprogrampoint,thevariablewillnothaveanundefvalue.Ifallthede\fnitionsreachingaprogrampointhavethesameconstantvalue,thevariableisconsideredaconstanteventhoughitmaynotbede\fnedalongsomeprogrampath.Byassumingthattheprogramiscorrect,thealgorithmcan\fndmorecon-stantsthanitotherwisewould.Thatis,thealgorithmconvenientlychoosessomevaluesforthosepossiblyunde\fnedvariablesinordertomakethepro-grammoree\u000ecient.Thischangeislegalinmostprogramminglanguages,sinceunde\fnedvariablesareallowedtotakeonanyvalue.Ifthelanguagesemanticsrequiresthatallunde\fnedvariablesbegivensomespeci\fcvalue,thenwemustchangeourproblemformulationaccordingly.Andifinsteadweareinterestedin\fndingpossiblyunde\fnedvariablesinaprogram,wecanformulateadi\u000berentdata-\rowanalysistoprovidethatresult(seeExercise9.4.1).Example9.27:InFig.9.29,thevaluesofxare10andundefattheexitofbasicblocksB2andB3,respectively.Sinceundef^10=10,thevalueofxis10onentrytoblockB4.Thus,blockB5,wherexisused,canbeoptimizedbyreplacingxby10.HadthepathexecutedbeenB1!B3!B4!B5,thevalueofxreachingbasicblockB5wouldhavebeenunde\fned.So,itappearsincorrecttoreplacetheuseofxby10.However,ifitisimpossibleforpredicateQtobefalsewhileQ0istrue,thenthisexecutionpathneveroccurs.Whiletheprogrammermaybeawareofthatfact,itmaywellbebeyondthecapabilityofanydata-\rowanalysistodetermine.Thus,ifweassumethattheprogramiscorrectandthatallthevariablesarede\fnedbeforetheyareused,itisindeedcorrectthatthevalueofxatthebeginningofbasicblockB5canonlybe10.Andiftheprogramisincorrecttobeginwith,thenchoosing10asthevalueofxcannotbeworsethanallowingxtoassumesomerandomvalue.29.4.7ExercisesforSection9.4!Exercise9.4.1:Supposewewishtodetectallpossibilityofavariablebeing638CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS if Q goto x = 10 if Q’ goto = x B B 2 5 B B B B B B B 1 23 4 56 7Figure9.29:Meetofundefandaconstantuninitializedalonganypathtoapointwhereitisused.Howwouldyoumodifytheframeworkofthissectiontodetectsuchsituations?!!Exercise9.4.2:Aninterestingandpowerfuldata-\row-analysisframeworkisobtainedbyimaginingthedomainVtobeallpossiblepartitionsofexpressions,sothattwoexpressionsareinthesameclassifandonlyiftheyarecertaintohavethesamevaluealonganypathtothepointinquestion.Toavoidhavingtolistanin\fnityofexpressions,wecanrepresentVbylistingonlytheminimalpairsofequivalentexpressions.Forexample,ifweexecutethestatementsa=bc=a+dthentheminimalsetofequivalencesisfa\u0011b;c\u0011a+dg.Fromthesefollowotherequivalences,suchasc\u0011b+danda+e\u0011b+e,butthereisnoneedtolisttheseexplicitly.a)Whatistheappropriatemeetoperatorforthisframework?b)Giveadatastructuretorepresentdomainvaluesandanalgorithmtoimplementthemeetoperator.c)Whataretheappropriatefunctionstoassociatewithstatements?Explainthee\u000bectthatastatementsuchasa=b+cshouldhaveonapartitionofexpressions(i.e.,onavalueinV).d)Isthisframeworkmonotone?Distributive?9.5.PARTIAL-REDUNDANCYELIMINATION6399.5Partial-RedundancyEliminationInthissection,weconsiderindetailhowtominimizethenumberofexpressionevaluations.Thatis,wewanttoconsiderallpossibleexecutionsequencesina\rowgraph,andlookatthenumberoftimesanexpressionsuchasx+yisevaluated.Bymovingaroundtheplaceswherex+yisevaluatedandkeepingtheresultinatemporaryvariablewhennecessary,weoftencanreducethenumberofevaluationsofthisexpressionalongmanyoftheexecutionpaths,whilenotincreasingthatnumberalonganypath.Notethatthenumberofdi\u000berentplacesinthe\rowgraphwherex+yisevaluatedmayincrease,butthatisrelativelyunimportant,aslongasthenumberofevaluationsoftheexpressionx+yisreduced.Applyingthecodetransformationdevelopedhereimprovestheperformanceoftheresultingcode,since,asweshallsee,anoperationisneverappliedunlessitabsolutelyhastobe.Everyoptimizingcompilerimplementssomethinglikethetransformationdescribedhere,evenifitusesaless\\aggressive\"algorithmthantheoneofthissection.However,thereisanothermotivationfordiscussingtheproblem.Findingtherightplaceorplacesinthe\rowgraphatwhichtoevaluateeachexpressionrequiresfourdi\u000berentkindsofdata-\rowanalyses.Thus,thestudyof\\partial-redundancyelimination,\"asminimizingthenumberofexpressionevaluationsiscalled,willenhanceourunderstandingoftheroledata-\rowanalysisplaysinacompiler.Redundancyinprogramsexistsinseveralforms.AsdiscussedinSection9.1.4,itmayexistintheformofcommonsubexpressions,whereseveralevalua-tionsoftheexpressionproducethesamevalue.Itmayalsoexistintheformofaloop-invariantexpressionthatevaluatestothesamevalueineveryiterationoftheloop.Redundancymayalsobepartial,ifitisfoundalongsomeofthepaths,butnotnecessarilyalongallpaths.Commonsubexpressionsandloop-invariantexpressionscanbeviewedasspecialcasesofpartialredundancy;thusasinglepartial-redundancy-eliminationalgorithmcanbedevisedtoeliminateallthevariousformsofredundancy.Inthefollowing,we\frstdiscussthedi\u000berentformsofredundancy,inordertobuildupourintuitionabouttheproblem.Wethendescribethegeneralizedredundancy-eliminationproblem,and\fnallywepresentthealgorithm.Thisalgorithmisparticularlyinteresting,becauseitinvolvessolvingmultipledata-\rowproblems,inboththeforwardandbackwarddirections.9.5.1TheSourcesofRedundancyFigure9.30illustratesthethreeformsofredundancy:commonsubexpressions,loop-invariantexpressions,andpartiallyredundantexpressions.The\fgureshowsthecodebothbeforeandaftereachoptimization.640CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS a = b+c t = b+c a = t (b) 2B B 3 2B B 3 B B 1 4 2B B B 1 4 2B a = b+c d = b+c t = b+c a = t t = b+c d = t (c) b = 7 B B B 1 3 4 d = b+c (a) t = b+c a = t b = 7 t = b+c d = t e = t B B B 1 3 4 a = b+c e = b+cFigure9.30:Examplesof(a)globalcommonsubexpression,(b)loop-invariantcodemotion,(c)partial-redundancyelimination.GlobalCommonSubexpressionsInFig.9.30(a),theexpressionb+ccomputedinblockB4isredundant;ithasalreadybeenevaluatedbythetimethe\rowofcontrolreachesB4regardlessofthepathtakentogetthere.Asweobserveinthisexample,thevalueoftheexpressionmaybedi\u000berentondi\u000berentpaths.Wecanoptimizethecodebystoringtheresultofthecomputationsofb+cinblocksB2andB3inthesametemporaryvariable,sayt,andthenassigningthevalueofttothevariableeinblockB4,insteadofreevaluatingtheexpression.Hadtherebeenanassignmenttoeitherborcafterthelastcomputationofb+cbutbeforeblockB4,theexpressioninblockB4wouldnotberedundant.Formally,wesaythatanexpressionb+cis(fully)redundantatpointp,ifitisanavailableexpression,inthesenseofSection9.2.6,atthatpoint.Thatis,theexpressionb+chasbeencomputedalongallpathsreachingp,andthevariablesbandcwerenotrede\fnedafterthelastexpressionwasevaluated.Thelatterconditionisnecessary,becauseeventhoughtheexpressionb+cistextuallyexecutedbeforereachingthepointp,thevalueofb+ccomputedat9.5.PARTIAL-REDUNDANCYELIMINATION641642CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSwhilec{S;}inthesamewayasthestatementifc{repeatS;untilnotc;}Inthisway,loop-invariantexpressionscanbeplacedjustpriortotherepeat-untilconstruct.Unlikecommon-subexpressionelimination,wherearedundantexpressioncomputationissimplydropped,loop-invariant-expressioneliminationrequiresanexpressionfrominsidethelooptomoveoutsidetheloop.Thus,thisopti-mizationisgenerallyknownas\\loop-invariantcodemotion.\"Loop-invariantcodemotionmayneedtoberepeated,becauseonceavariableisdeterminedtotohavealoop-invariantvalue,expressionsusingthatvariablemayalsobecomeloop-invariant.PartiallyRedundantExpressionsAnexampleofapartiallyredundantexpressionisshowninFig.9.30(c).Theexpressionb+cinblockB4isredundantonthepathB1!B2!B4,butnotonthepathB1!B3!B4.Wecaneliminatetheredundancyontheformerpathbyplacingacomputationofb+cinblockB3.Alltheresultsofb+carewrittenintoatemporaryvariablet,andthecalculationinblockB4isreplacedwitht.Thus,likeloop-invariantcodemotion,partial-redundancyeliminationrequirestheplacementofnewexpressioncomputations.9.5.2CanAllRedundancyBeEliminated?Isitpossibletoeliminateallredundantcomputationsalongeverypath?Theansweris\\no,\"unlessweareallowedtochangethe\rowgraphbycreatingnewblocks.Example9.28:IntheexampleshowninFig.9.31(a),theexpressionofb+ciscomputedredundantlyinblockB4iftheprogramfollowstheexecutionpathB1!B2!B4.However,wecannotsimplymovethecomputationofb+ctoblockB3,becausedoingsowouldcreateanextracomputationofb+cwhenthepathB1!B3!B5istaken.Whatwewouldliketodoistoinsertthecomputationofb+conlyalongtheedgefromblockB3toblockB4.Wecandosobyplacingtheinstructioninanewblock,say,B6,andmakingthe\rowofcontrolfromB3gothroughB6beforeitreachesB4.ThetransformationisshowninFig.9.31(b).29.5.PARTIAL-REDUNDANCYELIMINATION643 B 4 B 2 B 5 B BB 1 23t = b+c a = t t = b+c d = t B 6 (b)(a) . . . a = b+c d = b+c B B BB 1 3 45 . . .Figure9.31:B3!B4isacriticaledgeWede\fneacriticaledgeofa\rowgraphtobeanyedgeleadingfromanodewithmorethanonesuccessortoanodewithmorethanonepredecessor.Byintroducingnewblocksalongcriticaledges,wecanalways\fndablocktoaccommodatethedesiredexpressionplacement.Forinstance,theedgefromB3toB4inFig.9.31(a)iscritical,becauseB3hastwosuccessors,andB4hastwopredecessors.Addingblocksmaynotbesu\u000ecienttoallowtheeliminationofallredundantcomputations.AsshowninExample9.29,wemayneedtoduplicatecodesoastoisolatethepathwhereredundancyisfound.Example9.29:IntheexampleshowninFigure9.32(a),theexpressionofb+ciscomputedredundantlyalongthepathB1!B2!B4!B6.Wewouldliketoremovetheredundantcomputationofb+cfromblockB6inthispathandcomputetheexpressiononlyalongthepathB1!B3!B4!B6.However,thereisnosingleprogrampointoredgeinthesourceprogramthatcorrespondsuniquelytothelatterpath.Tocreatesuchaprogrampoint,wecanduplicatethepairofblocksB4andB6,withonepairreachedthroughB2andtheotherreachedthroughB3,asshowninFigure9.32(b).Theresultofb+cissavedinvariabletinblockB2,andmovedtovariabledinB06,thecopyofB6reachedfromB2.2Sincethenumberofpathsisexponentialinthenumberofconditionalbranchesintheprogram,eliminatingallredundantexpressionscangreatlyincreasethesizeoftheoptimizedcode.Wethereforerestrictourdiscussionofredundancy-eliminationtechniquestothosethatmayintroduceadditionalblocksbutthatdonotduplicateportionsofthecontrol\rowgraph.644CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS a = b+c d = b+c a = b+c t = a d = t d = b+c BB B B BB B B BB B BB B 1 23 4 56 7 1 23 4B’ B’ 4 5 6 6 7 (a) (b)Figure9.32:Codeduplicationtoeliminateredundancies9.5.3TheLazy-Code-MotionProblemItisdesirableforprogramsoptimizedwithapartial-redundancy-eliminationalgorithmtohavethefollowingproperties:1.Allredundantcomputationsofexpressionsthatcanbeeliminatedwithoutcodeduplicationareeliminated.2.Theoptimizedprogramdoesnotperformanycomputationthatisnotintheoriginalprogramexecution.3.Expressionsarecomputedatthelatestpossibletime.Thelastpropertyisimportantbecausethevaluesofexpressionsfoundtoberedundantareusuallyheldinregistersuntiltheyareused.Computingavalueaslateaspossibleminimizesitslifetime|thedurationbetweenthetimethevalueisde\fnedandthetimeitislastused,whichinturnminimizesitsusageofaregister.Werefertotheoptimizationofeliminatingpartialredundancywiththegoalofdelayingthecomputationsasmuchaspossibleaslazycodemotion.Tobuildupourintuitionoftheproblem,we\frstdiscusshowtoreasonaboutpartialredundancyofasingleexpressionalongasinglepath.Forconvenience,weassumefortherestofthediscussionthateverystatementisabasicblockofitsown.9.5.PARTIAL-REDUNDANCYELIMINATION645FullRedundancyAnexpressioneinblockBisredundantifalongallpathsreachingB,ehasbeenevaluatedandtheoperandsofehavenotbeenrede\fnedsubsequently.LetSbethesetofblocks,eachcontainingexpressione,thatrenderseinBredundant.ThesetofedgesleavingtheblocksinSmustnecessarilyformacutset,whichifremoved,disconnectsblockBfromtheentryoftheprogram.Moreover,nooperandsofearerede\fnedalongthepathsthatleadfromtheblocksinStoB.PartialRedundancyIfanexpressioneinblockBisonlypartiallyredundant,thelazy-code-motionalgorithmattemptstorenderefullyredundantinBbyplacingadditionalcopiesoftheexpressionsinthe\rowgraph.Iftheattemptissuccessful,theoptimized\rowgraphwillalsohaveasetofbasicblocksS,eachcontainingexpressione,andwhoseoutgoingedgesareacutsetbetweentheentryandB.Likethefullyredundantcase,nooperandsofearerede\fnedalongthepathsthatleadfromtheblocksinStoB.9.5.4AnticipationofExpressionsThereisanadditionalconstraintimposedoninsertedexpressionstoensurethatnoextraoperationsareexecuted.Copiesofanexpressionmustbeplacedonlyatprogrampointswheretheexpressionisanticipated.Wesaythatanexpressionb+cisanticipatedatpointpifallpathsleadingfromthepointpeventuallycomputethevalueoftheexpressionb+cfromthevaluesofbandcthatareavailableatthatpoint.LetusnowexaminewhatittakestoeliminatepartialredundancyalonganacyclicpathB1!B2!:::!Bn.SupposeexpressioneisevaluatedonlyinblocksB1andBn,andthattheoperandsofearenotrede\fnedinblocksalongthepath.Thereareincomingedgesthatjointhepathandthereareoutgoingedgesthatexitthepath.WeseethateisnotanticipatedattheentryofblockBiifandonlyifthereexistsanoutgoingedgeleavingblockBj,i\u0014j<n,thatleadstoanexecutionpaththatdoesnotusethevalueofe.Thus,anticipationlimitshowearlyanexpressioncanbeinserted.WecancreateacutsetthatincludestheedgeBi\u00001!BiandthatrenderseredundantinBnifeiseitheravailableoranticipatedattheentryofBi.IfeisanticipatedbutnotavailableattheentryofBi,wemustplaceacopyoftheexpressionealongtheincomingedge.Wehaveachoiceofwheretoplacethecopiesoftheexpression,sincethereareusuallyseveralcutsetsinthe\rowgraphthatsatisfyalltherequirements.Intheabove,computationisintroducedalongtheincomingedgestothepathofinterestandsotheexpressioniscomputedasclosetotheuseaspossible,withoutintroducingredundancy.Notethattheseintroducedoperationsmaythemselvesbepartiallyredundantwithotherinstancesofthesameexpression646CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSintheprogram.Suchpartialredundancymaybeeliminatedbymovingthesecomputationsfurtherup.Insummary,anticipationofexpressionslimitshowearlyanexpressioncanbeplaced;youcannotplaceanexpressionsoearlythatitisnotanticipatedwhereyouplaceit.Theearlieranexpressionisplaced,themoreredundancycanberemoved,andamongallsolutionsthateliminatethesameredundancies,theonethatcomputestheexpressionsthelatestminimizesthelifetimesoftheregistersholdingthevaluesoftheexpressionsinvolved.9.5.5TheLazy-Code-MotionAlgorithmThisdiscussionthusmotivatesafour-stepalgorithm.The\frststepusesan-ticipationtodeterminewhereexpressionscanbeplaced;thesecondstep\fndstheearliestcutset,amongthosethateliminateasmanyredundantoperationsaspossiblewithoutduplicatingcodeandwithoutintroducinganyunwantedcomputations.Thisstepplacesthecomputationsatprogrampointswherethevaluesoftheirresultsare\frstanticipated.Thethirdstepthenpushesthecutsetdowntothepointwhereanyfurtherdelaywouldalterthesemanticsoftheprogramorintroduceredundancy.Thefourthand\fnalstepisasimplepasstocleanupthecodebyremovingassignmentstotemporaryvariablesthatareusedonlyonce.Eachstepisaccomplishedwithadata-\rowpass:the\frstandfourtharebackward-\rowproblems,thesecondandthirdareforward-\rowproblems.AlgorithmOverview1.Findalltheexpressionsanticipatedateachprogrampointusingaback-warddata-\rowpass.2.Thesecondstepplacesthecomputationwherethevaluesoftheexpres-sionsare\frstanticipatedalongsomepath.Afterwehaveplacedcopiesofanexpressionwheretheexpressionis\frstanticipated,theexpressionwouldbeavailableatprogrampointpifithasbeenanticipatedalongallpathsreachingp.Availabilitycanbesolvedusingaforwarddata-\rowpass.Ifwewishtoplacetheexpressionsattheearliestpossibleposi-tions,wecansimply\fndthoseprogrampointswheretheexpressionsareanticipatedbutarenotavailable.3.Executinganexpressionassoonasitisanticipatedmayproduceavaluelongbeforeitisused.Anexpressionispostponableataprogrampointiftheexpressionhasbeenanticipatedandhasyettobeusedalonganypathreachingtheprogrampoint.Postponableexpressionsarefoundusingaforwarddata-\rowpass.Weplaceexpressionsatthoseprogrampointswheretheycannolongerbepostponed.4.Asimple,\fnalbackwarddata-\rowpassisusedtoeliminateassignmentstotemporaryvariablesthatareusedonlyonceintheprogram.9.5.PARTIAL-REDUNDANCYELIMINATION647PreprocessingStepsWenowpresentthefulllazy-code-motionalgorithm.Tokeepthealgorithmsimple,weassumethatinitiallyeverystatementisinabasicblockofitsown,andweonlyintroducenewcomputationsofexpressionsatthebeginningsofblocks.Toensurethatthissimpli\fcationdoesnotreducethee\u000bectivenessofthetechnique,weinsertanewblockbetweenthesourceandthedestinationofanedgeifthedestinationhasmorethanonepredecessor.Doingsoobviouslyalsotakescareofallcriticaledgesintheprogram.WeabstractthesemanticsofeachblockBwithtwosets:e648CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS B B B B B B B B B B B 1 2 3 4 5 6 7 8 9 10 11 B B B B B B B B B B B 1 2 3 4 5 6 7 8 9 10 11 (a) (b) c = 2 a = b+c d = b+c e = b+c c = 2 t = b+c a = t t = b+c d = t e = t anticipated not available earliest postponableFigure9.33:FlowgraphofExample9.30path,themeetoperatorissetintersection.Consequently,theinteriorpointsmustbeinitializedtotheuniversalsetU,aswasdiscussedfortheavailable-expressionsprobleminSection9.2.6.AvailableExpressionsAttheendofthissecondstep,copiesofanexpressionwillbeplacedatprogrampointswheretheexpressionis\frstanticipated.Ifthatisthecase,anexpressionwillbeavailableatprogrampointpifitisanticipatedalongallpathsreachingp.Thisproblemissimilartoavailable-expressionsdescribedinSection9.2.6.Thetransferfunctionusedhereisslightlydi\u000berentthough.Anexpressionisavailableonexitfromablockifitis9.5.PARTIAL-REDUNDANCYELIMINATION649650CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.5.PARTIAL-REDUNDANCYELIMINATION651 a = b+c d = b+c B B B B 1 2 3 4Figure9.35:FlowgraphforExample9.31illustratingtheuseofavailabilityPostponableExpressionsThethirdsteppostponesthecomputationofexpressionsasmuchaspossiblewhilepreservingtheoriginalprogramsemanticsandminimizingredundancy.Example9.33illustratestheimportanceofthisstep.Example9.33:Inthe\rowgraphshowninFigure9.36,theexpressionb+ciscomputedtwicealongthepathB1!B5!B6!B7.Theexpressionb+cisanticipatedevenatthebeginningofblockB1.Ifwecomputetheexpressionassoonasitisanticipated,wewouldhavecomputedtheexpressionb+cinB1.Theresultwouldhavetobesavedfromthebeginning,throughtheexecutionoftheloopcomprisingblocksB2andB3,untilitisusedinblockB7.Insteadwecandelaythecomputationofexpressionb+cuntilthebeginningofB5anduntilthe\rowofcontrolisabouttotransitionfromB4toB7.2Formally,anexpressionx+yispostponabletoaprogrampointpifanearlyplacementofx+yisencounteredalongeverypathfromtheentrynodetop,andthereisnosubsequentuseofx+yafterthelastsuchplacement.Example9.34:Letusagainconsiderexpressionb+cinFig.9.33.Thetwoearliestpointsforb+careB3andB5;notethatthesearethetwoblocksthatarebothlightlyanddarklyshadedinFig.9.33(a),indicatingthatb+cisbothanticipatedandnotavailablefortheseblocks,andonlytheseblocks.Wecannotpostponeb+cfromB5toB6,becauseb+cisusedinB5.WecanpostponeitfromB3toB4,however.Butwecannotpostponeb+cfromB4toB7.Thereasonisthat,althoughb+cisnotusedinB4,placingitscomputationatB7insteadwouldleadtoa652CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS a = b+c d = b+c B B B B B B B 1 5 6 7 4 3 2Figure9.36:FlowgraphforExample9.33toillustratetheneedforpostponinganexpressionredundantcomputationofb+calongthepathB5!B6!B7.Asweshallsee,B4isoneofthelatestplaceswecancomputeb+c.2Thedata-\rowequationsforthepostponable-expressionsproblemareshowninFig9.34(c).Theanalysisisaforwardpass.Wecannot\\postpone\"anexpressiontotheentryoftheprogram,soOUT[entry]=;.AnexpressionispostponabletotheexitofblockBifitisnotusedintheblock,andeitheritispostponabletotheentryofBoritisinearliest[B].Anexpressionisnotpostponabletotheentryofablockunlessallitspredecessorsincludetheexpressionintheirpostponablesetsattheirexits.Thus,themeetoperatorissetintersection,andtheinteriorpointsmustbeinitializedtothetopelementofthesemilattice|theuniversalset.Roughlyspeaking,anexpressionisplacedatthefrontierwhereanexpressiontransitionsfrombeingpostponabletonotbeingpostponable.Morespeci\fcally,anexpressionemaybeplacedatthebeginningofablockBonlyiftheexpres-sionisinB'searliestorpostponablesetuponentry.Inaddition,Bisinthepostponementfrontierofeifoneofthefollowingholds:1.eisnotinpostponable[B]:out.Inotherwords,eisine9.5.PARTIAL-REDUNDANCYELIMINATION653Example9.35:Fig.9.33(b)showstheresultoftheanalysis.Thelight-shadedboxesrepresenttheblockswhoseearliestsetincludesb+c.Thedarkshadowsindicatethosethatincludeb+cintheirpostponableset.ThelatestplacementsoftheexpressionsarethustheentriesofblocksB4andB5,since1.b+cisinthepostponablesetofB4butnotB7,and2.B5'searliestsetincludesb+canditusesb+c.TheexpressionisstoredintothetemporaryvariabletinblocksB4andB5,andtisusedinplaceofb+ceverywhereelse,asshowninthe\fgure.2UsedExpressionsFinally,abackwardpassisusedtodetermineifthetemporaryvariablesin-troducedareusedbeyondtheblocktheyarein.Wesaythatanexpressionisusedatpointpifthereexistsapathleadingfrompthatusestheexpressionbeforethevalueisreevaluated.Thisanalysisisessentiallylivenessanalysis(forexpressions,ratherthanforvariables).Thedata-\rowequationsfortheusedexpressionsproblemareshowninFig9.34(d).Theanalysisisabackwardpass.AusedexpressionattheexitofablockBisausedexpressiononentryonlyifitisnotinthelatestset.Ablockgenerates,asnewuses,thesetofexpressionsine654CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS4.ComputetheearliestplacementsforallblocksB:earliest[B]=anticipated[B]:in\u0000available[B]:in5.Findpostponable[B]:inforallblocksBasde\fnedinFig.9.34(c).6.ComputethelatestplacementsforallblocksB:latest[B]=(earliest[B][postponable[B]:in)\\\u0010e9.6.LOOPSINFLOWGRAPHS6553.Thelatestplacementofanexpressionisgivenbyprogrampointswhereanexpressioncannolongerbepostponed.Expressionsarepostponableataprogrampointifforallpathsreachingtheprogrampoint,nouseoftheexpressionhasbeenencountered.Postponableexpressionsarefoundwithaforwardsdata-\rowanalysiswithaset-intersectionmeetoperator.4.Temporaryassignmentsareeliminatedunlesstheyareusedbysomepathsubsequently.We\fndusedexpressionswithabackwardsdata-\rowanal-ysis,thistimewithaset-unionmeetoperator.9.5.6ExercisesforSection9.5Exercise9.5.1:Forthe\rowgraphinFig.9.37:a)Computeanticipatedforthebeginningandendofeachblock.b)Computeavailableforthebeginningandendofeachblock.c)Computeearliestforeachblock.d)Computepostponableforthebeginningandendofeachblock.e)Computeusedforthebeginningandendofeachblock.f)Computelatestforeachblock.g)Introducetemporaryvariablet;showwhereitiscomputedandwhereitisused.Exercise9.5.2:RepeatExercise9.5.1forthe\rowgraphofFig.9.10(seetheexercisestoSection9.1).Youmaylimityouranalysistotheexpressionsa+b,c\u0000a,andb\u0003d.!!Exercise9.5.3:Theconceptsdiscussedinthissectioncanalsobeappliedtoeliminatepartiallydeadcode.Ade\fnitionofavariableispartiallydeadifthevariableisliveonsomepathsandnotothers.Wecanoptimizetheprogramexecutionbyonlyperformingthede\fnitionalongpathswherethevariableislive.Unlikepartial-redundancyelimination,whereexpressionsaremovedbeforetheoriginal,thenewde\fnitionsareplacedaftertheoriginal.Developanalgorithmtomovepartiallydeadcode,soexpressionsareevaluatedonlywheretheywilleventuallybeused.9.6LoopsinFlowGraphsInourdiscussionsofar,loopshavenotbeenhandleddi\u000berently;theyhavebeentreatedjustlikeanyotherkindofcontrol\row.However,loopsareimportantbecauseprogramsspendmostoftheirtimeexecutingthem,andoptimizations656CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS = x+y x = = x+y = x+y ENTRY EXIT B B B B 1 2 3 4Figure9.37:FlowgraphforExercise9.5.1thatimprovetheperformanceofloopscanhaveasigni\fcantimpact.Thus,itisessentialthatweidentifyloopsandtreatthemspecially.Loopsalsoa\u000becttherunningtimeofprogramanalyses.Ifaprogramdoesnotcontainanyloops,wecanobtaintheanswerstodata-\rowproblemsbymakingjustonepassthroughtheprogram.Forexample,aforwarddata-\rowproblemcanbesolvedbyvisitingallthenodesonce,intopologicalorder.Inthissection,weintroducethefollowingconcepts:dominators,depth-\frstordering,backedges,graphdepth,andreducibility.Eachoftheseisneededforoursubsequentdiscussionson\fndingloopsandthespeedofconvergenceofiterativedata-\rowanalysis.9.6.1DominatorsWesaynodedofa\rowgraphdominatesnoden,writtenddomn,ifeverypathfromtheentrynodeofthe\rowgraphtongoesthroughd.Notethatunderthisde\fnition,everynodedominatesitself.Example9.37:Considerthe\rowgraphofFig.9.38,withentrynode1.Theentrynodedominateseverynode(thisstatementistrueforevery\rowgraph).Node2dominatesonlyitself,sincecontrolcanreachanyothernodealongapaththatbeginswith1!3.Node3dominatesallbut1and2.Node4dominates9.6.LOOPSINFLOWGRAPHS657allbut1,2and3,sinceallpathsfrom1mustbeginwith1!2!3!4or1!3!4.Nodes5and6dominateonlythemselves,since\rowofcontrolcanskiparoundeitherbygoingthroughtheother.Finally,7dominates7,8,9,and10;8dominates8,9,and10;9and10dominateonlythemselves.2 1 2 3 4 56 7 8 910Figure9.38:A\rowgraphAusefulwayofpresentingdominatorinformationisinatree,calledthedominatortree,inwhichtheentrynodeistheroot,andeachnodeddominatesonlyitsdescendantsinthetree.Forexample,Fig.9.39showsthedominatortreeforthe\rowgraphofFig.9.38. 1 23 4 567 8 910Figure9.39:Dominatortreefor\rowgraphofFig.9.38Theexistenceofdominatortreesfollowsfromapropertyofdominators:eachnodenhasauniqueimmediatedominatormthatisthelastdominatorofnonanypathfromtheentrynodeton.Intermsofthedomrelation,the658CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSimmediatedominatormhasthatpropertythatifd6=nandddomn,thenddomm.Weshallgiveasimplealgorithmforcomputingthedominatorsofeverynodenina\rowgraph,basedontheprinciplethatifp1;p2;:::;pkareallthepredecessorsofn,andd6=n,thenddomnifandonlyifddompiforeachi.Thisproblemcanbeformulatedasaforwarddata-\rowanalysis.Thedata-\rowvaluesaresetsofbasicblocks.Anode'ssetofdominators,otherthanitself,istheintersectionofthedominatorsofallitspredecessors;thusthemeetoperatorissetintersection.ThetransferfunctionforblockBsimplyaddsBitselftothesetofinputnodes.Theboundaryconditionisthattheentrynodedominatesitself.Finally,theinitializationoftheinteriornodesistheuniversalset,thatis,thesetofallnodes.Algorithm9.38:Findingdominators.INPUT:A\rowgraphGwithsetofnodesN,setofedgesEandentrynodeentry.OUTPUT:D(n),thesetofnodesthatdominatenoden,forallnodesninN.METHOD:Findthesolutiontothedata-\rowproblemwhoseparametersareshowninFig.9.40.Thebasicblocksarethenodes.D(n)=OUT[n]forallninN.2Findingdominatorsusingthisdata-\rowalgorithmise\u000ecient.Nodesinthegraphneedtobevisitedonlyafewtimes,asweshallseeinSection9.6.7.9.6.LOOPSINFLOWGRAPHS659660CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.6.2Depth-FirstOrderingAsintroducedinSection2.3.4,adepth-\frstsearchofagraphvisitsallthenodesinthegraphonce,bystartingattheentrynodeandvisitingthenodesasfarawayfromtheentrynodeasquicklyaspossible.Therouteofthesearchinadepth-\frstsearchformsadepth-\frstspanningtree(DFST).RecallfromSection2.3.4thatapreordertraversalvisitsanodebeforevisitinganyofitschildren,whichitthenvisitsrecursivelyinleft-to-rightorder.Also,apostordertraversalvisitsanode'schildren,recursivelyinleft-to-rightorder,beforevisitingthenodeitself.Thereisonemorevariantorderingthatisimportantfor\row-graphanalysis:adepth-\frstorderingisthereverseofapostordertraversal.Thatis,inadepth-\frstordering,wevisitanode,thentraverseitsrightmostchild,thechildtoitsleft,andsoon.However,beforewebuildthetreeforthe\rowgraph,wehavechoicesastowhichsuccessorofanodebecomestherightmostchildinthetree,whichnodebecomesthenextchild,andsoon.Beforewegivethealgorithmfordepth-\frstordering,letusconsideranexample.Example9.40:Onepossibledepth-\frstpresentationofthe\rowgraphinFig.9.38isillustratedinFig.9.42.Solidedgesformthetree;dashededgesaretheotheredgesofthe\rowgraph.Adepth-\frsttraversalofthetreeisgivenby:1!3!4!6!7!8!10,thenbackto8,thento9.Wegobackto8oncemore,retreatingto7,6,and4,andthenforwardto5.Weretreatfrom5backto4,thenbackto3and1.From1wegoto2,thenretreatfrom2,backto1,andwehavetraversedtheentiretree.Thepreordersequenceforthetraversalisthus1;3;4;6;7;8;10;9;5;2:ThepostordersequenceforthetraversalofthetreeinFig.9.42is10;9;8;7;6;5;4;3;2;1:Thedepth-\frstordering,whichisthereverseofthepostordersequence,is1;2;3;4;5;6;7;8;9;10:2Wenowgiveanalgorithmthat\fndsadepth-\frstspanningtreeandadepth-\frstorderingofagraph.Itisthisalgorithmthat\fndstheDFSTinFig.9.42fromFig.9.38.Algorithm9.41:Depth-\frstspanningtreeanddepth-\frstordering.INPUT:A\rowgraphG.OUTPUT:ADFSTTofGandanorderingofthenodesofG.9.6.LOOPSINFLOWGRAPHS661 1 32 4 6 7 5 8 10 9Figure9.42:Adepth-\frstpresentationofthe\rowgraphinFig.9.38METHOD:Weusetherecursiveproceduresearch(n)ofFig.9.43.Thealgo-rithminitializesallnodesofGto\\unvisited,\"thencallssearch(n0),wheren0istheentry.Whenitcallssearch(n),it\frstmarksn\\visited\"toavoidaddingntothetreetwice.ItusesctocountfromthenumberofnodesofGdownto1,assigningdepth-\frstnumbersdfn[n]tonodesnaswego.ThesetofedgesTformsthedepth-\frstspanningtreeforG.2Example9.42:Forthe\rowgraphinFig.9.42,Algorithm9.41setscto10andbeginsthesearchbycallingsearch(1).TherestoftheexecutionsequenceisshowninFig.9.44.29.6.3EdgesinaDepth-FirstSpanningTreeWhenweconstructaDFSTfora\rowgraph,theedgesofthe\rowgraphfallintothreecategories.1.Thereareedges,calledadvancingedges,thatgofromanodemtoaproperdescendantofminthetree.AlledgesintheDFSTitselfareadvancingedges.TherearenootheradvancingedgesinFig.9.42,but,forexample,if4!8wereanedge,itwouldbeinthiscategory.2.Thereareedgesthatgofromanodemtoanancestorofminthetree(possiblytomitself).Theseedgesweshalltermretreatingedges.Forexample,4!3,7!4,10!7,8!3,and9!1aretheretreatingedgesinFig.9.42.662CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSvoidsearch(n)fmarkn\\visited\";for(eachsuccessorsofn)if(sis\\unvisited\")faddedgen!stoT;search(s);gdfn[n]=c;c=c\u00001;gmain()fT=;;/*setofedges*/for(eachnodenofG)markn\\unvisited\";c=numberofnodesofG;search(n0);gFigure9.43:Depth-\frstsearchalgorithm3.Thereareedgesm!nsuchthatneithermnornisanancestoroftheotherintheDFST.Edges2!3and5!7aretheonlysuchexamplesinFig.9.42.Wecalltheseedgescrossedges.AnimportantpropertyofcrossedgesisthatifwedrawtheDFSTsochildrenofanodearedrawnfromlefttorightintheorderinwhichtheywereaddedtothetree,thenallcrossedgestravelfromrighttoleft.Itshouldbenotedthatm!nisaretreatingedgeifandonlyifdfn[m]\u0015dfn[n].Toseewhy,notethatifmisadescendantofnintheDFST,thensearch(m)terminatesbeforesearch(n),sodfn[m]\u0015dfn[n].Conversely,ifdfn[m]\u0015dfn[n],thensearch(m)terminatesbeforesearch(n),orm=n.Butsearch(n)musthavebegunbeforesearch(m)ifthereisanedgem!n,orelsethefactthatnisasuccessorofmwouldhavemadenadescendantofmintheDFST.Thusthetimesearch(m)isactiveisasubintervalofthetimesearch(n)isactive,fromwhichitfollowsthatnisanancestorofmintheDFST.9.6.4BackEdgesandReducibilityAbackedgeisanedgea!bwhoseheadbdominatesitstaila.Forany\rowgraph,everybackedgeisretreating,butnoteveryretreatingedgeisabackedge.A\rowgraphissaidtobereducibleifallitsretreatingedgesinanydepth-\frstspanningtreearealsobackedges.Inotherwords,ifagraphisreducible,thenalltheDFST'shavethesamesetofretreatingedges,and9.6.LOOPSINFLOWGRAPHS663Callsearch(1)Node1hastwosuccessors.Supposes=3isconsid-ered\frst;addedge1!3toT.Callsearch(3)Addedge3!4toT.Callsearch(4)Node4hastwosuccessors,4and6.Supposes=6isconsidered\frst;addedge4!6toT.Callsearch(6)Add6!7toT.Callsearch(7)Node7hastwosuccessors,4and8.But4isalreadymarked\\visited\"bysearch(4),sodonothingwhens=4.Fors=8,addedge7!8toT.Callsearch(8)Node8hastwosuccessors,9and10.Supposes=10isconsidered\frst;addedge8!10.Callsearch(10)10hasasuccessor,7,but7isalreadymarked\\visited.\"Thus,search(10)completesbysettingdfn[10]=10andc=9.Returntosearch(8)Sets=9andaddedge8!9toT.Callsearch(9)Theonlysuccessorof9,node1,isalready\\visited,\"sosetdfn[9]=9andc=8.Returntosearch(8)Thelastsuccessorof8,node3,is\\visited,\"sodonothingfors=3.Atthispoint,allsuccessorsof8havebeenconsidered,sosetdfn[8]=8andc=7.Returntosearch(7)Allof7'ssuccessorshavebeenconsidered,sosetdfn[7]=7andc=6.Returntosearch(6)Similarly,6'ssuccessorshavebeenconsidered,sosetdfn[6]=6andc=5.Returntosearch(4)Successor3of4hasbeen\\visited,\"but5hasnot,soadd4!5tothetree.Callsearch(5)Successor7of5hasbeen\\visited,\"thussetdfn[5]=5andc=4.Returntosearch(4)Allsuccessorsof4havebeenconsidered,setdfn[4]=4andc=3.Returntosearch(3)Setdfn[3]=3andc=2.Returntosearch(1)2hasnotbeenvisitedyet,soadd1!2toT.Callsearch(2)Setdfn[2]=2,c=1.Returntosearch(1)Setdfn[1]=1andc=0.Figure9.44:ExecutionofAlgorithm9.41onthe\rowgraphinFig.9.42664CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.6.LOOPSINFLOWGRAPHS6659.6.5DepthofaFlowGraphGivenadepth-\frstspanningtreeforthegraph,thedepthisthelargestnumberofretreatingedgesonanycycle-freepath.Wecanprovethedepthisnevergreaterthanwhatonewouldintuitivelycallthedepthofloopnestinginthe\rowgraph.Ifa\rowgraphisreducible,wemayreplace\\retreating\"by\\back\"inthede\fnitionof\\depth,\"sincetheretreatingedgesinanyDFSTareexactlythebackedges.ThenotionofdepththenbecomesindependentoftheDFSTactuallychosen,andwemaytrulyspeakofthe\\depthofa\rowgraph,\"ratherthanthedepthofa\rowgraphinconnectionwithoneofitsdepth-\frstspanningtrees.Example9.45:InFig.9.42,thedepthis3,sincethereisapath10!7!4!3withthreeretreatingedges,butnocycle-freepathwithfourormoreretreatingedges.Itisacoincidencethatthe\\deepest\"pathherehasonlyretreatingedges;ingeneralwemayhaveamixtureofretreating,advancing,andcrossedgesinadeepestpath.29.6.6NaturalLoopsLoopscanbespeci\fedinasourceprograminmanydi\u000berentways:theycanbewrittenasfor-loops,while-loops,orrepeat-loops;theycanevenbede\fnedusinglabelsandgotostatements.Fromaprogram-analysispointofview,itdoesnotmatterhowtheloopsappearinthesourcecode.Whatmattersiswhethertheyhavethepropertiesthatenableeasyoptimization.Inparticular,wecareaboutwhetheraloophasasingle-entrynode;ifitdoes,compileranalysescanassumecertaininitialconditionstoholdatthebeginningofeachiterationthroughtheloop.Thisopportunitymotivatestheneedforthede\fnitionofa\\naturalloop.\"Anaturalloopisde\fnedbytwoessentialproperties.1.Itmusthaveasingle-entrynode,calledtheheader.Thisentrynodedominatesallnodesintheloop,oritwouldnotbethesoleentrytotheloop.2.Theremustbeabackedgethatenterstheloopheader.Otherwise,itisnotpossibleforthe\rowofcontroltoreturntotheheaderdirectlyfromthe\\loop\";i.e.,therereallyisnoloop.Givenabackedgen!d,wede\fnethenaturalloopoftheedgetobedplusthesetofnodesthatcanreachnwithoutgoingthroughd.Nodedistheheaderoftheloop.Algorithm9.46:Constructingthenaturalloopofabackedge.INPUT:A\rowgraphGandabackedgen!d.666CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSOUTPUT:Thesetloopconsistingofallnodesinthenaturalloopofn!d.METHOD:Letloopbefn,dg.Markdas\\visited,\"sothatthesearchdoesnotreachbeyondd.Performadepth-\frstsearchonthereversecontrol-\rowgraphstartingwithnoden.Insertallthenodesvisitedinthissearchintoloop.Thisprocedure\fndsallthenodesthatreachnwithoutgoingthroughd.2Example9.47:InFig.9.38,thereare\fvebackedges,thosewhoseheadsdominatetheirtails:10!7,7!4,4!3,8!3and9!1.Notethattheseareexactlytheedgesthatonewouldthinkofasformingloopsinthe\rowgraph.Backedge10!7hasnaturalloopf7;8;10g,since8and10aretheonlynodesthatcanreach10withoutgoingthrough7.Backedge7!4hasanaturalloopconsistingoff4;5;6;7;8;10gandthereforecontainstheloopof10!7.Wethusassumethelatterisaninnerloopcontainedinsidetheformer.Thenaturalloopsofbackedges4!3and8!3havethesameheader,node3,andtheyalsohappentohavethesamesetofnodes:f3;4;5;6;7;8;10g.Weshallthereforecombinethesetwoloopsasone.Thisloopcontainsthetwosmallerloopsdiscoveredearlier.Finally,theedge9!1hasasitsnaturallooptheentire\rowgraph,andthereforeistheoutermostloop.Inthisexample,thefourloopsarenestedwithinoneanother.Itistypical,however,tohavetwoloops,neitherofwhichisasubsetoftheother.2Inreducible\rowgraphs,sinceallretreatingedgesarebackedges,wecanassociateanaturalloopwitheachretreatingedge.Thatstatementdoesnotholdfornonreduciblegraphs.Forinstance,thenonreducible\rowgraphinFig.9.45hasacycleconsistingofnodes2and3.Neitheroftheedgesinthecycleisabackedge,sothiscycledoesnot\ftthede\fnitionofanaturalloop.Wedonotidentifythecycleasanaturalloop,anditisnotoptimizedassuch.Thissituationisacceptable,becauseourloopanalysescanbemadesimplerbyassumingthatallloopshavesingle-entrynodes,andnonreducibleprogramsarerareinpracticeanyway.Byconsideringonlynaturalloopsas\\loops,\"wehavetheusefulpropertythatunlesstwoloopshavethesameheader,theyareeitherdisjointoroneisnestedwithintheother.Thus,wehaveanaturalnotionofinnermostloops:loopsthatcontainnootherloops.Whentwonaturalloopshavethesameheader,asinFig.9.46,itishardtotellwhichistheinnerloop.Thus,weshallassumethatwhentwonaturalloopshavethesameheader,andneitherisproperlycontainedwithintheother,theyarecombinedandtreatedasasingleloop.Example9.48:Thenaturalloopsofthebackedges3!1and4!1inFig.9.46aref1;2;3gandf1;2;4g,respectively.Weshallcombinethemintoasingleloop,f1;2;3;4g.However,werethereanotherbackedge2!1inFig.9.46,itsnaturalloopwouldbef1;2g,athirdloopwithheader1.Thissetofnodesisproperly9.6.LOOPSINFLOWGRAPHS667 1 2 34Figure9.46:Twoloopswiththesameheadercontainedwithinf1;2;3;4g,soitwouldnotbecombinedwiththeothernaturalloops,butrathertreatedasaninnerloop,nestedwithin.29.6.7SpeedofConvergenceofIterativeData-FlowAlgorithmsWearenowreadytodiscussthespeedofconvergenceofiterativealgorithms.AsdiscussedinSection9.3.3,themaximumnumberofiterationsthealgorithmmaytakeistheproductoftheheightofthelatticeandthenumberofnodesinthe\rowgraph.Formanydata-\rowanalyses,itispossibletoordertheevaluationsuchthatthealgorithmconvergesinamuchsmallernumberofiterations.Thepropertyofinterestiswhetheralleventsofsigni\fcanceatanodewillbepropagatedtothatnodealongsomeacyclicpath.Amongthedata-\rowanalysesdiscussedsofar,reachingde\fnitions,availableexpressionsandlivevariableshavethisproperty,butconstantpropagationdoesnot.Morespeci\fcally:\u000fIfade\fnitiondisinIN[B],thenthereissomeacyclicpathfromtheblockcontainingdtoBsuchthatdisintheIN'sandOUT'sallalongthatpath.\u000fIfanexpressionx+yisnotavailableattheentrancetoblockB,thenthereissomeacyclicpaththatdemonstratesthateitherthepathisfromtheentrynodeandincludesnostatementthatkillsorgeneratesx+y,orthepathisfromablockthatkillsx+yandalongthepaththereisnosubsequentgenerationofx+y.\u000fIfxisliveonexitfromblockB,thenthereisanacyclicpathfromBtoauseofx,alongwhichtherearenode\fnitionsofx.Weshouldcheckthatineachofthesecases,pathswithcyclesaddnothing.Forexample,ifauseofxisreachedfromtheendofblockBalongapathwithacycle,wecaneliminatethatcycleto\fndashorterpathalongwhichtheuseofxisstillreachedfromB.Incontrast,constantpropagationdoesnothavethisproperty.Considerasimpleprogramthathasoneloopcontainingabasicblockwithstatements668CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSL:a=bb=cc=1gotoLThe\frsttimethebasicblockisvisited,cisfoundtohaveconstantvalue1,butbothaandbareunde\fned.Visitingthebasicblockthesecondtime,we\fndthatbandchaveconstantvalues1.Ittakesthreevisitsofthebasicblockfortheconstantvalue1assignedtoctoreacha.Ifallusefulinformationpropagatesalongacyclicpaths,wehaveanopportu-nitytotailortheorderinwhichwevisitnodesiniterativedata-\rowalgorithms,sothatafterrelativelyfewpassesthroughthenodeswecanbesureinformationhaspassedalongalltheacyclicpaths.RecallfromSection9.6.3thatifa!bisanedge,thenthedepth-\frstnumberofbislessthanthatofaonlywhentheedgeisaretreatingedge.Forforwarddata-\rowproblems,itisdesirabletovisitthenodesaccordingtothedepth-\frstordering.Speci\fcally,wemodifythealgorithminFig.9.23(a)byreplacingline(4),whichvisitsthebasicblocksinthe\rowgraphwithfor(eachblockBotherthanentry,indepth-\frstorder)fExample9.49:Supposewehaveapathalongwhichade\fnitiondpropagates,suchas3!5!19!35!16!23!45!4!10!17whereintegersrepresentthedepth-\frstnumbersoftheblocksalongthepath.Thenthe\frsttimethroughtheloopoflines(4)through(6)inthealgorithminFig.9.23(a),dwillpropagatefromOUT[3]toIN[5]toOUT[5],andsoon,uptoOUT[35].ItwillnotreachIN[16]onthatround,becauseas16precedes35,wehadalreadycomputedIN[16]bythetimedwasputinOUT[35].However,thenexttimewerunthroughtheloopoflines(4)through(6),whenwecomputeIN[16],dwillbeincludedbecauseitisinOUT[35].De\fnitiondwillalsopropa-gatetoOUT[16],IN[23],andsoon,uptoOUT[45],whereitmustwaitbecauseIN[4]wasalreadycomputedonthisround.Onthethirdpass,dtravelstoIN[4],OUT[4],IN[10],OUT[10],andIN[17],soafterthreepassesweestablishthatdreachesblock17.2Itshouldnotbehardtoextractthegeneralprinciplefromthisexample.Ifweusedepth-\frstorderinFig.9.23(a),thenthenumberofpassesneededtopropagateanyreachingde\fnitionalonganyacyclicpathisnomorethanonegreaterthanthenumberofedgesalongthatpaththatgofromahighernum-beredblocktoalowernumberedblock.Thoseedgesareexactlytheretreatingedges,sothenumberofpassesneededisoneplusthedepth.OfcourseAlgo-rithm9.11doesnotdetectthefactthatallde\fnitionshavereachedwherevertheycanreach,untilonemorepasshasyieldednochanges.Therefore,theupperboundonthenumberofpassestakenbythatalgorithmwithdepth-\frst9.6.LOOPSINFLOWGRAPHS669670CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSiii.Constructthedominatortree.iv.Findonedepth-\frstorderingforthe\rowgraph.v.Indicatetheadvancing,retreating,cross,andtreeedgesforyouranswertoiv.vi.Isthe\rowgraphreducible?vii.Computethedepthofthe\rowgraph.viii.Findthenaturalloopsofthe\rowgraph.Exercise9.6.2:RepeatExercise9.6.1onthefollowing\rowgraphs:a)Fig.9.3.b)Fig.8.9.c)Your\rowgraphfromExercise8.4.1.d)Your\rowgraphfromExercise8.4.2.!Exercise9.6.3:Provethefollowingaboutthedomrelation:a)Ifadombandbdomc,thenadomc(transitivity).b)Itisneverpossiblethatbothadombandbdomahold,ifa6=b(anti-symmetry).c)Ifaandbaretwodominatorsofn,theneitheradomborbdomamusthold.d)Eachnodenexcepttheentryhasauniqueimmediatedominator|thedominatorthatappearsclosesttonalonganyacyclicpathfromtheentryton.!Exercise9.6.4:Figure9.42isonedepth-\frstpresentationofthe\rowgraphofFig.9.38.Howmanyotherdepth-\frstpresentationsofthis\rowgrapharethere?Remember,orderofchildrenmattersindistinguishingdepth-\frstpresentations.!!Exercise9.6.5:Provethata\rowgraphisreducibleifandonlyifwhenweremoveallthebackedges(thosewhoseheadsdominatetheirtails),theresulting\rowgraphisacyclic.!Exercise9.6.6:Acomplete\rowgraphonnnodeshasarcsi!jbetweenanytwonodesiandj(inbothdirections).Forwhatvaluesofnisthisgraphreducible?!Exercise9.6.7:Acomplete,acyclic\rowgraphonnnodes1;2;:::;nhasarcsi!jforallnodesiandjsuchthati<j.Node1istheentry.9.6.LOOPSINFLOWGRAPHS671a)Forwhatvaluesofnisthisgraphreducible?b)Doesyouranswerto(a)changeifyouaddself-loopsi!iforallnodesi?!Exercise9.6.8:Thenaturalloopofabackedgen!hwasde\fnedtobehplusthesetofnodesthatcanreachnwithoutgoingthroughh.Showthathdominatesallthenodesinthenaturalloopofn!h.!!Exercise9.6.9:Weclaimedthatthe\rowgraphofFig.9.45isnonreducible.Ifthearcswerereplacedbypathsofdisjointsetsofnodes(exceptfortheendpoints,ofcourse),thenthe\rowgraphwouldstillbenonreducible.Infact,node1neednotbetheentry;itcanbeanynodereachablefromtheentryalongapathwhoseintermediatenodesarenotpartofanyofthefourexplicitlyshownpaths.Provetheconverse:thateverynonreducible\rowgraphhasasubgraphlikeFig.9.45,butwitharcspossiblyreplacedbynode-disjointpathsandnode1beinganynodereachablefromtheentrybyapaththatisnode-disjointfromthefourotherpaths.!!Exercise9.6.10:Showthateverydepth-\frstpresentationforeverynonre-ducible\rowgraphhasaretreatingedgethatisnotabackedge.!!Exercise9.6.11:Showthatifthefollowingconditionf(a)^g(a)^a\u0014f\u0000g(a)\u0001holdsforallfunctionsfandg,andvaluea,thenthegeneraliterativealgorithm,Algorithm9.25,withiterationfollowingadepth-\frstordering,convergeswithin2-plus-the-depthpasses.!Exercise9.6.12:Findanonreducible\rowgraphwithtwodi\u000berentDFST'sthathavedi\u000berentdepths.!Exercise9.6.13:Provethefollowing:a)Ifade\fnitiondisinIN[B],thenthereissomeacyclicpathfromtheblockcontainingdtoBsuchthatdisintheIN'sandOUT'sallalongthatpath.b)Ifanexpressionx+yisnotavailableattheentrancetoblockB,thenthereissomeacyclicpaththatdemonstratesthatfact;eitherthepathisfromtheentrynodeandincludesnostatementthatkillsorgeneratesx+y,orthepathisfromablockthatkillsx+yandalongthepaththereisnosubsequentgenerationofx+y.c)IfxisliveonexitfromblockB,thenthereisanacyclicpathfromBtoauseofx,alongwhichtherearenode\fnitionsofx.672CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.7Region-BasedAnalysisTheiterativedata-\rowanalysisalgorithmwehavediscussedsofarisjustoneapproachtosolvingdata-\rowproblems.Herewediscussanotherapproachcalledregion-basedanalysis.Recallthatintheiterative-analysisapproach,wecreatetransferfunctionsforbasicblocks,then\fndthe\fxedpointsolutionbyrepeatedpassesovertheblocks.Insteadofcreatingtransferfunctionsjustforindividualblocks,aregion-basedanalysis\fndstransferfunctionsthatsumma-rizetheexecutionofprogressivelylargerregionsoftheprogram.Ultimately,transferfunctionsforentireproceduresareconstructedandthenapplied,togetthedesireddata-\rowvaluesdirectly.Whileadata-\rowframeworkusinganiterativealgorithmisspeci\fedbyasemilatticeofdata-\rowvaluesandafamilyoftransferfunctionsclosedun-dercomposition,region-basedanalysisrequiresmoreelements.Aregion-basedframeworkincludesbothasemilatticeofdata-\rowvaluesandasemilatticeoftransferfunctionsthatmustpossessameetoperator,acompositionoper-ator,andaclosureoperator.WeshallseewhatalltheseelementsentailinSection9.7.4.Aregion-basedanalysisisparticularlyusefulfordata-\rowproblemswherepathsthathavecyclesmaychangethedata-\rowvalues.Theclosureoperatorallowsthee\u000bectofalooptobesummarizedmoree\u000bectivelythandoesiterativeanalysis.Thetechniqueisalsousefulforinterproceduralanalysis,wheretrans-ferfunctionsassociatedwithaprocedurecallmaybetreatedlikethetransferfunctionsassociatedwithbasicblocks.Forsimplicity,weshallconsideronlyforwarddata-\rowproblemsinthissection.We\frstillustratehowregion-basedanalysisworksbyusingthefamiliarexampleofreachingde\fnitions.InSection9.8weshowamorecompellinguseofthistechnique,whenwestudytheanalysisofinductionvariables.9.7.1RegionsInregion-basedanalysis,aprogramisviewedasahierarchyofregions,whichare(roughly)portionsofa\rowgraphthathaveonlyonepointofentry.Weshould\fndthisconceptofviewingcodeasahierarchyofregionsintuitive,becauseablock-structuredprocedureisnaturallyorganizedasahierarchyofregions.Eachstatementinablock-structuredprogramisaregion,ascontrol\rowcanonlyenteratthebeginningofastatement.Eachlevelofstatementnestingcorrespondstoalevelintheregionhierarchy.Formally,aregionofa\rowgraphisacollectionofnodesNandedgesEsuchthat1.ThereisaheaderhinNthatdominatesallthenodesinN.2.IfsomenodemcanreachanodeninNwithoutgoingthroughh,thenmisalsoinN.9.7.REGION-BASEDANALYSIS6733.Eisthesetofallthecontrol\rowedgesbetweennodesn1andn2inN,except(possibly)forsomethatenterh.Example9.50:Clearlyanaturalloopisaregion,butaregiondoesnotnecessarilyhaveabackedgeandneednotcontainanycycles.Forexample,inFig.9.47,nodesB1andB2,togetherwiththeedgeB1!B2,formaregion;sodonodesB1;B2,andB3withedgesB1!B2,B2!B3,andB1!B3.However,thesubgraphwithnodesB2andB3withedgeB2!B3doesnotformaregion,becausecontrolmayenterthesubgraphatbothnodesB2andB3.Moreprecisely,neitherB2norB3dominatestheother,socondition(1)foraregionisviolated.Evenifwepicked,say,B2tobethe\\header,\"wewouldviolatecondition(2),sincewecanreachB3fromB1withoutgoingthroughB2,andB1isnotinthe\\region.\"2 1B B 2 B 3 B 4 (ENTRY)Figure9.47:Examplesofregions9.7.2RegionHierarchiesforReducibleFlowGraphsInwhatfollows,weshallassumethe\rowgraphisreducible.Ifoccasionallywemustdealwithnonreducible\rowgraphs,thenwecanuseatechniquecalled\\nodesplitting\"thatwillbediscussedinSection9.7.6.Toconstructahierarchyofregions,weidentifythenaturalloops.RecallfromSection9.6.6thatinareducible\rowgraph,anytwonaturalloopsareeitherdisjointoroneisnestedwithintheother.Theprocessof\\parsing\"areducible\rowgraphintoitshierarchyofloopsbeginswitheveryblockasaregionbyitself.Wecalltheseregionsleafregions.Then,weorderthenaturalloopsfromtheinsideout,i.e.,startingwiththeinnermostloops.Toprocessaloop,wereplacetheentireloopbyanodeintwosteps:1.First,thebodyoftheloopL(allnodesandedgesexceptthebackedgestotheheader)isreplacedbyanoderepresentingaregionR.EdgestotheheaderofLnowenterthenodeforR.AnedgefromanyexitofloopLisreplacedbyanedgefromRtothesamedestination.However,iftheedgeisabackedge,thenitbecomesalooponR.WecallRabodyregion.674CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS2.Next,weconstructaregionR0thatrepresentstheentirenaturalloopL.WecallR0aloopregion.Theonlydi\u000berencebetweenRandR0isthatthelatterincludesthebackedgestotheheaderofloopL.Putanotherway,whenR0replacesRinthe\rowgraph,allwehavetodoisremovetheedgefromRtoitself.Weproceedthisway,reducinglargerandlargerloopstosinglenodes,\frstwithaloopingedgeandthenwithout.Sinceloopsofareducible\rowgrapharenestedordisjoint,theloopregion'snodecanrepresentallthenodesofthenaturalloopintheseriesof\rowgraphsthatareconstructedbythisreductionprocess.Eventually,allnaturalloopsarereducedtosinglenodes.Atthatpoint,the\rowgraphmaybereducedtoasinglenode,ortheremaybeseveralnodesremaining,withnoloops;i.e.,thereduced\rowgraphisanacyclicgraphofmorethanonenode.Intheformercasewearedoneconstructingtheregionhierarchy,whileinthelattercase,weconstructonemorebodyregionfortheentire\rowgraph.Example9.51:Considerthecontrol\rowgraphinFig.9.48(a).Thereisonebackedgeinthis\rowgraph,whichleadsfromB4toB2.ThehierarchyofregionsisshowninFig.9.48(b);theedgesshownaretheedgesintheregion\rowgraphs.Therearealtogether8regions:1.RegionsR1;:::;R5areleafregionsrepresentingblocksB1throughB5,respectively.Everyblockisalsoanexitblockinitsregion.2.BodyregionR6representsthebodyoftheonlyloopinthe\rowgraph;itconsistsofregionsR2;R3,andR4andthreeinterregionedges:B2!B3,B2!B4,andB3!B4.Ithastwoexitblocks,B3andB4,sincetheybothhaveoutgoingedgesnotcontainedintheregion.Figure9.49(a)showsthe\rowgraphwithR6reducedtoasinglenode.NoticethatalthoughtheedgesR3!R5andR4!R5havebothbeenreplacedbyedgeR6!R5,itisimportanttorememberthatthelatteredgerepresentsthetwoformeredges,sinceweshallhavetopropagatetransferfunctionsacrossthisedgeeventually,andweneedtoknowthatwhatcomesoutofbothblocksB3andB4willreachtheheaderofR5.3.LoopregionR7representstheentirenaturalloop.Itincludesonesubre-gion,R6,andonebackedgeB4!B2.Ithasalsotwoexitnodes,againB3andB4.Figure9.49(b)showsthe\rowgraphaftertheentirenaturalloopisreducedtoR7.4.Finally,bodyregionR8isthetopregion.Itincludesthreeregions,R1,R7,R5andthreeinterregionedges,B1!B2,B3!B5,andB4!B5.Whenwereducethe\rowgraphtoR8,itbecomesasinglenode.Sincetherearenobackedgestoitsheader,B1,thereisnoneedfora\fnalstepreducingthisbodyregiontoaloopregion.9.7.REGION-BASEDANALYSIS675 d 1 d2 d 3 d4 d6 : i = m−1 : j = n : a = u1 : i = i+1 : a = u2 : j = u3 B B B B B 1 2 4 5 3 (ENTRY) (EXIT) (a) R R R R R R R R 1 2 4 5 3 6 7 8 (b) d 5Figure9.48:(a)Anexample\rowgraphforthereachingde\fnitionsproblemand(b)Itsregionhierarchy676CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS2 a body region a loop region (a) After reducing to (b) After reducing to R R R R R 1 6 5 1 7 5 RFigure9.49:Stepsinthereductionofthe\rowgraphofFig.9.48toasingleregionTosummarizetheprocessofdecomposingreducible\rowgraphshierarchi-cally,weo\u000berthefollowingalgorithm.Algorithm9.52:Constructingabottom-uporderofregionsofareducible\rowgraph.INPUT:Areducible\rowgraphG.OUTPUT:AlistofregionsofGthatcanbeusedinregion-baseddata-\rowproblems.METHOD:1.BeginthelistwithalltheleafregionsconsistingofsingleblocksofG,inanyorder.2.RepeatedlychooseanaturalloopLsuchthatifthereareanynaturalloopscontainedwithinL,thentheseloopshavehadtheirbodyandloopregionsaddedtothelistalready.Add\frsttheregionconsistingofthebodyofL(i.e.,LwithoutthebackedgestotheheaderofL),andthentheloopregionofL.3.Iftheentire\rowgraphisnotitselfanaturalloop,addattheendofthelisttheregionconsistingoftheentire\rowgraph.29.7.3OverviewofaRegion-BasedAnalysisForeachregionR,andforeachsubregionR0withinR,wecomputeatransferfunctionfR;IN[R0]thatsummarizesthee\u000bectofexecutingallpossiblepaths9.7.REGION-BASEDANALYSIS677678CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.7.4NecessaryAssumptionsAboutTransferFunctionsInorderforregion-basedanalysistowork,weneedtomakecertainassumptionsaboutpropertiesofthesetoftransferfunctionsintheframework.Speci\fcally,weneedthreeprimitiveoperationsontransferfunctions:composition,meetandclosure;onlythe\frstisrequiredfordata-\rowframeworksthatusetheiterativealgorithm.CompositionThetransferfunctionofasequenceofnodescanbederivedbycomposingthefunctionsrepresentingtheindividualnodes.Letf1andf2betransferfunctionsofnodesn1andn2.Thee\u000bectofexecutingn1followedbyn2isrepresentedbyf2\u000ef1.FunctioncompositionhasbeendiscussedinSection9.2.2,andanexampleusingreachingde\fnitionswasshowninSection9.2.4.Toreview,letgeniandkillibethegenandkillsetsforfi.Then:f2\u000ef1(x)=gen2[\u0010\u0000gen1[(x\u0000kill1)\u0001\u0000kill2\u0011=\u0000gen2[(gen1\u0000kill2)\u0001[(x\u0000(kill1[kill2)\u0001Thus,thegenandkillsetsforf2\u000ef1aregen2[(gen1\u0000kill2)andkill1[kill2,respectively.Thesameideaworksforanytransferfunctionofthegen-killform.Othertransferfunctionsmayalsobeclosed,butwehavetoconsidereachcaseseparately.MeetHere,thetransferfunctionsthemselvesarevaluesofasemilatticewithameetoperator^f.Themeetoftwotransferfunctionsf1andf2,f1^ff2,isde\fnedby(f1^ff2)(x)=f1(x)^f2(x),where^isthemeetoperatorfordata-\rowvalues.Themeetoperatorontransferfunctionsisusedtocombinethee\u000bectofalternativepathsofexecutionwiththesameendpoints.Whereitisnotam-biguous,fromnowon,weshallrefertothemeetoperatoroftransferfunctionsalsoas^.Forthereaching-de\fnitionsframework,wehave(f1^f2)(x)=f1(x)^f2(x)=\u0000gen1[(x\u0000kill1)\u0001[\u0000gen2[(x\u0000kill2)\u0001=(gen1[gen2)[\u0000x\u0000(kill1\\kill2)\u0001Thatis,thegenandkillsetsforf1^f2aregen1[gen2andkill1\\kill2,respectively.Again,thesameargumentappliestoanysetofgen-killtransferfunctions.9.7.REGION-BASEDANALYSIS679ClosureIffrepresentsthetransferfunctionofacycle,thenfnrepresentsthee\u000bectofgoingaroundthecyclentimes.Inthecasewherethenumberofiterationsisnotknown,wehavetoassumethattheloopmaybeexecuted0ormoretimes.Werepresentthetransferfunctionofsuchaloopbyf\u0003,theclosureoff,whichisde\fnedbyf\u0003=^n\u00150fn:Notethatf0mustbetheidentitytransferfunction,sinceitrepresentsthee\u000bectofgoingzerotimesaroundtheloop,i.e.,startingattheentryandnotmoving.IfweletIrepresenttheidentitytransferfunction,thenwecanwritef\u0003=I^(^n>0fn):Supposethetransferfunctionfinareachingde\fnitionsframeworkhasagensetandakillset.Then,f2(x)=f\u0000f(x)\u0001=gen[\u0010\u0000gen[(x\u0000kill)\u0001\u0000kill\u0011=gen[(x\u0000kill)f3(x)=f\u0000f2(x)\u0001=gen[(x\u0000kill)andsoon:anyfn(x)isgen[(x\u0000kill).Thatis,goingaroundaloopdoesn'ta\u000bectthetransferfunction,ifitisofthegen-killform.Thus,f\u0003(x)=I^f1(x)^f2(x)^:::=x[\u0000gen[(x\u0000kill)\u0001=gen[xThatis,thegenandkillsetsforf\u0003aregenand;,respectively.Intuitively,sincewemightnotgoaroundaloopatall,anythinginxwillreachtheentrytotheloop.Inallsubsequentiterations,thereachingde\fnitionsincludethoseinthegenset.680CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.7.5AnAlgorithmforRegion-BasedAnalysisThefollowingalgorithmsolvesaforwarddata-\row-analysisproblemonare-ducible\rowgraph,accordingtosomeframeworkthatsatis\festheassumptionsofSection9.7.4.RecallthatfR;IN[R0]andfR;OUT[B]refertotransferfunctionsthattransformdata-\rowvaluesattheentrytoregionRintothecorrectvalueattheentryofsubregionR0andtheexitoftheexitblockB,respectively.Algorithm9.53:Region-basedanalysis.INPUT:Adata-\rowframeworkwiththepropertiesoutlinedinSection9.7.4andareducible\rowgraphG.OUTPUT:Data-\rowvaluesIN[B]foreachblockBofG.METHOD:1.UseAlgorithm9.52toconstructthebottom-upsequenceofregionsofG,sayR1;R2;:::;Rn,whereRnisthetopmostregion.2.Performthebottom-upanalysistocomputethetransferfunctionssum-marizingthee\u000bectofexecutingaregion.ForeachregionR1;R2;:::;Rn,inthebottom-uporder,dothefollowing:(a)IfRisaleafregioncorrespondingtoblockB,letfR;IN[B]=I,andfR;OUT[B]=fB,thetransferfunctionassociatedwithblockB.(b)IfRisabodyregion,performthecomputationofFig.9.50(a).(c)IfRisaloopregion,performthecomputationofFig.9.50(b).3.Performthetop-downpassto\fndthedata-\rowvaluesatthebeginningofeachregion.(a)IN[Rn]=IN[entry].(b)ForeachregionRinfR1;:::Rn\u00001g,inthetop-downorder,computeIN[R]=fR0;IN[R](IN[R0]),whereR0istheimmediateenclosingregionofR.Letus\frstlookatthedetailsofhowthebottom-upanalysisworks.Inline(1)ofFig.9.50(a)wevisitthesubregionsofabodyregion,insometopolog-icalorder.Line(2)computesthetransferfunctionrepresentingallthepossiblepathsfromtheheaderofRtotheheaderofS;theninlines(3)and(4)wecom-putethetransferfunctionsrepresentingallthepossiblepathsfromtheheaderofRtotheexitsofR|thatis,totheexitsofallblocksthathavesuccessorsoutsideS.NoticethatallthepredecessorsB0inRmustbeinregionsthatprecedeSinthetopologicalorderconstructedatline(1).Thus,fR;OUT[B0]willhavebeencomputedalready,inline(4)ofapreviousiterationthroughtheouterloop.9.7.REGION-BASEDANALYSIS681Forloopregions,weperformthestepsoflines(1)through(4)inFig.9.50(b)Line(2)computesthee\u000bectofgoingaroundtheloopbodyregionSzeroormoretimes.Lines(3)and(4)computethee\u000bectattheexitsoftheloopafteroneormoreiterations.Inthetop-downpassofthealgorithm,step3(a)\frstassignstheboundaryconditiontotheinputofthetop-mostregion.ThenifRisimmediatelycon-tainedinR0,wecansimplyapplythetransferfunctionfR0;IN[R]tothedata-\rowvalueIN[R0]tocomputeIN[R].21)for(eachsubregionSimmediatelycontainedinR,intopologicalorder)f2)fR;IN[S]=VpredecessorsBinRoftheheaderofSfR;OUT[B];/*ifSistheheaderofregionR,thenfR;IN[S]isthemeetovernothing,whichistheidentityfunction*/3)for(eachexitblockBinS)4)fR;OUT[B]=fS;OUT[B]\u000efR;IN[S];g(a)ConstructingtransferfunctionsforabodyregionR1)letSbethebodyregionimmediatelynestedwithinR;thatis,SisRwithoutbackedgesfromRtotheheaderofR;2)fR;IN[S]=\u0000VpredecessorsBinRoftheheaderofSfS;OUT[B]\u0001\u0003;3)for(eachexitblockBinR)4)fR;OUT[B]=fS;OUT[B]\u000efR;IN[S];(b)ConstructingtransferfunctionsforaloopregionR0Figure9.50:Detailsofregion-baseddata-\rowcomputationsExample9.54:LetusapplyAlgorithm9.53to\fndreachingde\fnitionsinthe\rowgraphinFig.9.48(a).Step1constructsthebottom-uporderinwhichtheregionsarevisited;thisorderwillbethenumericalorderoftheirsubscripts,R1;R2;:::;Rn.Thevaluesofthegenandkillsetsforthe\fveblocksaresummarizedbelow:B682CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS\u000fTotakethemeetoftransferfunctions,taketheunionofthegen'sandtheintersectionofthekill's.\u000fTocomposetransferfunctions,taketheunionofboththegen'sandthekill's.However,asanexception,anexpressionthatisgeneratedbythe\frstfunction,notgeneratedbythesecond,butkilledbythesecondisnotinthegenoftheresult.\u000fTotaketheclosureofatransferfunction,retainitsgenandreplacethekillby;.The\frst\fveregionsR1;:::;R5areblocksB1;:::;B5,respectively.For1\u0014i\u00145,fRi;IN[Bi]istheidentityfunction,andfRi;OUT[Bi]isthetransferfunctionforblockBi:fBi;OUT[Bi](x)=(x\u0000killBi)[genBi:9.7.REGION-BASEDANALYSIS683representstheloopbodyandthusdoesnotincludethebackedgeB4!B2.Theorderofprocessingtheseregionswillbetheonlytopologicalorder:R2;R3;R4.First,R2hasnopredecessorswithinR6;rememberthattheedgeB4!B2goesoutsideR6.Thus,fR6;IN[B2]istheidentityfunction,11andfR6;OUT[B2]isthetransferfunctionforblockB2itself.TheheaderofregionB3hasonepredecessorwithinR6,namelyR2.ThetransferfunctiontoitsentryissimplythetransferfunctiontotheexitofB2,fR6;OUT[B2],whichhasalreadybeencomputed.WecomposethisfunctionwiththetransferfunctionofB3withinitsownregiontocomputethetransferfunctiontotheexitofB3.Last,forthetransferfunctiontotheentryofR4,wemustcomputefR6;OUT[B2]^fR6;OUT[B3]becausebothB2andB3arepredecessorsofB4,theheaderofR4.ThistransferfunctioniscomposedwiththetransferfunctionfR4;OUT[B4]togetthedesiredfunctionfR6;OUT[B4].Notice,forexample,thatd3isnotkilledinthistransferfunction,becausethepathB2!B4doesnotrede\fnevariablea.Now,considerloopregionR7.ItcontainsonlyonesubregionR6whichrepresentsitsloopbody.Sincethereisonlyonebackedge,B4!B2,totheheaderofR6,thetransferfunctionrepresentingtheexecutionoftheloopbody0ormoretimesisjustf\u0003R6;OUT[B4]:thegensetisfd4;d5;d6gandthekillsetis;.TherearetwoexitsoutofregionR7,blocksB3andB4.Thus,thistransferfunctioniscomposedwitheachofthetransferfunctionsofR6togetthecorrespondingtransferfunctionsofR7.Notice,forinstance,howd6isinthegensetforfR7;OUT[B3]becauseofpathslikeB2!B4!B2!B3,orevenB2!B3!B4!B2!B3.Finally,considerR8,theentire\rowgraph.ItssubregionsareR1,R7,andR5,whichweshallconsiderinthattopologicalorder.Asbefore,thetransferfunctionfR8;IN[B1]issimplytheidentityfunction,andthetransferfunctionfR8;OUT[B1]isjustfR1;OUT[B1],whichinturnisfB1.TheheaderofR7,whichisB2,hasonlyonepredecessor,B1,sothetransferfunctiontoitsentryissimplythetransferfunctionoutofB1inregionR8.WecomposefR8;OUT[B1]withthetransferfunctionstotheexitsofB3andB4withinR7toobtaintheircorrespondingtransferfunctionswithinR8.Lastly,weconsiderR5.Itsheader,B5,hastwopredecessorswithinR8,namelyB3andB4.Therefore,wecomputefR8;OUT[B3]^fR8;OUT[B4]togetfR8;IN[B5].SincethetransferfunctionofblockB5istheidentityfunction,fR8;OUT[B5]=fR8;IN[B5].Step3computestheactualreachingde\fnitionsfromthetransferfunctions.Instep3(a),IN[R8]=;sincetherearenoreachingde\fnitionsatthebeginningoftheprogram.Figure9.52showshowstep3(b)computestherestofthedata-\rowvalues.ThestepstartswiththesubregionsofR8.SincethetransferfunctionfromthestartofR8tothestartofeachofitssubregionhasbeen684CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONScomputed,asingleapplicationofthetransferfunction\fndsthedata-\rowvalueatthestarteachsubregion.Werepeatthestepsuntilwegetthedata-\rowvaluesoftheleafregions,whicharesimplytheindividualbasicblocks.Notethatthedata-\rowvaluesshowninFigure9.52areexactlywhatwewouldgethadweappliediterativedata-\rowanalysistothesame\rowgraph,asmustbethecase,ofcourse.2IN[R8]=;IN[R1]=fR8;IN[R1](IN[R8])=;IN[R7]=fR8;IN[R7](IN[R8])=fd1;d2;d3gIN[R5]=fR8;IN[R5](IN[R8])=fd2;d3;d4;d5;d6gIN[R6]=fR7;IN[R6](IN[R7])=fd1;d2;d3;d4;d5;d6gIN[R4]=fR6;IN[R4](IN[R6])=fd2;d3;d4;d5;d6gIN[R3]=fR6;IN[R3](IN[R6])=fd2;d3;d4;d5;d6gIN[R2]=fR6;IN[R2](IN[R6])=fd1;d2;d3;d4;d5;d6gFigure9.52:Finalstepsofregion-based\rowanalysis9.7.6HandlingNonreducibleFlowGraphsIfnonreducible\rowgraphsareexpectedtobecommonfortheprogramstobeprocessedbyacompilerorotherprogram-processingsoftware,thenwerecom-mendusinganiterativeratherthanahierarchy-basedapproachtodata-\rowanalysis.However,ifweneedonlytobepreparedfortheoccasionalnonre-ducible\rowgraph,thenthefollowing\\node-splitting\"techniqueisadequate.Constructregionsfromnaturalloopstotheextentpossible.Ifthe\rowgraphisnonreducible,weshall\fndthattheresultinggraphofregionshascycles,butnobackedges,sowecannotparsethegraphanyfurther.AtypicalsituationissuggestedinFig.9.53(a),whichhasthesamestructureasthenonreducible\rowgraphofFig.9.45,butthenodesinFig.9.53mayactuallybecomplexregions,assuggestedbythesmallernodeswithin.WepicksomeregionRthathasmorethanonepredecessorandisnottheheaderoftheentire\rowgraph.IfRhaskpredecessors,makekcopiesoftheentire\rowgraphR,andconnecteachpredecessorofR'sheadertoadi\u000berentcopyofR.Rememberthatonlytheheaderofaregioncouldpossiblyhaveapredecessoroutsidethatregion.Itturnsout,althoughweshallnotproveit,thatsuchnodesplittingresultsinareductionbyatleastoneinthenumberofregions,afternewbackedgesareidenti\fedandtheirregionsconstructed.Theresultinggraphmaystillnotbereducible,butbyalternatingasplittingphasewithaphasewherenewnaturalloopsareidenti\fedandcollapsedtoregions,weeventuallyareleftwithasingleregion;i.e.,the\rowgraphhasbeenreduced.9.7.REGION-BASEDANALYSIS685 R 2 R 3 (b)(a) R R R R R 1 3 1 2a 2bFigure9.53:Duplicatingaregiontomakeanonreducible\rowgraphbecomereducibleExample9.55:ThesplittingshowninFig.9.53(b)hasturnedtheedgeR2b!R3intoabackedge,sinceR3nowdominatesR2b.Thesetworegionsmaythusbecombinedintoone.Theresultingthreeregions|R1,R2aandthenewregion|formanacyclicgraph,andthereforemaybecombinedintoasinglebodyregion.Wethushavereducedtheentire\rowgraphtoasingleregion.Ingeneral,additionalsplitsmaybenecessary,andintheworstcase,thetotalnumberofbasicblockscouldbecomeexponentialinthenumberofblocksintheoriginal\rowgraph.2Wemustalsothinkabouthowtheresultofthedata-\rowanalysisonthesplit\rowgraphrelatestotheanswerwedesirefortheoriginal\rowgraph.Therearetwoapproacheswemightconsider.1.Splittingregionsmaybebene\fcialfortheoptimizationprocess,andwecansimplyrevisethe\rowgraphtohavecopiesofcertainblocks.Sinceeachduplicatedblockisenteredalongonlyasubsetofthepathsthatreachedtheoriginal,thedata-\rowvaluesattheseduplicatedblockswilltendtocontainmorespeci\fcinformationthanwasavailableattheorig-inal.Forinstance,fewerde\fnitionsmayreacheachoftheduplicatedblocksthatreachtheoriginalblock.2.Ifwewishtoretaintheoriginal\rowgraph,withnosplitting,thenafteranalyzingthesplit\rowgraph,welookateachsplitblockB,anditscorrespondingsetofblocksB1;B2;:::;Bk.WemaycomputeIN[B]=IN[B1]^IN[B2]^\u0001\u0001\u0001^IN[Bk],andsimilarlyfortheOUT's.686CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.7.7ExercisesforSection9.7Exercise9.7.1:Forthe\rowgraphofFig.9.10(seetheexercisesforSection9.1):i.Findallthepossibleregions.Youmay,however,omitfromthelisttheregionsconsistingofasinglenodeandnoedges.ii.GivethesetofnestedregionsconstructedbyAlgorithm9.52.iii.GiveaT1-T2reductionofthe\rowgraphasdescribedintheboxon\\Where`Reducible'ComesFrom\"inSection9.7.2.Exercise9.7.2:RepeatExercise9.7.1onthefollowing\rowgraphs:a)Fig.9.3.b)Fig.8.9.c)Your\rowgraphfromExercise8.4.1.d)Your\rowgraphfromExercise8.4.2.Exercise9.7.3:Provethateverynaturalloopisaregion.!!Exercise9.7.4:Showthata\rowgraphisreducibleifandonlyitcanbetransformedtoasinglenodeusing:a)TheoperationsT1andT2describedintheboxinSection9.7.2.b)Theregionde\fnitionintroducedinSection9.7.2.!Exercise9.7.5:Showthatwhenyouapplynodesplittingtoanonreducible\rowgraph,andthenperformT1-T2reductionontheresultingsplitgraph,youwindupwithstrictlyfewernodesthanyoustartedwith.!Exercise9.7.6:Whathappensifyouapplynode-splittingandT1-T2reduc-tionalternately,toreduceacompletedirectedgraphofnnodes?9.8SymbolicAnalysisWeshallusesymbolicanalysisinthissectiontoillustratetheuseofregion-basedanalysis.Inthisanalysis,wetrackthevaluesofvariablesinprogramssymbolicallyasexpressionsofinputvariablesandothervariables,whichwecallreferencevariables.Expressingvariablesintermsofthesamesetofref-erencevariablesdrawsouttheirrelationships.Symbolicanalysiscanbeusedforarangeofpurposessuchasoptimization,parallelization,andanalysesforprogramunderstanding.9.8.SYMBOLICANALYSIS6871)x=input();2)y=x-1;3)z=y-1;4)A[x]=10;5)A[y]=11;6)if(z>x)7)z=x;Figure9.54:AnexampleprogrammotivatingsymbolicanalysisExample9.56:ConsiderthesimpleexampleprograminFig.9.54.Here,weusexasthesolereferencevariable.Symbolicanalysiswill\fndthatyhasthevaluex\u00001andzhasthevaluex\u00002aftertheirrespectiveassignmentstatementsinlines(2)and(3).Thisinformationisuseful,forexample,indeterminingthatthetwoassignmentsinlines(4)and(5)writetodi\u000berentmemorylocationsandcanthusbeexecutedinparallel.Furthermore,wecantellthattheconditionz>xisnevertrue,thusallowingtheoptimizertoremovetheconditionalstatementinlines(6)and(7)alltogether.29.8.1A\u000eneExpressionsofReferenceVariablesSincewecannotcreatesuccinctandclosed-formsymbolicexpressionsforallvaluescomputed,wechooseanabstractdomainandapproximatethecompu-tationswiththemostpreciseexpressionswithinthedomain.Wehavealreadyseenanexampleofthisstrategybefore:constantpropagation.Inconstantpropagation,ourabstractdomainconsistsoftheconstants,anundefsymbolifwehavenotyetdeterminedifthevalueisaconstant,andaspecialnacsymbolthatisusedwheneveravariableisfoundnottobeaconstant.Thesymbolicanalysiswepresenthereexpressesvaluesasa\u000eneexpressionsofreferencevariableswheneverpossible.Anexpressionisa\u000enewithrespecttovariablesv1;v2;:::;vnifitcanbeexpressedasc0+c1v1+\u0001\u0001\u0001+cnvn,wherec0;c1;:::;cnareconstants.Suchexpressionsareinformallyknownaslinearexpressions.Strictlyspeaking,ana\u000eneexpressionislinearonlyifc0iszero.Weareinterestedina\u000eneexpressionsbecausetheyareoftenusedtoindexarraysinloops|suchinformationisusefulforoptimizationsandparallelization.MuchmorewillbesaidaboutthistopicinChapter11.InductionVariablesInsteadofusingprogramvariablesasreferencevariables,ana\u000eneexpressioncanalsobewrittenintermsofthecountofiterationsthroughtheloop.Vari-ableswhosevaluescanbeexpressedasc1i+c0,whereiisthecountofiterationsthroughtheclosestenclosingloop,areknownasinductionvariables.Example9.57:Considerthecodefragment688CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSfor(m=10;m<20;m++){x=m*3;A[x]=0;}Supposeweintroducefortheloopavariable,sayi,representingthenumberofiterationsexecuted.Thevalueiis0inthe\frstiterationoftheloop,1inthesecond,andsoon.Wecanexpressvariablemasana\u000eneexpressionofi,namelym=i+10.Variablex,whichis3m,takesonvalues30;33;:::;57duringsuccessiveiterationsoftheloop.Thus,xhasthea\u000eneexpressionx=30+3i.Weconcludethatbothmandxareinductionvariablesofthisloop.2Expressingvariablesasa\u000eneexpressionsofloopindexesmakestheseriesofvaluesbeingcomputedexplicitandenablesseveraltransformations.Theseriesofvaluestakenonbyaninductionvariablecanbecomputedwithaddi-tionsratherthanmultiplications.Thistransformationisknownas\\strengthreduction\"andwasintroducedinSections8.7and9.1.Forinstance,wecaneliminatethemultiplicationx=m*3fromtheloopofExample9.57byrewritingtheloopasx=27;for(m=10;m<20;m++){x=x+3;A[x]=0;}Inaddition,noticethatthelocationsassigned0inthatloop,&A+30,&A+33;:::;&A+57,arealsoa\u000eneexpressionsoftheloopindex.Infact,thisseriesofintegersistheonlyonethatneedstobecomputed.Wedonotneedbothmandx;forinstance,thecodeabovecanbereplacedby:for(x=&A+30;x<=&A+57;x=x+3)*x=0;Besidesspeedingupthecomputation,symbolicanalysisisalsousefulforparallelization.Whenthearrayindexesinalooparea\u000eneexpressionsofloopindexes,wecanreasonaboutrelationsofdataaccessedacrosstheiterations.Forexample,wecantellthatthelocationswrittenaredi\u000berentineachitera-tionandthereforealltheiterationsintheloopcanbeexecutedinparallelondi\u000berentprocessors.SuchinformationisusedinChapters10and11toextractparallelismfromsequentialprograms.OtherReferenceVariablesIfavariableisnotalinearfunctionofthereferencevariablesalreadychosen,wehavetheoptionoftreatingitsvalueasreferenceforfutureoperations.Forexample,considerthecodefragment:a=f();b=a+10;c=a+11;9.8.SYMBOLICANALYSIS689Whilethevalueheldbyaafterthefunctioncallcannotitselfbeexpressedasalinearfunctionofanyreferencevariables,itcanbeusedasreferenceforsubsequentstatements.Forexample,usingaasareferencevariable,wecandiscoverthatcisonelargerthanbattheendoftheprogram.1)a=0;2)for(f=100;f<200;f++)f3)a=a+1;4)b=10*a;5)c=0;6)for(g=10;g<20;g++)f7)d=b+c;8)c=c+1;ggFigure9.55:SourcecodeforExample9.58Example9.58:OurrunningexampleforthissectionisbasedonthesourcecodeshowninFig.9.55.Theinnerandouterloopsareeasytounderstand,sincefandgarenotmodi\fedexceptasrequiredbythefor-loops.Itisthuspossibletoreplacefandgbyreferencevariablesiandjthatcountthenumberofiterationsoftheouterandinnerloops,respectively.Thatis,wecanletf=i+99andg=j+9,andsubstituteforfandgthroughout.Whentranslatingtointermediatecode,wecantakeadvantageofthefactthateachloopiteratesatleastonce,andsopostponethetestfori\u0014100andj\u001410totheendsoftheloops.Figure9.56showsthe\rowgraphforthecodeofFig.9.55,afterintroducingiandjandtreatingthefor-loopsasiftheywererepeat-loops.Itturnsoutthata,b,c,anddareallinductionvariables.ThesequencesofvaluesassignedtothevariablesineachlineofthecodeareshowninFigure9.57.Asweshallsee,itispossibletodiscoverthea\u000eneexpressionsforthesevariables,intermsofthereferencevariablesiandj.Thatis,atline(4)a=i,atline(7)d=10i+j\u00001,andatline(8),c=j.29.8.2Data-FlowProblemFormulationThisanalysis\fndsa\u000eneexpressionsofreferencevariablesintroduced(1)tocountthenumberofiterationsexecutedineachloop,and(2)toholdvaluesattheentryofregionswherenecessary.Thisanalysisalso\fndsinductionvariables,loopinvariants,aswellasconstants,asdegeneratea\u000eneexpressions.Notethatthisanalysiscannot\fndallconstantsbecauseitonlytracksa\u000eneexpressionsofreferencevariables.690CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS B 1 B 2 B 3 B 4 R 5 R 7 R 8 R 6 B 3 B 2 a = 0 i = 1 a = a + 1 b = 10 * a c = 0 j = 1 d = b + c j = j + 1 c = c + 1 i = i + 1 if j<=10 goto if i<=100 gotoFigure9.56:FlowgraphanditsregionhierarchyforExample9.58Data-FlowValues:SymbolicMapsThedomainofdata-\rowvaluesforthisanalysisissymbolicmaps,whicharefunctionsthatmapeachvariableintheprogramtoavalue.Thevalueiseitherana\u000enefunctionofreferencevalues,orthespecialsymbolnaatorepresentanon-a\u000eneexpression.Ifthereisonlyonevariable,thebottomvalueofthesemilatticeisamapthatsendsthevariabletonaa.Thesemilatticefornvariablesissimplytheproductoftheindividualsemilattices.Weusemnaatodenotethebottomofthesemilatticewhichmapsallvariablestonaa.Wecande\fnethesymbolicmapthatsendsallvariablestoanunknownvaluetobethetopdata-\rowvalue,aswedidforconstantpropagation.However,wedonotneedtopvaluesinregion-basedanalysis.Example9.59:ThesymbolicmapsassociatedwitheachblockforthecodeinExample9.58areshowninFigure9.58.Weshallseelaterhowthesemapsarediscovered;theyaretheresultofdoingregion-baseddata-\rowanalysisonthe\rowgraphofFig.9.56.9.8.SYMBOLICANALYSIS691692CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS1)a=0;2)for(i=1;i<=100;i++)f3)a=i;4)b=10*i;5)c=0;6)for(j=1;j<=10;j++)f7)d=10*i+j-1;8)c=j;ggFigure9.59:ThecodeofFig.9.55withassignmentsreplacedbya\u000eneexpres-sionsofthereferencevariablesiandj9.8.SYMBOLICANALYSIS693Theexpressionc0+c1m(y)+c2m(z)isintendedtorepresentallthepossibleformsofexpressionsinvolvingarbitraryvariablesyandzthatmayappearontherightsideofanassignmenttoxandthatgivexavaluethatisana\u000enetransformationonpriorvaluesofvariables.Theseexpressionsare:c0,c0+y,c0\u0000y,y+z,x\u0000y,c1\u0003y,andy=(1=c1).Notethatinmanycases,oneormoreofc0,c1,andc2are0.Example9.60:Iftheassignmentisx=y+z,thenc0=0andc1=c2=1.Iftheassignmentisx=y/5,thenc0=c2=0,andc1=1=5.2CompositionofTransferFunctionsTocomputef2\u000ef1,wheref1andf2arede\fnedintermsofinputmapm,wesubstitutethevalueofm(vi)inthede\fnitionoff2withthede\fnitionoff1(m)(vi).Wereplacealloperationsonnaavalueswithnaa.Thatis,1.Iff2(m)(v)=naa,then(f2\u000ef1)(m)(v)=naa.2.Iff2(m)(v)=c0+Picim(vi),then(f2\u000ef1)(m)(v)=ˆnaa;iff1(m)(vi)=naaforsomei6=0;ci6=0c0+Picif1(m)(vi)otherwiseExample9.61:ThetransferfunctionsoftheblocksinExample9.58canbecomputedbycomposingthetransferfunctionsoftheirconstituentstatements.Thesetransferfunctionsarede\fnedinFig.9.60.2694CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSOUT[Bk]=fB(IN[Bk]);forallBkOUT[B1]\u0015IN1[B2]OUTi[B2]\u0015INi;1[B3];1\u0014i\u001410OUTi;j\u00001[B3]\u0015INi;j[B3];1\u0014i\u0014100;2\u0014j\u001410OUTi;10[B3]\u0015INi[B4];2\u0014i\u0014100OUTi\u00001[B4]\u0015INi[B2];1\u0014i\u0014100Figure9.61:Constraintssatis\fedoneachiterationofthenestedloopsthesymbolicmapsshowninFig.9.58satisfytheconstraintsimposedbythetransferfunctions,listedinFig.9.61.The\frstconstraintsaysthattheoutputmapofabasicblockisobtainedbyapplyingtheblock'stransferfunctiontotheinputmap.Therestoftheconstraintssaythattheoutputmapofabasicblockmustbegreaterthanorequaltotheinputmapofasuccessorblockintheexecution.Notethatouriterativedata-\rowalgorithmcannotproducetheabovesolu-tionbecauseitlackstheconceptofexpressingdata-\rowvaluesintermsofthenumberofiterationsexecuted.Region-basedanalysiscanbeusedto\fndsuchsolutions,asweshallseeinthenextsection.9.8.3Region-BasedSymbolicAnalysisWecanextendtheregion-basedanalysisdescribedinSection9.7to\fndex-pressionsofvariablesintheithiterationofaloop.Aregion-basedsymbolicanalysishasabottom-uppassandatop-downpass,likeotherregion-basedal-gorithms.Thebottom-uppasssummarizesthee\u000bectofaregionwithatransferfunctionthatsendsasymbolicmapattheentrytoanoutputsymbolicmapattheexit.Inthetop-downpass,valuesofsymbolicmapsarepropagateddowntotheinnerregions.Thedi\u000berenceliesinhowwehandleloops.InSection9.7,thee\u000bectofaloopissummarizedwithaclosureoperator.Givenaloopwithbodyf,itsclosuref\u0003isde\fnedasanin\fnitemeetofallpossiblenumbersofapplicationsoff.However,to\fndinductionvariables,weneedtodetermineifavalueofavariableisana\u000enefunctionofthenumberofiterationsexecutedsofar.Thesymbolicmapmustbeparameterizedbythenumberoftheiterationbeingexecuted.Furthermore,wheneverweknowthetotalnumberofiterationsexecutedinaloop,wecanusethatnumberto\fndthevaluesofinductionvariablesaftertheloop.Forinstance,inExample9.58,weclaimedthatahasthevalueofiafterexecutingtheithiteration.Sincetheloophas100iterations,thevalueofamustbe100attheendoftheloop.Inwhatfollows,we\frstde\fnetheprimitiveoperators:meetandcomposi-tionoftransferfunctionsforsymbolicanalysis.Thenshowhowweusethemtoperformregion-basedanalysisofinductionvariables.9.8.SYMBOLICANALYSIS695MeetofTransferFunctionsWhencomputingthemeetoftwofunctions,thevalueofavariableisnaaunlessthetwofunctionsmapthevariabletothesamevalueandthevalueisnotnaa.Thus,(f1^f2)(m)(v)=ˆf1(m)(v)iff1(m)(v)=f2(m)(v)naaotherwiseParameterizedFunctionCompositionsToexpressavariableasana\u000enefunctionofaloopindex,weneedtocomputethee\u000bectofcomposingafunctionsomegivennumberoftimes.Ifthee\u000bectofoneiterationissummarizedbytransferfunctionf,thenthee\u000bectofexecutingiiterations,forsomei\u00150,isdenotedfi.Notethatwheni=0,fi=f0=I,theidentifyfunction.Variablesintheprogramaredividedintofourcategories:1.Iff(m)(x)=m(x)+c,wherecisaconstant,thenfi(m)(x)=m(x)+ciforeveryvalueofi\u00150.Wesaythatxisabasicinductionvariableoftheloopwhosebodyisrepresentedbythetransferfunctionf.2.Iff(m)(x)=m(x),thenfi(m)(x)=m(x)foralli\u00150.Thevariablexisnotmodi\fedanditremainsunchangedattheendofanynumberofiterationsthroughtheloopwithtransferfunctionf.Wesaythatxisasymbolicconstantintheloop.3.Iff(m)(x)=c0+c1m(x1)+\u0001\u0001\u0001+cnm(xn),whereeachxkiseitherabasicinductionvariableorasymbolicconstant,thenfori>0,fi(m)(x)=c0+c1fi(m)(x1)+\u0001\u0001\u0001+cnfi(m)(xn):Wesaythatxisalsoaninductionvariable,thoughnotabasicone.Notethattheformulaabovedoesnotapplyifi=0.4.Inallothercases,fi(m)(x)=naa.To\fndthee\u000bectofexecutinga\fxednumberofiterations,wesimplyreplaceiabovebythatnumber.Inthecasewherethenumberofiterationsisunknown,thevalueatthestartofthelastiterationisgivenbyf\u0003.Inthiscase,theonlyvariableswhosevaluescanstillbeexpressedinthea\u000eneformaretheloop-invariantvariables.f\u0003(m)(v)=ˆm(v)iff(m)(v)=m(v)naaotherwiseExample9.62:FortheinnermostloopinExample9.58,thee\u000bectofexecutingiiterations,i>0,issummarizedbyfiB3.Fromthede\fnitionoffB3,weseethataandbaresymbolicconstants,cisabasicinductionvariableasitis696CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSincrementedbyoneeveryiteration.disaninductionvariablebecauseitisana\u000enefunctionthesymbolicconstantbandbasicinductionvariablec.Thus,fiB3(m)(v)=8>><>>:m(a)ifv=am(b)ifv=bm(c)+iifv=cm(b)+m(c)+iifv=d:IfwecouldnottellhowmanytimestheloopofblockB3iterated,thenwecouldnotusefiandwouldhavetousef\u0003toexpresstheconditionsattheendoftheloop.Inthiscase,wewouldhavef\u0003B3(m)(v)=8>><>>:m(a)ifv=am(b)ifv=bnaaifv=cnaaifv=d:2ARegion-BasedAlgorithmAlgorithm9.63:Region-basedsymbolicanalysis.INPUT:Areducible\rowgraphG.OUTPUT:SymbolicmapsIN[B]foreachblockBofG.METHOD:Wemakethefollowingmodi\fcationstoAlgorithm9.53.1.Wechangehowweconstructthetransferfunctionforaloopregion.IntheoriginalalgorithmweusethefR;IN[S]transferfunctiontomapthesymbolicmapattheentryofloopregionRtoasymbolicmapattheentryofloopbodySafterexecutinganunknownnumberofiterations.Itisde\fnedtobetheclosureofthetransferfunctionrepresentingallpathsleadingbacktotheentryoftheloop,asshowninFig.9.50(b).Herewede\fnefR;i;IN[S]torepresentthee\u000bectofexecutionfromthestartoftheloopregiontotheentryoftheithiteration.Thus,fR;i;IN[S]=\u0010^predecessorsBinRoftheheaderofSfS;OUT[B]\u0011i\u000012.Ifthenumberofiterationsofaregionisknown,thesummaryoftheregioniscomputedbyreplacingiwiththeactualcount.3.Inthetop-downpass,wecomputefR;i;IN[B]to\fndthesymbolicmapassociatedwiththeentryoftheithiterationofaloop.9.8.SYMBOLICANALYSIS6974.Inthecasewheretheinputvalueofavariablem(v)isusedontheright-hand-sideofasymbolicmapinregionR,andm(v)=naauponentrytotheregion,weintroduceanewreferencevariablet,addassignmentt=vtothebeginningofregionR,andallreferencesofm(v)arereplacedbyt.Ifwedidnotintroduceareferencevariableatthispoint,thenaavalueheldbyvwouldpenetrateintoinnerloops.2fR5;j;IN[B3]=fj\u00001B3fR5;j;OUT[B3]=fjB3fR6;IN[B2]=IfR6;IN[R5]=fB2fR6;OUT[B4]=I\u000efR5;10;OUT[B3]\u000efB2fR7;i;IN[R6]=fi\u00001R6;OUT[B4]fR7;i;OUT[B4]=fiR6;OUT[B4]fR8;IN[B1]=IfR8;IN[R7]=fB1fR8;OUT[B4]=fR7;100;OUT[B4]\u000efB1Figure9.62:Transferfunctionrelationsinthebottom-uppassforExample9.58.Example9.64:ForExample9.58,weshowhowthetransferfunctionsfortheprogramarecomputedinthebottom-uppassinFig.9.62.RegionR5istheinnerloop,withbodyB5.ThetransferfunctionrepresentingthepathfromtheentryofregionR5tothebeginningofthejthiteration,j\u00151,isfj\u00001B3.Thetransferfunctionrepresentingthepathtotheendofthejthiteration,j\u00151,isfjB3.RegionR6consistsofblocksB2andB4,withloopregionR5inthemiddle.ThetransferfunctionsfromtheentryofB2andR5canbecomputedinthesamewayasintheoriginalalgorithm.TransferfunctionfR6;OUT[B3]representsthecompositionofblockB2andtheentireexecutionoftheinnerloop,sincefB4istheidentityfunction.Sincetheinnerloopisknowntoiterate10times,wecanreplacejby10tosummarizethee\u000bectoftheinnerloopprecisely.The698CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONS9.8.SYMBOLICANALYSIS6991)for(i=1;i<n;i++}{2)a=input();3)for(j=1;j<10;j++){4)a=a-1;5)b=j+a;6)a=a+1;}}(a)Aloopwherea\ructuates.for(i=1;i<n;i++}{a=input();t=a;for(j=1;j<10;j++){a=t-1;b=t-1+j;a=t;}}(b)Areferencevariabletmakesbaninductionvariable.Figure9.64:TheneedtointroducereferencevariablesExample9.65:ConsiderthesimpleexampleinFig.9.64(a).Letfjbethetransferfunctionsummarizingthee\u000bectofexecutingjiterationsoftheinnerloop.Eventhoughthevalueofamay\ructuateduringtheexecutionoftheloop,weseethatbisaninductionvariablebasedonthevalueofaonentryoftheloop;thatis,fj(m)(b)=m(a)\u00001+j.Becauseaisassignedaninputvalue,thesymbolicmapuponentrytotheinnerloopmapsatonaa.Weintroduceanewreferencevariablettosavethevalueofauponentry,andperformthesubstitutionsasinFig.9.64(b).29.8.4ExercisesforSection9.8Exercise9.8.1:Forthe\rowgraphofFig.9.10(seetheexercisesforSection9.1),givethetransferfunctionsfora)BlockB2.b)BlockB4.c)BlockB5.700CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSExercise9.8.2:ConsidertheinnerloopofFig.9.10,consistingofblocksB3andB4.Ifirepresentsthenumberoftimesaroundtheloop,andfisthetransferfunctionfortheloopbody(i.e.,excludingtheedgefromB4toB3)fromtheentryoftheloop(i.e.,thebeginningofB3)totheexitfromB4,thenwhatisfi?Rememberthatftakesasargumentamapm,andmassignsavaluetoeachofvariablesa,b,d,ande.Wedenotethesevaluesm(a),andsoon,althoughwedonotknowtheirvalues.!Exercise9.8.3:NowconsidertheouterloopofFig.9.10,consistingofblocksB2,B3,B4,andB5.Letgbethetransferfunctionfortheloopbody,fromtheentryoftheloopatB2toitsexitatB5.LetimeasurethenumberofiterationsoftheinnerloopofB3andB4(whichcountofiterationswecannotknow),andletjmeasurethenumberofiterationsoftheouterloop(whichwealsocannotknow).Whatisgj?9.9SummaryofChapter9 ✦GlobalCommonSubexpressions:Animportantoptimizationis\fndingcomputationsofthesameexpressionintwodi\u000berentbasicblocks.Ifoneprecedestheother,wecanstoretheresultthe\frsttimeitiscomputedandusethestoredresultonsubsequentoccurrences. ✦CopyPropagation:Acopystatement,u=v,assignsonevariablevtoanother,u.Insomecircumstances,wecanreplaceallusesofubyv,thuseliminatingboththeassignmentandu. ✦CodeMotion:Anotheroptimizationistomoveacomputationoutsidetheloopinwhichitappears.Thischangeisonlycorrectifthecomputationproducesthesamevalueeachtimearoundtheloop. ✦InductionVariables:Manyloopshaveinductionvariables,variablesthattakeonalinearsequenceofvalueseachtimearoundtheloop.Someoftheseareusedonlytocountiterations,andtheyoftencanbeeliminated,thusreducingthetimeittakestogoaroundtheloop. ✦Data-FlowAnalysis:Adata-\rowanalysisschemade\fnesavalueateachpointintheprogram.Statementsoftheprogramhaveassociatedtransferfunctionsthatrelatethevaluebeforethestatementtothevalueafter.Statementswithmorethanonepredecessormusthavetheirvaluede\fnedbycombiningthevaluesatthepredecessors,usingameet(orcon\ruence)operator. ✦Data-FlowAnalysisonBasicBlocks:Becausethepropagationofdata-\rowvalueswithinablockisusuallyquitesimple,data-\rowequationsaregenerallysetuptohavetwovariablesforeachblock,calledINandOUT,thatrepresentthedata-\rowvaluesatthebeginningandendofthe9.9.SUMMARYOFCHAPTER9701block,respectively.Thetransferfunctionsforthestatementsinablockarecomposedtogetthetransferfunctionfortheblockasawhole. ✦ReachingDe\fnitions:Thereaching-de\fnitionsdata-\rowframeworkhasvaluesthataresetsofstatementsintheprogramthatde\fnevaluesforoneormorevariables.Thetransferfunctionforablockkillsde\fnitionsofvariablesthatarede\fnitelyrede\fnedintheblockandadds(\\generates\")thosede\fnitionsofvariablesthatoccurwithintheblock.Thecon\ru-enceoperatorisunion,sincede\fnitionsreachapointiftheyreachanypredecessorofthatpoint. ✦LiveVariables:Anotherimportantdata-\rowframeworkcomputesthevariablesthatarelive(willbeusedbeforerede\fnition)ateachpoint.Theframeworkissimilartoreachingde\fnitions,exceptthatthetransferfunctionrunsbackward.Avariableisliveatthebeginningofablockifitiseitherusedbeforede\fnitionintheblockorisliveattheendoftheblockandnotrede\fnedintheblock. ✦AvailableExpressions:Todiscoverglobalcommonsubexpressions,wedeterminetheavailableexpressionsateachpoint|expressionsthathavebeencomputedandneitheroftheexpression'sargumentswererede\fnedafterthelastcomputation.Thedata-\rowframeworkissimilartoreachingde\fnitions,butthecon\ruenceoperatorisintersectionratherthanunion. ✦AbstractionofData-FlowProblems:Commondata-\rowproblems,suchasthosealreadymentioned,canbeexpressedinacommonmathematicalstructure.Thevaluesaremembersofasemilattice,whosemeetisthecon\ruenceoperator.Transferfunctionsmaplatticeelementstolatticeelements.Thesetofallowedtransferfunctionsmustbeclosedundercompositionandincludetheidentityfunction. ✦MonotoneFrameworks:Asemilatticehasa\u0014relationde\fnedbya\u0014bifandonlyifa^b=a.Monotoneframeworkshavethepropertythateachtransferfunctionpreservesthe\u0014relationship;thatis,a\u0014bimpliesf(a)\u0014f(b),foralllatticeelementsaandbandtransferfunctionf. ✦DistributiveFrameworks:Theseframeworkssatisfytheconditionthatf(a^b)=f(a)^f(b),foralllatticeelementsaandbandtransferfunctionf.Itcanbeshownthatthedistributiveconditionimpliesthemonotonecondition. ✦IterativeSolutiontoAbstractFrameworks:Allmonotonedata-\rowframe-workscanbesolvedbyaniterativealgorithm,inwhichtheINandOUTvaluesforeachblockareinitializedappropriately(dependingontheframework),andnewvaluesforthesevariablesarerepeatedlycom-putedbyapplyingthetransferandcon\ruenceoperations.Thissolutionisalwayssafe(optimizationsthatitsuggestswillnotchangewhatthe702CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSprogramdoes),butthesolutioniscertaintobethebestpossibleonlyiftheframeworkisdistributive. ✦TheConstantPropagationFramework:Whilethebasicframeworkssuchasreachingde\fnitionsaredistributive,thereareinterestingmonotone-but-not-distributiveframeworksaswell.Oneinvolvespropagatingcon-stantsbyusingasemilatticewhoseelementsaremappingsfromthepro-gramvariablestoconstants,plustwospecialvaluesthatrepresent\\noinformation\"and\\de\fnitelynotaconstant.\" ✦Partial-RedundancyElimination:Manyusefuloptimizations,suchascodemotionandglobalcommon-subexpressionelimination,canbegeneralizedtoasingleproblemcalledpartial-redundancyelimination.Expressionsthatareneeded,butareavailablealongonlysomeofthepathstoapoint,arecomputedonlyalongthepathswheretheyarenotavailable.Thecorrectapplicationofthisidearequiresthesolutiontoasequenceoffourdi\u000berentdata-\rowproblemsplusotheroperations. ✦Dominators:Anodeina\rowgraphdominatesanotherifeverypathtothelattermustgothroughtheformer.Aproperdominatorisadominatorotherthanthenodeitself.Eachnodeexcepttheentrynodehasanimme-diatedominator|thatoneofitsproperdominatorsthatisdominatedbyalltheotherproperdominators. ✦Depth-FirstOrderingofFlowGraphs:Ifweperformadepth-\frstsearchofa\rowgraph,startingatitsentry,weproduceadepth-\frstspanningtree.Thedepth-\frstorderofthenodesisthereverseofapostordertraversalofthistree. ✦Classi\fcationofEdges:Whenweconstructadepth-\frstspanningtree,alltheedgesofthe\rowgraphcanbedividedintothreegroups:advanc-ingedges(thosethatgofromancestortoproperdescendant),retreatingedges(thosefromdescendanttoancestor)andcrossedges(others).Animportantpropertyisthatallthecrossedgesgofromrighttoleftinthetree.Anotherimportantpropertyisthatoftheseedges,onlytheretreat-ingedgeshaveaheadlowerthanitstailinthedepth-\frstorder(reversepostorder). ✦BackEdges:Abackedgeisonewhoseheaddominatesitstail.Everybackedgeisaretreatingedge,regardlessofwhichdepth-\frstspanningtreeforits\rowgraphischosen. ✦ReducibleFlowGraphs:Ifeveryretreatingedgeisabackedge,regardlessofwhichdepth-\frstspanningtreeischosen,thenthe\rowgraphissaidtobereducible.Thevastmajorityof\rowgraphsarereducible;thosewhoseonlycontrol-\rowstatementsaretheusualloop-formingandbranchingstatementsarecertainlyreducible.9.10.REFERENCESFORCHAPTER9703 ✦NaturalLoops:Anaturalloopisasetofnodeswithaheadernodethatdominatesallthenodesinthesetandhasatleastonebackedgeenteringthatnode.Givenanybackedge,wecanconstructitsnaturalloopbytakingtheheadoftheedgeplusallnodesthatcanreachthetailoftheedgewithoutgoingthroughthehead.Twonaturalloopswithdi\u000berentheadersareeitherdisjointoroneiscompletelycontainedintheother;thisfactletsustalkaboutahierarchyofnestedloops,aslongas\\loops\"aretakentobenaturalloops. ✦Depth-FirstOrderMakestheIterativeAlgorithmE\u000ecient:Theiterativealgorithmrequiresfewpasses,aslongaspropagationofinformationalongacyclicpathsissu\u000ecient;i.e.,cyclesaddnothing.Ifwevisitnodesindepth-\frstorder,anydata-\rowframeworkthatpropagatesinformationforward,e.g.,reachingde\fnitions,willconvergeinnomorethan2plusthelargestnumberofretreatingedgesonanyacyclicpath.Thesameholdsforbackward-propagatingframeworks,likelivevariables,ifwevisitinthereverseofdepth-\frstorder(i.e.,inpostorder). ✦Regions:Regionsaresetsofnodesandedgeswithaheaderhthatdomi-natesallnodesintheregion.Thepredecessorsofanynodeotherthanhintheregionmustalsobeintheregion.Theedgesoftheregionareallthatgobetweennodesoftheregion,withthepossibleexceptionofsomeorallthatentertheheader. ✦RegionsandReducibleFlowGraphs:Reducible\rowgraphscanbeparsedintoahierarchyofregions.Theseregionsareeitherloopregions,whichincludealltheedgesintotheheader,orbodyregionsthathavenoedgesintotheheader. ✦Region-BasedData-FlowAnalysis:Analternativetotheiterativeap-proachtodata-\rowanalysisistoworkupanddowntheregionhierarchy,computingtransferfunctionsfromtheheaderofeachregiontoeachnodeinthatregion. ✦Region-BasedInductionVariableDetection:Animportantapplicationofregion-basedanalysisisinadata-\rowframeworkthattriestocomputeformulasforeachvariableinaloopregionwhosevalueisana\u000ene(linear)functionofthenumberoftimesaroundtheloop.9.10ReferencesforChapter9TwoearlycompilersthatdidextensivecodeoptimizationareAlpha[7]andFortranH[16].Thefundamentaltreatiseontechniquesforloopoptimization(e.g.,codemotion)is[1],althoughearlierversionsofsomeoftheseideasappearin[8].Aninformallydistributedbook[4]wasin\ruentialindisseminatingcode-optimizationideas.704CHAPTER9.MACHINE-INDEPENDENTOPTIMIZATIONSThe\frstdescriptionoftheiterativealgorithmfordata-\rowanalysisisfromtheunpublishedtechnicalreportofVyssotskyandWegner[20].Thescienti\fcstudyofdata-\rowanalysisissaidtobeginwithapairofpapersbyAllen[2]andCocke[3].Thelattice-theoreticabstractiondescribedhereisbasedontheworkofKil-dall[13].Theseframeworksassumeddistributivity,whichmanyframeworksdonotsatisfy.Afteranumberofsuchframeworkscametolight,themonotonicityconditionwasembeddedinthemodelby[5]and[11].Partial-redundancyeliminationwaspioneeredby[17].Thelazy-code-mo-tionalgorithmdescribedinthischapterisbasedon[14].Dominatorswere\frstusedinthecompilerdescribedin[13].However,theideadatesbackto[18].Thenotionofreducible\rowgraphscomesfrom[2].Thestructureofthese\rowgraphs,aspresentedhere,isfrom[9]and[10].[12]and[15]\frstconnectedreducibilityof\rowgraphstothecommonnestedcontrol-\rowstructures,whichexplainswhythisclassof\rowgraphsissocommon.Thede\fnitionofreducibilitybyT1-T2reduction,asusedinregion-basedanalysis,isfrom[19].Theregion-basedapproachwas\frstusedinacompilerdescribedin[21].Thestaticsingle-assignment(SSA)formofintermediaterepresentationin-troducedinSection6.2.4incorporatesbothdata\rowandcontrol\rowintoitsrepresentation.SSAfacilitatestheimplementationofmanyoptimizingtrans-formationsfromacommonframework[6].1.Allen,F.E.,\\Programoptimization,\"AnnualReviewinAutomaticPro-gramming5(1969),pp.239{307.2.Allen,F.E.,\\Control\rowanalysis,\"ACMSigplanNotices5:7(1970),pp.1{19.3.Cocke,J.,\\Globalcommonsubexpressionelimination,\"ACMSIGPLANNotices5:7(1970),pp.20{24.4.Cocke,J.andJ.T.Schwartz,ProgrammingLanguagesandTheirCom-pilers:PreliminaryNotes,CourantInstituteofMathematicalSciences,NewYorkUniv.,NewYork,1970.5.Cousot,P.andR.Cousot,\\Abstractinterpretation:auni\fedlatticemodelforstaticanalysisofprogramsbyconstructionorapproximationof\fxpoints,\"FourthACMSymposiumonPrinciplesofProgrammingLan-guages(1977),pp.238{252.6.Cytron,R.,J.Ferrante,B.K.Rosen,M.N.Wegman,andF.K.Zadeck,\\E\u000ecientlycomputingstaticsingleassignmentformandthecontrolde-pendencegraph,\"ACMTransactionsonProgrammingLanguagesandSystems13:4(1991),pp.451{490.9.10.REFERENCESFORCHAPTER97057.Ershov,A.P.,\\Alpha|anautomaticprogrammingsystemofhighe\u000e-ciency,\"J.ACM13:1(1966),pp.17{24.8.Gear,C.W.,\\Highspeedcompilationofe\u000ecientobjectcode,\"Comm.ACM8:8(1965),pp.483{488.9.Hecht,M.S.andJ.D.Ullman,\\Flowgraphreducibility,\"SIAMJ.Com-puting1(1972),pp.188{202.10.Hecht,M.S.andJ.D.Ullman,\\Characterizationsofreducible\rowgraphs,\"J.ACM21(1974),pp.367{375.11.Kam,J.B.andJ.D.Ullman,\\Monotonedata\rowanalysisframeworks,\"ActaInformatica7:3(1977),pp.305{318.12.Kasami,T.,W.W.Peterson,andN.Tokura,\\Onthecapabilitiesofwhile,repeat,andexitstatements,\"Comm.ACM16:8(1973),pp.503{512.13.Kildall,G.,\\Auni\fedapproachtoglobalprogramoptimization,\"ACMSymposiumonPrinciplesofProgrammingLanguages(1973),pp.194{206.14.Knoop,J.,\\Lazycodemotion,\"Proc.ACMSIGPLAN1992conferenceonProgrammingLanguageDesignandImplementation,pp.224{234.15.Kosaraju,S.R.,\\Analysisofstructuredprograms,\"J.ComputerandSystemSciences9:3(1974),pp.232{255.16.Lowry,E.S.andC.W.Medlock,\\Objectcodeoptimization,\"Comm.ACM12:1(1969),pp.13{22.17.Morel,E.andC.Renvoise,\\Globaloptimizationbysuppressionofpartialredundancies,\"Comm.ACM22(1979),pp.96{103.18.Prosser,R.T.,\\Applicationofbooleanmatricestotheanalysisof\rowdiagrams,\"AFIPSEasternJointComputerConference(1959),SpartanBooks,BaltimoreMD,pp.133{138.19.Ullman,J.D.,\\Fastalgorithmsfortheeliminationofcommonsubexpres-sions,\"ActaInformatica2(1973),pp.191{213.20.Vyssotsky,V.andP.Wegner,\\AgraphtheoreticalFortransourcelan-guageanalyzer,\"unpublishedtechnicalreport,BellLaboratories,MurrayHillNJ,1963.21.Wulf,W.A.,R.K.Johnson,C.B.Weinstock,S.O.Hobbs,andC.M.Geschke,TheDesignofanOptimizingCompiler,Elsevier,NewYork,1975. This page intentionally left blank Chapter10Instruction-LevelParallelismEverymodernhigh-performanceprocessorcanexecuteseveraloperationsinasingleclockcycle.The\\billion-dollarquestion\"ishowfastcanaprogramberunonaprocessorwithinstruction-levelparallelism?Theanswerdependson:1.Thepotentialparallelismintheprogram.2.Theavailableparallelismontheprocessor.3.Ourabilitytoextractparallelismfromtheoriginalsequentialprogram.4.Ourabilityto\fndthebestparallelschedulegivenschedulingconstraints.Ifalltheoperationsinaprogramarehighlydependentupononeanother,thennoamountofhardwareorparallelizationtechniquescanmaketheprogramrunfastinparallel.Therehasbeenalotofresearchonunderstandingthelimitsofparallelization.Typicalnonnumericapplicationshavemanyinherentdependences.Forexample,theseprogramshavemanydata-dependentbranchesthatmakeithardeventopredictwhichinstructionsaretobeexecuted,letalonedecidewhichoperationscanbeexecutedinparallel.Therefore,workinthisareahasfocusedonrelaxingtheschedulingconstraints,includingtheintroductionofnewarchitecturalfeatures,ratherthantheschedulingtechniquesthemselves.Numericapplications,suchasscienti\fccomputingandsignalprocessing,tendtohavemoreparallelism.Theseapplicationsdealwithlargeaggregatedatastructures;operationsondistinctelementsofthestructureareofteninde-pendentofoneanotherandcanbeexecutedinparallel.Additionalhardwareresourcescantakeadvantageofsuchparallelismandareprovidedinhigh-performance,general-purposemachinesanddigitalsignalprocessors.Theseprogramstendtohavesimplecontrolstructuresandregulardata-accesspat-terns,andstatictechniqueshavebeendevelopedtoextracttheavailableparal-lelismfromtheseprograms.Codeschedulingforsuchapplicationsisinteresting707708CHAPTER10.INSTRUCTION-LEVELPARALLELISMandsigni\fcant,astheyo\u000beralargenumberofindependentoperationstobemappedontoalargenumberofresources.Bothparallelismextractionandschedulingforparallelexecutioncanbeperformedeitherstaticallyinsoftware,ordynamicallyinhardware.Infact,evenmachineswithhardwareschedulingcanbeaidedbysoftwarescheduling.Thischapterstartsbyexplainingthefundamentalissuesinusinginstruction-levelparallelism,whichisthesameregardlessofwhethertheparallelismismanagedbysoftwareorhardware.Wethenmotivatethebasicdata-dependenceanalysesneededfortheextractionofparallelism.Theseanalysesareusefulformanyoptimizationsotherthaninstruction-levelparallelismasweshallseeinChapter11.Finally,wepresentthebasicideasincodescheduling.Wedescribeatech-niqueforschedulingbasicblocks,amethodforhandlinghighlydata-dependentcontrol\rowfoundingeneral-purposeprograms,and\fnallyatechniquecalledsoftwarepipeliningthatisusedprimarilyforschedulingnumericprograms.10.1ProcessorArchitecturesWhenwethinkofinstruction-levelparallelism,weusuallyimagineaprocessorissuingseveraloperationsinasingleclockcycle.Infact,itispossibleforamachinetoissuejustoneoperationperclock1andyetachieveinstruction-levelparallelismusingtheconceptofpipelining.Inthefollowing,weshall\frstexplainpipeliningthendiscussmultiple-instructionissue.10.1.1InstructionPipelinesandBranchDelaysPracticallyeveryprocessor,beitahigh-performancesupercomputerorastan-dardmachine,usesaninstructionpipeline.Withaninstructionpipeline,anewinstructioncanbefetchedeveryclockwhileprecedinginstructionsarestillgoingthroughthepipeline.ShowninFig.10.1isasimple5-stageinstructionpipeline:it\frstfetchestheinstruction(IF),decodesit(ID),executestheop-eration(EX),accessesthememory(MEM),andwritesbacktheresult(WB).The\fgureshowshowinstructionsi,i+1,i+2,i+3,andi+4canexecuteatthesametime.Eachrowcorrespondstoaclocktick,andeachcolumninthe\fgurespeci\festhestageeachinstructionoccupiesateachclocktick.Iftheresultfromaninstructionisavailablebythetimethesucceedingin-structionneedsthedata,theprocessorcanissueaninstructioneveryclock.Branchinstructionsareespeciallyproblematicbecauseuntiltheyarefetched,decodedandexecuted,theprocessordoesnotknowwhichinstructionwillex-ecutenext.Manyprocessorsspeculativelyfetchanddecodetheimmediatelysucceedinginstructionsincaseabranchisnottaken.Whenabranchisfoundtobetaken,theinstructionpipelineisemptiedandthebranchtargetisfetched.10.1.PROCESSORARCHITECTURES709ii+1i+2i+3i+41.IF2.IDIF3.EXIDIF4.MEMEXIDIF5.WBMEMEXIDIF6.WBMEMEXID7.WBMEMEX8.WBMEM9.WBFigure10.1:Fiveconsecutiveinstructionsina5-stageinstructionpipelineThus,takenbranchesintroduceadelayinthefetchofthebranchtargetandintroduce\\hiccups\"intheinstructionpipeline.Advancedprocessorsusehard-waretopredicttheoutcomesofbranchesbasedontheirexecutionhistoryandtoprefetchfromthepredictedtargetlocations.Branchdelaysarenonethelessobservedifbranchesaremispredicted.10.1.2PipelinedExecutionSomeinstructionstakeseveralclockstoexecute.Onecommonexampleisthememory-loadoperation.Evenwhenamemoryaccesshitsinthecache,itusu-allytakesseveralclocksforthecachetoreturnthedata.Wesaythattheexecutionofaninstructionispipelinedifsucceedinginstructionsnotdependentontheresultareallowedtoproceed.Thus,evenifaprocessorcanissueonlyoneoperationperclock,severaloperationsmightbeintheirexecutionstagesatthesametime.Ifthedeepestexecutionpipelinehasnstages,potentiallynoperationscanbe\\in\right\"atthesametime.Notethatnotallinstruc-tionsarefullypipelined.While\roating-pointaddsandmultipliesoftenarefullypipelined,\roating-pointdivides,beingmorecomplexandlessfrequentlyexecuted,oftenarenot.Mostgeneral-purposeprocessorsdynamicallydetectdependencesbetweenconsecutiveinstructionsandautomaticallystalltheexecutionofinstructionsiftheiroperandsarenotavailable.Someprocessors,especiallythoseembeddedinhand-helddevices,leavethedependencecheckingtothesoftwareinordertokeepthehardwaresimpleandpowerconsumptionlow.Inthiscase,thecompilerisresponsibleforinserting\\no-op\"instructionsinthecodeifnecessarytoassurethattheresultsareavailablewhenneeded.710CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.1.3MultipleInstructionIssueByissuingseveraloperationsperclock,processorscankeepevenmoreopera-tionsin\right.Thelargestnumberofoperationsthatcanbeexecutedsimul-taneouslycanbecomputedbymultiplyingtheinstructionissuewidthbytheaveragenumberofstagesintheexecutionpipeline.Likepipelining,parallelismonmultiple-issuemachinescanbemanagedei-therbysoftwareorhardware.MachinesthatrelyonsoftwaretomanagetheirparallelismareknownasVLIW(Very-Long-Instruction-Word)machines,whilethosethatmanagetheirparallelismwithhardwareareknownassuperscalarmachines.VLIWmachines,astheirnameimplies,havewiderthannormalinstructionwordsthatencodetheoperationstobeissuedinasingleclock.Thecompilerdecideswhichoperationsaretobeissuedinparallelandencodestheinformationinthemachinecodeexplicitly.Superscalarmachines,ontheotherhand,havearegularinstructionsetwithanordinarysequential-executionsemantics.Superscalarmachinesautomaticallydetectdependencesamongin-structionsandissuethemastheiroperandsbecomeavailable.SomeprocessorsincludebothVLIWandsuperscalarfunctionality.Simplehardwareschedulersexecuteinstructionsintheorderinwhichtheyarefetched.Ifaschedulercomesacrossadependentinstruction,itandallinstructionsthatfollowmustwaituntilthedependencesareresolved(i.e.,theneededresultsareavailable).Suchmachinesobviouslycanbene\ftfromhavingastaticschedulerthatplacesindependentoperationsnexttoeachotherintheorderofexecution.Moresophisticatedschedulerscanexecuteinstructions\\outoforder.\"Op-erationsareindependentlystalledandnotallowedtoexecuteuntilallthevaluestheydependonhavebeenproduced.Eventheseschedulersbene\ftfromstaticscheduling,becausehardwareschedulershaveonlyalimitedspaceinwhichtobu\u000beroperationsthatmustbestalled.Staticschedulingcanplaceindependentoperationsclosetogethertoallowbetterhardwareutilization.Moreimpor-tantly,regardlesshowsophisticatedadynamicscheduleris,itcannotexecuteinstructionsithasnotfetched.Whentheprocessorhastotakeanunexpectedbranch,itcanonly\fndparallelismamongthenewlyfetchedinstructions.Thecompilercanenhancetheperformanceofthedynamicschedulerbyensuringthatthesenewlyfetchedinstructionscanexecuteinparallel.10.2Code-SchedulingConstraintsCodeschedulingisaformofprogramoptimizationthatappliestothemachinecodethatisproducedbythecodegenerator.Codeschedulingissubjecttothreekindsofconstraints:1.Control-dependenceconstraints.Alltheoperationsexecutedintheorigi-nalprogrammustbeexecutedintheoptimizedone.10.2.CODE-SCHEDULINGCONSTRAINTS7112.Data-dependenceconstraints.Theoperationsintheoptimizedprogrammustproducethesameresultsasthecorrespondingonesintheoriginalprogram.3.Resourceconstraints.Theschedulemustnotoversubscribetheresourcesonthemachine.Theseschedulingconstraintsguaranteethattheoptimizedprogrampro-ducesthesameresultsastheoriginal.However,becausecodeschedulingchangestheorderinwhichtheoperationsexecute,thestateofthememoryatanyonepointmaynotmatchanyofthememorystatesinasequentialex-ecution.Thissituationisaproblemifaprogram'sexecutionisinterruptedby,forexample,athrownexceptionorauser-insertedbreakpoint.Optimizedprogramsarethereforehardertodebug.Notethatthisproblemisnotspeci\fctocodeschedulingbutappliestoallotheroptimizations,includingpartial-redundancyelimination(Section9.5)andregisterallocation(Section8.8).10.2.1DataDependenceItiseasytoseethatifwechangetheexecutionorderoftwooperationsthatdonottouchanyofthesamevariables,wecannotpossiblya\u000becttheirresults.Infact,evenifthesetwooperationsreadthesamevariable,wecanstillpermutetheirexecution.Onlyifanoperationwritestoavariablereadorwrittenbyanothercanchangingtheirexecutionorderaltertheirresults.Suchpairsofoperationsaresaidtoshareadatadependence,andtheirrelativeexecutionordermustbepreserved.Therearethree\ravorsofdatadependence:1.Truedependence:readafterwrite.Ifawriteisfollowedbyareadofthesamelocation,thereaddependsonthevaluewritten;suchadependenceisknownasatruedependence.2.Antidependence:writeafterread.Ifareadisfollowedbyawritetothesamelocation,wesaythatthereisanantidependencefromthereadtothewrite.Thewritedoesnotdependonthereadperse,butifthewritehappensbeforetheread,thenthereadoperationwillpickupthewrongvalue.Antidependenceisabyproductofimperativeprogramming,wherethesamememorylocationsareusedtostoredi\u000berentvalues.Itisnota\\true\"dependenceandpotentiallycanbeeliminatedbystoringthevaluesindi\u000berentlocations.3.Outputdependence:writeafterwrite.Twowritestothesamelocationshareanoutputdependence.Ifthedependenceisviolated,thevalueofthememorylocationwrittenwillhavethewrongvalueafterbothoperationsareperformed.Antidependenceandoutputdependencesarereferredtoasstorage-relatedde-pendences.Thesearenot\\true\"dependencesandcanbeeliminatedbyusing712CHAPTER10.INSTRUCTION-LEVELPARALLELISMdi\u000berentlocationstostoredi\u000berentvalues.Notethatdatadependencesapplytobothmemoryaccessesandregisteraccesses.10.2.2FindingDependencesAmongMemoryAccessesTocheckiftwomemoryaccessesshareadatadependence,weonlyneedtotelliftheycanrefertothesamelocation;wedonotneedtoknowwhichlocationisbeingaccessed.Forexample,wecantellthataddressesgivenbyapointerpandano\u000bsetfromthesamepointerp+4cannotrefertothesamelocation,eventhoughwemaynotknowwhatppointsto.Datadependenceisgenerallyundecidableatcompiletime.Thecompilermustassumethatoperationsmayrefertothesamelocationunlessitcanproveotherwise.Example10.1:Giventhecodesequence1)a=1;2)*p=2;3)x=a;unlessthecompilerknowsthatpcannotpossiblypointtoa,itmustconcludethatthethreeoperationsneedtoexecuteserially.Thereisanoutputdepen-dence\rowingfromstatement(1)tostatement(2),andtherearetwotruedependences\rowingfromstatements(1)and(2)tostatement(3).2Data-dependenceanalysisishighlysensitivetotheprogramminglanguageusedintheprogram.Fortype-unsafelanguageslikeCandC++,whereapointercanbecasttopointtoanykindofobject,sophisticatedanalysisisnecessarytoproveindependencebetweenanypairofpointer-basedmemoryac-cesses.Evenlocalorglobalscalarvariablescanbeaccessedindirectlyunlesswecanprovethattheiraddresseshavenotbeenstoredanywherebyanyinstruc-tionintheprogram.Intype-safelanguageslikeJava,objectsofdi\u000berenttypesarenecessarilydistinctfromeachother.Similarly,localprimitivevariablesonthestackcannotbealiasedwithaccessesthroughothernames.Acorrectdiscoveryofdatadependencesrequiresanumberofdi\u000berentformsofanalysis.Weshallfocusonthemajorquestionsthatmustberesolvedifthecompileristodetectallthedependencesthatexistinaprogram,andhowtousethisinformationincodescheduling.Laterchaptersshowhowtheseanalysesareperformed.ArrayData-DependenceAnalysisArraydatadependenceistheproblemofdisambiguatingbetweenthevaluesofindexesinarray-elementaccesses.Forexample,theloopfor(i=0;i<n;i++)A[2*i]=A[2*i+1];10.2.CODE-SCHEDULINGCONSTRAINTS713copiesoddelementsinthearrayAtotheevenelementsjustprecedingthem.Becauseallthereadandwrittenlocationsinthelooparedistinctfromeachother,therearenodependencesbetweentheaccesses,andalltheiterationsintheloopcanexecuteinparallel.Arraydata-dependenceanalysis,oftenreferredtosimplyasdata-dependenceanalysis,isveryimportantfortheoptimizationofnumericalapplications.ThistopicwillbediscussedindetailinSection11.6.Pointer-AliasAnalysisWesaythattwopointersarealiasediftheycanrefertothesameobject.Pointer-aliasanalysisisdi\u000ecultbecausetherearemanypotentiallyaliasedpointersinaprogram,andtheycaneachpointtoanunboundednumberofdynamicobjectsovertime.Togetanyprecision,pointer-aliasanalysismustbeappliedacrossallthefunctionsinaprogram.ThistopicisdiscussedstartinginSection12.4.InterproceduralAnalysisForlanguagesthatpassparametersbyreference,interproceduralanalysisisneededtodetermineifthesamevariableispassedastwoormoredi\u000berentarguments.Suchaliasescancreatedependencesbetweenseeminglydistinctparameters.Similarly,globalvariablescanbeusedasparametersandthuscreatedependencesbetweenparameteraccessesandglobalvariableaccesses.Interproceduralanalysis,discussedinChapter12,isnecessarytodeterminethesealiases.10.2.3Tradeo\u000bBetweenRegisterUsageandParallelismInthischapterweshallassumethatthemachine-independentintermediaterep-resentationofthesourceprogramusesanunboundednumberofpseudoregisterstorepresentvariablesthatcanbeallocatedtoregisters.Thesevariablesincludescalarvariablesinthesourceprogramthatcannotbereferredtobyanyothernames,aswellastemporaryvariablesthataregeneratedbythecompilertoholdthepartialresultsinexpressions.Unlikememorylocations,registersareuniquelynamed.Thusprecisedata-dependenceconstraintscanbegeneratedforregisteraccesseseasily.Theunboundednumberofpseudoregistersusedintheintermediaterepre-sentationmusteventuallybemappedtothesmallnumberofphysicalregistersavailableonthetargetmachine.Mappingseveralpseudoregisterstothesamephysicalregisterhastheunfortunatesidee\u000bectofcreatingarti\fcialstoragedependencesthatconstraininstruction-levelparallelism.Conversely,executinginstructionsinparallelcreatestheneedformorestoragetoholdthevaluesbeingcomputedsimultaneously.Thus,thegoalofminimizingthenumberofregistersusedcon\rictsdirectlywiththegoalofmaximizinginstruction-levelparallelism.Examples10.2and10.3belowillustratethisclassictrade-o\u000bbetweenstorageandparallelism.714CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.2.CODE-SCHEDULINGCONSTRAINTS715 + + + + ab cd eFigure10.2:ExpressiontreeinExample10.3(a+b)+c+(d+e)shownasasyntaxtreeinFig.10.2.Itispossibletoperformthiscomputationusingthreeregisters,asillustratedbythemachinecodeinFig.10.3.LDr1,a//r1=aLDr2,b//r2=bADDr1,r1,r2//r1=r1+r2LDr2,c//r2=cADDr1,r1,r2//r1=r1+r2LDr2,d//r2=dLDr3,e//r3=eADDr2,r2,r3//r2=r2+r3ADDr1,r1,r2//r1=r1+r2Figure10.3:MachinecodeforexpressionofFig.10.2Thereuseofregisters,however,serializesthecomputation.Theonlyoper-ationsallowedtoexecuteinparallelaretheloadsofthevaluesinlocationsaandb,andtheloadsofthevaluesinlocationsdande.Itthustakesatotalof7stepstocompletethecomputationinparallel.Hadweuseddi\u000berentregistersforeverypartialsum,theexpressioncouldbeevaluatedin4steps,whichistheheightoftheexpressiontreeinFig.10.2.TheparallelcomputationissuggestedbyFig.10.4.2716CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.2.4PhaseOrderingBetweenRegisterAllocationandCodeSchedulingIfregistersareallocatedbeforescheduling,theresultingcodetendstohavemanystoragedependencesthatlimitcodescheduling.Ontheotherhand,ifcodeisscheduledbeforeregisterallocation,theschedulecreatedmayrequiresomanyregistersthatregisterspilling(storingthecontentsofaregisterinamemorylocation,sotheregistercanbeusedforsomeotherpurpose)maynegatetheadvantagesofinstruction-levelparallelism.Shouldacompilerallo-cateregisters\frstbeforeitschedulesthecode?Orshoulditbetheotherwayround?Or,doweneedtoaddressthesetwoproblemsatthesametime?Toanswerthequestionsabove,wemustconsiderthecharacteristicsoftheprogramsbeingcompiled.Manynonnumericapplicationsdonothavethatmuchavailableparallelism.Itsu\u000ecestodedicateasmallnumberofregistersforholdingtemporaryresultsinexpressions.Wecan\frstapplyacoloringalgorithm,asinSection8.8.4,toallocateregistersforallthenontemporaryvariables,thenschedulethecode,and\fnallyassignregisterstothetemporaryvariables.Thisapproachdoesnotworkfornumericapplicationswheretherearemanymorelargeexpressions.Wecanuseahierarchicalapproachwherecodeisop-timizedinsideout,startingwiththeinnermostloops.Instructionsare\frstscheduledassumingthateverypseudoregisterwillbeallocateditsownphysicalregister.Registerallocationisappliedafterschedulingandspillcodeisaddedwherenecessary,andthecodeisthenrescheduled.Thisprocessisrepeatedforthecodeintheouterloops.Whenseveralinnerloopsareconsideredtogetherinacommonouterloop,thesamevariablemayhavebeenassigneddi\u000berentregisters.Wecanchangetheregisterassignmenttoavoidhavingtocopythevaluesfromoneregistertoanother.InSection10.5,weshalldiscussthein-teractionbetweenregisterallocationandschedulingfurtherinthecontextofaspeci\fcschedulingalgorithm.10.2.5ControlDependenceSchedulingoperationswithinabasicblockisrelativelyeasybecausealltheinstructionsareguaranteedtoexecuteoncecontrol\rowreachesthebeginningoftheblock.Instructionsinabasicblockcanbereorderedarbitrarily,aslongasallthedatadependencesaresatis\fed.Unfortunately,basicblocks,especiallyinnonnumericprograms,aretypicallyverysmall;onaverage,thereareonlyabout\fveinstructionsinabasicblock.Inaddition,operationsinthesameblockareoftenhighlyrelatedandthushavelittleparallelism.Exploitingparallelismacrossbasicblocksisthereforecrucial.Anoptimizedprogrammustexecutealltheoperationsintheoriginalpro-gram.Itcanexecutemoreinstructionsthantheoriginal,aslongastheextrainstructionsdonotchangewhattheprogramdoes.Whywouldexecutingextrainstructionsspeedupaprogram'sexecution?Ifweknowthataninstruction10.2.CODE-SCHEDULINGCONSTRAINTS717islikelytobeexecuted,andanidleresourceisavailabletoperformtheopera-tion\\forfree,\"wecanexecutetheinstructionspeculatively.Theprogramrunsfasterwhenthespeculationturnsouttobecorrect.Aninstructioni1issaidtobecontrol-dependentoninstructioni2iftheoutcomeofi2determineswhetheri1istobeexecuted.Thenotionofcontroldependencecorrespondstotheconceptofnestinglevelsinblock-structuredprograms.Speci\fcally,intheif-elsestatementif(c)s1;elses2;s1ands2arecontroldependentonc.Similarly,inthewhile-statementwhile(c)s;thebodysiscontroldependentonc.Example10.4:Inthecodefragmentif(a>t)b=a*a;d=a+c;thestatementsb=a*aandd=a+chavenodatadependencewithanyotherpartofthefragment.Thestatementb=a*adependsonthecomparisona>t.Thestatementd=a+c,however,doesnotdependonthecomparisonandcanbeexecutedanytime.Assumingthatthemultiplicationa\u0003adoesnotcauseanysidee\u000bects,itcanbeperformedspeculatively,aslongasbiswrittenonlyafteraisfoundtobegreaterthant.210.2.6SpeculativeExecutionSupportMemoryloadsareonetypeofinstructionthatcanbene\ftgreatlyfromspecula-tiveexecution.Memoryloadsarequitecommon,ofcourse.Theyhaverelativelylongexecutionlatencies,addressesusedintheloadsarecommonlyavailableinadvance,andtheresultcanbestoredinanewtemporaryvariablewithoutdestroyingthevalueofanyothervariable.Unfortunately,memoryloadscanraiseexceptionsiftheiraddressesareillegal,sospeculativelyaccessingillegaladdressesmaycauseacorrectprogramtohaltunexpectedly.Besides,mispre-dictedmemoryloadscancauseextracachemissesandpagefaults,whichareextremelycostly.Example10.5:Inthefragmentif(p!=null)q=*p;dereferencingpspeculativelywillcausethiscorrectprogramtohaltinerrorifpisnull.2Manyhigh-performanceprocessorsprovidespecialfeaturestosupportspec-ulativememoryaccesses.Wementionthemostimportantonesnext.718CHAPTER10.INSTRUCTION-LEVELPARALLELISMPrefetchingTheprefetchinstructionwasinventedtobringdatafrommemorytothecachebeforeitisused.Aprefetchinstructionindicatestotheprocessorthattheprogramislikelytouseaparticularmemorywordinthenearfuture.Ifthelocationspeci\fedisinvalidorifaccessingitcausesapagefault,theprocessorcansimplyignoretheoperation.Otherwise,theprocessorwillbringthedatafrommemorytothecacheifitisnotalreadythere.PoisonBitsAnotherarchitecturalfeaturecalledpoisonbitswasinventedtoallowspecu-lativeloadofdatafrommemoryintotheregister\fle.Eachregisteronthemachineisaugmentedwithapoisonbit.Ifillegalmemoryisaccessedortheaccessedpageisnotinmemory,theprocessordoesnotraisetheexceptionim-mediatelybutinsteadjustsetsthepoisonbitofthedestinationregister.Anexceptionisraisedonlyifthecontentsoftheregisterwithamarkedpoisonbitareused.PredicatedExecutionBecausebranchesareexpensive,andmispredictedbranchesareevenmoreso(seeSection10.1),predicatedinstructionswereinventedtoreducethenumberofbranchesinaprogram.Apredicatedinstructionislikeanormalinstructionbuthasanextrapredicateoperandtoguarditsexecution;theinstructionisexecutedonlyifthepredicateisfoundtobetrue.Asanexample,aconditionalmoveinstructionCMOVZR2,R3,R1hasthesemanticsthatthecontentsofregisterR3aremovedtoregisterR2onlyifregisterR1iszero.Codesuchasif(a==0)b=c+d;canbeimplementedwithtwomachineinstructions,assumingthata,b,c,anddareallocatedtoregistersR1,R2,R4,R5,respectively,asfollows:ADDR3,R4,R5CMOVZR2,R3,R1Thisconversionreplacesaseriesofinstructionssharingacontroldependencewithinstructionssharingonlydatadependences.Theseinstructionscanthenbecombinedwithadjacentbasicblockstocreatealargerbasicblock.Moreimportantly,withthiscode,theprocessordoesnothaveachancetomispredict,thusguaranteeingthattheinstructionpipelinewillrunsmoothly.Predicatedexecutiondoescomewithacost.Predicatedinstructionsarefetchedanddecoded,eventhoughtheymaynotbeexecutedintheend.Staticschedulersmustreservealltheresourcesneededfortheirexecutionandensure10.2.CODE-SCHEDULINGCONSTRAINTS719720CHAPTER10.INSTRUCTION-LEVELPARALLELISMnumberofkindsofresourcesinthemachine,anditslengthisthedurationoverwhichresourcesareusedbytheoperation.EntryRTt[i;j]isthenumberofunitsofthejthresourceusedbyanoperationoftypet,iclocksafteritisissued.Fornotationalsimplicity,weassumeRTt[i;j]=0ifireferstoanonex-istententryinthetable(i.e.,iisgreaterthanthenumberofclocksittakestoexecutetheoperation).Ofcourse,foranyt,i,andj,RTt[i;j]mustbelessthanorequaltoR[j],thenumberofresourcesoftypejthatthemachinehas.Typicalmachineoperationsoccupyonlyoneunitofresourceatthetimeanoperationisissued.Someoperationsmayusemorethanonefunctionalunit.Forexample,amultiply-and-addoperationmayuseamultiplierinthe\frstclockandanadderinthesecond.Someoperations,suchasadivide,mayneedtooccupyaresourceforseveralclocks.Fullypipelinedoperationsarethosethatcanbeissuedeveryclock,eventhoughtheirresultsarenotavailableuntilsomenumberofclockslater.Weneednotmodeltheresourcesofeverystageofapipelineexplicitly;onesingleunittorepresentthe\frststagewilldo.Anyoperationoccupyingthe\frststageofapipelineisguaranteedtherighttoproceedtosubsequentstagesinsubsequentclocks.1)a=b2)c=d3)b=c4)d=a5)c=d6)a=bFigure10.5:Asequenceofassignmentsexhibitingdatadependences10.2.8ExercisesforSection10.2Exercise10.2.1:TheassignmentsinFig.10.5havecertaindependences.Foreachofthefollowingpairsofstatements,classifythedependenceas(i)truede-pendence,(ii)antidependence,(iii)outputdependence,or(iv)nodependence(i.e.,theinstructionscanappearineitherorder):a)Statements(1)and(4).b)Statements(3)and(5).c)Statements(1)and(6).d)Statements(3)and(6).e)Statements(4)and(6).Exercise10.2.2:Evaluatetheexpression\u0000(u+v)+(w+x)\u0001+(y+z)exactlyasparenthesized(i.e.,donotusethecommutativeorassociativelawstoreorderthe10.3.BASIC-BLOCKSCHEDULING721additions).Giveregister-levelmachinecodetoprovidethemaximumpossibleparallelism.Exercise10.2.3:RepeatExercise10.2.2forthefollowingexpressions:a)\u0010u+\u0000v+(w+x)\u0001\u0011+(y+z).b)\u0000u+(v+w)\u0001+\u0000x+(y+z)\u0001.Ifinsteadofmaximizingtheparallelism,weminimizedthenumberofregisters,howmanystepswouldthecomputationtake?Howmanystepsdowesavebyusingmaximalparallelism?Exercise10.2.4:TheexpressionofExercise10.2.2canbeexecutedbythesequenceofinstructionsshowninFig.10.6.Ifwehaveasmuchparallelismasweneed,howmanystepsareneededtoexecutetheinstructions?1)LDr1,u//r1=u2)LDr2,v//r2=v3)ADDr1,r1,r2//r1=r1+r24)LDr2,w//r2=w5)LDr3,x//r3=x6)ADDr2,r2,r3//r2=r2+r37)ADDr1,r1,r2//r1=r1+r28)LDr2,y//r2=y9)LDr3,z//r3=z10)ADDr2,r2,r3//r2=r2+r311)ADDr1,r1,r2//r1=r1+r2Figure10.6:Minimal-registerimplementationofanarithmeticexpression!Exercise10.2.5:TranslatethecodefragmentdiscussedinExample10.4,usingtheCMOVZconditionalcopyinstructionofSection10.2.6.Whatarethedatadependencesinyourmachinecode?10.3Basic-BlockSchedulingWearenowreadytostarttalkingaboutcode-schedulingalgorithms.Westartwiththeeasiestproblem:schedulingoperationsinabasicblockconsistingofmachineinstructions.SolvingthisproblemoptimallyisNP-complete.Butinpractice,atypicalbasicblockhasonlyasmallnumberofhighlyconstrainedoperations,sosimpleschedulingtechniquessu\u000ece.Weshallintroduceasimplebuthighlye\u000bectivealgorithm,calledlistscheduling,forthisproblem.722CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.3.1Data-DependenceGraphsWerepresenteachbasicblockofmachineinstructionsbyadata-dependencegraph,G=(N;E),havingasetofnodesNrepresentingtheoperationsinthemachineinstructionsintheblockandasetofdirectededgesErepresentingthedata-dependenceconstraintsamongtheoperations.ThenodesandedgesofGareconstructedasfollows:1.EachoperationninNhasaresource-reservationtableRTn,whosevalueissimplytheresource-reservationtableassociatedwiththeoperationtypeofn.2.EachedgeeinEislabeledwithdelaydeindicatingthatthedestinationnodemustbeissuednoearlierthandeclocksafterthesourcenodeisissued.Supposeoperationn1isfollowedbyoperationn2,andthesamelocationisaccessedbyboth,withlatenciesl1andl2respectively.Thatis,thelocation'svalueisproducedl1clocksafterthe\frstinstructionbegins,andthevalueisneededbythesecondinstructionl2clocksafterthatinstructionbegins(notel1=1andl2=0istypical).Then,thereisanedgen1!n2inElabeledwithdelayl1\u0000l2.Example10.6:Considerasimplemachinethatcanexecutetwooperationseveryclock.The\frstmustbeeitherabranchoperationoranALUoperationoftheform:OPdst,src1,src2Thesecondmustbealoadorstoreoperationoftheform:LDdst,addrSTaddr,srcTheloadoperation(LD)isfullypipelinedandtakestwoclocks.However,aloadcanbefollowedimmediatelybyastoreSTthatwritestothememorylocationread.Allotheroperationscompleteinoneclock.ShowninFig.10.7isthedependencegraphofanexampleofabasicblockanditsresourcesrequirement.WemightimaginethatR1isastackpointer,usedtoaccessdataonthestackwitho\u000bsetssuchas0or12.The\frstinstructionloadsregisterR2,andthevalueloadedisnotavailableuntiltwoclockslater.Thisobservationexplainsthelabel2ontheedgesfromthe\frstinstructiontothesecondand\ffthinstructions,eachofwhichneedsthevalueofR2.Similarly,thereisadelayof2ontheedgefromthethirdinstructiontothefourth;thevalueloadedintoR3isneededbythefourthinstruction,andnotavailableuntiltwoclocksafterthethirdbegins.SincewedonotknowhowthevaluesofR1andR7relate,wehavetoconsiderthepossibilitythatanaddresslike8(R1)isthesameastheaddress0(R7).10.3.BASIC-BLOCKSCHEDULING723 LD R2,0(R1) ADD R3,R3,R2 ST 4(R1),R2 ADD R3,R3,R4 ST 0(R7),R7 ST 12(R1),R3 2 2 1 1 2 resource- reservation tables memalu data dependences i1 i2 i3 i4 i5 i6 i7 LD R3,8(R1) 1 1 1 1Figure10.7:Data-dependencegraphforExample10.6Thatis,thelastinstructionmaybestoringintothesameaddressthatthethirdinstructionloadsfrom.Themachinemodelweareusingallowsustostoreintoalocationoneclockafterweloadfromthatlocation,eventhoughthevaluetobeloadedwillnotappearinaregisteruntiloneclocklater.Thisobservationexplainsthelabel1ontheedgefromthethirdinstructiontothelast.Thesamereasoningexplainstheedgeandlabelfromthe\frstinstructiontothelast.Theotheredgeswithlabel1areexplainedbyadependenceorpossibledependenceconditionedonthevalueofR7.210.3.2ListSchedulingofBasicBlocksThesimplestapproachtoschedulingbasicblocksinvolvesvisitingeachnodeofthedata-dependencegraphin\\prioritizedtopologicalorder.\"Sincetherecanbenocyclesinadata-dependencegraph,thereisalwaysatleastonetopologicalorderforthenodes.However,amongthepossibletopologicalorders,somemaybepreferabletoothers.WediscussinSection10.3.3someofthestrategiesfor724CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.3.BASIC-BLOCKSCHEDULING725RT=anemptyreservationtable;for(eachninNinprioritizedtopologicalorder)fs=maxe=p!ninE(S(p)+de);/*Findtheearliesttimethisinstructioncouldbegin,givenwhenitspredecessorsstarted.*/while(thereexistsisuchthatRT[s+i]+RTn[i]>R)s=s+1;/*Delaytheinstructionfurtheruntiltheneededresourcesareavailable.*/S(n)=s;for(alli)RT[s+i]=RT[s+i]+RTn[i]gFigure10.8:Alistschedulingalgorithm10.3.3PrioritizedTopologicalOrdersListschedulingdoesnotbacktrack;itscheduleseachnodeonceandonlyonce.Itusesaheuristicpriorityfunctiontochooseamongthenodesthatarereadytobeschedulednext.Herearesomeobservationsaboutpossibleprioritizedorderingsofthenodes:\u000fWithoutresourceconstraints,theshortestscheduleisgivenbythecriticalpath,thelongestpaththroughthedata-dependencegraph.Ametricusefulasapriorityfunctionistheheightofthenode,whichisthelengthofalongestpathinthegraphoriginatingfromthenode.\u000fOntheotherhand,ifalloperationsareindependent,thenthelengthofthescheduleisconstrainedbytheresourcesavailable.Thecriticalresourceistheonewiththelargestratioofusestothenumberofunitsofthatresourceavailable.Operationsusingmorecriticalresourcesmaybegivenhigherpriority.\u000fFinally,wecanusethesourceorderingtobreaktiesbetweenoperations;theoperationthatshowsupearlierinthesourceprogramshouldbesched-uled\frst.Example10.8:Forthedata-dependencegraphinFig.10.7,thecriticalpath,includingthetimetoexecutethelastinstruction,is6clocks.Thatis,thecriticalpathisthelast\fvenodes,fromtheloadofR3tothestoreofR7.Thetotalofthedelaysontheedgesalongthispathis5,towhichweadd1fortheclockneededforthelastinstruction.Usingtheheightasthepriorityfunction,Algorithm10.7\fndsanoptimalscheduleasshowninFig.10.9.NoticethatwescheduletheloadofR3\frst,sinceithasthegreatestheight.TheaddofR3andR4hastheresourcestobe726CHAPTER10.INSTRUCTION-LEVELPARALLELISM LD R3,8(R1) ADD R3,R3,R2 ADD R3,R3,R4 ST 4(R1),R2 LD R2,0(R1) ST 12(R1),R3 resource- reservation table memalu schedule ST 0(R7),R7Figure10.9:ResultofapplyinglistschedulingtotheexampleinFig.10.7scheduledatthesecondclock,butthedelayof2foraloadforcesustowaituntilthethirdclocktoschedulethisadd.Thatis,wecannotbesurethatR3willhaveitsneededvalueuntilthebeginningofclock3.21)LDR1,aLDR1,aLDR1,a2)LDR2,bLDR2,bLDR2,b3)SUBR3,R1,R2SUBR1,R1,R2SUBR3,R1,R24)ADDR2,R1,R2ADDR2,R1,R2ADDR4,R1,R25)STa,R3STa,R1STa,R36)STb,R2STb,R2STb,R4(a)(b)(c)Figure10.10:MachinecodeforExercise10.3.110.3.4ExercisesforSection10.3Exercise10.3.1:ForeachofthecodefragmentsofFig.10.10,drawthedata-dependencegraph.Exercise10.3.2:AssumeamachinewithoneALUresource(fortheADDandSUBoperations)andoneMEMresource(fortheLDandSToperations).Assumethatalloperationsrequireoneclock,exceptfortheLD,whichrequirestwo.However,asinExample10.6,aSTonthesamememorylocationcancommenceoneclockafteraLDonthatlocationcommences.FindashortestscheduleforeachofthefragmentsinFig.10.10.10.4.GLOBALCODESCHEDULING727Exercise10.3.3:RepeatExercise10.3.2assuming:i.ThemachinehasoneALUresourceandtwoMEMresources.ii.ThemachinehastwoALUresourcesandoneMEMresource.iii.ThemachinehastwoALUresourcesandtwoMEMresources.1)LDR1,a2)STb,R13)LDR2,c4)STc,R15)LDR1,d6)STd,R27)STa,R1Figure10.11:MachinecodeforExercise10.3.4Exercise10.3.4:AssumingthemachinemodelofExample10.6(asinExer-cise10.3.2):a)DrawthedatadependencegraphforthecodeofFig.10.11.b)Whatareallthecriticalpathsinyourgraphfrompart(a)?!c)AssumingunlimitedMEMresources,whatareallthepossibleschedulesfortheseveninstructions?10.4GlobalCodeSchedulingForamachinewithamoderateamountofinstruction-levelparallelism,sched-ulescreatedbycompactingindividualbasicblockstendtoleavemanyresourcesidle.Inordertomakebetteruseofmachineresources,itisnecessarytocon-sidercode-generationstrategiesthatmoveinstructionsfromonebasicblocktoanother.Strategiesthatconsidermorethanonebasicblockatatimearereferredtoasglobalschedulingalgorithms.Todoglobalschedulingcorrectly,wemustconsidernotonlydatadependencesbutalsocontroldependences.Wemustensurethat1.Allinstructionsintheoriginalprogramareexecutedintheoptimizedprogram,and2.Whiletheoptimizedprogrammayexecuteextrainstructionsspecula-tively,theseinstructionsmustnothaveanyunwantedsidee\u000bects.728CHAPTER10.INSTRUCTION-LEVELPARALLELISM10.4.1PrimitiveCodeMotionLetus\frststudytheissuesinvolvedinmovingoperationsaroundbywayofasimpleexample.Example10.9:Supposewehaveamachinethatcanexecuteanytwooper-ationsinasingleclock.Everyoperationexecuteswithadelayofoneclock,exceptfortheloadoperation,whichhasalatencyoftwoclocks.Forsimplicity,weassumethatallmemoryaccessesintheexamplearevalidandwillhitinthecache.Figure10.12(a)showsasimple\rowgraphwiththreebasicblocks.ThecodeisexpandedintomachineoperationsinFigure10.12(b).Alltheinstruc-tionsineachbasicblockmustexecuteseriallybecauseofdatadependences;infact,ano-opinstructionhastobeinsertedineverybasicblock.Assumethattheaddressesofvariablesa,b,c,d,andearedistinctandthatthoseaddressesarestoredinregistersR1throughR5,respectively.Thecom-putationsfromdi\u000berentbasicblocksthereforesharenodatadependences.WeobservethatalltheoperationsinblockB3areexecutedregardlessofwhetherthebranchistaken,andcanthereforebeexecutedinparallelwithoperationsfromblockB1.WecannotmoveoperationsfromB1downtoB3,becausetheyareneededtodeterminetheoutcomeofthebranch.OperationsinblockB2arecontrol-dependentonthetestinblockB1.WecanperformtheloadfromB2speculativelyinblockB1forfreeandshavetwoclocksfromtheexecutiontimewheneverthebranchistaken.Storesshouldnotbeperformedspeculativelybecausetheyoverwritetheoldvalueinamemorylocation.Itispossible,however,todelayastoreop-eration.WecannotsimplyplacethestoreoperationfromblockB2inblockB3,becauseitshouldonlybeexecutedifthe\rowofcontrolpassesthroughblockB2.However,wecanplacethestoreoperationinaduplicatedcopyofB3.Figure10.12(c)showssuchanoptimizedschedule.Theoptimizedcodeexecutesin4clocks,whichisthesameasthetimeittakestoexecuteB3alone.2Example10.9showsthatitispossibletomoveoperationsupanddownanexecutionpath.Everypairofbasicblocksinthisexamplehasadi\u000berent\\dominancerelation,\"andthustheconsiderationsofwhenandhowinstructionscanbemovedbetweeneachpairaredi\u000berent.AsdiscussedinSection9.6.1,ablockBissaidtodominateblockB0ifeverypathfromtheentryofthecontrol-\rowgraphtoB0goesthroughB.Similarly,ablockBpostdominatesblockB0ifeverypathfromB0totheexitofthegraphgoesthroughB.WhenBdominatesB0andB0postdominatesB,wesaythatBandB0arecontrolequivalent,meaningthatoneisexecutedwhenandonlywhentheotheris.FortheexampleinFig.10.12,assumingB1istheentryandB3theexit,1.B1andB3arecontrolequivalent:B1dominatesB3andB3postdominatesB1,2.B1dominatesB2butB2doesnotpostdominateB1,and10.4.GLOBALCODESCHEDULING729 c = b if (a==0) goto L LD R6,0(R1) BEQZ R6,L LD R7,0(R2) ST 0(R3),R7 nop nop e = d+d LD R8,0(R4) ADD R8,R8,R8 nop L: B1 B2 B3 LD R6,0(R1), LD R8,0(R4) ADD R8,R8,R8, BEQZ R6,L ST 0(R5),R8, ST 0(R3),R7 L: B1 B3’B3 ST 0(R5),R8 LD R7,0(R2) (c) Globally scheduled machine code (a) Source program (b) Locally scheduled machine code L: ST 0(R5),R8 Figure10.12:FlowgraphsbeforeandafterglobalschedulinginExample10.9730CHAPTER10.INSTRUCTION-LEVELPARALLELISM3.B2doesnotdominateB3butB3postdominatesB2.Itisalsopossibleforapairofblocksalongapathtoshareneitheradominancenorpostdominancerelation.10.4.2UpwardCodeMotionWenowexaminecarefullywhatitmeanstomoveanoperationupapath.Supposewewishtomoveanoperationfromblocksrcupacontrol-\rowpathtoblockdst.Weassumethatsuchamovedoesnotviolateanydatadependencesandthatitmakespathsthroughdstandsrcrunfaster.Ifdstdominatessrc,andsrcpostdominatesdst,thentheoperationmovedisexecutedonceandonlyonce,whenitshould.IfsrcdoesnotpostdominatedstThenthereexistsapaththatpassesthroughdstthatdoesnotreachsrc.Anextraoperationwouldhavebeenexecutedinthiscase.Thiscodemotionisillegalunlesstheoperationmovedhasnounwantedsidee\u000bects.Ifthemovedoperationexecutes\\forfree\"(i.e.,itusesonlyresourcesthatotherwisewouldbeidle),thenthismovehasnocost.Itisbene\fcialonlyifthecontrol\rowreachessrc.IfdstdoesnotdominatesrcThenthereexistsapaththatreachessrcwithout\frstgoingthroughdst.Weneedtoinsertcopiesofthemovedoperationalongsuchpaths.WeknowhowtoachieveexactlythatfromourdiscussionofpartialredundancyeliminationinSection9.5.Weplacecopiesoftheoperationalongbasicblocksthatformacutsetseparatingtheentryblockfromsrc.Ateachplacewheretheoperationisinserted,thefollowingconstraintsmustbesatis\fed:1.Theoperandsoftheoperationmustholdthesamevaluesasintheoriginal,2.Theresultdoesnotoverwriteavaluethatisstillneeded,and3.Ititselfisnotsubsequentlyoverwrittenbeforereachingsrc.Thesecopiesrendertheoriginalinstructioninsrcfullyredundant,anditthuscanbeeliminated.Werefertotheextracopiesoftheoperationascompensationcode.Asdis-cussedinSection9.5,basicblockscanbeinsertedalongcriticaledgestocreateplacesforholdingsuchcopies.Thecompensationcodecanpotentiallymakesomepathsrunslower.Thus,thiscodemotionimprovesprogramexecutiononlyiftheoptimizedpathsareexecutedmorefrequentlythanthenonopti-mizedones.10.4.GLOBALCODESCHEDULING73110.4.3DownwardCodeMotionSupposeweareinterestedinmovinganoperationfromblocksrcdownacontrol-\rowpathtoblockdst.Wecanreasonaboutsuchcodemotioninthesamewayasabove.IfsrcdoesnotdominatedstThenthereexistsapaththatreachesdstwithout\frstvisitingsrc.Again,anextraoperationwillbeexecutedinthiscase.Unfortunately,downwardcodemotionisoftenappliedtowrites,whichhavethesidee\u000bectsofoverwritingoldvalues.Wecangetaroundthisproblembyreplicatingthebasicblocksalongthepathsfromsrctodst,andplacingtheoperationonlyinthenewcopyofdst.Anotherapproach,ifavailable,istousepredicatedinstructions.Weguardtheoperationmovedwiththepredicatethatguardsthesrcblock.Notethatthepredicatedinstructionmustbescheduledonlyinablockdominatedbythecomputationofthepredicate,becausethepredicatewouldnotbeavailableotherwise.IfdstdoesnotpostdominatesrcAsinthediscussionabove,compensationcodeneedstobeinsertedsothattheoperationmovedisexecutedonallpathsnotvisitingdst.Thistransformationisagainanalogoustopartialredundancyelimination,exceptthatthecopiesareplacedbelowthesrcblockinacutsetthatseparatessrcfromtheexit.SummaryofUpwardandDownwardCodeMotionFromthisdiscussion,weseethatthereisarangeofpossibleglobalcodemo-tionswhichvaryintermsofbene\ft,cost,andimplementationcomplexity.Fig-ure10.13showsasummaryofthesevariouscodemotions;thelinescorrespondtothefollowingfourcases:732CHAPTER10.INSTRUCTION-LEVELPARALLELISM2.Extraoperationsmaybeexecutedifthesourcedoesnotpostdominate(dominate)thedestinationinupward(downward)codemotion.Thiscodemotionisbene\fcialiftheextraoperationscanbeexecutedforfree,andthepathpassingthroughthesourceblockisexecuted.3.Compensationcodeisneededifthedestinationdoesnotdominate(post-dominate)thesourceinupward(downward)codemotion.Thepathswiththecompensationcodemaybesloweddown,soitisimportantthattheoptimizedpathsaremorefrequentlyexecuted.4.Thelastcasecombinesthedisadvantagesofthesecondandthirdcase:extraoperationsmaybeexecutedandcompensationcodeisneeded.10.4.4UpdatingDataDependencesAsillustratedbyExample10.10below,codemotioncanchangethedata-dependencerelationsbetweenoperations.Thusdatadependencesmustbeupdatedaftereachcodemovement.Example10.10:Forthe\rowgraphshowninFig.10.14,eitherassignmenttoxcanbemoveduptothetopblock,sinceallthedependencesintheoriginalprogramarepreservedwiththistransformation.However,oncewehavemovedoneassignmentup,wecannotmovetheother.Morespeci\fcally,weseethatvariablexisnotliveonexitinthetopblockbeforethecodemotion,butitisliveafterthemotion.Ifavariableisliveataprogrampoint,thenwecannotmovespeculativede\fnitionstothevariableabovethatprogrampoint.2 x = 1x = 2Figure10.14:Exampleillustratingthechangeindatadependencesduetocodemotion.10.4.5GlobalSchedulingAlgorithmsWesawinthelastsectionthatcodemotioncanbene\ftsomepathswhilehurtingtheperformanceofothers.Thegoodnewsisthatinstructionsarenotallcreatedequal.Infact,itiswellestablishedthatover90%ofaprogram'sexecutiontimeisspentonlessthan10%ofthecode.Thus,weshouldaimto10.4.GLOBALCODESCHEDULING733makethefrequentlyexecutedpathsrunfasterwhilepossiblymakingthelessfrequentpathsrunslower.Thereareanumberoftechniquesacompilercanusetoestimateexecutionfrequencies.Itisreasonabletoassumethatinstructionsintheinnermostloopsareexecutedmoreoftenthancodeinouterloops,andthatbranchesthatgobackwardaremorelikelytobetakenthannottaken.Also,branchstatementsfoundtoguardprogramexitsorexception-handlingroutinesareunlikelytobetaken.Thebestfrequencyestimates,however,comefromdynamicpro\fling.Inthistechnique,programsareinstrumentedtorecordtheoutcomesofconditionalbranchesastheyrun.Theprogramsarethenrunonrepresentativeinputstodeterminehowtheyarelikelytobehaveingeneral.Theresultsobtainedfromthistechniquehavebeenfoundtobequiteaccurate.Suchinformationcanbefedbacktothecompilertouseinitsoptimizations.Region-BasedSchedulingWenowdescribeastraightforwardglobalschedulerthatsupportsthetwoeas-iestformsofcodemotion:1.Movingoperationsuptocontrol-equivalentbasicblocks,and2.Movingoperationsspeculativelyuponebranchtoadominatingpredeces-sor.RecallfromSection9.7.1thataregionisasubsetofacontrol-\rowgraphthatcanbereachedonlythroughoneentryblock.Wemayrepresentanyprocedureasahierarchyofregions.Theentireprocedureconstitutesthetop-levelregion,nestedinitaresubregionsrepresentingthenaturalloopsinthefunction.Weassumethatthecontrol-\rowgraphisreducible.Algorithm10.11:Region-basedscheduling.INPUT:Acontrol-\rowgraphandamachine-resourcedescription.OUTPUT:AscheduleSmappingeachinstructiontoabasicblockandatimeslot.METHOD:ExecutetheprograminFig.10.15.Someshorthandterminologyshouldbeapparent:ControlEquiv(B)isthesetofblocksthatarecontrol-equivalenttoblockB,andDominatedSuccappliedtoasetofblocksisthesetofblocksthataresuccessorsofatleastoneblockinthesetandaredominatedbyall.CodeschedulinginAlgorithm10.11proceedsfromtheinnermostregionstotheoutermost.Whenschedulingaregion,eachnestedsubregionistreatedasablackbox;instructionsarenotallowedtomoveinoroutofasubregion.Theycan,however,movearoundasubregion,providedtheirdataandcontroldependencesaresatis\fed.734CHAPTER10.INSTRUCTION-LEVELPARALLELISMfor(eachregionRintopologicalorder,sothatinnerregionsareprocessedbeforeouterregions)fcomputedatadependences;for(eachbasicblockBofRinprioritizedtopologicalorder)fCandBlocks=ControlEquiv(B)[DominatedSucc(ControlEquiv(B));CandInsts=readyinstructionsinCandBlocks;for(t=0;1;:::untilallinstructionsfromBarescheduled)ffor(eachinstructionninCandInstsinpriorityorder)if(nhasnoresourcecon\rictsattimet)fS(n)=hB;ti;updateresourcecommitments;updatedatadependences;gupdateCandInsts;gggFigure10.15:Aregion-basedglobalschedulingalgorithmAllcontrolanddependenceedges\rowingbacktotheheaderoftheregionareignored,sotheresultingcontrol-\rowanddata-dependencegraphsareacyclic.Thebasicblocksineachregionarevisitedintopologicalorder.Thisorderingguaranteesthatabasicblockisnotscheduleduntilalltheinstructionsitde-pendsonhavebeenscheduled.InstructionstobescheduledinabasicblockBaredrawnfromalltheblocksthatarecontrol-equivalenttoB(includingB),aswellastheirimmediatesuccessorsthataredominatedbyB.Alist-schedulingalgorithmisusedtocreatethescheduleforeachbasicblock.Thealgorithmkeepsalistofcandidateinstructions,CandInsts,whichcontainsalltheinstructionsinthecandidateblockswhosepredecessorsallhavebeenscheduled.Itcreatesthescheduleclock-by-clock.Foreachclock,itcheckseachinstructionfromtheCandInstsinpriorityorderandschedulesitinthatclockifresourcespermit.Algorithm10.11thenupdatesCandInstsandrepeatstheprocess,untilallinstructionsfromBarescheduled.ThepriorityorderofinstructionsinCandInstsusesapriorityfunctionsim-ilartothatdiscussedinSection10.3.Wemakeoneimportantmodi\fcation,however.WegiveinstructionsfromblocksthatarecontrolequivalenttoBhigherprioritythanthosefromthesuccessorblocks.Thereasonisthatin-structionsinthelattercategoryareonlyspeculativelyexecutedinblockB.210.4.GLOBALCODESCHEDULING735LoopUnrollingInregion-basedscheduling,theboundaryofaloopiterationisabarriertocodemotion.Operationsfromoneiterationcannotoverlapwiththosefromanother.Onesimplebuthighlye\u000bectivetechniquetomitigatethisproblemistounrolltheloopasmallnumberoftimesbeforecodescheduling.Afor-loopsuchasfor(i=0;i<N;i++){S(i);}canbewrittenasinFig.10.16(a).Similarly,arepeat-loopsuchasrepeatS;untilC;canbewrittenasinFig.10.16(b).Unrollingcreatesmoreinstructionsintheloopbody,permittingglobalschedulingalgorithmsto\fndmoreparallelism.for(i=0;i+4<N;i+=4){S(i);S(i+1);S(i+2);S(i+3);}for(;i<N;i++){S(i);}(a)Unrollingafor-loop.repeat{S;if(C)break;S;if(C)break;S;if(C)break;S;}untilC;(b)Unrollingarepeat-loop.Figure10.16:Unrolledloops736CHAPTER10.INSTRUCTION-LEVELPARALLELISMNeighborhoodCompactionAlgorithm10.11onlysupportsthe\frsttwoformsofcodemotiondescribedinSection10.4.1.Codemotionsthatrequiretheintroductionofcompensationcodecansometimesbeuseful.Onewaytosupportsuchcodemotionsistofollowtheregion-basedschedulingwithasimplepass.Inthispass,wecanexamineeachpairofbasicblocksthatareexecutedoneaftertheother,andcheckifanyoperationcanbemovedupordownbetweenthemtoimprovetheexecutiontimeofthoseblocks.Ifsuchapairisfound,wecheckiftheinstructiontobemovedneedstobeduplicatedalongotherpaths.Thecodemotionismadeifitresultsinanexpectednetgain.Thissimpleextensioncanbequitee\u000bectiveinimprovingtheperformanceofloops.Forinstance,itcanmoveanoperationatthebeginningofoneiterationtotheendoftheprecedingiteration,whilealsomovingtheoperationfromthe\frstiterationoutoftheloop.Thisoptimizationisparticularlyattractivefortightloops,whichareloopsthatexecuteonlyafewinstructionsperiteration.However,theimpactofthistechniqueislimitedbythefactthateachcode-motiondecisionismadelocallyandindependently.10.4.6AdvancedCodeMotionTechniquesIfourtargetmachineisstaticallyscheduledandhasplentyofinstruction-levelparallelism,wemayneedamoreaggressivealgorithm.Hereisahigh-leveldescriptionoffurtherextensions:1.Tofacilitatetheextensionsbelow,wecanaddnewbasicblocksalongcontrol-\rowedgesoriginatingfromblockswithmorethanonepredecessor.Thesebasicblockswillbeeliminatedattheendofcodeschedulingiftheyareempty.Ausefulheuristicistomoveinstructionsoutofabasicblockthatisnearlyempty,sothattheblockcanbeeliminatedcompletely.2.InAlgorithm10.11,thecodetobeexecutedineachbasicblockissched-uledonceandforallaseachblockisvisited.Thissimpleapproachsu\u000ecesbecausethealgorithmcanonlymoveoperationsuptodominatingblocks.Toallowmotionsthatrequiretheadditionofcompensationcode,wetakeaslightlydi\u000berentapproach.WhenwevisitblockB,weonlyscheduleinstructionsfromBandallitscontrol-equivalentblocks.We\frsttrytoplacetheseinstructionsinpredecessorblocks,whichhavealreadybeenvisitedandforwhichapartialschedulealreadyexists.Wetryto\fndadestinationblockthatwouldleadtoanimprovementonafrequentlyexecutedpathandthenplacecopiesoftheinstructiononotherpathstoguaranteecorrectness.Iftheinstructionscannotbemovedup,theyarescheduledinthecurrentbasicblockasbefore.3.Implementingdownwardcodemotionisharderinanalgorithmthatvisitsbasicblocksintopologicalorder,sincethetargetblockshaveyettobe10.4.GLOBALCODESCHEDULING737scheduled.However,therearerelativelyfeweropportunitiesforsuchcodemotionanyway.Wemovealloperationsthat(a)canbemoved,and(b)cannotbeexecutedforfreeintheirnativeblock.Thissimplestrategyworkswellifthetargetmachineisrichwithmanyunusedhardwareresources.10.4.7InteractionwithDynamicSchedulersAdynamicschedulerhastheadvantagethatitcancreatenewschedulesac-cordingtotherun-timeconditions,withouthavingtoencodeallthesepossibleschedulesaheadoftime.Ifatargetmachinehasadynamicscheduler,thestaticscheduler'sprimaryfunctionistoensurethatinstructionswithhighlatencyarefetchedearlysothatthedynamicschedulercanissuethemasearlyaspossible.Cachemissesareaclassofunpredictableeventsthatcanmakeabigdi\u000ber-encetotheperformanceofaprogram.Ifdata-prefetchinstructionsareavail-able,thestaticschedulercanhelpthedynamicschedulersigni\fcantlybyplacingtheseprefetchinstructionsearlyenoughthatthedatawillbeinthecachebythetimetheyareneeded.Ifprefetchinstructionsarenotavailable,itisusefulforacompilertoestimatewhichoperationsarelikelytomissandtrytoissuethemearly.Ifdynamicschedulingisnotavailableonthetargetmachine,thestaticschedulermustbeconservativeandseparateeverydata-dependentpairofop-erationsbytheminimumdelay.Ifdynamicschedulingisavailable,however,thecompileronlyneedstoplacethedata-dependentoperationsinthecorrectordertoensureprogramcorrectness.Forbestperformance,thecompilershouldas-signlongdelaystodependencesthatarelikelytooccurandshortonestothosethatarenotlikely.Branchmispredictionisanimportantcauseoflossinperformance.Becauseofthelongmispredictionpenalty,instructionsonrarelyexecutedpathscanstillhaveasigni\fcante\u000bectonthetotalexecutiontime.Higherpriorityshouldbegiventosuchinstructionstoreducethecostofmisprediction.10.4.8ExercisesforSection10.4Exercise10.4.1:Showhowtounrollthegenericwhile-loopwhile(C)S;!Exercise10.4.2:Considerthecodefragment:if(x==0)a=b;elsea=c;d=a;738CHAPTER10.INSTRUCTION-LEVELPARALLELISMAssumeamachinethatusesthedelaymodelofExample10.6(loadstaketwoclocks,allotherinstructionstakeoneclock).Alsoassumethatthemachinecanexecuteanytwoinstructionsatonce.Findashortestpossibleexecutionofthisfragment.Donotforgettoconsiderwhichregisterisbestusedforeachofthecopysteps.Also,remembertoexploittheinformationgivenbyregisterdescriptorsaswasdescribedinSection8.6,toavoidunnecessaryloadsandstores.10.5SoftwarePipeliningAsdiscussedintheintroductionofthischapter,numericalapplicationstendtohavemuchparallelism.Inparticular,theyoftenhaveloopswhoseiterationsarecompletelyindependentofoneanother.Theseloops,knownasdo-allloops,areparticularlyattractivefromaparallelizationperspectivebecausetheiriter-ationscanbeexecutedinparalleltoachieveaspeed-uplinearinthenumberofiterationsintheloop.Do-allloopswithmanyiterationshaveenoughpar-allelismtosaturatealltheresourcesonaprocessor.Itisuptotheschedulertotakefulladvantageoftheavailableparallelism.Thissectiondescribesanal-gorithm,knownassoftwarepipelining,thatschedulesanentireloopatatime,takingfulladvantageoftheparallelismacrossiterations.10.5.1IntroductionWeshallusethedo-allloopinExample10.12throughoutthissectiontoexplainsoftwarepipelining.We\frstshowthatschedulingacrossiterationsisofgreatimportance,becausethereisrelativelylittleparallelismamongoperationsinasingleiteration.Next,weshowthatloopunrollingimprovesperformancebyoverlappingthecomputationofunrollediterations.However,theboundaryoftheunrolledloopstillposesasabarriertocodemotion,andunrollingstillleavesalotofperformance\\onthetable.\"Thetechniqueofsoftwarepipelining,ontheotherhand,overlapsanumberofconsecutiveiterationscontinuallyuntilitrunsoutofiterations.Thistechniqueallowssoftwarepipeliningtoproducehighlye\u000ecientandcompactcode.Example10.12:Hereisatypicaldo-allloop:for(i=0;i<n;i++)D[i]=A[i]*B[i]+c;Iterationsintheaboveloopwritetodi\u000berentmemorylocations,whicharethemselvesdistinctfromanyofthelocationsread.Therefore,therearenomemorydependencesbetweentheiterations,andalliterationscanproceedinparallel.Weadoptthefollowingmodelasourtargetmachinethroughoutthissection.Inthismodel10.5.SOFTWAREPIPELINING739\u000fThemachinecanissueinasingleclock:oneload,onestore,onearithmeticoperation,andonebranchoperation.\u000fThemachinehasaloop-backoperationoftheformBLR,LwhichdecrementsregisterRand,unlesstheresultis0,branchestoloca-tionL.\u000fMemoryoperationshaveanauto-incrementaddressingmode,denotedby++aftertheregister.Theregisterisautomaticallyincrementedtopointtothenextconsecutiveaddressaftereachaccess.\u000fThearithmeticoperationsarefullypipelined;theycanbeinitiatedeveryclockbuttheirresultsarenotavailableuntil2clockslater.Allotherinstructionshaveasingle-clocklatency.Ifiterationsarescheduledoneatatime,thebestschedulewecangetonourmachinemodelisshowninFig.10.17.Someassumptionsaboutthelayoutofthedataalsoalsoindicatedinthat\fgure:registersR1,R2,andR3holdtheaddressesofthebeginningsofarraysA,B,andD,registerR4holdstheconstantc,andregisterR10holdsthevaluen\u00001,whichhasbeencomputedoutsidetheloop.Thecomputationismostlyserial,takingatotalof7clocks;onlytheloop-backinstructionisoverlappedwiththelastoperationintheiteration.2//R1,R2,R3=&A,&B,&D//R4=c//R10=n-1L:LDR5,0(R1++)LDR6,0(R2++)MULR7,R5,R6nopADDR8,R7,R4nopST0(R3++),R8BLR10,LFigure10.17:LocallyscheduledcodeforExample10.12Ingeneral,wegetbetterhardwareutilizationbyunrollingseveraliterationsofaloop.However,doingsoalsoincreasesthecodesize,whichinturncanhaveanegativeimpactonoverallperformance.Thus,wehavetocompromise,pickinganumberoftimestounrollaloopthatgetsmostoftheperformanceim-provement,yetdoesn'texpandthecodetoomuch.Thenextexampleillustratesthetradeo\u000b.740CHAPTER10.INSTRUCTION-LEVELPARALLELISMExample10.13:WhilehardlyanyparallelismcanbefoundineachiterationoftheloopinExample10.12,thereisplentyofparallelismacrosstheiterations.Loopunrollingplacesseveraliterationsoftheloopinonelargebasicblock,andasimplelist-schedulingalgorithmcanbeusedtoscheduletheoperationstoexecuteinparallel.IfweunrolltheloopinourexamplefourtimesandapplyAlgorithm10.7tothecode,wecangetthescheduleshowninFig.10.18.(Forsimplicity,weignorethedetailsofregisterallocationfornow).Theloopexecutesin13clocks,oroneiterationevery3.25clocks.Aloopunrolledktimestakesatleast2k+5clocks,achievingathroughputofoneiterationevery2+5=kclocks.Thus,themoreiterationsweunroll,thefastertheloopruns.Ask!1,afullyunrolledloopcanexecuteonaverageaniterationeverytwoclocks.However,themoreiterationsweunroll,thelargerthecodegets.Wecertainlycannota\u000bordtounrollalltheiterationsinaloop.Unrollingtheloop4timesproducescodewith13instructions,or163%oftheoptimum;unrollingtheloop8timesproducescodewith21instructions,or131%oftheoptimum.Conversely,ifwewishtooperateat,say,only110%oftheoptimum,weneedtounrolltheloop25times,whichwouldresultincodewith55instructions.210.5.2SoftwarePipeliningofLoopsSoftwarepipeliningprovidesaconvenientwayofgettingoptimalresourceusageandcompactcodeatthesametime.Letusillustratetheideawithourrunningexample.Example10.14:InFig.10.19isthecodefromExample10.12unrolled\fvetimes.(Againweleaveouttheconsiderationofregisterusage.)Showninrowiarealltheoperationsissuedatclocki;shownincolumnjarealltheoperationsfromiterationj.Notethateveryiterationhasthesameschedulerelativetoitsbeginning,andalsonotethateveryiterationisinitiatedtwoclocksaftertheprecedingone.Itiseasytoseethatthisschedulesatis\fesalltheresourceanddata-dependenceconstraints.Weobservethattheoperationsexecutedatclocks7and8arethesameasthoseexecutedatclocks9and10.Clocks7and8executeoperationsfromthe\frstfouriterationsintheoriginalprogram.Clocks9and10alsoexecuteoperationsfromfouriterations,thistimefromiterations2to5.Infact,wecankeepexecutingthissamepairofmulti-operationinstructionstogetthee\u000bectofretiringtheoldestiterationandaddinganewone,untilwerunoutofiterations.SuchdynamicbehaviorcanbeencodedsuccinctlywiththecodeshowninFig.10.20,ifweassumethattheloophasatleast4iterations.Eachrowinthe\fgurecorrespondstoonemachineinstruction.Lines7and8forma2-clockloop,whichisexecutedn\u00003times,wherenisthenumberofiterationsintheoriginalloop.210.5.SOFTWAREPIPELINING741L:LDLDLDMULLDMULLDADDLDADDLDSTMULLDSTMULADDADDSTSTBL(L)Figure10.18:UnrolledcodeforExample10.12Clockj=1j=2j=3j=4j=51LD2LD3MULLD4LD5MULLD6ADDLD7MULLD8STADDLD9MULLD10STADDLD11MUL12STADD1314STADD1516STFigure10.19:FiveunrollediterationsofthecodeinExample10.12742CHAPTER10.INSTRUCTION-LEVELPARALLELISM1)LD2)LD3)MULLD4)LD5)MULLD6)ADDLD7)L:MULLD8)STADDLDBL(L)9)MUL10)STADD11)12)STADD13)14)STFigure10.20:Software-pipelinedcodeforExample10.12Thetechniquedescribedaboveiscalledsoftwarepipelining,becauseitisthesoftwareanalogofatechniqueusedforschedulinghardwarepipelines.Wecanthinkofthescheduleexecutedbyeachiterationinthisexampleasan8-stagepipeline.Anewiterationcanbestartedonthepipelineevery2clocks.Atthebeginning,thereisonlyoneiterationinthepipeline.Asthe\frstiterationproceedstostagethree,theseconditerationstartstoexecuteinthe\frstpipelinestage.Byclock7,thepipelineisfully\flledwiththe\frstfouriterations.Inthesteadystate,fourconsecutiveiterationsareexecutingatthesametime.Anewiterationisstartedastheoldestiterationinthepipelineretires.Whenwerunoutofiterations,thepipelinedrains,andalltheiterationsinthepipelineruntocompletion.Thesequenceofinstructionsusedto\fllthepipeline,lines1through6inourexample,iscalledtheprolog;lines7and8arethesteadystate;andthesequenceofinstructionsusedtodrainthepipeline,lines9through14,iscalledtheepilog.Forthisexample,weknowthattheloopcannotberunataratefasterthan2clocksperiteration,sincethemachinecanonlyissueonereadeveryclock,andtherearetworeadsineachiteration.Thesoftware-pipelinedloopaboveexecutesin2n+6clocks,wherenisthenumberofiterationsintheoriginalloop.Asn!1,thethroughputoftheloopapproachestherateofoneiterationeverytwoclocks.Thus,softwarescheduling,unlikeunrolling,canpotentiallyencodetheoptimalschedulewithaverycompactcodesequence.Notethatthescheduleadoptedforeachindividualiterationisnottheshortestpossible.ComparisonwiththelocallyoptimizedscheduleshowninFig.10.17showsthatadelayisintroducedbeforetheADDoperation.Thedelayisplacedstrategicallysothattheschedulecanbeinitiatedeverytwoclockswithoutresourcecon\ricts.Hadwestuckwiththelocallycompactedschedule,10.5.SOFTWAREPIPELINING743theinitiationintervalwouldhavetobelengthenedto4clockstoavoidresourcecon\ricts,andthethroughputratewouldbehalved.Thisexampleillustratesanimportantprincipleinpipelinescheduling:theschedulemustbechosencarefullyinordertooptimizethethroughput.Alocallycompactedschedule,whileminimizingthetimetocompleteaniteration,mayresultinsuboptimalthroughputwhenpipelined.10.5.3RegisterAllocationandCodeGenerationLetusbeginbydiscussingregisterallocationforthesoftware-pipelinedloopinExample10.14.Example10.15:InExample10.14,theresultofthemultiplyoperationinthe\frstiterationisproducedatclock3andusedatclock6.Betweentheseclockcycles,anewresultisgeneratedbythemultiplyoperationintheseconditerationatclock5;thisvalueisusedatclock8.Theresultsfromthesetwoiterationsmustbeheldindi\u000berentregisterstopreventthemfrominterferingwitheachother.Sinceinterferenceoccursonlybetweenadjacentpairsofitera-tions,itcanbeavoidedwiththeuseoftworegisters,onefortheodditerationsandonefortheeveniterations.Sincethecodeforodditerationsisdi\u000berentfromthatfortheeveniterations,thesizeofthesteady-stateloopisdoubled.Thiscodecanbeusedtoexecuteanyloopthathasanoddnumberofiterationsgreaterthanorequalto5.if(N>=5)N2=3+2*floor((N-3)/2);elseN2=0;for(i=0;i<N2;i++)D[i]=A[i]*B[i]+c;for(i=N2;i<N;i++)D[i]=A[i]*B[i]+c;Figure10.21:Source-levelunrollingoftheloopfromExample10.12Tohandleloopsthathavefewerthan5iterationsandloopswithanevennumberofiterations,wegeneratethecodewhosesource-levelequivalentisshowninFig.10.21.The\frstloopispipelined,asseeninthemachine-levelequivalentofFig.10.22.ThesecondloopofFig.10.21neednotbeoptimized,sinceitcaniterateatmostfourtimes.210.5.4Do-AcrossLoopsSoftwarepipeliningcanalsobeappliedtoloopswhoseiterationssharedatadependences.Suchloopsareknownasdo-acrossloops.744CHAPTER10.INSTRUCTION-LEVELPARALLELISM1.LDR5,0(R1++)2.LDR6,0(R2++)3.LDR5,0(R1++)MULR7,R5,R64.LDR6,0(R2++)5.LDR5,0(R1++)MULR9,R5,R66.LDR6,0(R2++)ADDR8,R7,R47.L:LDR5,0(R1++)MULR7,R5,R68.LDR6,0(R2++)ADDR8,R9,R4ST0(R3++),R89.LDR5,0(R1++)MULR9,R5,R610.LDR6,0(R2++)ADDR8,R7,R4ST0(R3++),R8BLR10,L11.MULR7,R5,R612.ADDR8,R9,R4ST0(R3++),R813.14.ADDR8,R7,R4ST0(R3++),R815.16.ST0(R3++),R8Figure10.22:CodeaftersoftwarepipeliningandregisterallocationinExam-ple10.15Example10.16:Thecodefor(i=0;i<n;i++){sum=sum+A[i];B[i]=A[i]*b;}hasadatadependencebetweenconsecutiveiterations,becausethepreviousvalueofsumisaddedtoA[i]tocreateanewvalueofsum.ItispossibletoexecutethesummationinO(logn)timeifthemachinecandeliversu\u000ecientparallelism,butforthesakeofthisdiscussion,wesimplyassumethatallthesequentialdependencesmustbeobeyed,andthattheadditionsmustbeperformedintheoriginalsequentialorder.BecauseourassumedmachinemodeltakestwoclockstocompleteanADD,theloopcannotexecutefasterthanoneiterationeverytwoclocks.Givingthemachinemoreaddersormultiplierswillnotmakethislooprunanyfaster.Thethroughputofdo-acrossloopslikethisoneislimitedbythechainofdependencesacrossiterations.ThebestlocallycompactedscheduleforeachiterationisshowninFig.10.23(a),andthesoftware-pipelinedcodeisinFig.10.23(b).Thissoftware-pipelinedloopstartsaniterationeverytwoclocks,andthusoperatesattheoptimalrate.210.5.SOFTWAREPIPELINING745//R1=&A;R2=&B//R3=sum//R4=b//R10=n-1L:LDR5,0(R1++)MULR6,R5,R4ADDR3,R3,R4STR6,0(R2++)BLR10,L(a)Thebestlocallycompactedschedule.//R1=&A;R2=&B//R3=sum//R4=b//R10=n-2LDR5,0(R1++)MULR6,R5,R4L:ADDR3,R3,R4LDR5,0(R1++)STR6,0(R2++)MULR6,R5,R4BLR10,LADDR3,R3,R4STR6,0(R2++)(b)Thesoftware-pipelinedversion.Figure10.23:Software-pipeliningofado-acrossloop10.5.5GoalsandConstraintsofSoftwarePipeliningTheprimarygoalofsoftwarepipeliningistomaximizethethroughputofalong-runningloop.Asecondarygoalistokeepthesizeofthecodegeneratedreasonablysmall.Inotherwords,thesoftware-pipelinedloopshouldhaveasmallsteadystateofthepipeline.Wecanachieveasmallsteadystatebyrequiringthattherelativescheduleofeachiterationbethesame,andthattheiterationsbeinitiatedataconstantinterval.Sincethethroughputoftheloopissimplytheinverseoftheinitiationinterval,theobjectiveofsoftwarepipeliningistominimizethisinterval.Asoftware-pipelinescheduleforadata-dependencegraphG=(N;E)canbespeci\fedby1.AninitiationintervalTand2.ArelativescheduleSthatspeci\fes,foreachoperation,whenthatopera-tionisexecutedrelativetothestartoftheiterationtowhichitbelongs.746CHAPTER10.INSTRUCTION-LEVELPARALLELISMThus,anoperationnintheithiteration,countingfrom0,isexecutedatclocki\u0002T+S(n).Likealltheotherschedulingproblems,softwarepipelininghastwokindsofconstraints:resourcesanddatadependences.Wediscusseachkindindetailbelow.ModularResourceReservationLetamachine'sresourcesberepresentedbyR=[r1;r2;:::],whereriisthenumberofunitsoftheithkindofresourceavailable.Ifaniterationofalooprequiresniunitsofresourcei,thentheaverageinitiationintervalofapipelinedloopisatleastmaxi(ni=ri)clockcycles.Softwarepipeliningrequiresthattheinitiationintervalsbetweenanypairofiterationshaveaconstantvalue.Thus,theinitiationintervalmusthaveatleastmaxidni=rieclocks.Ifmaxi(ni=ri)islessthan1,itisusefultounrollthesourcecodeasmallnumberoftimes.Example10.17:Letusreturntooursoftware-pipelinedloopshowninFig.10.20.Recallthatthetargetmachinecanissueoneload,onearithmeticop-eration,onestore,andoneloop-backbranchperclock.Sincetheloophastwoloads,twoarithmeticoperations,andonestoreoperation,theminimuminitiationintervalbasedonresourceconstraintsis2clocks. Ld Alu St Ld Alu St Ld Alu St Ld Alu St Ld Alu St Steady state \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 \u0000\u0000 \u0000 \u0000 \u0000 \u0000 \u0001\u0001 \u0001 \u0001 \u0001 \u0001 Iteration 1 Iteration 2 Iteration 3 Iteration 4 TimeFigure10.24:ResourcerequirementsoffourconsecutiveiterationsfromthecodeinExample10.13Figure10.24showstheresourcerequirementsoffourconsecutiveiterationsacrosstime.Moreresourcesareusedasmoreiterationsgetinitiated,culmi-10.5.SOFTWAREPIPELINING747natinginmaximumresourcecommitmentinthesteadystate.LetRTbetheresource-reservationtablerepresentingthecommitmentofoneiteration,andletRTsrepresentthecommitmentofthesteadystate.RTscombinesthecommit-mentfromfourconsecutiveiterationsstartedTclocksapart.Thecommitmentofrow0inthetableRTscorrespondstothesumoftheresourcescommittedinRT[0],RT[2],RT[4],andRT[6].Similarly,thecommitmentofrow1intheta-blecorrespondstothesumoftheresourcescommittedinRT[1],RT[3],RT[5],andRT[7].Thatis,theresourcescommittedintheithrowinthesteadystatearegivenbyRTs[i]=Xftj(tmod2)=igRT[t]:Werefertotheresource-reservationtablerepresentingthesteadystateasthemodularresource-reservationtableofthepipelinedloop.Tocheckifthesoftware-pipelineschedulehasanyresourcecon\ricts,wecansimplycheckthecommitmentofthemodularresource-reservationtable.Surely,ifthecommitmentinthesteadystatecanbesatis\fed,socanthecommitmentsintheprologandepilog,theportionsofcodebeforeandafterthesteady-stateloop.2Ingeneral,givenaninitiationintervalTandaresource-reservationtableofaniterationRT,thepipelinedschedulehasnoresourcecon\rictsonamachinewithresourcevectorRifandonlyifRTS[i]\u0014Rforalli=0;1;:::;T\u00001.Data-DependenceConstraintsDatadependencesinsoftwarepipeliningaredi\u000berentfromthosewehaveen-counteredsofarbecausetheycanformcycles.Anoperationmaydependontheresultofthesameoperationfromapreviousiteration.Itisnolongerade-quatetolabeladependenceedgebyjustthedelay;wealsoneedtodistinguishbetweeninstancesofthesameoperationindi\u000berentiterations.Welabelade-pendenceedgen1!n2withlabelh\u000e;diifoperationn2initerationimustbedelayedbyatleastdclocksaftertheexecutionofoperationn1initerationi\u0000\u000e.LetS,afunctionfromthenodesofthedata-dependencegraphtointegers,bethesoftwarepipelineschedule,andletTbetheinitiationintervaltarget.Then(\u000e\u0002T)+S(n2)\u0000S(n1)\u0015d:Theiterationdi\u000berence,\u000e,mustbenonnegative.Moreover,givenacycleofdata-dependenceedges,atleastoneoftheedgeshasapositiveiterationdi\u000ber-ence.Example10.18:Considerthefollowingloop,andsupposewedonotknowthevaluesofpandq:for(i=0;i<n;i++)*(p++)=*(q++)+c;748CHAPTER10.INSTRUCTION-LEVELPARALLELISMWemustassumethatanypairof*(p++)and*(q++)accessesmayrefertothesamememorylocation.Thus,allthereadsandwritesmustexecuteintheoriginalsequentialorder.AssumingthatthetargetmachinehasthesamecharacteristicsasthatdescribedinExample10.12,thedata-dependenceedgesforthiscodeareasshowninFig.10.25.Note,however,thatweignoretheloop-controlinstructionsthatwouldhavetobepresent,eithercomputingandtestingi,ordoingthetestbasedonthevalueofR1orR2.2//R1,R2=q,p//R3=c LD R4,0(R1++) ADD R5,R4,R3 <1,1> <0,1> i1 i2 i3 ST O(R2++),R5 <0,2>Figure10.25:Data-dependencegraphforExample10.18Theiterationdi\u000berencebetweenrelatedoperationscanbegreaterthanone,asshowninthefollowingexample:for(i=2;i<n;i++)A[i]=B[i]+A[i-2];Herethevaluewritteniniterationiisusedtwoiterationslater.ThedependenceedgebetweenthestoreofA[i]andtheloadofA[i\u00002]thushasadi\u000berenceof2iterations.Thepresenceofdata-dependencecyclesinaloopimposesyetanotherlimitonitsexecutionthroughput.Forexample,thedata-dependencecycleinFig.10.25imposesadelayof4clockticksbetweenloadoperationsfromconsecutiveiterations.Thatis,loopscannotexecuteataratefasterthanoneiterationevery4clocks.TheinitiationintervalofapipelinedloopisnosmallerthanmaxcacycleinG˘Peincde10.5.SOFTWAREPIPELINING749availableonthemachine.Inaddition,iftheloopshavedata-dependencecycles,thentheinitiationintervalisfurtherconstrainedbythesumofthedelaysinthecycledividedbythesumoftheiterationdi\u000berences.Thelargestofthesequantitiesde\fnesalowerboundontheinitiationinterval.10.5.6ASoftware-PipeliningAlgorithmThegoalofsoftwarepipeliningisto\fndaschedulewiththesmallestpossibleinitiationinterval.TheproblemisNP-complete,andcanbeformulatedasaninteger-linear-programmingproblem.Wehaveshownthatifweknowwhattheminimuminitiationintervalis,theschedulingalgorithmcanavoidresourcecon-\rictsbyusingthemodularresource-reservationtableinplacingeachoperation.Butwedonotknowwhattheminimuminitiationintervalisuntilwecan\fndaschedule.Howdoweresolvethiscircularity?Weknowthattheinitiationintervalmustbegreaterthantheboundcom-putedfromaloop'sresourcerequirementanddependencecyclesasdiscussedabove.Ifwecan\fndaschedulemeetingthisbound,wehavefoundtheopti-malschedule.Ifwefailto\fndsuchaschedule,wecantryagainwithlargerinitiationintervalsuntilascheduleisfound.Notethatifheuristics,ratherthanexhaustivesearch,areused,thisprocessmaynot\fndtheoptimalschedule.Whetherwecan\fndaschedulenearthelowerbounddependsonpropertiesofthedata-dependencegraphandthearchitectureofthetargetmachine.Wecaneasily\fndtheoptimalscheduleifthedependencegraphisacyclicandifeverymachineinstructionneedsonlyoneunitofoneresource.Itisalsoeasyto\fndascheduleclosetothelowerboundiftherearemorehardwareresourcesthancanbeusedbygraphswithdependencecycles.Forsuchcases,itisadvisabletostartwiththelowerboundastheinitialinitiation-intervaltarget,thenkeepincreasingthetargetbyjustoneclockwitheachschedulingattempt.Anotherpossibilityisto\fndtheinitiationintervalusingabinarysearch.Wecanuseasanupperboundontheinitiationintervalthelengthofthescheduleforoneiterationproducedbylistscheduling.10.5.7SchedulingAcyclicData-DependenceGraphsForsimplicity,weassumefornowthatthelooptobesoftwarepipelinedcontainsonlyonebasicblock.ThisassumptionwillberelaxedinSection10.5.11.Algorithm10.19:Softwarepipelininganacyclicdependencegraph.INPUT:Amachine-resourcevectorR=[r1;r2;:::],whereriisthenumberofunitsavailableoftheithkindofresource,andadata-dependencegraphG=(N;E).EachoperationninNislabeledwithitsresource-reservationtableRTn;eachedgee=n1!n2inEislabeledwithh\u000ee;deiindicatingthatn2mustexecutenoearlierthandeclocksafternoden1fromthe\u000eethprecedingiteration.OUTPUT:Asoftware-pipelinedscheduleSandaninitiationintervalT.750CHAPTER10.INSTRUCTION-LEVELPARALLELISMMETHOD:ExecutetheprograminFig.10.26.2main()fT0=maxj˘Pn;iRTn(i;j)10.5.SOFTWAREPIPELINING751Tconsecutiveclocks,becauseofthemodularnatureofresource-con\rictdetec-tion,furtherattemptsareguaranteedtobefutile.Atthatpoint,thealgorithmconsiderstheattemptafailure,andanotherinitiationintervalistried.Theheuristicsofschedulingoperationsassoonaspossibletendstominimizethelengthofthescheduleforaniteration.Schedulinganinstructionasearlyaspossible,however,canlengthenthelifetimesofsomevariables.Forexample,loadsofdatatendtobescheduledearly,sometimeslongbeforetheyareused.Onesimpleheuristicistoschedulethedependencegraphbackwardsbecausethereareusuallymoreloadsthanstores.10.5.8SchedulingCyclicDependenceGraphsDependencecyclescomplicatesoftwarepipeliningsigni\fcantly.Whenschedul-ingoperationsinanacyclicgraphintopologicalorder,datadependenceswithscheduledoperationscanimposeonlyalowerboundontheplacementofeachoperation.Asaresult,itisalwayspossibletosatisfythedata-dependencecon-straintsbydelayingoperations.Theconceptof\\topologicalorder\"doesnotapplytocyclicgraphs.Infact,givenapairofoperationssharingacycle,plac-ingoneoperationwillimposebothalowerandupperboundontheplacementofthesecond.Letn1andn2betwooperationsinadependencecycle,Sbeasoftware-pipelineschedule,andTbetheinitiationintervalfortheschedule.Adepen-denceedgen1!n2withlabelh\u000e1;d1iimposesthefollowingconstraintonS(n1)andS(n2):(\u000e1\u0002T)+S(n2)\u0000S(n1)\u0015d1:Similarly,adependenceedgen1!n2withlabelh\u000e2;d2iimposesconstraint(\u000e2\u0002T)+S(n1)\u0000S(n2)\u0015d2:Thus,S(n1)+d1\u0000(\u000e1\u0002T)\u0014S(n2)\u0014S(n1)\u0000d2+(\u000e2\u0002T):Astronglyconnectedcomponent(SCC)inagraphisasetofnodeswhereeverynodeinthecomponentcanbereachedbyeveryothernodeinthecompo-nent.SchedulingonenodeinanSCCwillboundthetimeofeveryothernodeinthecomponentbothfromaboveandfrombelow.Transitively,ifthereexistsapathpleadingfromn1ton2,thenS(n2)\u0000S(n1)\u0015Xeinp\u0000de\u0000(\u000ee\u0002T)\u0001(10.1)Observethat752CHAPTER10.INSTRUCTION-LEVELPARALLELISM\u000fAroundanycycle,thesumofthe\u000e'smustbepositive.Ifitwere0ornegative,thenitwouldsaythatanoperationinthecycleeitherhadtoprecedeitselforbeexecutedatthesameclockforalliterations.\u000fThescheduleofoperationswithinaniterationisthesameforalliterations;thatrequirementisessentiallythemeaningofa\\softwarepipeline.\"Asaresult,thesumofthedelays(secondcomponentsofedgelabelsinadata-dependencegraph)aroundacycleisalowerboundontheinitiationintervalT.Fromthesetwopoints,ifpathpisacycle,thenforanyfeasibleinitiationintervalT,thevalueoftherightsideofEquation(10.1)isnegativeorzero.Asaresult,thestrongestconstraintsontheplacementofnodesisobtainedfromthesimplepaths|thosepathsthatcontainnocycles.Thus,foreachfeasibleT,computingthetransitivee\u000bectofdatadepen-dencesoneachpairofnodesisequivalentto\fndingthelengthofthelongestsimplepathfromthe\frstnodetothesecond.Moreover,sincecyclescannotincreasethelengthofapath,wecanuseasimpledynamic-programmingal-gorithmto\fndthelongestpathswithoutthe\\simple-path\"requirement,andbesurethattheresultinglengthswillalsobethelengthsofthelongestsimplepaths(seeExercise10.5.7). <0,2> a d b <0,1> c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<0,2> <0,1> <1,1>Figure10.27:DependencegraphandresourcerequirementinExample10.20Example10.20:Figure10.27showsadata-dependencegraphwithfournodesa;b;c;d.Attachedtoeachnodeisitsresource-reservationtable;attachedtoeachedgeisitsiterationdi\u000berenceanddelay.Assumeforthisexamplethatthetargetmachinehasoneunitofeachkindofresource.Sincetherearethreeusesofthe\frstresourceandtwoofthesecond,theinitiationintervalmustbenolessthan3clocks.TherearetwoSCC'sinthisgraph:the\frstisatrivialcomponentconsistingofthenodeaalone,andthesecondconsistsofnodesb;c;andd.Thelongestcycle,b;c;d;b,hasatotaldelayof3clocksconnectingnodesthatare1iterationapart.Thus,thelowerboundontheinitiationintervalprovidedbydata-dependencecycleconstraintsisalso3clocks.10.5.SOFTWAREPIPELINING753Placinganyofb,c,ordinascheduleconstrainsalltheothernodesinthecomponent.LetTbetheinitiationinterval.Figure10.28showsthetransitivedependences.Part(a)showsthedelayandtheiterationdi\u000berence\u000e,foreachedge.Thedelayisrepresenteddirectly,but\u000eisrepresentedby\\adding\"tothedelaythevalue\u0000\u000eT.Figure10.28(b)showsthelengthofthelongestsimplepathbetweentwonodes,whensuchapathexists;itsentriesarethesumsoftheexpressionsgivenbyFig.10.28(a),foreachedgealongthepath.Then,in(c)and(d),weseetheexpressionsof(b)withthetworelevantvaluesofT,thatis,3and4,substitutedforT.Thedi\u000berencebetweenthescheduleoftwonodesS(n2)\u0000S(n1)mustbenolessthanthevaluegiveninentry(n1;n2)ineachofthetables(c)or(d),dependingonthevalueofTchosen.Forinstance,considertheentryinFig.10.28forthelongest(simple)pathfromctob,whichis2\u0000T.Thelongestsimplepathfromctobisc!d!b.Thetotaldelayis2alongthispath,andthesumofthe\u000e'sis1,representingthefactthattheiterationnumbermustincreaseby1.SinceTisthetimebywhicheachiterationfollowstheprevious,theclockatwhichbmustbescheduledisatleast2\u0000Tclocksaftertheclockatwhichcisscheduled.SinceTisatleast3,wearereallysayingthatbmaybescheduledT\u00002clocksbeforec,orlaterthanthatclock,butnotearlier.Noticethatconsideringnonsimplepathsfromctobdoesnotproduceastrongerconstraint.Wecanaddtothepathc!d!banynumberofiterationsofthecycleinvolvingdandb.Ifweaddksuchcycles,wegetapathlengthof2\u0000T+k(3\u0000T),sincethetotaldelayalongthepathis3,andthesumofthe\u000e'sis1.SinceT\u00153,thislengthcanneverexceed2\u0000T;i.e.,thestrongestlowerboundontheclockofbrelativetotheclockofcis2\u0000T,theboundwegetbyconsideringthelongestsimplepath.Forexample,fromentries(b;c)and(c;b),weseethatS(c)\u0000S(b)\u00151S(b)\u0000S(c)\u00152\u0000T:Thatis,S(b)+1\u0014S(c)\u0014S(b)\u00002+T:IfT=3,S(b)+1\u0014S(c)\u0014S(b)+1:Putequivalently,cmustbescheduledoneclockafterb.IfT=4,however,S(b)+1\u0014S(c)\u0014S(b)+2:Thatis,cisscheduledoneortwoclocksafterb.Giventheall-pointslongestpathinformation,wecaneasilycomputetherangewhereitislegaltoplaceanodeduetodatadependences.WeseethatthereisnoslackinthecasewhenT=3,andtheslackincreasesasTincreases.2754CHAPTER10.INSTRUCTION-LEVELPARALLELISM a c d abc d b a c d abc d b a c d abc d b a c d abc d b 1− T 2− T 1− T 2− T 2 1 34 −1 −2 −3 22 2 22 2 1 1 1 1 1 1 1 −1 −2 −2 2 3434 (a) Original edges. (b) Longest simple paths. (d) Longest simple paths (T=4).(c) Longest simple paths (T=3).Figure10.28:TransitivedependencesinExample10.20Algorithm10.21:Softwarepipelining.INPUT:Amachine-resourcevectorR=[r1;r2;:::],whereriisthenumberofunitsavailableoftheithkindofresource,andadata-dependencegraphG=(N;E).EachoperationninNislabeledwithitsresource-reservationtableRTn;eachedgee=n1!n2inEislabeledwithh\u000ee;deiindicatingthatn2mustexecutenoearlierthandeclocksafternoden1fromthe\u000eethprecedingiteration.OUTPUT:Asoftware-pipelinedscheduleSandaninitiationintervalT.METHOD:ExecutetheprograminFig.10.29.2Algorithm10.21hasahigh-levelstructuresimilartothatofAlgorithm10.19,whichonlyhandlesacyclicgraphs.Theminimuminitiationintervalinthiscaseisboundednotjustbyresourcerequirements,butalsobythedata-dependencecyclesinthegraph.Thegraphisscheduledonestronglyconnectedcomponentatatime.Bytreatingeachstronglyconnectedcomponentasaunit,edgesbe-tweenstronglyconnectedcomponentsnecessarilyformanacyclicgraph.Whilethetop-levelloopinAlgorithm10.19schedulesnodesinthegraphintopologicalorder,thetop-levelloopinAlgorithm10.21schedulesstronglyconnectedcom-ponentsintopologicalorder.Asbefore,ifthealgorithmfailstoscheduleallthecomponents,thenalargerinitiationintervalistried.NotethatAlgorithm10.21behavesexactlylikeAlgorithm10.19ifgivenanacyclicdata-dependencegraph.Algorithm10.21computestwomoresetsofedges:E0isthesetofalledgeswhoseiterationdi\u000berenceis0,E\u0003istheall-pointslongest-pathedges.Thatis,10.5.SOFTWAREPIPELINING755main()fE0=fejeinE;\u000ee=0g;T0=max\u0012maxj˘Pn;iRTn(i;j)756CHAPTER10.INSTRUCTION-LEVELPARALLELISMforeachpairofnodes(p;n),thereisanedgeeinE\u0003whoseassociateddistancedeisthelengthofthelongestsimplepathfrompton,providedthatthereisatleastonepathfrompton.E\u0003iscomputedforeachvalueofT,theinitiation-intervaltarget.ItisalsopossibletoperformthiscomputationjustoncewithasymbolicvalueofTandthensubstituteforTineachiteration,aswedidinExample10.20.Algorithm10.21usesbacktracking.IfitfailstoscheduleaSCC,ittriestorescheduletheentireSCCaclocklater.TheseschedulingattemptscontinueforuptoTclocks.Backtrackingisimportantbecause,asshowninExample10.20,theplacementofthe\frstnodeinanSCCcanfullydictatethescheduleofallothernodes.Iftheschedulehappensnotto\ftwiththeschedulecreatedthusfar,theattemptfails.ToscheduleaSCC,thealgorithmdeterminestheearliesttimeeachnodeinthecomponentcanbescheduledsatisfyingthetransitivedatadependencesinE\u0003.Itthenpickstheonewiththeearlieststarttimeasthe\frstnodetoschedule.ThealgorithmtheninvokesSccScheduledtotrytoschedulethecomponentattheearlieststarttime.ThealgorithmmakesatmostTattemptswithsuccessivelygreaterstarttimes.Ifitfails,thenthealgorithmtriesanotherinitiationinterval.TheSccScheduledalgorithmresemblesAlgorithm10.19,buthasthreemajordi\u000berences.1.ThegoalofSccScheduledistoschedulethestronglyconnectedcomponentatthegiventimeslots.Ifthe\frstnodeofthestronglyconnectedcom-ponentcannotbescheduledats,SccScheduledreturnsfalse.ThemainfunctioncaninvokeSccScheduledagainwithalatertimeslotifthatisdesired.2.Thenodesinthestronglyconnectedcomponentarescheduledintopolog-icalorder,basedontheedgesinE0.Becausetheiterationdi\u000berencesonalltheedgesinE0are0,theseedgesdonotcrossanyiterationboundariesandcannotformcycles.(Edgesthatcrossiterationboundariesareknownasloopcarried).Onlyloop-carrieddependencesplaceupperboundsonwhereoperationscanbescheduled.So,thisschedulingorder,alongwiththestrategyofschedulingeachoperationasearlyaspossible,maximizestherangesinwhichsubsequentnodescanbescheduled.3.Forstronglyconnectedcomponents,dependencesimposebothalowerandupperboundontherangeinwhichanodecanbescheduled.SccSched-uledcomputestheserangesandusesthemtofurtherlimittheschedulingattempts.Example10.22:LetusapplyAlgorithm10.21tothecyclicdata-dependencegraphinExample10.20.Thealgorithm\frstcomputesthattheboundontheinitiationintervalforthisexampleis3clocks.Wenotethatitisnotpossibletomeetthislowerbound.WhentheinitiationintervalTis3,thetransitive10.5.SOFTWAREPIPELINING757dependencesinFig.10.28dictatethatS(d)\u0000S(b)=2.Schedulingnodesbanddtwoclocksapartwillproduceacon\rictinamodularresource-reservationtableoflength3.758CHAPTER10.INSTRUCTION-LEVELPARALLELISMclock5.Thatis,bothbanddneedthesecondresourceatclocksthathavearemainderof0modulo3.Notethatitisjustacoincidencethatthetwocon-\rictsdiscoveredsofarareatclockswitharemainderof0modulo3;thecon\rictmighthaveoccurredatclockswithremainder1or2inanotherexample.ThealgorithmrepeatsbydelayingthestartoftheSCCfb;c;dgbyonemoreclock.But,asdiscussedearlier,thisSCCcanneverbescheduledwithaninitiationintervalof3clocks,sotheattemptisboundtofail.Atthispoint,thealgorithmgivesupandtriesto\fndaschedulewithaninitiationintervalof4clocks.Thealgorithmeventually\fndstheoptimalscheduleonitssixthattempt.210.5.9ImprovementstothePipeliningAlgorithmsAlgorithm10.21isarathersimplealgorithm,althoughithasbeenfoundtoworkwellonactualmachinetargets.Theimportantelementsinthisalgorithmare1.Theuseofamodularresource-reservationtabletocheckforresourcecon\rictsinthesteadystate.2.Theneedtocomputethetransitivedependencerelationsto\fndthelegalrangeinwhichanodecanbescheduledinthepresenceofdependencecycles.3.Backtrackingisuseful,andnodesoncriticalcycles(cyclesthatplacethehighestlowerboundontheinitiationintervalT)mustberescheduledtogetherbecausethereisnoslackbetweenthem.TherearemanywaystoimproveAlgorithm10.21.Forinstance,theal-gorithmtakesawhiletorealizethata3-clockinitiationintervalisinfeasibleforthesimpleExample10.22.Wecanschedulethestronglyconnectedcom-ponentsindependently\frsttodetermineiftheinitiationintervalisfeasibleforeachcomponent.Wecanalsomodifytheorderinwhichthenodesarescheduled.TheorderusedinAlgorithm10.21hasafewdisadvantages.First,becausenontrivialSCC'sarehardertoschedule,itisdesirabletoschedulethem\frst.Second,someoftheregistersmayhaveunnecessarilylonglifetimes.Itisdesirabletopullthede\fnitionsclosertotheuses.Onepossibilityistostartwithschedulingstronglyconnectedcomponentswithcriticalcycles\frst,thenextendthescheduleonbothends.10.5.10ModularVariableExpansionAscalarvariableissaidtobeprivatizableinaloopifitsliverangefallswithinaniterationoftheloop.Inotherwords,aprivatizablevariablemustnotbeliveuponeitherentryorexitofanyiteration.Thesevariablesaresonamedbecause10.5.SOFTWAREPIPELINING759760CHAPTER10.INSTRUCTION-LEVELPARALLELISMOUTPUT:Twoloops,onesoftwarepipelinedandoneunpipelined.METHOD:1.Removetheloop-carriedantidependencesandoutputdependencesasso-ciatedwithprivatizablevariablesfromthedata-dependencegraph.2.Software-pipelinetheresultingdependencegraphusingAlgorithm10.21.LetTbetheinitiationintervalforwhichascheduleisfound,andLbethelengthofthescheduleforoneiteration.3.Fromtheresultingschedule,computeqv,theminimumnumberofregis-tersneededbyeachprivatizablevariablev.LetQ=maxvqv.4.Generatetwoloops:asoftware-pipelinedloopandanunpipelinedloop.Thesoftware-pipelinedloophas˘L10.5.SOFTWAREPIPELINING7612Example10.24:Forthesoftware-pipelinedloopinFig.10.22,L=8,T=2,andQ=2.Thesoftware-pipelinedloophas7copiesoftheiterations,withtheprolog,steadystate,andepiloghaving6,4,and6instructions,respectively.Letnbethenumberofiterationsinthesourceloop.Thesoftware-pipelinedloopisexecutedifn\u00155,inwhichcasetheloop-backbranchistaken\u0016n\u00003762CHAPTER10.INSTRUCTION-LEVELPARALLELISMdeeplynestedstructures.Aseachconstructisscheduled,theentireconstructisreducedtoasinglenoderepresentingalltheschedulingconstraintsofitscom-ponentswithrespecttotheotherpartsoftheprogram.Thisnodecanthenbescheduledasifitwereasimplenodewithinthesurroundingcontrolconstruct.Theschedulingprocessiscompletewhentheentireprogramisreducedtoasinglenode.Inthecaseofaconditionalstatementwith\\then\"and\\else\"branches,wescheduleeachofthebranchesindependently.Then:1.Theconstraintsoftheentireconditionalstatementareconservativelytakentobetheunionoftheconstraintsfrombothbranches.2.Itsresourceusageisthemaximumoftheresourcesusedineachbranch.3.Itsprecedenceconstraintsaretheunionofthoseineachbranch,obtainedbypretendingthatbothbranchesareexecuted.Thisnodecanthenbescheduledlikeanyothernode.Twosetsofcode,cor-respondingtothetwobranches,aregenerated.Anycodescheduledinparallelwiththeconditionalstatementisduplicatedinbothbranches.Ifmultiplecon-ditionalstatementsareoverlapped,separatecodemustbegeneratedforeachcombinationofbranchesexecutedinparallel.10.5.12HardwareSupportforSoftwarePipeliningSpecializedhardwaresupporthasbeenproposedforminimizingthesizeofsoftware-pipelinedcode.Therotatingregister\fleintheItaniumarchitectureisonesuchexample.Arotatingregister\flehasabaseregister,whichisaddedtotheregisternumberspeci\fedinthecodetoderivetheactualregisteraccessed.Wecangetdi\u000berentiterationsinalooptousedi\u000berentregisterssimplybychangingthecontentsofthebaseregisterattheboundaryofeachiteration.TheItaniumarchitecturealsohasextensivepredicatedinstructionsupport.Notonlycanpredicationbeusedtoconvertcontroldependencetodatadependencebutitalsocanbeusedtoavoidgeneratingtheprologsandepilogs.Thebodyofasoftware-pipelinedloopcontainsasupersetoftheinstructionsissuedintheprologandepilog.Wecansimplygeneratethecodeforthesteadystateandusepredicationappropriatelytosuppresstheextraoperationstogetthee\u000bectsofhavingaprologandanepilog.WhileItanium'shardwaresupportimprovesthedensityofsoftware-pipe-linedcode,wemustalsorealizethatthesupportisnotcheap.Sincesoftwarepipeliningisatechniqueintendedfortightinnermostloops,pipelinedloopstendtobesmallanyway.Specializedsupportforsoftwarepipeliningiswarrantedprincipallyformachinesthatareintendedtoexecutemanysoftware-pipelinedloopsandinsituationswhereitisveryimportanttominimizecodesize.10.5.SOFTWAREPIPELINING7631)L:LDR1,a(R9)2)STb(R9),R13)LDR2,c(R9)4)ADDR3,R1,R25)STc(R9),R36)SUBR4,R1,R27)STb(R9),R48)BLR9,LFigure10.31:MachinecodeforExercise10.5.210.5.13ExercisesforSection10.5Exercise10.5.1:InExample10.20weshowedhowtoestablishtheboundsontherelativeclocksatwhichbandcarescheduled.Computetheboundsforeachof\fveotherpairsofnodes(i)forgeneralT(ii)forT=3(iii)forT=4.Exercise10.5.2:InFig.10.31isthebodyofaloop.Addressessuchasa(R9)areintendedtobememorylocations,whereaisaconstant,andR9istheregisterthatcountsiterationsthroughtheloop.Youmayassumethateachiterationoftheloopaccessesdi\u000berentlocations,becauseR9hasadi\u000berentvalue.UsingthemachinemodelofExample10.12,scheduletheloopofFig.10.31inthefollowingways:a)Keepingeachiterationastightaspossible(i.e.,onlyintroduceonenopaf-tereacharithmeticoperation),unrollthelooptwice.Scheduletheseconditerationtocommenceattheearliestpossiblemomentwithoutviolat-ingtheconstraintthatthemachinecanonlydooneload,onestore,onearithmeticoperation,andonebranchatanyclock.b)Repeatpart(a),butunrolltheloopthreetimes.Again,starteachitera-tionassoonasyoucan,subjecttothemachineconstraints.!c)Constructfullypipelinedcodesubjecttothemachineconstraints.Inthispart,youcanintroduceextranop'sifneeded,butyoumuststartanewiterationeverytwoclockticks.Exercise10.5.3:Acertainlooprequires5loads,7stores,and8arithmeticoperations.Whatistheminimuminitiationintervalforasoftwarepipeliningofthislooponamachinethatexecuteseachoperationinoneclocktick,andhasresourcesenoughtodo,inoneclocktick:a)3loads,4stores,and5arithmeticoperations.b)3loads,3stores,and3arithmeticoperations.764CHAPTER10.INSTRUCTION-LEVELPARALLELISM!Exercise10.5.4:UsingthemachinemodelofExample10.12,\fndthemin-imuminitiationintervalandauniformschedulefortheiterations,forthefol-lowingloop:for(i=1;i<n;i++){A[i]=B[i-1]+1;B[i]=A[i-1]+2;}Rememberthatthecountingofiterationsishandledbyauto-incrementofreg-isters,andnooperationsareneededsolelyforthecountingassociatedwiththefor-loop.!Exercise10.5.5:ProvethatAlgorithm10.19,inthespecialcasewhereeveryoperationrequiresonlyoneunitofoneresource,canalways\fndasoftware-pipelineschedulemeetingthelowerbound.!Exercise10.5.6:Supposewehaveacyclicdata-dependencegraphwithnodesa,b,c,andd.Thereareedgesfromatobandfromctodwithlabelh0;1iandthereareedgesfrombtocandfromdtoawithlabelh1;1i.Therearenootheredges.a)Drawthecyclicdependencegraph.b)Computethetableoflongestsimplepathsamongthenodes.c)ShowthelengthsofthelongestsimplepathsiftheinitiationintervalTis2.d)Repeat(c)ifT=3.e)ForT=3,whataretheconstraintsontherelativetimesthateachoftheinstructionsrepresentedbya,b,c,anddmaybescheduled?!Exercise10.5.7:GiveanO(n3)algorithmto\fndthelengthofthelongestsimplepathinann-nodegraph,ontheassumptionthatnocyclehasapositivelength.Hint:AdaptFloyd'salgorithmforshortestpaths(see,e.g.,A.V.AhoandJ.D.Ullman,FoundationsofComputerScience,ComputerSciencePress,NewYork,1992).!!Exercise10.5.8:Supposewehaveamachinewiththreeinstructiontypes,whichwe'llcallA,B,andC.Allinstructionsrequireoneclocktick,andthemachinecanexecuteoneinstructionofeachtypeateachclock.Supposealoopconsistsofsixinstructions,twoofeachtype.Thenitispossibletoexecutetheloopinasoftwarepipelinewithaninitiationintervaloftwo.However,somesequencesofthesixinstructionsrequireinsertionofonedelay,andsomerequireinsertionoftwodelays.Ofthe90possiblesequencesoftwoA's,twoB'sandtwoC's,howmanyrequirenodelay?Howmanyrequireonedelay?10.6.SUMMARYOFCHAPTER10765Hint:ThereissymmetryamongthethreeinstructiontypessotwosequencesthatcanbetransformedintooneanotherbypermutingthenamesA,B,andCmustrequirethesamenumberofdelays.Forexample,ABBCACmustbethesameasBCCABA.10.6SummaryofChapter10 ✦ArchitecturalIssues:Optimizedcodeschedulingtakesadvantageoffea-turesofmoderncomputerarchitectures.Suchmachinesoftenallowpipe-linedexecution,whereseveralinstructionsareindi\u000berentstagesofexe-cutionatthesametime.Somemachinesalsoallowseveralinstructionstobeginexecutionatthesametime. ✦DataDependences:Whenschedulinginstructions,wemustbeawareofthee\u000bectinstructionshaveoneachmemorylocationandregister.Truedatadependencesoccurwhenoneinstructionmustreadalocationafteranotherhaswrittenit.Antidependencesoccurwhenthereisawriteafteraread,andoutputdependencesoccurwhentherearetwowritestothesamelocation. ✦EliminatingDependences:Byusingadditionallocationstostoredata,antidependencesandoutputdependencescanbeeliminated.Onlytruedependencescannotbeeliminatedandmustsurelyberespectedwhenthecodeisscheduled. ✦Data-DependenceGraphsforBasicBlocks:Thesegraphsrepresentthetimingconstraintsamongthestatementsofabasicblock.Nodescorre-spondtothestatements.Anedgefromntomlabeleddsaysthattheinstructionmmuststartatleastdclockcyclesafterinstructionnstarts. ✦PrioritizedTopologicalOrders:Thedata-dependencegraphforabasicblockisalwaysacyclic,andthereusuallyaremanytopologicalordersconsistentwiththegraph.Oneofseveralheuristicscanbeusedtoselectapreferredtopologicalorderforagivengraph,e.g.,choosenodeswiththelongestcriticalpath\frst. ✦ListScheduling:Givenaprioritizedtopologicalorderforadata-depend-encegraph,wemayconsiderthenodesinthatorder.Scheduleeachnodeattheearliestclockcyclethatisconsistentwiththetimingconstraintsim-pliedbythegraphedges,theschedulesofallpreviouslyschedulednodes,andtheresourceconstraintsofthemachine. ✦InterblockCodeMotion:Undersomecircumstancesitispossibletomovestatementsfromtheblockinwhichtheyappeartoapredecessororsuc-cessorblock.Theadvantageisthattheremaybeopportunitiestoexecuteinstructionsinparallelatthenewlocationthatdonotexistattheorig-inallocation.Ifthereisnotadominancerelationbetweentheoldand766CHAPTER10.INSTRUCTION-LEVELPARALLELISMnewlocations,itmaybenecessarytoinsertcompensationcodealongcertainpaths,inordertomakesurethatexactlythesamesequenceofinstructionsisexecuted,regardlessofthe\rowofcontrol. ✦Do-AllLoops:Ado-allloophasnodependencesacrossiterations,soanyiterationsmaybeexecutedinparallel. ✦SoftwarePipeliningofDo-AllLoops:Softwarepipeliningisatechniqueforexploitingtheabilityofamachinetoexecuteseveralinstructionsatonce.Wescheduleiterationsofthelooptobeginatsmallintervals,per-hapsplacingno-opinstructionsintheiterationstoavoidcon\rictsbetweeniterationsforthemachine'sresources.Theresultisthattheloopcanbeexecutedquickly,withapreamble,acoda,and(usually)atinyinnerloop. ✦Do-AcrossLoops:Mostloopshavedatadependencesfromeachiterationtolateriterations.Thesearecalleddo-acrossloops. ✦Data-DependenceGraphsforDo-AcrossLoops:Torepresentthedepen-dencesamonginstructionsofado-acrosslooprequiresthattheedgesbelabeledbyapairofvalues:therequireddelay(asforgraphsrepresentingbasicblocks)andthenumberofiterationsthatelapsebetweenthetwoinstructionsthathaveadependence. ✦ListSchedulingofLoops:Toschedulealoop,wemustchoosetheonescheduleforalltheiterations,andalsochoosetheinitiationintervalatwhichsuccessiveiterationscommence.Thealgorithminvolvesderivingtheconstraintsontherelativeschedulesofthevariousinstructionsintheloopby\fndingthelengthofthelongestacyclicpathsbetweenthetwonodes.Theselengthshavetheinitiationintervalasaparameter,andthusputalowerboundontheinitiationinterval.10.7ReferencesforChapter10Foramorein-depthdiscussiononprocessorarchitectureanddesign,werecom-mendHennessyandPatterson[5].Theconceptofdatadependencewas\frstdiscussedinKuck,Muraoka,andChen[6]andLamport[8]inthecontextofcompilingcodeformultiprocessorsandvectormachines.Instructionschedulingwas\frstusedinschedulinghorizontalmicrocode([2,3,11,and12]).Fisher'sworkonmicrocodecompactionledhimtopro-posetheconceptofaVLIWmachine,wherecompilersdirectlycancontroltheparallelexecutionofoperations[3].GrossandHennessy[4]usedinstructionschedulingtohandlethedelayedbranchesinthe\frstMIPSRISCinstructionset.Thischapter'salgorithmisbasedonBernsteinandRodeh's[1]moregen-eraltreatmentofschedulingofoperationsformachineswithinstruction-levelparallelism.10.7.REFERENCESFORCHAPTER10767Thebasicideabehindsoftwarepipeliningwas\frstdevelopedbyPatelandDavidson[9]forschedulinghardwarepipelines.Softwarepipeliningwas\frstusedbyRauandGlaeser[10]tocompileforamachinewithspecializedhardwaredesignedtosupportsoftwarepipelining.ThealgorithmdescribedhereisbasedonLam[7],whichassumesnospecializedhardwaresupport.1.Bernstein,D.andM.Rodeh,\\Globalinstructionschedulingforsuper-scalarmachines,\"Proc.ACMSIGPLAN1991ConferenceonProgram-mingLanguageDesignandImplementation,pp.241{255.2.Dasgupta,S.,\\Theorganizationofmicroprogramstores,\"ComputingSurveys11:1(1979),pp.39{65.3.Fisher,J.A.,\\Tracescheduling:atechniqueforglobalmicrocodecom-paction,\"IEEETrans.onComputersC-30:7(1981),pp.478{490.4.Gross,T.R.andHennessy,J.L.,\\Optimizingdelayedbranches,\"Proc.15thAnnualWorkshoponMicroprogramming(1982),pp.114{120.5.Hennessy,J.L.andD.A.Patterson,ComputerArchitecture:AQuanti-tativeApproach,ThirdEdition,MorganKaufman,SanFrancisco,2003.6.Kuck,D.,Y.Muraoka,andS.Chen,\\OnthenumberofoperationssimultaneouslyexecutableinFortran-likeprogramsandtheirresultingspeedup,\"IEEETransactionsonComputersC-21:12(1972),pp.1293{1310.7.Lam,M.S.,\\Softwarepipelining:ane\u000bectiveschedulingtechniqueforVLIWmachines,\"Proc.ACMSIGPLAN1988ConferenceonProgram-mingLanguageDesignandImplementation,pp.318{328.8.Lamport,L.,\\TheparallelexecutionofDOloops,\"Comm.ACM17:2(1974),pp.83{93.9.Patel,J.H.andE.S.Davidson,\\Improvingthethroughputofapipelinebyinsertionofdelays,\"Proc.ThirdAnnualSymposiumonComputerAr-chitecture(1976),pp.159{164.10.Rau,B.R.andC.D.Glaeser,\"Someschedulingtechniquesandaneasilyschedulablehorizontalarchitectureforhighperformancescienti\fccomputing,\"Proc.14thAnnualWorkshoponMicroprogramming(1981),pp.183{198.11.Tokoro,M.,E.Tamura,andT.Takizuka,\\Optimizationofmicropro-grams,\"IEEETrans.onComputersC-30:7(1981),pp.491{504.12.Wood,G.,\\Globaloptimizationofmicroprogramsthroughmodularcon-trolconstructs,\"Proc.12thAnnualWorkshopinMicroprogramming(1979),pp.1{6. This page intentionally left blank Chapter11OptimizingforParallelismandLocalityThischaptershowshowacompilercanenhanceparallelismandlocalityincom-putationallyintensiveprogramsinvolvingarraystospeeduptargetprogramsrunningonmultiprocessorsystems.Manyscienti\fc,engineering,andcommer-cialapplicationshaveaninsatiableneedforcomputationalcycles.Examplesincludeweatherprediction,protein-foldingfordesigningdrugs,\ruid-dynamicsfordesigningaeropropulsionsystems,andquantumchromodynamicsforstudy-ingthestronginteractionsinhigh-energyphysics.Onewaytospeedupacomputationistouseparallelism.Unfortunately,itisnoteasytodevelopsoftwarethatcantakeadvantageofparallelmachines.Dividingthecomputationintounitsthatcanexecuteondi\u000berentprocessorsinparallelisalreadyhardenough;yetthatbyitselfdoesnotguaranteeaspeedup.Wemustalsominimizeinterprocessorcommunication,becausecommunicationoverheadcaneasilymaketheparallelcoderunevenslowerthanthesequentialexecution!Minimizingcommunicationcanbethoughtofasaspecialcaseofimprovingaprogram'sdatalocality.Ingeneral,wesaythataprogramhasgooddatalocalityifaprocessoroftenaccessesthesamedataithasusedrecently.Surelyifaprocessoronaparallelmachinehasgoodlocality,itdoesnotneedtocom-municatewithotherprocessorsfrequently.Thus,parallelismanddatalocalityneedtobeconsideredhand-in-hand.Datalocality,byitself,isalsoimportantfortheperformanceofindividualprocessors.Modernprocessorshaveoneormorelevelofcachesinthememoryhierarchy;amemoryaccesscantaketensofmachinecycleswhereasacachehitwouldonlytakeafewcycles.Ifaprogramdoesnothavegooddatalocalityandmissesinthecacheoften,itsperformancewillsu\u000ber.Anotherreasonwhyparallelismandlocalityaretreatedtogetherinthissamechapteristhattheysharethesametheory.Ifweknowhowtooptimizefordatalocality,weknowwheretheparallelismis.Youwillseeinthischapterthatthe769770CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYprogrammodelweusedfordata-\rowanalysisinChapter9isinadequateforparallelizationandlocalityoptimization.Thereasonisthatworkondata-\rowanalysisassumeswedon'tdistinguishamongthewaysagivenstatementisreached,andinfacttheseChapter9techniquestakeadvantageofthefactthatwedon'tdistinguishamongdi\u000berentexecutionsofthesamestatement,e.g.,inaloop.Toparallelizeacode,weneedtoreasonaboutthedependencesamongdi\u000berentdynamicexecutionsofthesamestatementtodetermineiftheycanbeexecutedondi\u000berentprocessorssimultaneously.Thischapterfocusesontechniquesforoptimizingtheclassofnumericalapplicationsthatusearraysasdatastructuresandaccessthemwithsimpleregularpatterns.Morespeci\fcally,westudyprogramsthathavea\u000enearrayaccesseswithrespecttosurroundingloopindexes.Forexample,ifiandjaretheindexvariablesofsurroundingloops,thenZ[i][j]andZ[i][i+j]area\u000eneaccesses.Afunctionofoneormorevariables,x1;x2;:::;xnisa\u000eneifitcanbeexpressedasasumofaconstant,plusconstantmultiplesofthevariables,i.e.,c0+c1x1+c2x2+\u0001\u0001\u0001+cnxn,wherec0;c1;:::;cnareconstants.A\u000enefunctionsareusuallyknownaslinearfunctions,althoughstrictlyspeaking,linearfunctionsdonothavethec0term.Hereisasimpleexampleofaloopinthisdomain:for(i=0;i<10;i++){Z[i]=0;}Becauseiterationsoftheloopwritetodi\u000berentlocations,di\u000berentprocessorscanexecutedi\u000berentiterationsconcurrently.Ontheotherhand,ifthereisanotherstatementZ[j]=1beingexecuted,weneedtoworryaboutwhethericouldeverbethesameasj,andifso,inwhichorderdoweexecutethoseinstancesofthetwostatementsthatshareacommonvalueofthearrayindex.Knowingwhichiterationscanrefertothesamememorylocationisimpor-tant.Thisknowledgeletsusspecifythedatadependencesthatmustbehonoredwhenschedulingcodeforbothuniprocessorsandmultiprocessors.Ourobjectiveisto\fndaschedulethathonorsallthedatadependencessuchthatoperationsthataccessthesamelocationandcachelinesareperformedclosetogetherifpossible,andonthesameprocessorinthecaseofmultiprocessors.Thetheorywepresentinthischapterisgroundedinlinearalgebraandintegerprogrammingtechniques.Wemodeliterationsinann-deeploopnestasann-dimensionalpolyhedron,whoseboundariesarespeci\fedbytheboundsoftheloopsinthecode.A\u000enefunctionsmapeachiterationtothearraylocationsitaccesses.Wecanuseintegerlinearprogrammingtodetermineifthereexisttwoiterationsthatcanrefertothesamelocation.Thesetofcodetransformationswediscussherefallintotwocategories:a\u000enepartitioningandblocking.A\u000enepartitioningsplitsupthepolyhedraofiterationsintocomponents,tobeexecutedeitherondi\u000berentmachinesorone-by-onesequentially.Ontheotherhand,blockingcreatesahierarchyofiterations.Supposewearegivenaloopthatsweepsthroughanarrayrow-by-11.1.BASICCONCEPTS771row.Wemayinsteadsubdividethearrayintoblocksandvisitallelementsinablockbeforemovingtothenext.Theresultingcodewillconsistofouterloopstraversingtheblocks,andtheninnerloopstosweeptheelementswithineachblock.Linearalgebratechniquesareusedtodetermineboththebesta\u000enepartitionsandthebestblockingschemes.Inthefollowing,we\frststartwithanoverviewoftheconceptsinparallelcomputationandlocalityoptimizationinSection11.1.Then,Section11.2isanextendedconcreteexample|matrixmultiplication|thatshowshowlooptransformationsthatreorderthecomputationinsidealoopcanimprovebothlocalityandthee\u000bectivenessofparallelization.Sections11.3toSections11.6presentthepreliminaryinformationnecessaryforlooptransformations.Section11.3showshowwemodeltheindividualiterationsinaloopnest;Section11.4showshowwemodelarrayindexfunctionsthatmapeachloopiterationtothearraylocationsaccessedbytheiteration;Section11.5showshowtodeterminewhichiterationsinalooprefertothesamearraylocationorthesamecachelineusingstandardlinearalgebraalgorithms;andSection11.6showshowto\fndallthedatadependencesamongarrayreferencesinaprogram.Therestofthechapterappliesthesepreliminariesincomingupwiththeoptimizations.Section11.7\frstlooksatthesimplerproblemof\fndingpar-allelismthatrequiresnosynchronization.To\fndthebesta\u000enepartitioning,wesimply\fndthesolutiontotheconstraintthatoperationsthatshareadatadependencemustbeassignedtothesameprocessor.Well,nottoomanyprogramscanbeparallelizedwithoutrequiringanysynchronization.Thus,inSections11.8through11.9.9,weconsiderthegeneralcaseof\fndingparallelismthatrequiressynchronization.Weintroducetheconceptofpipelining,showhowto\fndthea\u000enepartitioningthatmaximizesthedegreeofpipeliningallowedbyaprogram.WeshowhowtooptimizeforlocalityinSection11.10.Finally,wediscusshowa\u000enetransformsareusefulforoptimizingforotherformsofparallelism.11.1BasicConceptsThissectionintroducesthebasicconceptsrelatedtoparallelizationandlocal-ityoptimization.Ifoperationscanbeexecutedinparallel,theyalsocanbereorderedforothergoalssuchaslocality.Conversely,ifdatadependencesinaprogramdictatethatinstructionsinaprogrammustexecuteserially,thereisobviouslynoparallelism,noristhereanyopportunitytoreorderinstruc-tionstoimprovelocality.Thusparallelizationanalysisalso\fndstheavailableopportunitiesforcodemotiontoimprovedatalocality.Tominimizecommunicationinparallelcode,wegrouptogetherallrelatedoperationsandassignthemtothesameprocessor.Theresultingcodemustthereforehavedatalocality.Onecrudeapproachtogettinggooddatalocalityonauniprocessoristohavetheprocessorexecutethecodeassignedtoeach772CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYprocessorinsuccession.Inthisintroduction,westartbypresentinganoverviewofparallelcomputerarchitectures.Wethenshowthebasicconceptsinparallelization,thekindoftransformationsthatcanmakeabigdi\u000berence,aswellastheconceptsusefulforparallelization.Wethendiscusshowsimilarconsiderationscanbeusedtooptimizelocality.Finally,weintroduceinformallythemathematicalconceptsusedinthischapter.11.1.1MultiprocessorsThemostpopularparallelmachinearchitectureisthesymmetricmultiproces-sor(SMP).High-performancepersonalcomputersoftenhavetwoprocessors,andmanyservermachineshavefour,eight,andsomeeventensofprocessors.Moreover,asithasbecomefeasibleforseveralhigh-performanceprocessorsto\ftonasinglechip,multiprocessorshavebecomeevenmorewidelyused.Processorsonasymmetricmultiprocessorsharethesameaddressspace.Tocommunicate,aprocessorcansimplywritetoamemorylocation,whichisthenreadbyanyotherprocessor.Symmetricmultiprocessorsaresonamedbecauseallprocessorscanaccessallofthememoryinthesystemwithauniformaccesstime.Fig.11.1showsthehigh-levelarchitectureofamultiprocessor.Theprocessorsmayhavetheirown\frst-level,second-level,andinsomecases,evenathird-levelcache.Thehighest-levelcachesareconnectedtophysicalmemorythroughtypicallyasharedbus. Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Bus MemoryFigure11.1:Thesymmetricmulti-processorarchitectureSymmetricmultiprocessorsuseacoherentcacheprotocoltohidethepresenceofcachesfromtheprogrammer.Undersuchaprotocol,severalprocessorsare11.1.BASICCONCEPTS773allowedtokeepcopiesofthesamecacheline1atthesametime,providedthattheyareonlyreadingthedata.Whenaprocessorwishestowritetoacacheline,copiesfromallothercachesareremoved.Whenaprocessorrequestsdatanotfoundinitscache,therequestgoesoutonthesharedbus,andthedatawillbefetchedeitherfrommemoryorfromthecacheofanotherprocessor.Thetimetakenforoneprocessortocommunicatewithanotherisabouttwicethecostofamemoryaccess.Thedata,inunitsofcachelines,must\frstbewrittenfromthe\frstprocessor'scachetomemory,andthenfetchedfromthememorytothecacheofthesecondprocessor.Youmaythinkthatinterprocessorcommunicationisrelativelycheap,sinceitisonlyabouttwiceasslowasamemoryaccess.However,youmustrememberthatmemoryaccessesareveryexpensivewhencomparedtocachehits|theycanbeahundredtimesslower.Thisanalysisbringshomethesimilaritybetweene\u000ecientparallelizationandlocalityanalysis.Foraprocessortoperformwell,eitheronitsownorinthecontextofamultiprocessor,itmust\fndmostofthedataitoperatesoninitscache.Intheearly2000's,thedesignofsymmetricmultiprocessorsnolongerscaledbeyondtensofprocessors,becausethesharedbus,oranyotherkindofinter-connectforthatmatter,couldnotoperateatspeedwiththeincreasingnumberofprocessors.Tomakeprocessordesignsscalable,architectsintroducedyetan-otherlevelinthememoryhierarchy.Insteadofhavingmemorythatisequallyfarawayforeachprocessor,theydistributedthememoriessothateachpro-cessorcouldaccessitslocalmemoryquicklyasshowninFig.11.2.Remotememoriesthusconstitutedthenextlevelofthememoryhierarchy;theyarecollectivelybiggerbutalsotakelongertoaccess.Analogoustotheprincipleinmemory-hierarchydesignthatfaststoresarenecessarilysmall,machinesthatsupportfastinterprocessorcommunicationnecessarilyhaveasmallnumberofprocessors.Therearetwovariantsofaparallelmachinewithdistributedmemories:NUMA(nonuniformmemoryaccess)machinesandmessage-passingmachines.NUMAarchitecturesprovideasharedaddressspacetothesoftware,allowingprocessorstocommunicatebyreadingandwritingsharedmemory.Onmessage-passingmachines,however,processorshavedisjointaddressspaces,andproces-sorscommunicatebysendingmessagestoeachother.Notethateventhoughitissimplertowritecodeforsharedmemorymachines,thesoftwaremusthavegoodlocalityforeithertypeofmachinetoperformwell.11.1.2ParallelisminApplicationsWeusetwohigh-levelmetricstoestimatehowwellaparallelapplicationwillperform:parallelismcoveragewhichisthepercentageofthecomputationthatrunsinparallel,granularityofparallelism,whichistheamountofcomputationthateachprocessorcanexecutewithoutsynchronizingorcommunicatingwithothers.Oneparticularlyattractivetargetofparallelizationisloops:aloopmay774CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Processor First−level Cache Second−level Cache Memory Memory Memory Memory Bus or other InterconnectFigure11.2:Distributedmemorymachineshavemanyiterations,andiftheyareindependentofeachother,wehavefoundagreatsourceofparallelism.Amdahl'sLawThesigni\fcanceofparallelismcoverageissuccinctlycapturedbyAmdahl'sLaw.Amdahl'sLawstatesthat,iffisthefractionofthecodeparallelized,andiftheparallelizedversionrunsonap-processormachinewithnocommunicationorparallelizationoverhead,thespeedupis111.1.BASICCONCEPTS775ofinputandgeneratingasmallamountofoutput,canbeperformedindepen-dentlyofallothers.Asaresult,suchacomputationrunswellonmachinesovertheInternet,whichhasrelativelyhighcommunicationlatency(delay)andlowbandwidth.Mostapplicationsrequiremorecommunicationandinteractionbetweenpro-cessors,yetstillallowcoarse-grainedparallelism.Consider,forexample,thewebserverresponsibleforservingalargenumberofmostlyindependentre-questsoutofacommondatabase.Wecanruntheapplicationonamulti-processor,withathreadimplementingthedatabaseandanumberofotherthreadsservicinguserrequests.Otherexamplesincludedrugdesignorairfoilsimulation,wheretheresultsofmanydi\u000berentparameterscanbeevaluatedindependently.Sometimestheevaluationofevenjustonesetofparametersinasimulationtakessolongthatitisdesirabletospeeditupwithparalleliza-tion.Asthegranularityofavailableparallelisminanapplicationdecreases,betterinterprocessorcommunicationsupportandmoreprogramminge\u000bortareneeded.Manylong-runningscienti\fcandengineeringapplications,withtheirsimplecontrolstructuresandlargedatasets,canbemorereadilyparallelizedata\fnergrainthantheapplicationsmentionedabove.Thus,thischapterisdevotedpri-marilytotechniquesthatapplytonumericalapplications,andinparticular,toprogramsthatspendmostoftheirtimemanipulatingdatainmultidimensionalarrays.Weshallexaminethisclassofprogramsnext.11.1.3Loop-LevelParallelismLoopsarethemaintargetforparallelization,especiallyinapplicationsusingarrays.Longrunningapplicationstendtohavelargearrays,whichleadtoloopsthathavemanyiterations,oneforeachelementinthearray.Itisnotuncommonto\fndloopswhoseiterationsareindependentofoneanother.Wecandividethelargenumberofiterationsofsuchloopsamongtheprocessors.Iftheamountofworkperformedineachiterationisroughlythesame,simplydividingtheiterationsevenlyacrossprocessorswillachievemaximumparal-lelism.Example11.1isanextremelysimpleexampleshowinghowwecantakeadvantageofloop-levelparallelism.Example11.1:Theloopfor(i=0;i<n;i++){Z[i]=X[i]-Y[i];Z[i]=Z[i]*Z[i];}computesthesquareofdi\u000berencesbetweenelementsinvectorsXandYandstoresitintoZ.Theloopisparallelizablebecauseeachiterationaccessesadi\u000berentsetofdata.WecanexecutethelooponacomputerwithMprocessorsbygivingeachprocessoranuniqueIDp=0;1;:::;M\u00001andhavingeachprocessorexecutethesamecode:776CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.1.BASICCONCEPTS777forthealgorithmis100%,andthecodehasgooddatalocalityasitrequiresnocommunicationatallwhilecomputinganFFT.Manyapplicationsdonothavelargeoutermostloopsthatareparallelizable.Theexecutiontimeoftheseapplications,however,isoftendominatedbytime-consumingkernels,whichmayhavehundredsoflinesofcodeconsistingofloopswithdi\u000berentnestinglevels.Itissometimespossibletotakethekernel,reorganizeitscomputationandpartitionitintomostlyindependentunitsbyfocusingonitslocality.11.1.4DataLocalityTherearetwosomewhatdi\u000berentnotionsofdatalocalitythatneedtobecon-sideredwhenparallelizingprograms.Temporallocalityoccurswhenthesamedataisusedseveraltimeswithinashorttimeperiod.Spatiallocalityoccurswhendi\u000berentdataelementsthatarelocatedneartoeachotherareusedwithinashortperiodoftime.Animportantformofspatiallocalityoccurswhenalltheelementsthatappearononecachelineareusedtogether.Thereasonisthatassoonasoneelementfromacachelineisneeded,alltheelementsinthesamelinearebroughttothecacheandwillprobablystillbethereiftheyareusedsoon.Thee\u000bectofthisspatiallocalityisthatcachemissesareminimized,witharesultingimportantspeedupoftheprogram.Kernelscanoftenbewritteninmanysemanticallyequivalentwaysbutwithwidelyvaryingdatalocalitiesandperformances.Example11.2showsanalter-nativewayofexpressingthecomputationinExample11.1.Example11.2:LikeExample11.1thefollowingalso\fndsthesquaresofdi\u000berencesbetweenelementsinvectorsXandY.for(i=0;i<n;i++)Z[i]=X[i]-Y[i];for(i=0;i<n;i++)Z[i]=Z[i]*Z[i];The\frstloop\fndsthedi\u000berences,thesecond\fndsthesquares.Codelikethisappearsofteninrealprograms,becausethatishowwecanoptimizeaprogramforvectormachines,whicharesupercomputerswhichhaveinstructionsthatperformsimplearithmeticoperationsonvectorsatatime.WeseethatthebodiesofthetwoloopsherearefusedasoneinExample11.1.Giventhatthetwoprogramsperformthesamecomputation,whichperformsbetter?ThefusedloopinExample11.1hasbetterperformancebecauseithasbetterdatalocality.Eachdi\u000berenceissquaredimmediately,assoonasitisproduced;infact,wecanholdthedi\u000berenceinaregister,squareit,andwritetheresultjustonceintothememorylocationZ[i].Incontrast,thecodeinthisexamplewritesZ[i]longbeforeitusesthatvalue.Ifthesizeofthearrayislargerthanthecache,Z[i]needstoberefetchedfrommemorythesecondtimeitisusedinthisexample.Thus,thiscodecanrunsigni\fcantlyslower.2778CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(j=0;j<n;j++)for(i=0;i<n;i++)Z[i,j]=0;(a)Zeroinganarraycolumn-by-column.for(i=0;i<n;i++)for(j=0;j<n;j++)Z[i,j]=0;(b)Zeroinganarrayrow-by-row.b=ceil(n/M);for(i=b*p;i<min(n,b*(p+1));i++)for(j=0;j<n;j++)Z[i,j]=0;(c)Zeroinganarrayrow-by-rowinparallel.Figure11.3:SequentialandparallelcodeforzeroinganarrayExample11.3:SupposewewanttosetarrayZ,storedinrow-majororder(recallSection6.4.3),toallzeros.Fig.11.3(a)and(b)sweepsthroughthearraycolumn-by-columnandrow-by-row,respectively.WecantransposetheloopsinFig.11.3(a)toarriveatFig.11.3(b).Intermsofspatiallocality,itispreferabletozerooutthearrayrow-by-rowsinceallthewordsinacachelinearezeroedconsecutively.Inthecolumn-by-columnapproach,eventhougheachcachelineisreusedbyconsecutiveiterationsoftheouterloop,cachelineswillbethrownoutbeforereuseifthesizeofacolumisgreaterthanthesizeofthecache.Forbestperformance,weparallelizetheouterloopofFig.11.3(b)inamannersimilartothatusedinExample11.1[seeFig.11.3(c)].2Thetwoexamplesaboveillustrateseveralimportantcharacteristicsassoci-atedwithnumericapplicationsoperatingonarrays:\u000fArraycodeoftenhasmanyparallelizableloops.\u000fWhenloopshaveparallelism,theiriterationscanbeexecutedinarbitraryorder;theycanbereorderedtoimprovedatalocalitydrastically.\u000fAswecreatelargeunitsofparallelcomputationthatareindependentofeachother,executingtheseseriallytendstoproducegooddatalocality.11.1.5IntroductiontoA\u000eneTransformTheoryWritingcorrectande\u000ecientsequentialprogramsisdi\u000ecult;writingparallelprogramsthatarecorrectande\u000ecientisevenharder.Thelevelofdi\u000eculty11.1.BASICCONCEPTS779increasesasthegranularityofparallelismexploiteddecreases.Asweseeabove,programmersmustpayattentiontodatalocalitytogethighperformance.Fur-thermore,thetaskoftakinganexistingsequentialprogramandparallelizingitisextremelyhard.Itishardtocatchallthedependencesintheprogram,es-peciallyifitisnotaprogramwithwhichwearefamiliar.Debuggingaparallelprogramisharderyet,becauseerrorscanbenondeterministic.Ideally,aparallelizingcompilerautomaticallytranslatesordinarysequentialprogramsintoe\u000ecientparallelprogramsandoptimizesthelocalityoftheseprograms.Unfortunately,compilerswithouthigh-levelknowledgeabouttheapplication,canonlypreservethesemanticsoftheoriginalalgorithm,whichmaynotbeamenabletoparallelization.Furthermore,programmersmayhavemadearbitrarychoicesthatlimittheprogram'sparallelism.Successesinparallelizationandlocalityoptimizationshavebeendemon-stratedforFortrannumericapplicationsthatoperateonarrayswitha\u000eneaccesses.Withoutpointersandpointerarithmetic,Fortraniseasiertoana-lyze.Notethatnotallapplicationshavea\u000eneaccesses;mostnotably,manynumericapplicationsoperateonsparsematriceswhoseelementsareaccessedindirectlythroughanotherarray.Thischapterfocusesontheparallelizationandoptimizationsofkernels,consistingofmostlytensoflines.AsillustratedbyExamples11.2and11.3,parallelizationandlocalityop-timizationrequirethatwereasonaboutthedi\u000berentinstancesofaloopandtheirrelationswitheachother.Thissituationisverydi\u000berentfromdata-\rowanalysis,wherewecombineinformationassociatedwithallinstancestogether.Fortheproblemofoptimizingloopswitharrayaccesses,weusethreekindsofspaces.Eachspacecanbethoughtofaspointsonagridofoneormoredimensions.1.Theiterationspaceisthesetofthedynamicexecutioninstancesinacomputation,thatis,thesetofcombinationsofvaluestakenonbytheloopindexes.2.Thedataspaceisthesetofarrayelementsaccessed.3.Theprocessorspaceisthesetofprocessorsinthesystem.Normally,theseprocessorsareassignedintegernumbersorvectorsofintegerstodistinguishamongthem.Givenasinputareasequentialorderinwhichtheiterationsareexecutedanda\u000enearray-accessfunctions(e.g.,X[i;j+1])thatspecifywhichinstancesintheiterationspaceaccesswhichelementsinthedataspace.Theoutputoftheoptimization,againrepresentedasa\u000enefunctions,de\fneswhateachprocessordoesandwhen.Tospecifywhateachprocessordoes,weuseana\u000enefunctiontoassigninstancesintheoriginaliterationspacetoprocessors.Tospecifywhen,weuseana\u000enefunctiontomapinstancesintheiterationspacetoanewordering.Thescheduleisderivedbyanalyzingthearray-accessfunctionsfordatadependencesandreusepatterns.780CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYThefollowingexamplewillillustratethethreespaces|iteration,data,andprocessor.Itwillalsointroduceinformallytheimportantconceptsandissuesthatneedtobeaddressedinusingthesespacestoparallelizecode.Theconceptseachwillbecoveredindetailinlatersections.Example11.4:Figure11.4illustratesthedi\u000berentspacesandtheirrelationsusedinthefollowingprogram:floatZ[100];for(i=0;i<10;i++)Z[i+10]=Z[i];Thethreespacesandthemappingsamongthemareasfollows: . . . 010 . . .. . . 11 19 2019 Data space 9. . .10Iteration space 01 . . . 9 Processor space Region of data accessed Affine partitioning Affine array index functionsFigure11.4:Iteration,data,andprocessorspaceforExample11.41.IterationSpace:Theiterationspaceisthesetofiterations,whoseID'saregivenbythevaluesheldbytheloopindexvariables.Ad-deeploopnest(i.e.,dnestedloops)hasdindexvariables,andisthusmodeledbyad-dimensionalspace.Thespaceofiterationsisboundedbythelowerandupperboundsoftheloopindexes.Theloopofthisexamplede\fnesaone-dimensionalspaceof10iterations,labeledbytheloopindexvalues:i=0;1;:::;9.2.DataSpace:Thedataspaceisgivendirectlybythearraydeclarations.Inthisexample,elementsinthearrayareindexedbya=0;1;:::;99.Eventhoughallarraysarelinearizedinaprogram'saddressspace,wetreatn-dimensionalarraysasn-dimensionalspaces,andassumethattheindividualindexesstaywithintheirbounds.Inthisexample,thearrayisone-dimensionalanyway.11.1.BASICCONCEPTS7813.ProcessorSpace:Wepretendthatthereareanunboundednumberofvirtualprocessorsinthesystemasourinitialparallelizationtarget.Theprocessorsareorganizedinamultidimensionalspace,onedimensionforeachloopinthenestwewishtoparallelize.Afterparallelization,ifwehavefewerphysicalprocessorsthanvirtualprocessors,wedividethevir-tualprocessorsintoevenblocks,andassignablockeachtoaprocessor.Inthisexample,weneedonlytenprocessors,oneforeachiterationoftheloop.WeassumeinFig.11.4thatprocessorsareorganizedinaone-dimensionalspaceandnumbered0;1;:::;9,withloopiterationiassignedtoprocessori.Iftherewere,say,only\fveprocessors,wecouldassignit-erations0and1toprocessor0,iterations2and3toprocessor1,andsoon.Sinceiterationsareindependent,itdoesn'tmatterhowwedotheassignment,aslongaseachofthe\fveprocessorsgetstwoiterations.4.A\u000eneArray-IndexFunction:Eacharrayaccessinthecodespeci\fesamappingfromaniterationintheiterationspacetoanarrayelementinthedataspace.Theaccessfunctionisa\u000eneifitinvolvesmultiplyingtheloopindexvariablesbyconstantsandaddingconstants.Boththearrayindexfunctionsi+10,andiarea\u000ene.Fromtheaccessfunction,wecantellthedimensionofthedataaccessed.Inthiscase,sinceeachindexfunctionhasoneloopvariable,thespaceofaccessedarrayelementsisonedimensional.5.A\u000enePartitioning:Weparallelizealoopbyusingana\u000enefunctiontoassigniterationsinaniterationspacetoprocessorsintheprocessorspace.Inourexample,wesimplyassigniterationitoprocessori.Wecanalsospecifyanewexecutionorderwitha\u000enefunctions.Ifwewishtoexecutetheloopabovesequentially,butinreverse,wecanspecifytheorderingfunctionsuccinctlywithana\u000eneexpression10\u0000i.Thus,iteration9isthe1stiterationtoexecuteandsoon.6.RegionofDataAccessed:To\fndthebesta\u000enepartitioning,itusefultoknowtheregionofdataaccessedbyaniteration.Wecangettheregionofdataaccessedbycombiningtheiterationspaceinformationwiththearrayindexfunction.Inthiscase,thearrayaccessZ[i+10]touchestheregionfaj10\u0014a<20gandtheaccessZ[i]touchestheregionfaj0\u0014a<10g.7.DataDependence:Todetermineiftheloopisparallelizable,weaskifthereisadatadependencethatcrossestheboundaryofeachiteration.Forthisexample,we\frstconsiderthedependencesofthewriteaccessesintheloop.SincetheaccessfunctionZ[i+10]mapsdi\u000berentiterationstodi\u000ber-entarraylocations,therearenodependencesregardingtheorderinwhichthevariousiterationswritevaluestothearray.Isthereadependencebe-tweenthereadandwriteaccesses?SinceonlyZ[10];Z[11];:::;Z[19]arewritten(bytheaccessZ[i+10]),andonlyZ[0];Z[1];:::;Z[9]areread(bytheaccessZ[i]),therecanbenodependenciesregardingtherelativeorderofareadandawrite.Therefore,thisloopisparallelizable.That782CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYis,eachiterationoftheloopisindependentofallotheriterations,andwecanexecutetheiterationsinparallel,orinanyorderwechoose.Notice,however,thatifwemadeasmallchange,saybyincreasingtheupperlimitonloopindexito10ormore,thentherewouldbedependencies,assomeelementsofarrayZwouldbewrittenononeiterationandthenread10iterationslater.Inthatcase,theloopcouldnotbeparallelizedcompletely,andwewouldhavetothinkcarefullyabouthowiterationswerepartitionedamongprocessorsandhowweorderediterations.2Formulatingtheproblemintermsofmultidimensionalspacesanda\u000enemappingsbetweenthesespacesletsususestandardmathematicaltechniquestosolvetheparallelizationandlocalityoptimizationproblemgenerally.Forexample,theregionofdataaccessedcanbefoundbytheeliminationofvariablesusingtheFourier-Motzkineliminationalgorithm.Datadependenceisshowntobeequivalenttotheproblemofintegerlinearprogramming.Finally,\fndingthea\u000enepartitioningcorrespondstosolvingasetoflinearconstraints.Don'tworryifyouarenotfamiliarwiththeseconcepts,astheywillbeexplainedstartinginSection11.3.11.2MatrixMultiply:AnIn-DepthExampleWeshallintroducemanyofthetechniquesusedbyparallelcompilersinanex-tendedexample.Inthissection,weexplorethefamiliarmatrix-multiplicationalgorithmtoshowthatitisnontrivialtooptimizeevenasimpleandeasilyparallelizableprogram.Weshallseehowrewritingthecodecanimprovedatalocality;thatis,processorsareabletodotheirworkwithfarlesscommunica-tion(withglobalmemoryorwithotherprocessors,dependingonthearchitec-ture)thanifthestraightforwardprogramischosen.Weshallalsodiscusshowcognizanceoftheexistenceofcachelinesthatholdseveralconsecutivedataele-mentscanimprovetherunningtimeofprogramssuchasmatrixmultiplication.11.2.1TheMatrix-MultiplicationAlgorithmInFig.11.5weseeatypicalmatrix-multiplicationprogram.2Ittakestwon\u0002nmatrices,XandY,andproducestheirproductinathirdn\u0002nmatrixZ.RecallthatZij|theelementofmatrixZinrowiandcolumnj|mustbecomePnk=1XikYkj.ThecodeofFig.11.5generatesn2results,eachofwhichisaninnerproductbetweenonerowandonecolumnofthetwomatrixoperands.Clearly,the11.2.MATRIXMULTIPLY:ANIN-DEPTHEXAMPLE783for(i=0;i<n;i++)for(j=0;j<n;j++){Z[i,j]=0.0;for(k=0;k<n;k++)Z[i,j]=Z[i,j]+X[i,k]*Y[k,j];}Figure11.5:Thebasicmatrix-multiplicationalgorithmcalculationsofeachoftheelementsofZareindependentandcanbeexecutedinparallel.Thelargernis,themoretimesthealgorithmtoucheseachelement.Thatis,thereare3n2locationsamongthethreematrices,butthealgorithmperformsn3operations,eachofwhichmultipliesanelementofXbyanelementofYandaddstheproducttoanelementofZ.Thus,thealgorithmiscomputation-intensiveandmemoryaccessesshouldnot,inprinciple,constituteabottleneck.SerialExecutionoftheMatrixMultiplicationLetus\frstconsiderhowthisprogrambehaveswhenrunsequentiallyonauniprocessor.TheinnermostloopreadsandwritesthesameelementofZ,andusesarowofXandacolumnofY.Z[i;j]caneasilybestoredinaregisterandrequiresnomemoryaccesses.Assume,withoutlossofgenerality,thatthematrixislaidoutinrow-majororder,andthatcisthenumberofarrayelementsinacacheline. XY . . . n = 0 10− 1 = i jFigure11.6:ThedataaccesspatterninmatrixmultiplyFigure11.6suggeststheaccesspatternasweexecuteoneiterationoftheouterloopofFig.11.5.Inparticular,thepictureshowsthe\frstiteration,withi=0.Eachtimewemovefromoneelementofthe\frstrowofXtothenext,784CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYwevisiteachelementinasinglecolumnofY.WeseeinFig.11.6theassumedorganizationofthematricesintocachelines.Thatis,eachsmallrectanglerepresentsacachelineholdingfourarrayelements(i.e.,c=4andn=12inthepicture).AccessingXputslittleburdenonthecache.OnerowofXisspreadamongonlyn=ccachelines.Assumingtheseall\ftinthecache,onlyn=ccachemissesoccurfora\fxedvalueofindexi,andthetotalnumberofmissesforallofXisn2=c,theminimumpossible(weassumenisdivisiblebyc,forconvenience).However,whileusingonerowofX,thematrix-multiplicationalgorithmaccessesalltheelementsofY,columnbycolumn.Thatis,whenj=0,theinnerloopbringstothecachetheentire\frstcolumnofY.Noticethattheelementsofthatcolumnarestoredamongndi\u000berentcachelines.Ifthecacheisbigenough(ornsmallenough)toholdncachelines,andnootherusesofthecacheforcesomeofthesecachelinestobeexpelled,thenthecolumnforj=0willstillbeinthecachewhenweneedthesecondcolumnofY.Inthatcase,therewillnotbeanotherncachemissesreadingY,untilj=c,atwhichtimeweneedtobringintothecacheanentirelydi\u000berentsetofcachelinesforY.Thus,tocompletethe\frstiterationoftheouterloop(withi=0)requiresbetweenn2=candn2cachemisses,dependingonwhethercolumnsofcachelinescansurvivefromoneiterationofthesecondlooptothenext.Moreover,aswecompletetheouterloop,fori=1;2,andsoon,wemayhavemanyadditionalcachemissesaswereadY,ornoneatall.Ifthecacheisbigenoughthatalln2=ccachelinesholdingYcanresidetogetherinthecache,thenweneednomorecachemisses.Thetotalnumberofcachemissesisthus2n2=c,halfforXandhalfforY.However,ifthecachecanholdonecolumnofYbutnotallofY,thenweneedtobringallofYintocacheagain,eachtimeweperformaniterationoftheouterloop.Thatis,thenumberofcachemissesisn2=c+n3=c;the\frsttermisforXandthesecondisforY.Worst,ifwecannotevenholdonecolumnofYinthecache,thenwehaven2cachemissesperiterationoftheouterloopandatotalofn2=c+n3cachemisses.Row-by-RowParallelizationNow,letusconsiderhowwecouldusesomenumberofprocessors,saypproces-sors,tospeeduptheexecutionofFig.11.5.Anobviousapproachtoparallelizingmatrixmultiplicationistoassigndi\u000berentrowsofZtodi\u000berentprocessors.Aprocessorisresponsibleforn=pconsecutiverows(weassumenisdivisiblebyp,forconvenience).Withthisdivisionoflabor,eachprocessorneedstoaccessn=prowsofmatricesXandZ,buttheentireYmatrix.Oneprocessorwillcomputen2=pelementsofZ,performingn3=pmultiply-and-addoperationstodoso.Whilethecomputationtimethusdecreasesinproportiontop,thecommu-nicationcostactuallyrisesinproportiontop.Thatis,eachofpprocessorshastoreadn2=pelementsofX,butalln2elementsofY.Thetotalnumberofcachelinesthatmustbedeliveredtothecachesofthepprocessorsisatleast11.2.MATRIXMULTIPLY:ANIN-DEPTHEXAMPLE785n2=c+pn2=c;thetwotermsarefordeliveringXandcopiesofY,respectively.Aspapproachesn,thecomputationtimebecomesO(n2)whilethecommuni-cationcostisO(n3).Thatis,thebusonwhichdataismovedbetweenmemoryandtheprocessors'cachesbecomesthebottleneck.Thus,withtheproposeddatalayout,usingalargenumberofprocessorstosharethecomputationcanactuallyslowdownthecomputation,ratherthanspeeditup.11.2.2OptimizationsThematrix-multiplicationalgorithmofFig.11.5showsthateventhoughanalgorithmmayreusethesamedata,itmayhavepoordatalocality.Areuseofdataresultsinacachehitonlyifthereusehappenssoonenough,beforethedataisdisplacedfromthecache.Inthiscase,n2multiply-addoperationsseparatethereuseofthesamedataelementinmatrixY,solocalityispoor.Infact,noperationsseparatethereuseofthesamecachelineinY.Inaddi-tion,onamultiprocessor,reusemayresultinacachehitonlyifthedataisreusedbythesameprocessor.WhenweconsideredaparallelimplementationinSection11.2.1,wesawthatelementsofYhadtobeusedbyeveryprocessor.Thus,thereuseofYisnotturnedintolocality.ChangingDataLayoutOnewaytoimprovethelocalityofaprogramistochangethelayoutofitsdatastructures.Forexample,storingYincolumn-majororderwouldhaveimprovedthereuseofcachelinesformatrixY.Theapplicabilityofthisapproachislimited,becausethesamematrixnormallyisusedindi\u000berentoperations.IfYplayedtheroleofXinanothermatrixmultiplication,thenitwouldsu\u000berfrombeingstoredincolumn-majororder,sincethe\frstmatrixinamultiplicationisbetterstoredinrow-majororder.BlockingItissometimespossibletochangetheexecutionorderoftheinstructionstoimprovedatalocality.Thetechniqueofinterchangingloops,however,doesnotimprovethematrix-multiplicationroutine.SupposetheroutinewerewrittentogenerateacolumnofmatrixZatatime,insteadofarowatatime.Thatis,makethej-looptheouterloopandthei-loopthesecondloop.Assumingmatricesarestillstoredinrow-majororder,matrixYenjoysbetterspatialandtemporallocality,butonlyattheexpenseofmatrixX.Blockingisanotherwayofreorderingiterationsinaloopthatcangreatlyimprovethelocalityofaprogram.Insteadofcomputingtheresultaroworacolumnatatime,wedividethematrixupintosubmatrices,orblocks,assuggestedbyFig.11.7,andweorderoperationssoanentireblockisusedoverashortperiodoftime.Typically,theblocksaresquareswithasideoflengthB.IfBevenlydividesn,thenalltheblocksaresquare.IfBdoesnotevenly786CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYdividen,thentheblocksonthelowerandrightedgeswillhaveoneorbothsidesoflengthlessthanB. n BFigure11.7:AmatrixdividedintoblocksofsideBFigure11.8showsaversionofthebasicmatrix-multiplicationalgorithmwhereallthreematriceshavebeenblockedintosquaresofsideB.AsinFig.11.5,Zisassumedtohavebeeninitializedtoall0's.WeassumethatBdividesn;ifnot,thenweneedtomodifyline(4)sotheupperlimitismin(ii+B;n),andsimilarlyforlines(5)and(6).1)for(ii=0;ii<n;ii=ii+B)2)for(jj=0;jj<n;jj=jj+B)3)for(kk=0;kk<n;kk=kk+B)4)for(i=ii;i<ii+B;i++)5)for(j=jj;j<jj+B;j++)6)for(k=kk;k<kk+B;k++)7)Z[i,j]=Z[i,j]+X[i,k]*Y[k,j];Figure11.8:MatrixmultiplicationwithblockingTheouterthreeloops,lines(1)through(3),useindexesii,jj,andkk,whicharealwaysincrementedbyB,andthereforealwaysmarktheleftorupperedgeofsomeblocks.With\fxedvaluesofii,jj,andkk,lines(4)through(7)enabletheblockswithupper-leftcornersX[ii;kk]andY[kk;jj]tomakeallpossiblecontributionstotheblockwithupper-leftcornerZ[ii;jj].IfwepickBproperly,wecansigni\fcantlydecreasethenumberofcachemisses,comparedwiththebasicalgorithm,whenallofX,Y,orZcannot\ftinthecache.ChooseBsuchthatitispossibleto\ftoneblockfromeachofthematricesinthecache.Becauseoftheorderoftheloops,weactuallyneedeach11.2.MATRIXMULTIPLY:ANIN-DEPTHEXAMPLE787788CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.2.3CacheInterferenceUnfortunately,thereissomewhatmoretothestoryofcacheutilization.Mostcachesarenotfullyassociative(seeSection7.4.2).Inadirect-mappedcache,ifnisamultipleofthecachesize,thenalltheelementsinthesamerowofann\u0002narraywillbecompetingforthesamecachelocation.Inthatcase,bringinginthesecondelementofacolumnwillthrowawaythecachelineofthe\frst,eventhoughthecachehasthecapacitytokeepbothoftheselinesatthesametime.Thissituationisreferredtoascacheinterference.Therearevarioussolutionstothisproblem.The\frstistorearrangethedataonceandforallsothatthedataaccessedislaidoutinconsecutivedatalocations.Thesecondistoembedthen\u0002narrayinalargerm\u0002narraywheremischosentominimizetheinterferenceproblem.Third,insomecaseswecanchooseablocksizethatisguaranteedtoavoidinterference.11.2.4ExercisesforSection11.2Exercise11.2.1:Theblock-basedmatrix-multiplicationalgorithmofFig.11.8doesnothavetheinitializationofthematrixZtozero,asthecodeofFig.11.5does.AddthestepsthatinitializeZtoallzerosinFig.11.8.11.3IterationSpacesThemotivationforthisstudyistoexploitthetechniquesthat,insimplesettingslikematrixmultiplicationasinSection11.2,werequitestraightforward.Inthemoregeneralsetting,thesametechniquesapply,buttheyarefarlessintuitive.Butbyapplyingsomelinearalgebra,wecanmakeeverythingworkinthegeneralsetting.AsdiscussedinSection11.1.5,therearethreekindsofspacesinourtrans-formationmodel:iterationspace,dataspace,andprocessorspace.Herewestartwiththeiterationspace.Theiterationspaceofaloopnestisde\fnedtobeallthecombinationsofloop-indexvaluesinthenest.Often,theiterationspaceisrectangular,asinthematrix-multiplicationexampleofFig.11.5.There,eachofthenestedloopshadalowerboundof0andanupperboundofn\u00001.However,inmorecomplicated,butstillquiterealistic,loopnests,theupperand/orlowerboundsononeloopindexcandependonthevaluesoftheindexesoftheouterloops.Weshallseeanexampleshortly.11.3.1ConstructingIterationSpacesfromLoopNestsTobegin,letusdescribethesortofloopneststhatcanbehandledbythetechniquestobedeveloped.Eachloophasasingleloopindex,whichweassumeisincrementedby1ateachiteration.Thatassumptioniswithoutlossofgenerality,sinceiftheincrementationisbyintegerc>1,wecanalwaysreplace11.3.ITERATIONSPACES789usesoftheindexibyusesofci+aforsomepositiveornegativeconstanta,andthenincrementiby1intheloop.Theboundsoftheloopshouldbewrittenasa\u000eneexpressionsofouterloopindices.Example11.5:Considertheloopfor(i=2;i<=100;i=i+3)Z[i]=0;whichincrementsiby3eachtimearoundtheloop.Thee\u000bectistosetto0eachoftheelementsZ[2];Z[5];Z[8];:::;Z[98].Wecangetthesamee\u000bectwith:for(j=0;j<=32;j++)Z[3*j+2]=0;Thatis,wesubstitute3j+2fori.Thelowerlimiti=2becomesj=0(justsolve3j+2=2forj),andtheupperlimiti\u0014100becomesj\u001432(simplify3j+2\u0014100togetj\u001432:67androunddownbecausejhastobeaninteger).2Typically,weshallusefor-loopsinloopnests.Awhile-looporrepeat-loopcanbereplacedbyafor-loopifthereisanindexandupperandlowerboundsfortheindex,aswouldbethecaseinsomethingliketheloopofFig.11.9(a).Afor-looplikefor(i=0;i<100;i++)servesexactlythesamepurpose.However,somewhile-orrepeat-loopshavenoobviouslimit.Forexample,Fig.11.9(b)mayormaynotterminate,butthereisnowaytotellwhatconditiononiintheunseenbodyoftheloopcausesthelooptobreak.Figure11.9(c)isanotherproblemcase.Variablenmightbeaparameterofafunction,forexample.Weknowtheloopiteratesntimes,butwedon'tknowwhatnisatcompiletime,andinfactwemayexpectthatdi\u000berentexecutionsoftheloopwillexecutedi\u000berentnumbersoftimes.Incaseslike(b)and(c),wemusttreattheupperlimitoniasin\fnity.Ad-deeploopnestcanbemodeledbyad-dimensionalspace.Thedimen-sionsareordered,withthekthdimensionrepresentingthekthnestedloop,countingfromtheoutermostloop,inward.Apoint(x1;x2;:::;xd)inthisspacerepresentsvaluesforalltheloopindexes;theoutermostloopindexhasvaluex1,thesecondloopindexhasvaluex2,andsoon.Theinnermostloopindexhasvaluexd.Butnotallpointsinthisspacerepresentcombinationsofindexesthatac-tuallyoccurduringexecutionoftheloopnest.Asana\u000enefunctionofouterloopindices,eachlowerandupperloopboundde\fnesaninequalitydividingtheiterationspaceintotwohalfspaces:thosethatareiterationsintheloop(thepositivehalfspace),andthosethatarenot(thenegativehalfspace).Theconjunction(logicalAND)ofallthelinearequalitiesrepresentstheintersectionofthepositivehalfspaces,whichde\fnesaconvexpolyhedron,whichwecalltheiterationspacefortheloopnest.Aconvexpolyhedronhasthepropertythatif790CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYi=0;while(i<100){<somestatementsnotinvolvingi>i=i+1;}(a)Awhile-loopwithobviouslimits.i=0;while(1){<somestatements>i=i+1;}(b)Itisunclearwhenorifthisloopterminates.i=0;while(i<n){<somestatementsnotinvolvingiorn>i=i+1;}(c)Wedon'tknowthevalueofn,sowedon'tknowwhenthisloopterminates.Figure11.9:Somewhile-loopstwopointsareinthepolyhedron,allpointsonthelinebetweenthemarealsointhepolyhedron.Alltheiterationsinthelooparerepresentedbythepointswithintegercoordinatesfoundwithinthepolyhedrondescribedbytheloop-boundinequalities.Andconversely,allintegerpointswithinthepolyhedronrepresentiterationsoftheloopnestatsometime.for(i=0;i<=5;i++)for(j=i;j<=7;j++)Z[j,i]=0;Figure11.10:A2-dimensionalloopnestExample11.6:Considerthe2-dimensionalloopnestinFig.11.10.Wecanmodelthistwo-deeploopnestbythe2-dimensionalpolyhedronshowninFig.11.11.Thetwoaxesrepresentthevaluesoftheloopindexesiandj.Indexicantakeonanyintegralvaluebetween0and5;indexjcantakeonanyintegralvaluesuchthati\u0014j\u00147.211.3.ITERATIONSPACES791 i j 0 < < 5 < < 7j i i j iFigure11.11:TheiterationspaceofExample11.6792CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY[0;0];[0;1];[0;2];[0;3];[0;4];[0;5];[0;6];[0;7][1;1];[1;2];[1;3];[1;4];[1;5];[1;6];[1;7][2;2];[2;3];[2;4];[2;5];[2;6];[2;7][3;3];[3;4];[3;5];[3;6];[3;7][4;4];[4;5];[4;6];[4;7][5;5];[5;6];[5;7]Figure11.12:IterationorderforloopnestofFig.11.10Here,1.Z,asisconventionalinmathematics,representsthesetofintegers|positive,negative,andzero,2.Bisad\u0002dintegermatrix,3.bisanintegervectoroflengthd,and4.0isavectorofd0's.Example11.8:WecanwritetheinequalitiesofExample11.6asinFig.11.13.Thatis,therangeofiisdescribedbyi\u00150andi\u00145;therangeofjisdescribedbyj\u0015iandj\u00147.Weneedtoputeachoftheseinequalitiesintheformui+vj+w\u00150.Then,[u;v]becomesarowofthematrixBintheinequality(11.1),andwbecomesthecorrespondingcomponentofthevectorb.Forinstance,i\u00150isofthisform,withu=1,v=0,andw=0.Thisinequalityisrepresentedbythe\frstrowofBandtopelementofbinFig.11.13.266410\u000010\u0000110\u000013775\u0014ij\u0015+266405073775\u0015266400003775Figure11.13:Matrix-vectormultiplicationandavectorinequalityrepresentstheinequalitiesde\fninganiterationspaceAsanotherexample,theinequalityi\u00145isequivalentto(\u00001)i+(0)j+5\u00150,andisrepresentedbythesecondrowofBandbinFig.11.13.Also,j\u0015ibecomes(\u00001)i+(1)j+0\u00150andisrepresentedbythethirdrow.Finally,j\u00147becomes(0)i+(\u00001)j+7\u00150andisthelastrowofthematrixandvector.211.3.ITERATIONSPACES793794CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYtheorderinwhichwritesandreadsofanyarrayelementareperformedbythevariousassignmentstatementsinsidetheloopnestdonotchange).TheproblemofhowwechooseanorderingthathonorsthedatadependencesandoptimizesfordatalocalityandparallelismishardandisdealtwithlaterstartingfromSection11.7.Hereweassumethatalegalanddesirableorderingisgiven,andshowhowtogeneratecodethatenforcetheordering.LetusstartbyshowinganalternativeorderingforExample11.6.Example11.10:TherearenodependencesbetweeniterationsintheprograminExample11.6.Wecanthereforeexecutetheiterationsinarbitraryorder,sequentiallyorconcurrently.Sinceiteration[i;j]accesseselementZ[j;i]inthecode,theoriginalprogramvisitsthearrayintheorderofFig.11.14(a).Toimprovespatiallocality,weprefertovisitcontiguouswordsinthearrayconsecutively,asinFig.11.14(b).ThisaccesspatternisobtainedifweexecutetheiterationsintheordershowninFig.11.14(c).Thatis,insteadofsweepingtheiterationspaceinFig.11.11horizontally,wesweeptheiterationspacevertically,sojbecomestheindexoftheouterloop.Thecodethatexecutestheiterationsintheaboveorderisfor(j=0;j<=7;j++)for(i=0;i<=min(5,j);i++)Z[j,i]=0;2Givenaconvexpolyhedronandanorderingoftheindexvariables,howdowegeneratetheloopboundsthatsweepthroughthespaceinlexicographicorderofthevariables?Intheexampleabove,theconstrainti\u0014jshowsupasalowerboundforindexjintheinnerloopintheoriginalprogram,butasanupperboundforindexi,againintheinnerloop,inthetransformedprogram.Theboundsoftheoutermostloop,expressedaslinearcombinationsofsym-bolicconstantsandconstants,de\fnetherangeofallthepossiblevaluesitcantakeon.Theboundsforinnerloopvariablesareexpressedaslinearcombi-nationsofouterloopindexvariables,symbolicconstantsandconstants.Theyde\fnetherangethevariablecantakeonforeachcombinationofvaluesinouterloopvariables.ProjectionGeometricallyspeaking,wecan\fndtheloopboundsoftheouterloopindexinatwo-deeploopnestbyprojectingtheconvexpolyhedronrepresentingtheiterationspaceontotheouterdimensionofthespace.Theprojectionofapolyhedrononalower-dimensionalspaceisintuitivelytheshadowcastbytheobjectontothatspace.Theprojectionofthetwo-dimensionaliterationspaceinFig.11.11ontotheiaxisistheverticallinefrom0to5;andtheprojectiononto11.3.ITERATIONSPACES795Z[0;0];Z[1;0];Z[2;0];Z[3;0];Z[4;0];Z[5;0];Z[6;0];Z[7;0]Z[1;1];Z[2;1];Z[3;1];Z[4;1];Z[5;1];Z[6;1];Z[1;7]Z[2;2];Z[3;2];Z[4;2];Z[5;2];Z[6;2];Z[7;2]Z[3;3];Z[4;3];Z[5;3];Z[6;3];Z[7;3]Z[4;4];Z[5;4];Z[6;4];Z[7;4]Z[5;5];Z[6;5];Z[7;5](a)Originalaccessorder.Z[0;0]Z[1;0];Z[1;1]Z[2;0];Z[2;1];Z[2;2]Z[3;0];Z[3;1];Z[3;2];Z[3;3]Z[4;0];Z[4;1];Z[4;2];Z[4;3];Z[4;4]Z[5;0];Z[5;1];Z[5;2];Z[5;3];Z[5;4];Z[5;5]Z[6;0];Z[6;1];Z[6;2];Z[6;3];Z[6;4];Z[6;5]Z[7;0];Z[7;1];Z[7;2];Z[7;3];Z[7;4];Z[7;5](b)Preferredorderofaccess.[0;0][0;1];[1;1][0;2];[1;2];[2;2][0;3];[1;3];[2;3];[3;3][0;4];[1;4];[2;4];[3;4];[4;4][0;5];[1;5];[2;5];[3;5];[4;5];[5;5][0;6];[1;6];[2;6];[3;6];[4;6];[5;6][0;7];[1;7];[2;7];[3;7];[4;7];[5;7](c)Preferredorderofiterations.Figure11.14:Reorderingtheaccessesanditerationsforaloopnest796CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYthejaxisisthehorizontallinefrom0to7.Whenweprojecta3-dimensionalobjectalongthezaxisontoa2-dimensionalxandyplane,weeliminatevariablez,losingtheheightoftheindividualpointsandsimplyrecordthe2-dimensionalfootprintoftheobjectinthex-yplane.Loopboundgenerationisonlyoneofthemanyusesofprojection.Projectioncanbede\fnedformallyasfollows.LetSbeann-dimensionalpolyhedron.TheprojectionofSontothe\frstmofitsdimensionsisthesetofpoints(x1;x2;:::;xm)suchthatforsomexm+1;xm+2;:::;xn,vector[x1;x2;:::;xn]isinS.WecancomputeprojectionusingFourier-Motzkinelimination,asfollows:Algorithm11.11:Fourier-Motzkinelimination.INPUT:ApolyhedronSwithvariablesx1;x2;:::;xn.Thatis,Sisasetoflinearconstraintsinvolvingthevariablesxi.Onegivenvariablexmisspeci\fedtobethevariabletobeeliminated.OUTPUT:ApolyhedronS0withvariablesx1;:::;xm\u00001;xm+1;:::;xn(i.e.,allthevariablesofSexceptforxm)thatistheprojectionofSontodimensionsotherthanthemth.METHOD:LetCbealltheconstraintsinSinvolvingxm.Dothefollowing:1.ForeverypairofalowerboundandanupperboundonxminC,suchasL\u0014c1xmc2xm\u0014Ucreatethenewconstraintc2L\u0014c1UNotethatc1andc2areintegers,butLandUmaybeexpressionswithvariablesotherthanxm.2.Ifintegersc1andc2haveacommonfactor,dividebothsidesbythatfactor.3.Ifthenewconstraintisnotsatis\fable,thenthereisnosolutiontoS;i.e.,thepolyhedraSandS0arebothemptyspaces.4.S0isthesetofconstraintsS\u0000C,plusalltheconstraintsgeneratedinstep2.Note,incidentally,thatifxmhasulowerboundsandvupperbounds,elimi-natingxmproducesuptouvinequalities,butnomore.2Theconstraintsaddedinstep(1)ofAlgorithm11.11correspondtotheim-plicationsofconstraintsContheremainingvariablesinthesystem.Therefore,thereisasolutioninS0ifandonlyifthereexistsatleastonecorresponding11.3.ITERATIONSPACES797solutioninS.GivenasolutioninS0therangeofthecorrespondingxmcanbefoundbyreplacingallvariablesbutxmintheconstraintsCbytheiractualvalues.Example11.12:Considertheinequalitiesde\fningtheiterationspaceinFig.11.11.SupposewewishtouseFourier-Motzkineliminationtoprojectthetwo-dimensionalspaceawayfromtheidimensionandontothejdimension.Thereisonelowerboundoni:0\u0014iandtwoupperbounds:i\u0014jandi\u00145.Thisgeneratestwoconstraints:0\u0014jand0\u00145.Thelatteristriviallytrueandcanbeignored.Theformergivesthelowerboundonj,andtheoriginalupperboundj\u00147givestheupperbound.2Loop-BoundsGenerationNowthatwehavede\fnedFourier-Motzkinelimination,thealgorithmtogen-eratetheloopboundstoiterateoveraconvexpolyhedron(Algorithm11.13)isstraightforward.Wecomputetheloopboundsinorder,fromtheinnermosttotheouterloops.Alltheinequalitiesinvolvingtheinnermostloopindexvari-ablesarewrittenasthevariable'slowerorupperbounds.Wethenprojectawaythedimensionrepresentingtheinnermostloopandobtainapolyhedronwithonefewerdimension.Werepeatuntiltheboundsforalltheloopindexvariablesarefound.Algorithm11.13:Computingboundsforagivenorderofvariables.INPUT:AconvexpolyhedronSovervariablesv1;:::;vn.OUTPUT:AsetoflowerboundsLiandupperboundsUiforeachvi,expressedonlyintermsofthevj's,forj<i.METHOD:ThealgorithmisdescribedinFig.11.15.2Example11.14:WeapplyAlgorithm11.13togeneratetheloopboundsthatsweepthetheiterationspaceofFig.11.11vertically.Thevariablesareorderedj;i.Thealgorithmgeneratesthesebounds:Li:0Ui:5;jLj:0Uj:7Weneedtosatisfyalltheconstraints,thustheboundoniismin(5,j).Therearenoredundanciesinthisexample.2798CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYSn=S;/*UseAlgorithm11.11to\fndthebounds*/for(i=n;i\u00151;i\u0000\u0000)fLvi=allthelowerboundsonviinSi;Uvi=alltheupperboundsonviinSi;Si\u00001=ConstraintsreturnedbyapplyingAlgorithm11.11toeliminatevifromtheconstraintsSi;g/*Removeredundancies*/S0=;;for(i=1;i\u0014n;i++)fRemoveanyboundsinLviandUviimpliedbyS0;AddtheremainingconstraintsofLviandUvionvitoS0;gFigure11.15:Codetoexpressvariableboundswithrespecttoagivenvariableordering[0;0];[1;1];[2;2];[3;3];[4;4];[5;5][0;1];[1;2];[2;3];[3;4];[4;5];[5;6][0;2];[1;3];[2;4];[3;5];[4;6];[5;7][0;3];[1;4];[2;5];[3;6];[4;7][0;4];[1;5];[2;6];[3;7][0;5];[1;6];[2;7][0;6];[1;7][0;7]Figure11.16:DiagonalwiseorderingoftheiterationspaceofFig.11.1111.3.6ChangingAxesNotethatsweepingtheiterationspacehorizontallyandvertically,asdiscussedabove,arejusttwoofthemostcommonwaysofvisitingtheiterationspace.Therearemanyotherpossibilities;forexample,wecansweeptheiterationspaceinExample11.6diagonalbydiagonal,asdiscussedbelowinExample11.15.Example11.15:WecansweeptheiterationspaceshowninFig.11.11diag-onallyusingtheordershowninFig.11.16.Thedi\u000berencebetweenthecoordi-natesjandiineachdiagonalisaconstant,startingwith0andendingwith7.Thus,wede\fneanewvariablek=j\u0000iandsweepthroughtheiterationspaceinlexicographicorderwithrespecttokandj.Substitutingi=j\u0000kintheinequalitiesweget:0\u0014j\u0000k\u00145j\u0000k\u0014j\u0014711.3.ITERATIONSPACES799Tocreatetheloopboundsfortheorderdescribedabove,wecanapplyAlgo-rithm11.13totheabovesetofinequalitieswithvariableorderingk,j.Lj:kUj:5+k;7Lk:0Uk:7Fromtheseinequalities,wegeneratethefollowingcode,replacingibyj\u0000kinarrayaccesses.for(k=0;k<=7;k++)for(j=k;j<=min(5+k,7);j++)Z[j,j-k]=0;2Ingeneral,wecanchangetheaxesofapolyhedronbycreatingnewloopindexvariablesthatrepresenta\u000enecombinationsoftheoriginalvariables,andde\fninganorderingonthosevariables.Thehardproblemliesinchoosingtherightaxestosatisfythedatadependenceswhileachievingtheparallelismandlocalityobjectives.WediscussthisproblemstartingwithSection11.7.Whatwehaveestablishedhereisthatoncetheaxesarechosen,itisstraightforwardtogeneratethedesiredcode,asshowninExample11.15.Therearemanyotheriteration-traversalordersnothandledbythistech-nique.Forexample,wemaywishtovisitalltheoddrowsinaniterationspacebeforewevisittheevenrows.Or,wemaywanttostartwiththeiterationsinthemiddleoftheiterationspaceandprogresstothefringes.Forapplicationsthathavea\u000eneaccessfunctions,however,thetechniquesdescribedherecovermostofthedesirableiterationorderings.11.3.7ExercisesforSection11.3Exercise11.3.1:Converteachofthefollowingloopstoaformwheretheloopindexesareeachincrementedby1:a)for(i=10;i<50;i=i+7)X[i,i+1]=0;.b)for(i=-3;i<=10;i=i+2)X[i]=X[i+1];.c)for(i=50;i>=10;i--)X[i]=0;.Exercise11.3.2:Drawordescribetheiterationspacesforeachofthefollow-ingloopnests:a)TheloopnestofFig.11.17(a).b)TheloopnestofFig.11.17(b).800CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(i=1;i<30;i++)for(j=i+2;j<40-i;j++)X[i,j]=0;(a)LoopnestforExercise11.3.2(a).for(i=10;i<=1000;i++)for(j=i;j<i+10;j++)X[i,j]=0;(b)LoopnestforExercise11.3.2(b).for(i=0;i<100;i++)for(j=0;j<100+i;j++)for(k=i+j;k<100-i-j;k++)X[i,j,k]=0;(c)LoopnestforExercise11.3.2(c).Figure11.17:LoopnestsforExercise11.3.2c)TheloopnestofFig.11.17(c).Exercise11.3.3:WritetheconstraintsimpliedbyeachoftheloopnestsofFig.11.17intheformof(11.1).Thatis,givethevaluesofthevectorsiandbandthematrixB.Exercise11.3.4:Reverseeachoftheloop-nestingordersforthenestsofFig.11.17.Exercise11.3.5:UsetheFourier-MotzkineliminationalgorithmtoeliminateifromeachofthesetsofconstraintsobtainedinExercise11.3.3.Exercise11.3.6:UsetheFourier-MotzkineliminationalgorithmtoeliminatejfromeachofthesetsofconstraintsobtainedinExercise11.3.3.Exercise11.3.7:ForeachoftheloopnestsinFig.11.17,rewritethecodesotheaxisiisreplacedbythemajordiagonal,i.e.,thedirectionoftheaxisischaracterizedbyi=j.Thenewaxisshouldcorrespondtotheoutermostloop.Exercise11.3.8:RepeatExercise11.3.7forthefollowingchangesofaxes:a)Replaceibyi+j;i.e.,thedirectionoftheaxisisthelinesforwhichi+jisaconstant.Thenewaxiscorrespondstotheoutermostloop.b)Replacejbyi\u00002j.Thenewaxiscorrespondstotheoutermostloop.11.4.AFFINEARRAYINDEXES801!Exercise11.3.9:LetA,B,andCbeintegerconstantsinthefollowingloop,withC>1andB>A:for(i=A;i<=B;i=i+C)Z[i]=0;Rewritetheloopsotheincrementationoftheloopvariableis1andtheinitial-izationisto0,thatis,tobeoftheformfor(j=0;j<=D;j++)Z[E*j+F]=0;forintegersD,E,andF.ExpressD,E,andFintermsofA,B,andC.Exercise11.3.10:Foragenerictwo-loopnestfor(i=0;i<=A;i++)for(j=B*i+C;j<=D*i+E;j++)withAthroughEintegerconstants,writetheconstraintsthatde\fnetheloopnest'siterationspaceinmatrix-vectorform,i.e.,intheformBi+b=0.Exercise11.3.11:RepeatExercise11.3.10foragenerictwo-loopnestwithsymbolicintegerconstantsmandnasinfor(i=0;i<=m;i++)for(j=A*i+B;j<=C*i+n;j++)Asbefore,A,B,andCstandforspeci\fcintegerconstants.Onlyi,j,m,andnshouldbementionedinthevectorofunknowns.Also,rememberthatonlyiandjareoutputvariablesfortheexpression.11.4A\u000eneArrayIndexesThefocusofthischapterisontheclassofa\u000enearrayaccesses,whereeacharrayindexisexpressedasa\u000eneexpressionsofloopindexesandsymbolicconstants.A\u000enefunctionsprovideasuccinctmappingfromtheiterationspacetothedataspace,makingiteasytodeterminewhichiterationsmaptothesamedataorsamecacheline.Justasthea\u000eneupperandlowerboundsofaloopcanberepresentedasamatrix-vectorcalculation,wecandothesamefora\u000eneaccessfunctions.Onceplacedinthematrix-vectorform,wecanapplystandardlinearalgebrato\fndpertinentinformationsuchasthedimensionsofthedataaccessed,andwhichiterationsrefertothesamedata.802CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.4.1A\u000eneAccessesWesaythatanarrayaccessinaloopisa\u000eneif1.Theboundsoftheloopareexpressedasa\u000eneexpressionsofthesur-roundingloopvariablesandsymbolicconstants,and2.Theindexforeachdimensionofthearrayisalsoana\u000eneexpressionofsurroundingloopvariablesandsymbolicconstants.Example11.16:Supposeiandjareloopindexvariablesboundedbya\u000eneexpressions.Someexamplesofa\u000enearrayaccessesareZ[i],Z[i+j+1],Z[0],Z[i;i],andZ[2\u0003i+1;3\u0003j\u000010].Ifnisasymbolicconstantforaloopnest,thenZ[3\u0003n;n\u0000j]isanotherexampleofana\u000enearrayaccess.However,Z[i\u0003j]andZ[n\u0003j]arenota\u000eneaccesses.2Eacha\u000enearrayaccesscanbedescribedbytwomatricesandtwovectors.The\frstmatrix-vectorpairistheBandbthatdescribetheiterationspacefortheaccess,asintheinequalityofEquation(11.1).Thesecondpair,whichweusuallyrefertoasFandf,representthefunction(s)oftheloop-indexvariablesthatproducethearrayindex(es)usedinthevariousdimensionsofthearrayaccess.Formally,werepresentanarrayaccessinaloopnestthatusesavectorofindexvariablesibythefour-tupleF=hF;f;B;bi;itmapsavectoriwithintheboundsBi+b\u00150tothearrayelementlocationFi+fExample11.17:InFig.11.18aresomecommonarrayaccesses,expressedinmatrixnotation.Thetwoloopindexesareiandj,andtheseformthevectori.Also,X,Y,andZarearrayswith1,2,and3dimensions,respectively.The\frstaccess,X[i\u00001],isrepresentedbya1\u00022matrixFandavectorfoflength1.Noticethatwhenweperformthematrix-vectormultiplicationandaddinthevectorf,weareleftwithasinglefunction,i\u00001,whichisexactlytheformulafortheaccesstotheone-dimensionalarrayX.Alsonoticethethirdaccess,Y[j;j+1],which,aftermatrix-vectormultiplicationandaddition,yieldsapairoffunctions,(j;j+1).Thesearetheindexesofthetwodimensionsofthearrayaccess.Finally,letusobservethefourthaccessY[1;2].Thisaccessisaconstant,andunsurprisinglythematrixFisall0's.Thus,thevectorofloopindexes,i,doesnotappearintheaccessfunction.211.4.AFFINEARRAYINDEXES803804CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYbedecomposedintoseparatedimensionswiththeguaranteethatnoneofthecomponentsexceedsitsbound.Finally,wenotethatinduction-variableanaly-sescanbeusedtoconvertsomenona\u000eneaccessesintoa\u000eneones,asshowninExample11.18.Example11.18:Wecanrewritethecodej=n;for(i=0;i<=n;i++){Z[j]=0;j=j+2;}asj=n;for(i=0;i<=n;i++){Z[n+2*i]=0;}tomaketheaccesstomatrixZa\u000ene.211.4.3ExercisesforSection11.4Exercise11.4.1:Foreachofthefollowingarrayaccesses,givethevectorfandthematrixFthatdescribethem.Assumethatthevectorofindexesiisi;j;:::,andthatallloopindexeshavea\u000enelimits.a)X[2\u0003i+3;2\u0003j\u0000i].b)Y[i\u0000j;j\u0000k;k\u0000i].c)Z[3;2\u0003j;k\u00002\u0003i+1].11.5DataReuseFromarrayaccessfunctionswederivetwokindsofinformationusefulforlocalityoptimizationandparallelization:1.Datareuse:forlocalityoptimization,wewishtoidentifysetsofiterationsthataccessthesamedataorthesamecacheline.2.Datadependence:forcorrectnessofparallelizationandlocalitylooptrans-formations,wewishtoidentifyallthedatadependencesinthecode.Re-callthattwo(notnecessarilydistinct)accesseshaveadatadependenceifinstancesoftheaccessesmayrefertothesamememorylocation,andatleastoneofthemisawrite.11.5.DATAREUSE805Inmanycases,wheneverweidentifyiterationsthatreusethesamedata,therearedatadependencesbetweenthem.Wheneverthereisadatadependence,obviouslythesamedataisreused.Forexample,inmatrixmultiplication,thesameelementintheoutputarrayiswrittenO(n)times.Thewriteoperationsmustbeexecutedintheoriginalexecutionorder;3wecanexploitthereusebyallocatingaregistertoholdoneelementoftheoutputarraywhileitisbeingcomputed.However,notallreusecanbeexploitedinlocalityoptimizations;hereisanexampleillustratingthisissue.Example11.19:Considerthefollowingloop:for(i=0;i<n;i++)Z[7*i+3]=Z[3*i+5];Weobservethattheloopwritestoadi\u000berentlocationateachiteration,sotherearenoreusesordependencesonthedi\u000berentwriteoperations.Theloop,how-ever,readslocations5;8;11;14;17;:::,andwriteslocations3;10;17;24;:::.Thereadandwriteiterationsaccessthesameelements17,38,and59andsoon.Thatis,theintegersoftheform17+21jforj=0;1;2;:::areallthoseintegersthatcanbewrittenbothas7i1+3andas3i2+5,forsomeintegersi1andi2.However,thisreuseoccursrarely,andcannotbeexploitedeasilyifatall.2Datadependenceisdi\u000berentfromreuseanalysisinthatoneoftheaccessessharingadatadependencemustbeawriteaccess.Moreimportantly,datade-pendenceneedstobebothcorrectandprecise.Itneedsto\fndalldependencesforcorrectness,anditshouldnot\fndspuriousdependencesbecausetheycancauseunnecessaryserialization.Withdatareuse,weonlyneedto\fndwheremostoftheexploitablereusesare.Thisproblemismuchsimpler,sowetakeupthistopichereinthissectionandtackledatadependencesinthenext.Wesimplifyreuseanalysisbyignoringloopbounds,becausetheyseldomchangetheshapeofthereuse.Muchofthereuseexploitablebya\u000enepartitioningresidesamonginstancesofthesamearrayaccesses,andaccessesthatsharethesamecoe\u000ecientmatrix(whatwehavetypicallycalledFinthea\u000eneindexfunction).Asshownabove,accesspatternslike7i+3and3i+5havenoreuseofinterest.11.5.1TypesofReuseWe\frststartwithExample11.20toillustratethedi\u000berentkindsofdatareuses.Inthefollowing,weneedtodistinguishbetweentheaccessasaninstructionin806CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYaprogram,e.g.,x=Z[i,j],fromtheexecutionofthisinstructionmanytimes,asweexecutetheloopnest.Foremphasis,wemayrefertothestatementitselfasastaticaccess,whilethevariousiterationsofthestatementasweexecuteitsloopnestarecalleddynamicaccesses.Reusescanbeclassi\fedasselfversusgroup.Ifiterationsreusingthesamedatacomefromthesamestaticaccess,werefertothereuseasselfreuse;iftheycomefromdi\u000berentaccesses,werefertoitasgroupreuse.Thereuseistemporalifthesameexactlocationisreferenced;itisspatialifthesamecachelineisreferenced.Example11.20:Considerthefollowingloopnest:floatZ[n];for(i=0;i<n;i++)for(j=0;j<n;j++)Z[j+1]=(Z[j]+Z[j+1]+Z[j+2])/3;AccessesZ[j],Z[j+1],andZ[j+2]eachhaveself-spatialreusebecausecon-secutiveiterationsofthesameaccessrefertocontiguousarrayelements.Pre-sumablycontiguouselementsareverylikelytoresideonthesamecacheline.Inaddition,theyallhaveself-temporalreuse,sincetheexactelementsareusedoverandoveragainineachiterationintheouterloop.Inaddition,theyallhavethesamecoe\u000ecientmatrix,andthushavegroupreuse.Thereisgroupreuse,bothtemporalandspatial,betweenthedi\u000berentaccesses.Althoughthereare4n2accessesinthiscode,ifthereusecanbeexploited,weonlyneedtobringinaboutn=ccachelinesintothecache,wherecisthenumberofwordsinacacheline.Wedropafactorofnduetoself-spatialreuse,afactorofctoduetospatiallocality,and\fnallyafactorof4duetogroupreuse.2Inthefollowing,weshowhowwecanuselinearalgebratoextractthereuseinformationfroma\u000enearrayaccesses.Weareinterestedinnotjust\fndinghowmuchpotentialsavingsthereare,butalsowhichiterationsarereusingthedatasothatwecantrytomovethemclosetogethertoexploitthereuse.11.5.2SelfReuseTherecanbesubstantialsavingsinmemoryaccessesbyexploitingselfreuse.Ifthedatareferencedbyastaticaccesshaskdimensionsandtheaccessisnestedinaloopddeep,forsomed>k,thenthesamedatacanbereusednd\u0000ktimes,wherenisthenumberofiterationsineachloop.Forexample,ifa3-deeploopnestaccessesonecolumnofanarray,thenthereisapotentialsavingsfactorofn2accesses.Itturnsoutthatthedimensionalityofanaccesscorrespondstotheconceptoftherankofthecoe\u000ecientmatrixintheaccess,andwecan\fndwhichiterationsrefertothesamelocationby\fndingthenullspaceofthematrix,asexplainedbelow.11.5.DATAREUSE807RankofaMatrixTherankofamatrixFisthelargestnumberofcolumns(orequivalently,rows)ofFthatarelinearlyindependent.Asetofvectorsislinearlyindependentifnoneofthevectorscanbewrittenasalinearcombinationof\fnitelymanyothervectorsintheset.Example11.21:Considerthematrix26641235794562103775Noticethatthesecondrowisthesumofthe\frstandthirdrows,whilethefourthrowisthethirdrowminustwicethe\frstrow.However,the\frstandthirdrowsarelinearlyindependent;neitherisamultipleoftheother.Thus,therankofthematrixis2.Wecouldalsodrawthisconclusionbyexaminingthecolumns.Thethirdcolumnistwicethesecondcolumnminusthe\frstcolumn.Ontheotherhand,anytwocolumnsarelinearlyindependent.Again,weconcludethattherankis2.2Example11.22:LetuslookatthearrayaccessesinFig.11.18.The\frstaccess,X[i\u00001],hasdimension1,becausetherankofthematrix[10]is1.Thatis,theonerowislinearlyindependent,asisthe\frstcolumn.Thesecondaccess,Y[i;j],hasdimension2.Thereasonisthatthematrix\u00141001\u0015hastwoindependentrows(andthereforetwoindependentcolumns,ofcourse).Thethirdaccess,Y[j;j+1],isofdimension1,becausethematrix\u00140101\u0015hasrank1.Notethatthetworowsareidentical,soonlyoneislinearlyin-dependent.Equivalently,the\frstcolumnis0timesthesecondcolumn,sothecolumnsarenotindependent.Intuitively,inalarge,squarearrayY,theonlyelementsaccessedliealongaone-dimensionalline,justabovethemaindiagonal.Thefourthaccess,Y[1;2]hasdimension0,becauseamatrixofall0'shasrank0.Notethatforsuchamatrix,wecannot\fndalinearsumofevenonerowthatisnonzero.Finally,thelastaccess,Z[i;i;2\u0003i+j],hasdimension2.Notethatinthematrixforthisaccess2400102135808CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYthelasttworowsarelinearlyindependent;neitherisamultipleoftheother.However,the\frstrowisalinear\\sum\"oftheothertworows,withbothcoe\u000ecients0.2NullSpaceofaMatrixAreferenceinad-deeploopnestwithrankraccessesO(nr)dataelementsinO(nd)iterations,soonaverage,O(nd\u0000r)iterationsmustrefertothesamearrayelement.Whichiterationsaccessthesamedata?Supposeanaccessinthisloopnestisrepresentedbymatrix-vectorcombinationFandf.Letiandi0betwoiterationsthatrefertothesamearrayelement.ThenFi+f=Fi0+f.Rearrangingterms,wegetF(i\u0000i0)=0:Thereisawell-knownconceptfromlinearalgebrathatcharacterizeswheniandi0satisfytheaboveequation.ThesetofallsolutionstotheequationFv=0iscalledthenullspaceofF.Thus,twoiterationsrefertothesamearrayelementifthedi\u000berenceoftheirloop-indexvectorsbelongstothenullspaceofmatrixF.Itiseasytoseethatthenullvector,v=0,alwayssatis\fesFv=0.Thatis,twoiterationssurelyrefertothesamearrayelementiftheirdi\u000berenceis0;inotherwords,iftheyarereallythesameiteration.Also,thenullspaceistrulyavectorspace.Thatis,ifFv1=0andFv2=0,thenF(v1+v2)=0andF(cv1)=0.IfthematrixFisfullyranked,thatis,itsrankisd,thenthenullspaceofFconsistsofonlythenullvector.Inthatcase,iterationsinaloopnestallrefertodi\u000berentdata.Ingeneral,thedimensionofthenullspace,alsoknownasthenullity,isd\u0000r.Ifd>r,thenforeachelementthereisa(d\u0000r)-dimensionalspaceofiterationsthataccessthatelement.Thenullspacecanberepresentedbyitsbasisvectors.Ak-dimensionalnullspaceisrepresentedbykindependentvectors;anyvectorthatcanbeexpressedasalinearcombinationofthebasisvectorsbelongstothenullspace.Example11.23:LetusreconsiderthematrixofExample11.21:26641235794562103775Wedeterminedinthatexamplethattherankofthematrixis2;thusthenullityis3\u00002=1.To\fndabasisforthenullspace,whichinthiscasemustbeasinglenonzerovectoroflength3,wemaysupposeavectorinthenullspaceto11.5.DATAREUSE809be[x;y;z]andtrytosolvetheequation2664123579456210377524xyz35=2400035:Ifwemultiplythe\frsttworowsbythevectorofunknowns,wegetthetwoequationsx+2y+3z=05x+7y+9z=0Wecouldwritetheequationsthatcomefromthethirdandfourthrowsaswell,butbecausetherearenothreelinearlyindependentrows,weknowthattheadditionalequationsaddnonewconstraintsonx,y,andz.Forinstance,theequationwegetfromthethirdrow,4x+5y+6z=0canbeobtainedbysubtractingthe\frstequationfromthesecond.Wemusteliminateasmanyvariablesaswecanfromtheaboveequations.Startbyusingthe\frstequationtosolveforx;thatis,x=\u00002y\u00003z.Thensubstituteforxinthesecondequation,toget\u00003y=6z,ory=\u00002z.Sincex=\u00002y\u00003z,andy=\u00002z,itfollowsthatx=z.Thus,thevector[x;y;z]isreally[z;\u00002z;z].Wemaypickanynonzerovalueofztoformtheoneandonlybasisvectorforthenullspace.Forexample,wemaychoosez=1anduse[1;\u00002;1]asthebasisofthenullspace.2Example11.24:Therank,nullity,andnullspaceforeachofthereferencesinExample11.17areshowninFig.11.19.Observethatthesumoftherankandnullityinallthecasesisthedepthoftheloopnest,2.SincetheaccessesY[i;j]andZ[1;i;2\u0003i+j]havearankof2,alliterationsrefertodi\u000berentlocations.AccessesX[i\u00001]andY[j;j+1]bothhaverank-1matrices,soO(n)iterationsrefertothesamelocation.Intheformercase,entirerowsintheiterationspacerefertothesamelocation.Inotherwords,iterationsthatdi\u000beronlyinthejdimensionsharethesamelocation,whichissuccinctlyrepresentedbythebasisofthenullspace,[0,1].ForY[j;j+1],entirecolumnsintheiterationspacerefertothesamelocation,andthisfactissuccinctlyrepresentedbythebasisofthenullspace,[1,0].Finally,theaccessY[1;2]referstothesamelocationinalltheiterations.Thenullspacecorrespondinghas2basisvectors,[0,1],[1,0],meaningthatallpairsofiterationsintheloopnestrefertoexactlythesamelocation.211.5.3Self-SpatialReuseTheanalysisofspatialreusedependsonthedatalayoutofthematrix.Cmatricesarelaidoutinrow-majororderandFortranmatricesarelaidoutincolumn-majororder.Inotherwords,arrayelementsX[i;j]andX[i;j+1]are810CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.5.DATAREUSE811deletethelastrow,weareleftwiththetruncatedmatrix\u00140010\u0015Therankofthismatrixisevidently1,andsincetheloopnesthasdepth2,thereistheopportunityforspatialreuse.Inthiscase,sincejistheinner-loopindex,theinnerloopvisitscontiguouselementsofthearrayZstoredinrow-majororder.Makingitheinner-loopindexwillnotyieldspatiallocality,sinceasichanges,boththesecondandthirddimensionschange.2Thegeneralrulefordeterminingwhetherthereisself-spatialreuseisasfollows.Asalways,weassumethattheloopindexescorrespondtocolumnsofthecoe\u000ecientmatrixinorder,withtheoutermostloop\frst,andtheinnermostlooplast.Theninorderfortheretobespatialreuse,thevector[0;0;:::;0;1]mustbeinthenullspaceofthetruncatedmatrix.Thereasonisthatifthisvectorisinthenullspace,thenwhenwe\fxallloopindexesbuttheinnermostone,weknowthatalldynamicaccessesduringonerunthroughtheinnerloopvaryinonlythelastarrayindex.Ifthearrayisstoredinrow-majororder,thentheseelementsareallnearoneanother,perhapsinthesamecacheline.Example11.26:Notethat[0;1](transposedasacolumnvector)isinthenullspaceofthetruncatedmatrixofExample11.25.Thus,asmentionedthere,weexpectthatwithjastheinner-loopindex,therewillbespatiallocality.Ontheotherhand,ifwereversetheorderoftheloops,soiistheinnerloop,thenthecoe\u000ecientmatrixbecomes\u00140001\u0015Now,[0;1]isnotinthenullspaceofthismatrix.Rather,thenullspaceisgeneratedbythebasisvector[1;0].Thus,aswesuggestedinExample11.25,wedonotexpectspatiallocalityifiistheinnerloop.Weshouldobserve,however,thatthetestfor[0;0;:::;0;1]beinginthenullspaceisnotquitesu\u000ecienttoassurespatiallocality.Forinstance,supposetheaccesswerenotZ[1;i;2\u0003i+j]butZ[1;i;2\u0003i+50\u0003j].Then,onlyevery\fftiethelementofZwouldbeaccessedduringonerunoftheinnerloop,andwewouldnotreuseacachelineunlessitwerelongenoughtoholdmorethan50elements.211.5.4GroupReuseWecomputegroupreuseonlyamongaccessesinaloopsharingthesamecoef-\fcientmatrix.GiventwodynamicaccessesFi1+f1andFi2+f2,reuseofthesamedatarequiresthatFi1+f1=Fi2+f2812CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYorF(i1\u0000i2)=(f2\u0000f1):Supposevisonesolutiontothisequation.ThenifwisanyvectorinthenullspaceofF,w+visalsoasolution,andinfactthoseareallthesolutionstotheequation.Example11.27:Thefollowing2-deeploopnestfor(i=1;i<=n;i++)for(j=1;j<=n;j++)Z[i,j]=Z[i-1,j];hastwoarrayaccesses,Z[i;j]andZ[i\u00001;j].Observethatthesetwoaccessesarebothcharacterizedbythecoe\u000ecientmatrix\u00141001\u0015likethesecondaccess,Y[i;j]inFig.11.19.Thismatrixhasrank2,sothereisnoself-temporalreuse.However,eachaccessexhibitsself-spatialreuse.AsdescribedinSection11.5.3,whenwedeletethebottomrowofthematrix,weareleftwithonlythetoprow,[1;0],whichhasrank1.Since[0;1]isinthenullspaceofthistruncatedmatrix,weexpectspatialreuse.Aseachincrementationofinner-loopindexjincreasesthesecondarrayindexbyone,weinfactdoaccessadjacentarrayelements,andwillmakemaximumuseofeachcacheline.Althoughthereisnoself-temporalreuseforeitheraccess,observethatthetworeferencesZ[i;j]andZ[i\u00001;j]accessalmostthesamesetofarrayelements.Thatis,thereisgroup-temporalreusebecausethedatareadbyaccessZ[i\u00001;j]isthesameasthedatawrittenbyaccessZ[i;j],exceptforthecasei=1.Thissimplepatternappliestotheentireiterationspaceandcanbeexploitedtoimprovedatalocalityinthecode.Formally,discountingtheloopbounds,thetwoaccessesZ[i;j]andZ[i\u00001;j]refertothesamelocationiniterations(i1;j1)and(i2;j2),respectively,provided\u00141001\u0015\u0014i1j1\u0015+\u001400\u0015=\u00141001\u0015\u0014i2j2\u0015+\u0014\u000010\u0015:Rewritingtheterms,weget\u00141001\u0015\u0014i1\u0000i2j1\u0000j2\u0015=\u0014\u000010\u0015:Thatis,j1=j2andi2=i1+1.Noticethatthereuseoccursalongthei-axisoftheiterationspace.Thatis,theiteration(i2;j2)occursniterations(oftheinnerloop)aftertheiteration11.5.DATAREUSE813(i1;j1).Thus,manyiterationsareexecutedbeforethedatawrittenisreused.Thisdatamayormaynotstillbeinthecache.IfthecachemanagestoholdtwoconsecutiverowsofmatrixZ,thenaccessZ[i\u00001;j]doesnotmissinthecache,andthetotalnumberofcachemissesfortheentireloopnestisn2=c,wherecisthenumberofelementspercacheline.Otherwise,therewillbetwiceasmanymisses,sincebothstaticaccessesrequireanewcachelineforeachcdynamicaccesses.2Example11.28:SupposetherearetwoaccessesA[i;j;i+j]andA[i+1;j\u00001;i+j]ina3-deeploopnest,withindexesi,j,andk,fromtheoutertotheinnerloop.Thentwoaccessesi1=[i1;j1;k1]andi2=[i2;j2;k2]reusethesameelementwhenever241000101103524i1j1k135+2400035=241000101103524i2j2k235+241\u00001035:Onesolutiontothisequationforavectorv=[i1\u0000i2;j1\u0000j2;k1\u0000k2]isv=[1;\u00001;0];thatis,i1=i2+1,j1=j2\u00001,andk1=k2.4However,thenullspaceofthematrixF=2410001011035isgeneratedbythebasisvector[0;0;1];thatis,thethirdloopindex,k,canbearbitrary.Thus,v,thesolutiontotheaboveequation,isanyvector[1;\u00001;m]forsomem.Putanotherway,adynamicaccesstoA[i;j;i+j],inaloopnestwithindexesi,j,andk,isreusednotonlybyotherdynamicaccessesA[i;j;i+j]withthesamevaluesofiandjandadi\u000berentvalueofk,butalsobydynamicaccessesA[i+1;j\u00001;i+j]withloopindexvaluesi+1,j\u00001,andanyvalueofk.2Althoughweshallnotdosohere,wecanreasonaboutgroup-spatialreuseanalogously.Asperthediscussionofself-spatialreuse,wesimplydropthelastdimensionfromconsideration.Theextentofreuseisdi\u000berentforthedi\u000berentcategoriesofreuse.Self-temporalreusegivesthemostbene\ft:areferencewithak-dimensionalnullspacereusesthesamedataO(nk)times.Theextentofself-spatialreuseislimitedbythelengthofthecacheline.Finally,theextentofgroupreuseislimitedbythenumberofreferencesinagroupsharingthereuse.814CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.5.5ExercisesforSection11.5Exercise11.5.1:ComputetheranksofeachofthematricesinFig.11.20.Givebothamaximalsetoflinearlyindependentcolumnsandamaximalsetoflinearlyindependentrows.2664015126237348377526641234567891012153223377526640010111115633775(a)(b)(c)Figure11.20:ComputetheranksandnullspacesofthesematricesExercise11.5.2:FindabasisforthenullspaceofeachmatrixinFig.11.20.Exercise11.5.3:Assumethattheiterationspacehasdimensions(variables)i,j,andk.Foreachoftheaccessesbelow,describethesubspacesthatrefertothefollowingsingleelementsofthearray:a)A[i;j;i+j]b)A[i;i+1;i+2]!c)A[i;i;j+k]!d)A[i\u0000j;j\u0000k;k\u0000i]!Exercise11.5.4:SupposearrayAisstoredinrow-majororderandaccessedinsidethefollowingloopnest:for(i=0;i<100;i++)for(j=0;j<100;j++)for(k=0;k<100;k++)<someaccesstoA>IndicateforeachofthefollowingaccesseswhetheritispossibletorewritetheloopssothattheaccesstoAexhibitsself-spatialreuse;thatis,entirecachelinesareusedconsecutively.Showhowtorewritetheloops,ifso.Note:therewritingoftheloopsmayinvolvebothreorderingandintroductionofnewloopindexes.However,youmaynotchangethelayoutofthearray,e.g.,bychangingittocolumn-majororder.Alsonote:ingeneral,reorderingofloopindexesmaybelegalorillegal,dependingoncriteriawedevelopinthenextsection.However,inthiscase,wherethee\u000bectofeachaccessissimplytosetanarrayelementto0,youdonothavetoworryaboutthee\u000bectofreorderingloopsasfarasthesemanticsoftheprogramisconcerned.11.6.ARRAYDATA-DEPENDENCEANALYSIS815a)A[i+1,i+k,j]=0.!!b)A[j+k,i,i]=0.c)A[i,j,k,i+j+k]=0.!!d)A[i,j-k,i+j,i+k]=0.Exercise11.5.5:InSection11.5.3wecommentedthatwegetspatiallocalityiftheinnermostloopvariesonlyasthelastcoordinateofanarrayaccess.However,thatassertiondependedonourassumptionthatthearraywasstoredinrow-majororder.Whatconditionwouldassurespatiallocalityifthearraywerestoredincolumn-majororder?!Exercise11.5.6:InExample11.28weobservedthattheexistenceofreusebetweentwosimilaraccessesdependedheavilyontheparticularexpressionsforthecoordinatesofthearray.Generalizeourobservationtheretodetermineforwhichfunctionsf(i;j)thereisreusebetweentheaccessesA[i;j;i+j]andA[i+1;j\u00001;f(i;j)].!Exercise11.5.7:InExample11.27wesuggestedthattherewillbemorecachemissesthannecessaryifrowsofthematrixZaresolongthattheydonot\ftinthecache.Ifthatisthecase,howcouldyourewritetheloopnestinordertoguaranteegroup-spatialreuse?11.6ArrayData-DependenceAnalysisParallelizationorlocalityoptimizationsfrequentlyreordertheoperationsex-ecutedintheoriginalprogram.Aswithalloptimizations,operationscanbereorderedonlyifthereorderingdoesnotchangetheprogram'soutput.Sincewecannot,ingeneral,understanddeeplywhataprogramdoes,codeoptimizationgenerallyadoptsasimpler,conservativetestforwhenwecanbesurethattheprogramoutputisnota\u000bected:wecheckthattheoperationsonanymemorylocationaredoneinthesameorderintheoriginalandmodi\fedprograms.Inthepresentstudy,wefocusonarrayaccesses,sothearrayelementsarethememorylocationsofconcern.Twoaccesses,whetherreadorwrite,areclearlyindependent(canbere-ordered)iftheyrefertotwodi\u000berentlocations.Inaddition,readoperationsdonotchangethememorystateandthereforearealsoindependent.FollowingSection11.5,wesaythattwoaccessesaredatadependentiftheyrefertothesamememorylocationandatleastoneofthemisawriteoperation.Tobesurethatthemodi\fedprogramdoesthesameastheoriginal,therelativeexecu-tionorderingbetweeneverypairofdata-dependentoperationsintheoriginalprogrammustbepreservedinthenewprogram.RecallfromSection10.2.1thattherearethree\ravorsofdatadependence:1.Truedependence,whereawriteisfollowedbyareadofthesamelocation.816CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY2.Antidependence,whereareadisfollowedbyawritetothesamelocation.3.Outputdependence,whichistwowritestothesamelocation.Inthediscussionabove,datadependenceisde\fnedfordynamicaccesses.Wesaythatastaticaccessinaprogramdependsonanotheraslongasthereexistsadynamicinstanceofthe\frstaccessthatdependsonsomeinstanceofthesecond.5Itiseasytoseehowdatadependencecanbeusedinparallelization.Forexample,ifnodatadependencesarefoundintheaccessesofaloop,wecaneasilyassigneachiterationtoadi\u000berentprocessor.Section11.7discusseshowweusethisinformationsystematicallyinparallelization.11.6.1De\fnitionofDataDependenceofArrayAccessesLetusconsidertwostaticaccessestothesamearrayinpossiblydi\u000berentloops.The\frstisrepresentedbyaccessfunctionandboundsF=hF;f;B;biandisinad-deeploopnest;thesecondisrepresentedbyF0=hF0;f0;B0;b0iandisinad0-deeploopnest.Theseaccessesaredatadependentif1.Atleastoneofthemisawritereferenceand2.ThereexistvectorsiinZdandi0inZd0suchthat(a)Bi\u00150,(b)B0i0\u00150,and(c)Fi+f=F0i0+f0.Sinceastaticaccessnormallyembodiesmanydynamicaccesses,itisalsomeaningfultoaskifitsdynamicaccessesmayrefertothesamememoryloca-tion.Tosearchfordependenciesbetweeninstancesofthesamestaticaccess,weassumeF=F0andaugmentthede\fnitionabovewiththeadditionalconstraintthati6=i0toruleoutthetrivialsolution.Example11.29:Considerthefollowing1-deeploopnest:for(i=1;i<=10;i++){Z[i]=Z[i-1];}Thisloophastwoaccesses:Z[i\u00001]andZ[i];the\frstisareadreferenceandthesecondawrite.To\fndallthedatadependencesinthisprogram,weneedtocheckifthewritereferencesharesadependencewithitselfandwiththereadreference:11.6.ARRAYDATA-DEPENDENCEANALYSIS8171.DatadependencebetweenZ[i\u00001]andZ[i].Exceptforthe\frstiteration,eachiterationreadsthevaluewritteninthepreviousiteration.Mathe-matically,weknowthatthereisadependencebecausethereexistintegersiandi0suchthat1\u0014i\u001410,1\u0014i0\u001410,andi\u00001=i0.Thereareninesolutionstotheabovesystemofconstraints:(i=2;i0=1),(i=3;i0=2),andsoforth.2.DatadependencebetweenZ[i]anditself.Itiseasytoseethatdi\u000berentiterationsintheloopwritetodi\u000berentlocations;thatis,therearenodatadependenciesamongtheinstancesofthewritereferenceZ[i].Math-ematically,weknowthattheredoesnotexistadependencebecausetheredonotexistintegersiandi0satisfying1\u0014i\u001410,1\u0014i0\u001410,i=i0,andi6=i0.Noticethatthethirdcondition,i=i0,comesfromtherequirementthatZ[i]andZ[i0]arethesamememorylocation.Thecontradictoryfourthcondition,i6=i0,comesfromtherequirementthatthedependencebenontrivial|betweendi\u000berentdynamicaccesses.ItisnotnecessarytoconsiderdatadependencesbetweenthereadreferenceZ[i\u00001]anditselfbecauseanytworeadaccessesareindependent.211.6.2IntegerLinearProgrammingDatadependencerequires\fndingwhetherthereexistintegersthatsatisfyasystemconsistingofequalitiesandinequalities.Theequalitiesarederivedfromthematricesandvectorsrepresentingtheaccesses;theinequalitiesarederivedfromtheloopbounds.Equalitiescanbeexpressedasinequalities:anequalityx=ycanbereplacedbytwoinequalities,x\u0015yandy\u0015x.Thus,datadependencemaybephrasedasasearchforintegersolutionsthatsatisfyasetoflinearinequalities,whichispreciselythewell-knownproblemofintegerlinearprogramming.IntegerlinearprogrammingisanNP-completeproblem.Whilenopolynomialalgorithmisknown,heuristicshavebeende-velopedtosolvelinearprogramsinvolvingmanyvariables,andtheycanbequitefastinmanycases.Unfortunately,suchstandardheuristicsareinappro-priatefordatadependenceanalysis,wherethechallengeistosolvemanysmallandsimpleintegerlinearprogramsratherthanlargecomplicatedintegerlinearprograms.Thedatadependenceanalysisalgorithmconsistsofthreeparts:818CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY1.ApplytheGCD(GreatestCommonDivisor)test,whichchecksifthereisanintegersolutiontotheequalities,usingthetheoryoflinearDiophan-tineequations.Iftherearenointegersolutions,thentherearenodatadependences.Otherwise,weusetheequalitiestosubstituteforsomeofthevariablestherebyobtainingsimplerinequalities.2.Useasetofsimpleheuristicstohandlethelargenumbersoftypicalin-equalities.3.Intherarecasewheretheheuristicsdonotwork,weusealinearintegerprogrammingsolverthatusesabranch-and-boundapproachbasedonFourier-Motzkinelimination.11.6.3TheGCDTestThe\frstsubproblemistocheckfortheexistenceofintegersolutionstotheequalities.EquationswiththestipulationthatsolutionsmustbeintegersareknownasDiophantineequations.Thefollowingexampleshowshowtheissueofintegersolutionsarises;italsodemonstratesthateventhoughmanyofourexamplesinvolveasingleloopnestatatime,thedatadependenceformulationappliestoaccessesinpossiblydi\u000berentloops.Example11.30:Considerthefollowingcodefragment:for(i=1;i<10;i++){Z[2*i]=10;}for(j=1;j<10;j++){Z[2*j+1]=20;}TheaccessZ[2\u0003i]onlytouchesevenelementsofZ,whileaccessZ[2\u0003j+1]touchesonlyoddelements.Clearly,thesetwoaccessessharenodatadepen-denceregardlessoftheloopbounds.Wecanexecuteiterationsinthesecondloopbeforethe\frst,orinterleavetheiterations.Thisexampleisnotascon-trivedasitmaylook.Anexamplewhereevenandoddnumbersaretreateddi\u000berentlyisanarrayofcomplexnumbers,wheretherealandimaginarycom-ponentsarelaidoutsidebyside.Toprovetheabsenceofdatadependencesinthisexample,wereasonasfollows.SupposetherewereintegersiandjsuchthatZ[2\u0003i]andZ[2\u0003j+1]arethesamearrayelement.WegettheDiophantineequation2i=2j+1:Therearenointegersiandjthatcansatisfytheaboveequation.Theproofisthatifiisaninteger,then2iiseven.Ifjisaninteger,then2jiseven,so2j+1isodd.Noevennumberisalsoanoddnumber.Therefore,theequation11.6.ARRAYDATA-DEPENDENCEANALYSIS819hasnointegersolutions,andthusthereisnodependencebetweenthereadandwriteaccesses.2TodescribewhenthereisasolutiontoalinearDiophantineequation,weneedtheconceptofthegreatestcommondivisor(GCD)oftwoormoreintegers.TheGCDofintegersa1;a2;:::;an,denotedgcd(a1;a2;:::;an),isthelargestintegerthatevenlydividesalltheseintegers.GCD'scanbecomputede\u000ecientlybythewell-knownEuclideanalgorithm(seetheboxonthesubject).Example11.31:gcd(24;36;54)=6,because24=6,36=6,and54=6eachhaveremainder0,yetanyintegerlargerthan6mustleaveanonzeroremainderwhendividingatleastoneof24,36,and54.Forinstance,12divides24and36evenly,butnot54.2TheimportanceoftheGCDisinthefollowingtheorem.Theorem11.32:ThelinearDiophantineequationa1x1+a2x2+:::+anxn=chasanintegersolutionforx1;x2;:::;xnifandonlyifgcd(a1;a2;:::;an)di-videsc.2Example11.33:WeobservedinExample11.30thatthelinearDiophantineequation2i=2j+1hasnosolution.Wecanwritethisequationas2i\u00002j=1:Nowgcd(2;\u00002)=2,and2doesnotdivide1evenly.Thus,thereisnosolution.Foranotherexample,considertheequation24x+36y+54z=30:Sincegcd(24;36;54)=6,and30=6=5,thereisasolutioninintegersforx,y,andz.Onesolutionisx=\u00001,y=0,andz=1,butthereareanin\fnityofothersolutions.2The\frststeptothedatadependenceproblemistouseastandardmethodsuchasGaussianeliminationtosolvethegivenequalities.Everytimealinearequationisconstructed,applyTheorem11.32toruleout,ifpossible,theex-istenceofanintegersolution.Ifwecanruleoutsuchsolutions,thenanswer\\no\".Otherwise,weusethesolutionoftheequationstoreducethenumberofvariablesintheinequalities.Example11.34:Considerthetwoequalitiesx\u00002y+z=03x+2y+z=5820CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.6.ARRAYDATA-DEPENDENCEANALYSIS821To\fndifthereisadatadependencebetweenZ[i;j]andZ[j+10;i+11],weaskifthereexistintegersi,j,i0,andj0suchthat0\u0014i;j;i0;j0\u001410i=j0+10j=i0+11TheGCDtest,appliedtothetwoequalitiesabove,willdeterminethattheremaybeanintegersolution.Theintegersolutionstotheequalitiesareexpressedbyi=t1;j=t2;i0=t2\u000011;j0=t1\u000010foranyintegerst1andt2.Substitutingthevariablest1andt2intothelinearinequalities,weget0\u0014t1\u0014100\u0014t2\u0014100\u0014t2\u000011\u0014100\u0014t1\u000010\u001410Thus,combiningthelowerboundsfromthelasttwoinequalitieswiththeupperboundsfromthe\frsttwo,wededuce10\u0014t1\u00141011\u0014t2\u001410Sincethelowerboundont2isgreaterthanitsupperbound,thereisnointegersolution,andhencenodatadependence.Thisexampleshowsthatevenifthereareequalitiesinvolvingseveralvariables,theGCDtestmaystillcreatelinearinequalitiesthatinvolveonevariableatatime.2AcyclicTestAnothersimpleheuristicisto\fndifthereexistsavariablethatisboundedbeloworabovebyaconstant.Incertaincircumstances,wecansafelyreplacethevariablebytheconstant;thesimpli\fedinequalitieshaveasolutionifandonlyiftheoriginalinequalitieshaveasolution.Speci\fcally,supposeeverylowerboundonviisoftheformc0\u0014civiforsomeci>0whiletheupperboundsonviarealloftheformcivi\u0014c0+c1v1+:::+ci\u00001vi\u00001+ci+1vi+1+:::+cnvnwhereciisnonnegative.Thenwecanreplacevariablevibyitssmallestpossibleintegervalue.Ifthereisnosuchlowerbound,wesimplyreplaceviwith\u00001.822CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYSimilarly,ifeveryconstraintinvolvingvicanbeexpressedinthetwoformsabove,butwiththedirectionsoftheinequalitiesreversed,thenwecanreplacevariableviwiththelargestpossibleintegervalue,orby1ifthereisnoconstantupperbound.Thisstepcanberepeatedtosimplifytheinequalitiesandinsomecasesdetermineifthereisasolution.Example11.36:Considerthefollowinginequalities:1\u0014v1;v2\u0014100\u0014v3\u00144v2\u0014v1v1\u0014v3+4Variablev1isboundedfrombelowbyv2andfromabovebyv3+4.However,v2isboundedfrombelowonlybytheconstant1,andv3isboundedfromaboveonlybytheconstant4.Thus,replacingv2by1andv3by4intheinequalities,weobtain1\u0014v1\u0014101\u0014v1v1\u00148whichcannowbesolvedeasilywiththeindependent-variablestest.2TheLoop-ResidueTestLetusnowconsiderthecasewhereeveryvariableisboundedfrombelowandabovebyothervariables.Itiscommonlythecaseindatadependenceanalysisthatconstraintshavetheformvi\u0014vj+c,whichcanbesolvedusingasimpli\fedversionoftheloop-residuetestduetoShostak.Asetoftheseconstraintscanberepresentedbyadirectedgraphwhosenodesarelabeledwithvariables.Thereisanedgefromvitovjlabeledcwheneverthereisaconstraintvi\u0014vj+c.Wede\fnetheweightofapathtobethesumofthelabelsofalltheedgesalongthepath.Eachpathinthegraphrepresentsacombinationofthecon-straintsinthesystem.Thatis,wecaninferthatv\u0014v0+cwheneverthereexistsapathfromvtov0withweightc.Acycleinthegraphwithweightcrepresentstheconstraintv\u0014v+cforeachnodevonthecycle.Ifwecan\fndanegativelyweightedcycleinthegraph,thenwecaninferv<v,whichisimpossible.Inthiscase,wecanconcludethatthereisnosolutionandthusnodependence.Wecanalsoincorporateintotheloop-residuetestconstraintsoftheformc\u0014vandv\u0014cforvariablevandconstantc.Weintroduceintothesystemofinequalitiesanewdummyvariablev0,whichisaddedtoeachconstantupperandlowerbound.Ofcourse,v0musthavevalue0,butsincetheloop-residuetestonlylooksforcycles,theactualvaluesofthevariablesneverbecomessigni\fcant.Tohandleconstantbounds,wereplace11.6.ARRAYDATA-DEPENDENCEANALYSIS823v\u0014cbyv\u0014v0+cc\u0014vbyv0\u0014v\u0000c.Example11.37:Considertheinequalities1\u0014v1;v2\u0014100\u0014v3\u00144v2\u0014v12v1\u00142v3\u00007Theconstantupperandlowerboundsonv1becomev0\u0014v1\u00001andv1\u0014v0+10;theconstantboundsonv2andv3arehandledsimilarly.Then,convertingthelastconstrainttov1\u0014v3\u00004,wecancreatethegraphshowninFig.11.21.Thecyclev1;v3;v0;v1hasweight\u00001,sothereisnosolutiontothissetofinequalities.2 vvvv2130 0−4 +4 0 −1 +10 −1 +10Figure11.21:GraphfortheconstraintsofExample11.37MemoizationOften,similardatadependenceproblemsaresolvedrepeatedly,becausesimpleaccesspatternsarerepeatedthroughouttheprogram.Oneimportanttechniquetospeedupdatadependenceprocessingistousememoization.Memoizationtabulatestheresultstotheproblemsastheyaregenerated.Thetableofstoredsolutionsisconsultedaseachproblemispresented;theproblemneedstobesolvedonlyiftheresulttotheproblemcannotbefoundinthetable.11.6.5SolvingGeneralIntegerLinearProgramsWenowdescribeageneralapproachtosolvingtheintegerlinearprogrammingproblem.TheproblemisNP-complete;ouralgorithmusesabranch-and-boundapproachthatcantakeanexponentialamountoftimeintheworstcase.How-ever,itisrarethattheheuristicsofSection11.6.4cannotresolvetheproblem,andevenifwedoneedtoapplythealgorithmofthissection,itseldomneedstoperformthebranch-and-boundstep.824CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYTheapproachisto\frstcheckfortheexistenceofrationalsolutionstotheinequalities.Thisproblemistheclassicallinear-programmingproblem.Ifthereisnorationalsolutiontotheinequalities,thentheregionsofdatatouchedbytheaccessesinquestiondonotoverlap,andtheresurelyisnodatadependence.Ifthereisarationalsolution,we\frsttrytoprovethatthereisanintegersolution,whichiscommonlythecase.Failingthat,wethensplitthepolyhedronboundedbytheinequalitiesintotwosmallerproblemsandrecurse.Example11.38:Considerthefollowingsimpleloop:for(i=1;i<10;i++)Z[i]=Z[i+10];TheelementstouchedbyaccessZ[i]areZ[1];:::;Z[9],whiletheelementstouchedbyZ[i+10]areZ[11];:::;Z[19].Therangesdonotoverlapandthereforetherearenodatadependences.Moreformally,weneedtoshowthattherearenotwodynamicaccessesiandi0,with1\u0014i\u00149,1\u0014i0\u00149,andi=i0+10.Ifthereweresuchintegersiandi0,thenwecouldsubstitutei0+10foriandgetthefourconstraintsoni0:1\u0014i0\u00149and1\u0014i0+10\u00149.However,i0+10\u00149impliesi0\u0014\u00001,whichcontradicts1\u0014i0.Thus,nosuchintegersiandi0exist.2Algorithm11.39describeshowtodetermineifanintegersolutioncanbefoundforasetoflinearinequalitiesbasedontheFourier-Motzkineliminationalgorithm.Algorithm11.39:Branch-and-boundsolutiontointegerlinearprogrammingproblems.INPUT:AconvexpolyhedronSnovervariablesv1;:::;vn.OUTPUT:\\yes\"ifSnhasanintegersolution,\\no\"otherwise.METHOD:ThealgorithmisshowninFig.11.22.2Lines(1)through(3)attemptto\fndarationalsolutiontotheinequalities.Ifthereisnorationalsolution,thereisnointegersolution.Ifarationalsolutionisfound,thismeansthattheinequalitiesde\fneanonemptypolyhedron.Itisrelativelyrareforsuchapolyhedronnottoincludeanyintegersolutions|forthattohappen,thepolyhedronmustberelativelythinalongsomedimensionand\ftbetweenintegerpoints.Thus,lines(4)through(9)trytocheckquicklyifthereisanintegersolution.EachstepoftheFourier-Motzkineliminationalgorithmproducesapolyhedronwithonefewerdimensionthanthepreviousone.Weconsiderthepolyhedrainreverseorder.Westartwiththepolyhedronwithonevariableandassigntothatvariableanintegersolutionroughlyinthemiddleoftherangeofpossiblevaluesifpossible.Wethensubstitutethevalueforthevariableinallotherpolyhedra,decreasingtheirunknownvariablesbyone.Werepeatthesameprocessuntil11.6.ARRAYDATA-DEPENDENCEANALYSIS8251)applyAlgorithm11.11toSntoprojectawayvariablesvn;vn\u00001;:::;v1inthatorder;2)letSibethepolyhedronafterprojectingawayvi+1,fori=n\u00001;n\u00002;:::;0;3)ifS0isemptyreturn\\no\";/*ThereisnorationalsolutionifS0,whichinvolvesonlyconstants,hasunsatis\fableconstraints*/4)for(i=1;i\u0014n;i++)f5)if(Sidoesnotincludeanintegervalue)break;6)pickci,anintegerinthemiddleoftherangeforviinSi;7)modifySibyreplacingvibyci;8)g9)if(i==n+1)return\\yes\";10)if(i==1)return\\no\";11)letthelowerandupperboundsonviinSibeliandui,respectively;12)recursivelyapplythisalgorithmtoSn[fvi\u0014blicgandSn[fvi\u0015duieg;13)if(eitherreturns\\yes\")return\\yes\"elsereturn\\no\";Figure11.22:Findinganintegersolutionininequalitieswehaveprocessedallthepolyhedra,inwhichcaseanintegersolutionisfound,orwehavefoundavariableforwhichthereisnointegersolution.Ifwecannot\fndanintegervalueforeventhe\frstvariable,thereisnointegersolution(line10).Otherwise,allweknowisthatthereisnointegersolutionincludingthecombinationofspeci\fcintegerswehavepickedsofar,andtheresultisinconclusive.Lines(11)through(13)representthebranch-and-boundstep.Ifvariableviisfoundtohavearationalbutnotintegersolution,wesplitthepolyhedronintotwowiththe\frstrequiringthatvimustbeanintegersmallerthantherationalsolutionfound,andthesecondrequiringthatvimustbeanintegergreaterthantherationalsolutionfound.Ifneitherhasasolution,thenthereisnodependence.11.6.6SummaryWehaveshownthatessentialpiecesofinformationthatacompilercangleanfromarrayreferencesareequivalenttocertainstandardmathematicalconcepts.GivenanaccessfunctionF=hF;f;B;bi:1.ThedimensionofthedataregionaccessedisgivenbytherankofthematrixF.ThedimensionofthespaceofaccessestothesamelocationisgivenbythenullityofF.Iterationswhosedi\u000berencesbelongtothenullspaceofFrefertothesamearrayelements.826CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY2.Iterationsthatshareself-temporalreuseofanaccessareseparatedbyvectorsinthenullspaceofF.Self-spatialreusecanbecomputedsimilarlybyaskingwhentwoiterationsusethesamerow,ratherthanthesameelement.TwoaccessesFi1+f1andFi2+f2shareeasilyexploitablelocalityalongtheddirection,ifdistheparticularsolutiontotheequationFd=(f1\u0000f2).Inparticular,ifdisthedirectioncorrespondingtotheinnermostloop,i.e.,thevector[0;0;:::;0;1],thenthereisspatiallocalityifthearrayisstoredinrow-majorform.3.Thedatadependenceproblem|whethertworeferencescanrefertothesamelocation|isequivalenttointegerlinearprogramming.Twoaccessfunctionsshareadatadependenceifthereareinteger-valuedvectorsiandi0suchthatBi\u00150,B0i0\u00150,andFi+f=F0i0+f0.11.6.7ExercisesforSection11.6Exercise11.6.1:FindtheGCD'softhefollowingsetsofintegers:a)f16;24;56g.b)f\u000045;105;240g.!c)f84;105;180;315;350g.Exercise11.6.2:Forthefollowingloopfor(i=0;i<10;i++)A[i]=A[10-i];indicateallthea)Truedependences(writefollowedbyreadofthesamelocation).b)Antidependences(readfollowedbywritetothesamelocation).c)Outputdependences(writefollowedbyanotherwritetothesameloca-tion).!Exercise11.6.3:IntheboxontheEuclideanalgorithm,wemadeanumberofassertionswithoutproof.Proveeachofthefollowing:a)TheEuclideanalgorithmasstatedalwaysworks.Inparticular,gcd(b;c)=gcd(a;b),wherecisthenonzeroremainderofa=b.b)gcd(a;b)=gcd(a;\u0000b).c)gcd(a1;a2;:::;an)=gcd(gcd(a1;a2);a3;a4;:::;an)forn>2.11.6.ARRAYDATA-DEPENDENCEANALYSIS827d)TheGCDisreallyafunctiononsetsofintegers;i.e.,orderdoesn'tmatter.ShowthecommutativelawforGCD:gcd(a;b)=gcd(b;a).Then,showthemoredi\u000ecultstatement,theassociativelawforGCD:gcd\u0000gcd(a;b);c\u0001=gcd\u0000a;gcd(b;c)\u0001.Finally,showthattogethertheselawsimplythattheGCDofasetofintegersisthesame,regardlessoftheorderinwhichtheGCD'sofpairsofintegersarecomputed.e)IfSandTaresetsofintegers,thengcd(S[T)=gcd\u0000gcd(S);gcd(T)\u0001.!Exercise11.6.4:FindanothersolutiontothesecondDiophantineequationinExample11.33.Exercise11.6.5:Applytheindependent-variablestestinthefollowingsitua-tion.Theloopnestisfor(i=0;i<100;i++)for(j=0;j<100;j++)for(k=0;k<100;k++)andinsidethenestisanassignmentinvolvingarrayaccesses.Determineifthereareanydatadependencesduetoeachofthefollowingstatements:a)A[i,j,k]=A[i+100,j+100,k+100].b)A[i,j,k]=A[j+100,k+100,i+100].c)A[i,j,k]=A[j-50,k-50,i-50].d)A[i,j,k]=A[i+99,k+100,j].Exercise11.6.6:Inthetwoconstraints1\u0014x\u0014y\u00001003\u0014x\u00142y\u000050eliminatexbyreplacingitbyaconstantlowerboundony.Exercise11.6.7:Applytheloop-residuetesttothefollowingsetofcon-straints:0\u0014x\u001499y\u0014x\u0000500\u0014y\u001499z\u0014y\u0000600\u0014z\u001499Exercise11.6.8:Applytheloop-residuetesttothefollowingsetofcon-straints:0\u0014x\u001499y\u0014x\u0000500\u0014y\u001499z\u0014y+400\u0014z\u001499x\u0014z+20828CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYExercise11.6.9:Applytheloop-residuetesttothefollowingsetofcon-straints:0\u0014x\u001499y\u0014x\u00001000\u0014y\u001499z\u0014y+600\u0014z\u001499x\u0014z+5011.7FindingSynchronization-FreeParallelismHavingdevelopedthetheoryofa\u000enearrayaccesses,theirreuseofdata,andthedependencesamongthem,weshallnowbegintoapplythistheorytoparal-lelizationandoptimizationofrealprograms.AsdiscussedinSection11.1.4,itisimportantthatwe\fndparallelismwhileminimizingcommunicationamongprocessors.Letusstartbystudyingtheproblemofparallelizinganapplicationwithoutallowinganycommunicationorsynchronizationbetweenprocessorsatall.Thisconstraintmayappeartobeapurelyacademicexercise;howoftencanwe\fndprogramsandroutinesthathavesuchaformofparallelism?Infact,manysuchprogramsexistinreallife,andthealgorithmforsolvingthisproblemisusefulinitsownright.Inaddition,theconceptsusedtosolvethisproblemcanbeextendedtohandlesynchronizationandcommunication.11.7.1AnIntroductoryExampleShowninFig.11.23isanexcerptofaCtranslation(withFortran-stylearrayaccessesretainedforclarity)froma5000-lineFortranmultigridalgorithmtosolvethree-dimensionalEulerequations.Theprogramspendsmostitstimeinasmallnumberofroutinesliketheoneshowninthe\fgure.Itistypicalofmanynumericalprograms.Theseoftenconsistofnumerousfor-loops,withdi\u000berentnestinglevels,andtheyhavemanyarrayaccesses,allofwhicharea\u000eneexpressionsofsurroundingloopindexes.Tokeeptheexampleshort,wehaveelidedlinesfromtheoriginalprogramwithsimilarcharacteristics.ThecodeofFig.11.23operatesonthescalarvariableTandanumberofdi\u000berentarrayswithdi\u000berentdimensions.Letus\frstexaminetheuseofvariableT.BecauseeachiterationintheloopusesthesamevariableT,wecannotexecutetheiterationsinparallel.However,Tisusedonlyasawaytoholdacommonsubexpressionusedtwiceinthesameiteration.Inthe\frsttwoofthethreeloopnestsinFig.11.23,eachiterationoftheinnermostloopwritesavalueintoTandusesthevalueimmediatelyaftertwice,inthesameiteration.WecaneliminatethedependencesbyreplacingeachuseofTbytheright-hand-sideexpressioninthepreviousassignmentofT,withoutchangingthesemanticsoftheprogram.Or,wecanreplacethescalarTbyanarray.Wethenhaveeachiteration(j;i)useitsownarrayelementT[j;i].Withthismodi\fcation,thecomputationofanarrayelementineachas-signmentstatementdependsonlyonotherarrayelementswiththesamevaluesforthelasttwocomponents(jandi,respectively).Wecanthusgroupall11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM829for(j=2;j<=jl;j++)for(i=2,i<=il,i++){AP[j,i]=...;T=1.0/(1.0+AP[j,i]);D[2,j,i]=T*AP[j,i];DW[1,2,j,i]=T*DW[1,2,j,i];}for(k=3;k<=kl-1;k++)for(j=2;j<=jl;j++)for(i=2;i<=il;i++){AM[j,i]=AP[j,i];AP[j,i]=...;T=...AP[j,i]-AM[j,i]*D[k-1,j,i]...;D[k,j,i]=T*AP[j,i];DW[1,k,j,i]=T*(DW[1,k,j,i]+DW[1,k-1,j,i])...;}...for(k=kl-1;k>=2;k--)for(j=2;j<=jl;j++)for(i=2;i<=il;i++)DW[1,k,j,i]=DW[1,k,j,i]+D[k,j,i]*DW[1,k+1,j,i];Figure11.23:Codeexcerptofamultigridalgorithmoperationsthatoperateonthe(j;i)thelementofallarraysintoonecomputa-tionunit,andexecutethemintheoriginalsequentialorder.Thismodi\fcationproduces(jl\u00001)\u0002(il\u00001)unitsofcomputationthatareallindependentofoneanother.Noticethatsecondandthirdnestsinthesourceprograminvolveathirdloop,withindexk.However,becausethereisnodependencebetweendynamicaccesseswiththesamevaluesforjandi,wecansafelyperformtheloopsonkinsidetheloopsonjandi|thatis,withinacomputationunit.Knowingthatthesecomputationunitsareindependentenablesanumberoflegaltransformsonthiscode.Forexample,insteadofexecutingthecodeasoriginallywritten,auniprocessorcanperformthesamecomputationbyexecut-ingtheunitsofindependentoperationoneunitatatime.Theresultingcode,showninFig.11.24,hasimprovedtemporallocality,becauseresultsproducedareconsumedimmediately.Theindependentunitsofcomputationcanalsobeassignedtodi\u000berentprocessorsandexecutedinparallel,withoutrequiringanysynchronizationorcommunication.Sincethereare(jl\u00001)\u0002(il\u00001)independentunitsofcom-putation,wecanutilizeatmost(jl\u00001)\u0002(il\u00001)processors.Byorganizingtheprocessorsasiftheywereina2-dimensionalarray,withID's(j;i),where2\u0014j<jland2\u0014i<il,theSPMDprogramtobeexecutedbyeachprocessorissimplythebodyintheinnerloopinFig.11.24.830CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(j=2;j<=jl;j++)for(i=2;i<=il;i++){AP[j,i]=...;T[j,i]=1.0/(1.0+AP[j,i]);D[2,j,i]=T[j,i]*AP[j,i];DW[1,2,j,i]=T[j,i]*DW[1,2,j,i];for(k=3;k<=kl-1;k++){AM[j,i]=AP[j,i];AP[j,i]=...;T[j,i]=...AP[j,i]-AM[j,i]*D[k-1,j,i]...;D[k,j,i]=T[j,i]*AP[j,i];DW[1,k,j,i]=T[j,i]*(DW[1,k,j,i]+DW[1,k-1,j,i])...;}...for(k=kl-1;k>=2;k--)DW[1,k,j,i]=DW[1,k,j,i]+D[k,j,i]*DW[1,k+1,j,i];}Figure11.24:CodeofFig.11.23transformedtocarryoutermostparallelloopsTheaboveexampleillustratesthebasicapproachto\fndingsynchronization-freeparallelism.We\frstsplitthecomputationintoasmanyindependentunitsaspossible.Thispartitioningexposestheschedulingchoicesavailable.Wethenassigncomputationunitstotheprocessors,dependingonthenumberofprocessorswehave.Finally,wegenerateanSPMDprogramthatisexecutedoneachprocessor.11.7.2A\u000eneSpacePartitionsAloopnestissaidtohavekdegreesofparallelismifithas,withinthenest,kparallelizableloops|thatis,loopssuchthattherearenodatadependenciesbetweendi\u000berentiterationsoftheloops.Forexample,thecodeinFig.11.24has2degreesofparallelism.Itisconvenienttoassigntheoperationsinacom-putationwithkdegreesofparallelismtoaprocessorarraywithkdimensions.Weshallassumeinitiallythateachdimensionoftheprocessorarrayhasasmanyprocessorsasthereareiterationsofthecorrespondingloop.Afteralltheindependentcomputationunitshavebeenfound,weshallmapthese\\virtual\"processorstotheactualprocessors.Inpractice,eachprocessorshouldberesponsibleforafairlylargenumberofiterations,becauseotherwisethereisnotenoughworktoamortizeawaytheoverheadofparallelization.Webreakdowntheprogramtobeparallelizedintoelementarystatements,suchas3-addressstatements.Foreachstatement,we\fndana\u000enespacepartitionthatmapseachdynamicinstanceofthestatement,asidenti\fedbyitsloopindexes,toaprocessorID.11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM831Example11.40:Asdiscussedabove,thecodeofFig.11.24hastwodegreesofparallelism.Weviewtheprocessorarrayasa2-dimensionalspace.Let(p1;p2)betheIDofaprocessorinthearray.TheparallelizationschemediscussedinSection11.7.1canbedescribedbysimplea\u000enepartitionfunctions.Allthestatementsinthe\frstloopnesthavethissamea\u000enepartition:\u0014p1p2\u0015=\u00141001\u0015\u0014ji\u0015+\u001400\u0015Allthestatementsinthesecondandthirdloopnestshavethefollowingsamea\u000enepartition:\u0014p1p2\u0015=\u0014010001\u001524kji35+\u001400\u00152Thealgorithmto\fndsynchronization-freeparallelismconsistsofthreesteps:1.Find,foreachstatementintheprogram,ana\u000enepartitionthatmaxi-mizesthedegreeofparallelism.Notethatwegenerallytreatthestate-ment,ratherthanthesingleaccess,astheunitofcomputation.Thesamea\u000enepartitionmustapplytoeachaccessinthestatement.Thisgroupingofaccessesmakessense,sincethereisalmostalwaysdependenceamongaccessesofthesamestatementanyway.2.Assigntheresultingindependentcomputationunitsamongtheprocessors,andchooseaninterleavingofthestepsoneachprocessor.Thisassignmentisdrivenbylocalityconsiderations.3.GenerateanSPMDprogramtobeexecutedoneachprocessor.Weshalldiscussnexthowto\fndthea\u000enepartitionfunctions,howtogen-erateasequentialprogramthatexecutesthepartitionsserially,andhowtogenerateanSPMDprogramthatexecuteseachpartitiononadi\u000berentpro-cessor.AfterwediscusshowparallelismwithsynchronizationsishandledinSections11.8through11.9.9,wereturntoStep2aboveinSection11.10anddiscusstheoptimizationoflocalityforuniprocessorsandmultiprocessors.11.7.3Space-PartitionConstraintsTorequirenocommunication,eachpairofoperationsthatshareadatadepen-dencemustbeassignedtothesameprocessor.Werefertotheseconstraintsas\\space-partitionconstraints.\"Anymappingthatsatis\festheseconstraintscre-atespartitionsthatareindependentofoneanother.Notethatsuchconstraintscanbesatis\fedbyputtingalltheoperationsinasinglepartition.Unfortu-nately,that\\solution\"doesnotyieldanyparallelism.Ourgoalistocreate832CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYasmanyindependentpartitionsaspossiblewhilesatisfyingthespace-partitionconstraints;thatis,operationsarenotplacedonthesameprocessorunlessitisnecessary.Whenwerestrictourselvestoa\u000enepartitions,theninsteadofmaximizingthenumberofindependentunits,wemaymaximizethedegree(numberofdimensions)ofparallelism.Itissometimespossibletocreatemoreindependentunitsifwecanusepiecewisea\u000enepartitions.Apiecewisea\u000enepartitiondividesinstancesofasingleaccessintodi\u000berentsetsandallowsadi\u000berenta\u000enepartitionforeachset.However,weshallnotconsidersuchanoptionhere.Formally,ana\u000enepartitionofaprogramissynchronizationfreeifandonlyifforeverytwo(notnecessarilydistinct)accessessharingadependence,F1=hF1;f1;B1;b1iinstatements1nestedind1loops,andF2=hF2;f2;B2;b2iinstatements2nestedind2loops,thepartitionshC1;c1iandhC2;c2iforstate-mentss1ands2,respectively,satisfythefollowingspace-partitionconstraints:\u000fForalli1inZd1andi2inZd2suchthata)B1i1+b1\u00150,b)B2i2+b2\u00150,andc)F1i1+f1=F2i2+f2,itisthecasethatC1i1+c1=C2i2+c2.Thegoaloftheparallelizationalgorithmisto\fnd,foreachstatement,thepartitionwiththehighestrankthatsatis\festheseconstraints.ShowninFig.11.25isadiagramillustratingtheessenceofthespace-partitionconstraints.Supposetherearetwostaticaccessesintwoloopnestswithindexvectorsi1andi2.Theseaccessesaredependentinthesensethattheyaccessatleastonearrayelementincommon,andatleastoneofthemisawrite.The\fgureshowsparticulardynamicaccessesinthetwoloopsthathap-pentoaccessthesamearrayelement,accordingtothea\u000eneaccessfunctionsF1i1+f1andF2i2+f2.Synchronizationisnecessaryunlessthea\u000enepartitionsforthetwostaticaccesses,C1i1+c1andC2i2+c2,assignthedynamicaccessestothesameprocessor.Ifwechooseana\u000enepartitionwhoserankisthemaximumoftheranksofallstatements,wegetthemaximumpossibleparallelism.However,underthispartitioningsomeprocessorsmaybeidleattimes,whileotherprocessorsareexecutingstatementswhosea\u000enepartitionshaveasmallerrank.Thissituationmaybeacceptableifthetimetakentoexecutethosestatementsisrelativelyshort.Otherwise,wecanchooseana\u000enepartitionwhoserankissmallerthanthemaximumpossible,aslongasthatrankisgreaterthan0.WeshowinExample11.41asmallprogramdesignedtoillustratethepowerofthetechnique.Realapplicationsareusuallymuchsimplerthanthis,butmayhaveboundaryconditionsresemblingsomeoftheissuesshownhere.Weshallusethisexamplethroughoutthischaptertoillustratethatprogramswith11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM833 F i + f11 1 C i + c11 Array C i + c F i + f 22 2 22 2 Processor ID 1 2 Loops 1 i iFigure11.25:Space-partitionconstraintsa\u000eneaccesseshaverelativelysimplespace-partitionconstraints,thatthesecon-straintscanbesolvedusingstandardlinearalgebratechniques,andthatthedesiredSPMDprogramcanbegeneratedmechanicallyfromthea\u000eneparti-tions.Example11.41:Thisexampleshowshowweformulatethespace-partitionconstraintsfortheprogramconsistingofthesmallloopnestwithtwostate-ments,s1ands2,showninFigure11.26.for(i=1;i<=100;i++)for(j=1;j<=100;j++){X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/Y[i,j]=Y[i,j]+X[i,j-1];/*(s2)*/}Figure11.26:AloopnestexhibitinglongchainsofdependentoperationsWeshowthedatadependencesintheprograminFigure11.27.Thatis,eachblackdotrepresentsaninstanceofstatements1,andeachwhitedotrepresentsaninstanceofstatements2.Thedotlocatedatcoordinates(i;j)representstheinstanceofthestatementthatisexecutedforthosevaluesoftheloopindexes.Note,however,thattheinstanceofs2islocatedjustbelowtheinstanceofs1forthesame(i;j)pair,sotheverticalscaleofjisgreaterthanthehorizontalscaleofi.NoticethatX[i;j]iswrittenbys1(i;j),thatis,bytheinstanceofstatements1withindexvaluesiandj.Itislaterreadbys2(i;j+1),sos1(i;j)must834CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY s s1 2 1 34526 i j j j j = 1 = 4 = 2 = 3Figure11.27:DependencesofthecodeinExample11.41precedes2(i;j+1).Thisobservationexplainstheverticalarrowsfromblackdotstowhitedots.Similarly,Y[i;j]iswrittenbys2(i;j)andlaterreadbys1(i+1;j).Thus,s2(i;j)mustprecedes1(i+1;j),whichexplainsthearrowsfromwhitedotstoblack.Itiseasytoseefromthisdiagramthatthiscodecanbeparallelizedwithoutsynchronizationbyassigningeachchainofdependentoperationstothesameprocessor.However,itisnoteasytowritetheSPMDprogramthatimplementsthismappingscheme.Whiletheloopsintheoriginalprogramhave100itera-tionseach,thereare200chains,withhalforiginatingandendingwithstatements1andtheotherhalforiginatingandendingwiths2.Thelengthsofthechainsvaryfrom1to100iterations.Sincetherearetwostatements,weareseekingtwoa\u000enepartitions,oneforeachstatement.Weonlyneedtoexpressthespace-partitionconstraintsforone-dimensionala\u000enepartitions.Theseconstraintswillbeusedlaterbythesolutionmethodthattriesto\fndalltheindependentone-dimensionala\u000enepartitionsandcombinethemtogetmultidimensionala\u000enepartitions.Wecanthusrepresentthea\u000enepartitionforeachstatementbya1\u00022matrixanda1\u00021vectortotranslatethevectorofindexes[i;j]intoasingleprocessornumber.Leth[C11C12];[c1]i;h[C21C22];[c2]i,betheone-dimensionala\u000enepartitionsforthestatementss1ands2,respectively.Weapplysixdatadependencetests:1.WriteaccessX[i;j]anditselfinstatements1,2.WriteaccessX[i;j]withreadaccessX[i;j]instatements1,3.WriteaccessX[i;j]instatements1withreadaccessX[i;j\u00001]instate-ments2,11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM8354.WriteaccessY[i;j]anditselfinstatements2,5.WriteaccessY[i;j]withreadaccessY[i;j]instatements2,6.WriteaccessY[i;j]instatements2withreadaccessY[i\u00001;j]instatements1.Weseethatthedependencetestsareallsimpleandhighlyrepetitive.Theonlydependencespresentinthiscodeoccurincase(3)betweeninstancesofaccessesX[i;j]andX[i;j\u00001]andincase(6)betweenY[i;j]andY[i\u00001;j].Thespace-partitionconstraintsimposedbythedatadependencebetweenX[i;j]instatements1andX[i;j\u00001]instatements2canbeexpressedinthefollowingterms:Forall(i;j)and(i0;j0)suchthat1\u0014i\u00141001\u0014j\u00141001\u0014i0\u00141001\u0014j0\u0014100i=i0j=j0\u00001wehave\u0002C11C12\u0003\u0014ij\u0015+\u0002c1\u0003=\u0002C21C22\u0003\u0014i0j0\u0015+\u0002c2\u0003Thatis,the\frstfourconditionssaythat(i;j)and(i0;j0)liewithintheitera-tionspaceoftheloopnest,andthelasttwoconditionssaythatthedynamicaccessesX[i;j]andX[i;j\u00001]touchthesamearrayelement.Wecanderivethespace-partitionconstraintforaccessesY[i\u00001;j]instatements2andY[i;j]instatements1inasimilarmanner.211.7.4SolvingSpace-PartitionConstraintsOncethespace-partitionconstraintshavebeenextracted,standardlinearalge-bratechniquescanbeusedto\fndthea\u000enepartitionssatisfyingtheconstraints.Letus\frstshowhowwe\fndthesolutiontoExample11.41.Example11.42:Wecan\fndthea\u000enepartitionsforExample11.41withthefollowingsteps:1.Createthespace-partitionconstraintsshowninExample11.41.Weusetheloopboundsindeterminingthedatadependences,buttheyarenotusedintherestofthealgorithmotherwise.2.Theunknownvariablesintheequalitiesarei,i0,j,j0,C11,C12,c1,C21,C22,andc2.Reducethenumberofunknownsbyusingtheequalitiesduetotheaccessfunctions:i=i0andj=j0\u00001.WedosousingGaussianelimination,whichreducesthefourvariablestotwo:sayt1=i=i0,andt2=j=j0\u00001.Theequalityforthepartitionbecomes\u0002C11\u0000C21C12\u0000C22\u0003\u0014t1t2\u0015+\u0002c1\u0000c2\u0000C22\u0003=0836CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY3.Theequationaboveholdsforallcombinationsoft1andt2.Thus,itmustbethatC11\u0000C21=0C12\u0000C22=0c1\u0000c2\u0000C22=0IfweperformthesamestepsontheconstraintbetweentheaccessesY[i\u00001;j]andY[i;j],wegetC11\u0000C21=0C12\u0000C22=0c1\u0000c2+C21=0Simplifyingalltheconstraintstogether,weobtainthefollowingrelation-ships:C11=C21=\u0000C22=\u0000C12=c2\u0000c1:4.Findalltheindependentsolutionstotheequationsinvolvingonlyun-knownsinthecoe\u000ecientmatrix,ignoringtheunknownsintheconstantvectorsinthisstep.Thereisonlyoneindependentchoiceinthecoef-\fcientmatrix,sothea\u000enepartitionsweseekcanhaveatmostarankofone.WekeepthepartitionassimpleaspossiblebysettingC11=1.Wecannotassign0toC11becausethatwillcreatearank-0coe\u000ecientmatrix,whichmapsalliterationstothesameprocessor.ItthenfollowsthatC21=1,C22=\u00001,C12=\u00001.5.Findtheconstantterms.Weknowthatthedi\u000berencebetweenthecon-stantterms,c2\u0000c1,mustbe\u00001.Wegettopicktheactualvalues,however.Tokeepthepartitionssimple,wepickc2=0;thusc1=\u00001.LetpbetheIDoftheprocessorexecutingiteration(i;j).Intermsofp,thea\u000enepartitioniss1:\u0002p\u0003=\u00021\u00001\u0003\u0014ij\u0015+\u0002\u00001\u0003s2:\u0002p\u0003=\u00021\u00001\u0003\u0014ij\u0015+\u00020\u0003Thatis,the(i;j)thiterationofs1isassignedtotheprocessorp=i\u0000j\u00001,andthe(i;j)thiterationofs2isassignedtoprocessorp=i\u0000j.2Algorithm11.43:Findingahighest-rankedsynchronization-freea\u000enepar-titionforaprogram.INPUT:Aprogramwitha\u000enearrayaccesses.11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM837OUTPUT:Apartition.METHOD:Dothefollowing:1.Findalldata-dependentpairsofaccessesinaprogramforeachpairofdata-dependentaccesses,F1=hF1;f1;B1;b1iinstatements1nestedind1loopsandF2=hF2;f2;B2;b2iinstatements2nestedind2loops.LethC1;c1iandhC2;c2irepresentthe(currentlyunknown)partitionsofstatementss1ands2,respectively.Thespace-partitionconstraintsstatethatifF1i1+f1=F2i2+f2thenC1i1+c1=C2i2+c2foralli1andi2,withintheirrespectiveloopbounds.Weshallgeneralizethedomainofiterationstoincludealli1inZd1andi2inZd2;thatis,theboundsareallassumedtobeminusin\fnitytoin\fnity.Thisassumptionmakessense,sinceana\u000enepartitioncannotmakeuseofthefactthatanindexvariablecantakeononlyalimitedsetofintegervalues.2.Foreachpairofdependentaccesses,wereducethenumberofunknownsintheindexvectors.(a)NotethatFi+fisthesamevectoras\u0002Ff\u0003\u0014i1\u0015Thatis,byaddinganextracomponent1atthebottomofcolumn-vectori,wecanmakethecolumn-vectorfbeanadditional,lastcolumnofthematrixF.WemaythusrewritetheequalityoftheaccessfunctionsF1i1+f1=F2i2+f2as\u0002F1\u0000F2(f1\u0000f2)\u000324i1i2135=0(b)Theaboveequationswillingeneralhavemorethanonesolution.However,wemaystilluseGaussianeliminationtosolvetheequationsforthecomponentsofi1andi2asbestwecan.Thatis,eliminateasmanyvariablesaspossibleuntilweareleftwithonlyvariablesthatcannotbeeliminated.Theresultingsolutionfori1andi2willhavetheform24i1i2135=U\u0014t1\u0015838CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYwhereUisanupper-triangularmatrixandtisavectoroffreevari-ablesrangingoverallintegers.(c)WemayusethesametrickasinStep(2a)torewritetheequalityofthepartitions.Substitutingthevector(i1;i2;1)withtheresultfromStep(2b),wecanwritetheconstraintsonthepartitionsas\u0002C1\u0000C2(c1\u0000c2)\u0003U\u0014t1\u0015=03.Dropthenonpartitionvariables.Theequationsaboveholdforallcombi-nationsoftif\u0002C1\u0000C2(c1\u0000c2)\u0003U=0:RewritetheseequationsintheformAx=0,wherexisavectorofalltheunknowncoe\u000ecientsofthea\u000enepartitions.4.Findtherankofthea\u000enepartitionandsolveforthecoe\u000ecientmatrices.Sincetherankofana\u000enepartitionisindependentofthevalueoftheconstanttermsinthepartition,weeliminatealltheunknownsthatcomefromtheconstantvectorslikec1orc2,thusreplacingAx=0bysim-pli\fedconstraintsA0x0=0.FindthesolutionstoA0x0=0,expressingthemasB,asetofbasisvectorsspanningthenullspaceofA0.5.Findtheconstantterms.Deriveonerowofthedesireda\u000enepartitionfromeachbasisvectorinB,andderivetheconstanttermsusingAx=0.2NotethatStep3ignorestheconstraintsimposedbytheloopboundsonvariablest.Theconstraintsareonlystricterasaresult,andthealgorithmmustthereforebesafe.Thatis,weplaceconstraintsontheC'sandc'sassumingtisarbitrary.Conceivably,therewouldbeothersolutionsfortheC'sandc'sthatarevalidonlybecausesomevaluesoftareimpossible.Notsearchingfortheseothersolutionsmaycauseustomissanoptimization,butcannotcausetheprogramtobechangedtoaprogramthatdoessomethingdi\u000berentfromwhattheoriginalprogramdoes.11.7.5ASimpleCode-GenerationAlgorithmAlgorithm11.43generatesa\u000enepartitionsthatsplitcomputationsintoinde-pendentpartitions.Partitionscanbeassignedarbitrarilytodi\u000berentproces-sors,sincetheyareindependentofoneanother.Aprocessormaybeassignedmorethanonepartitionandcaninterleavetheexecutionofitspartitions,aslongasoperationswithineachpartition,whichnormallyhavedatadependences,areexecutedsequentially.11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM839Itisrelativelyeasytogenerateacorrectprogramgivenana\u000enepartition.We\frstintroduceAlgorithm11.45,asimpleapproachtogeneratingcodeforasingleprocessorthatexecuteseachoftheindependentpartitionssequentially.Suchcodeoptimizestemporallocality,sincearrayaccessesthathaveseveralusesareverycloseintime.Moreover,thecodeeasilycanbeturnedintoanSPMDprogramthatexecuteseachpartitiononadi\u000berentprocessor.Thecodegeneratedis,unfortunately,ine\u000ecient;weshallnextdiscussoptimizationstomakethecodeexecutee\u000eciently.Theessentialideaisasfollows.Wearegivenboundsfortheindexvariablesofaloopnest,andwehavedetermined,inAlgorithm11.43,apartitionfortheaccessesofaparticularstatements.Supposewewishtogeneratesequentialcodethatperformstheactionofeachprocessorsequentially.WecreateanoutermostloopthatiteratesthroughtheprocessorIDs.Thatis,eachiterationofthisloopperformstheoperationsassignedtoaparticularprocessorID.Theoriginalprogramisinsertedastheloopbodyofthisloop;inaddition,atestisaddedtoguardeachoperationinthecodetoensurethateachprocessoronlyexecutestheoperationsassignedtoit.Inthisway,weguaranteethattheprocessorexecutesalltheinstructionsassignedtoit,anddoessointheoriginalsequentialorder.Example11.44:Letusgeneratecodethatexecutestheindependentparti-tionsinExample11.41sequentially.TheoriginalsequentialprogramisfromFig.11.26isrepeatedhereasFig.11.28.for(i=1;i<=100;i++)for(j=1;j<=100;j++){X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/Y[i,j]=Y[i,j]+X[i,j-1];/*(s2)*/}Figure11.28:RepeatofFig.11.26InExample11.42,thea\u000enepartitioningalgorithmfoundonedegreeofparallelism.Thus,theprocessorspacecanberepresentedbyasinglevariablep.Recallalsofromthatexamplethatweselectedana\u000enepartitionthat,forallvaluesofindexvariablesiandjwith1\u0014i\u0014100and1\u0014j\u0014100,assigned1.Instance(i;j)ofstatements1toprocessorp=i\u0000j\u00001,and2.Instance(i;j)ofstatements2toprocessorp=i\u0000j.Wecangeneratethecodeinthreesteps:1.Foreachstatement,\fndalltheprocessorIDsparticipatinginthecom-putation.Wecombinetheconstraints1\u0014i\u0014100and1\u0014j\u0014100withoneoftheequationsp=i\u0000j\u00001orp=i\u0000j,andprojectawayiandjtogetthenewconstraints840CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY(a)\u0000100\u0014p\u001498ifweusethefunctionp=i\u0000j\u00001thatwegetforstatements1,and(b)\u000099\u0014p\u001499ifweusep=i\u0000jfromstatements2.2.FindalltheprocessorIDsparticipatinginanyofthestatements.Whenwetaketheunionoftheseranges,weget\u0000100\u0014p\u001499;theseboundsaresu\u000ecienttocoverallinstancesofbothstatementss1ands2.3.Generatethecodetoiteratethroughthecomputationsineachpartitionsequentially.Thecode,showninFig.11.29,hasanouterloopthatiteratesthroughallthepartitionIDsparticipatinginthecomputation(line(1)).Eachpartitiongoesthroughthemotionofgeneratingtheindexesofalltheiterationsintheoriginalsequentialprograminlines(2)and(3)sothatitcanpickouttheiterationstheprocessorpissupposedtoexecute.Thetestsoflines(4)and(6)makesurethatstatementss1ands2areexecutedonlywhentheprocessorpwouldexecutethem.Thegeneratedcode,whilecorrect,isextremelyine\u000ecient.First,eventhougheachprocessorexecutescomputationfromatmost99iterations,itgen-eratesloopindexesfor100\u0002100iterations,anorderofmagnitudemorethannecessary.Second,eachadditionintheinnermostloopisguardedbyatest,creatinganotherconstantfactorofoverhead.Thesetwokindsofine\u000ecienciesaredealtwithinSections11.7.6and11.7.7,respectively.21)for(p=-100;p<=99;p++)2)for(i=1;i<=100;i++)3)for(j=1;j<=100;j++){4)if(p==i-j-1)5)X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/6)if(p==i-j)7)Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/8)}Figure11.29:AsimplerewritingofFig.11.28thatiteratesoverprocessorspaceAlthoughthecodeofFig.11.29appearsdesignedtoexecuteonaunipro-cessor,wecouldtaketheinnerloops,lines(2)through(8),andexecutethemon200di\u000berentprocessors,eachofwhichhadadi\u000berentvalueforp,from\u0000100to99.Or,wecouldpartitiontheresponsibilityfortheinnerloopsamonganynumberofprocessorslessthan200,aslongaswearrangedthateachprocessorknewwhatvaluesofpitwasresponsibleforandexecutedlines(2)through(8)forjustthosevaluesofp.Algorithm11.45:Generatingcodethatexecutespartitionsofaprogramsequentially.11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM841INPUT:AprogramPwitha\u000enearrayaccesses.EachstatementsintheprogramhasassociatedboundsoftheformBsi+bs\u00150,whereiisthevectorofloopindexesfortheloopnestinwhichstatementsappears.AlsoassociatedwithstatementsisapartitionCsi+cs=pwherepisanm-dimensionalvectorofvariablesrepresentingaprocessorID;misthemaximum,overallstatementsinprogramP,oftherankofthepartitionforthatstatement.OUTPUT:AprogramequivalenttoPbutiteratingovertheprocessorspaceratherthanoverloopindexes.METHOD:Dothefollowing:1.Foreachstatement,useFourier-Motzkineliminationtoprojectoutalltheloopindexvariablesfromthebounds.2.UseAlgorithm11.13todetermineboundsonthepartitionID's.3.Generateloops,oneforeachofthemdimensionsofprocessorspace.Letp=[p1;p2;:::;pm]bethevectorofvariablesfortheseloops;thatis,thereisonevariableforeachdimensionoftheprocessorspace.EachloopvariablepirangesovertheunionofthepartitionspacesforallstatementsintheprogramP.Notethattheunionofthepartitionspacesisnotnecessarilyconvex.Tokeepthealgorithmsimple,insteadofenumeratingonlythosepartitionsthathaveanonemptycomputationtoperform,setthelowerboundofeachpitotheminimumofallthelowerboundsimposedbyallstatementsandtheupperboundofeachpitothemaximumofalltheupperboundsimposedbyallstatements.Somevaluesofpmaytherebyhavenooperations.Thecodetobeexecutedbyeachpartitionistheoriginalsequentialpro-gram.However,everystatementisguardedbyapredicatesothatonlythoseoperationsbelongingtothepartitionareexecuted.2AnexampleofAlgorithm11.45willfollowshortly.Bearinmind,however,thatwearestillfarfromtheoptimalcodefortypicalexamples.11.7.6EliminatingEmptyIterationsWenowdiscussthe\frstofthetwotransformationsnecessarytogenerateef-\fcientSPMDcode.Thecodeexecutedbyeachprocessorcyclesthroughalltheiterationsintheoriginalprogramandpicksouttheoperationsthatitissupposedtoexecute.Ifthecodehaskdegreesofparallelism,thee\u000bectisthateachprocessorperformskordersofmagnitudemorework.Thepurposeofthe\frsttransformationistotightentheboundsoftheloopstoeliminatealltheemptyiterations.Webeginbyconsideringthestatementsintheprogramoneatatime.Astatement'siterationspacetobeexecutedbyeachpartitionistheoriginalitera-tionspaceplustheconstraintimposedbythea\u000enepartition.Wecangenerate842CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYtightboundsforeachstatementbyapplyingAlgorithm11.13tothenewiter-ationspace;thenewindexvectorisliketheoriginalsequentialindexvector,withprocessorID'saddedasoutermostindexes.Recallthatthealgorithmwillgeneratetightboundsforeachindexintermsofsurroundingloopindexes.After\fndingtheiterationspacesofthedi\u000berentstatements,wecombinethem,loopbyloop,makingtheboundstheunionofthoseforeachstatement.Someloopsenduphavingasingleiteration,asillustratedbyExample11.46below,andwecansimplyeliminatetheloopandsimplysettheloopindextothevalueforthatiteration.Example11.46:FortheloopofFig.11.30(a),Algorithm11.43willcreatethea\u000enepartitions1:p=is2:p=jAlgorithm11.45willcreatethecodeofFig.11.30(b).ApplyingAlgorithm11.13tostatements1producesthebound:p\u0014i\u0014p,orsimplyi=p.Similarly,thealgorithmdeterminesj=pforstatements2.Thus,wegetthecodeofFig.11.30(c).Copypropagationofvariablesiandjwilleliminatetheunnec-essarytestandproducethecodeofFig.11.30(d).2WenowreturntoExample11.44andillustratethesteptomergemultipleiterationspacesfromdi\u000berentstatementstogether.Example11.47:LetusnowtightentheloopboundsofthecodeinExam-ple11.44.Theiterationspaceexecutedbypartitionpforstatements1isde\fnedbythefollowingequalitiesandinequalities:\u0000100\u0014p\u0014991\u0014i\u00141001\u0014j\u0014100i\u0000p\u00001=jApplyingAlgorithm11.13totheabovecreatestheconstraintsshowninFig.11.31(a).Algorithm11.13generatestheconstraintp+2\u0014i\u0014100+p+1fromi\u0000p\u00001=jand1\u0014j\u0014100,andtightenstheupperboundofpto98.Likewise,theboundsforeachofthevariablesforstatements2areshowninFig.11.31(b).Theiterationspacesfors1ands2inFig.11.31aresimilar,butasex-pectedfromFig.11.27,certainlimitsdi\u000berby1betweenthetwo.ThecodeinFig.11.32executesoverthisunionofiterationspaces.Forexample,foriusemax(1;p+1)asthelowerboundandmin(100;101+p)astheupperbound.Notethattheinnermostloophas2iterationsexceptthatithasonlyonethe\frstandlasttimeitisexecuted.Theoverheadingeneratingloopindexesisthusreducedbyanorderofmagnitude.Sincetheiterationspaceexecutedislargerthaneitherthatofs1ands2,conditionalsarestillnecessarytoselectwhenthesestatementsareexecuted.211.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM843for(i=1;i<=N;i++)Y[i]=Z[i];/*(s1)*/for(j=1;j<=N;j++)X[j]=Y[j];/*(s2)*/(a)Initialcode.for(p=1;p<=N;p++){for(i=1;i<=N;i++)if(p==i)Y[i]=Z[i];/*(s1)*/for(j=1;j<=N;j++)if(p==j)X[j]=Y[j];/*(s2)*/}(b)ResultofapplyingAlgorithm11.45.for(p=1;p<=N;p++){i=p;if(p==i)Y[i]=Z[i];/*(s1)*/j=p;if(p==j)X[j]=Y[j];/*(s2)*/}(c)AfterapplyingAlgorithm11.13.for(p=1;p<=N;p++){Y[p]=Z[p];/*(s1)*/X[p]=Y[p];/*(s2)*/}(d)Finalcode.Figure11.30:CodeforExample11.46844CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYj:i\u0000p\u00001\u0014j\u0014i\u0000p\u000011\u0014j\u0014100i:p+2\u0014i\u0014100+p+11\u0014i\u0014100p:\u0000100\u0014p\u001498(a)Boundsforstatements1.j:i\u0000p\u0014j\u0014i\u0000p1\u0014j\u0014100i:p+1\u0014i\u0014100+p1\u0014i\u0014100p:\u000099\u0014p\u001499(b)Boundsforstatements2.Figure11.31:Tighterboundsonp,i,andjforFig.11.2911.7.7EliminatingTestsfromInnermostLoopsThesecondtransformationistoremoveconditionaltestsfromtheinnerloops.Asseenfromtheexamplesabove,conditionaltestsremainiftheiterationspacesofstatementsintheloopintersectbutnotcompletely.Toavoidtheneedforconditionaltests,wesplittheiterationspaceintosubspaces,eachofwhichexecutesthesamesetofstatements.Thisoptimizationrequirescodetobeduplicatedandshouldonlybeusedtoremoveconditionalsintheinnerloops.Tosplitaniterationspacetoreducetestsininnerloops,weapplythefollowingstepsrepeatedlyuntilweremoveallthetestsintheinnerloops:1.Selectaloopthatconsistsofstatementswithdi\u000berentbounds.2.Splittheloopusingaconditionsuchthatsomestatementisexcludedfromatleastoneofitscomponents.Wechoosetheconditionfromamongtheboundariesoftheoverlappingdi\u000berentpolyhedra.Ifsomestatementhasallitsiterationsinonlyoneofthehalfplanesofthecondition,thensuchaconditionisuseful.3.Generatecodeforeachoftheseiterationspacesseparately.Example11.48:LetusremovetheconditionalsfromthecodeofFig.11.32.Statementss1ands2aremappedtothesamesetofpartitionID'sexceptfor11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM845for(p=-100;p<=99;p++)for(i=max(1,p+1);i<=min(100,101+p);i++)for(j=max(1,i-p-1);j<=min(100,i-p);j++){if(p==i-j-1)X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/if(p==i-j)Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/}Figure11.32:CodeofFig.11.29improvedbytighterloopboundstheboundarypartitionsateitherend.Thus,weseparatethepartitionspaceintothreesubspaces:1.p=\u0000100,2.\u000099\u0014p\u001498,and3.p=99.Thecodeforeachsubspacecanthenbespecializedforthevalue(s)ofpcontained.Figure11.33showstheresultingcodeforeachofthethreeiterationspaces.Noticethatthe\frstandthirdspacesdonotneedloopsoniorj,becausefortheparticularvalueofpthatde\fneseachspace,theseloopsaredegenerate;theyhaveonlyoneiteration.Forexample,inspace(1),substitutingp=\u0000100intheloopboundsrestrictsito1,andsubsequentlyjto100.Theassignmentstopinspaces(1)and(3)areevidentlydeadcodeandcanbeeliminated.Nextwesplittheloopwithindexiinspace(2).Again,the\frstandlastiterationsofloopindexiaredi\u000berent.Thus,wesplittheloopintothreesubspaces:a)max(1;p+1)\u0014i<p+2,whereonlys2isexecuted,b)max(1;p+2)\u0014i\u0014min(100;100+p),whereboths1ands2areexecuted,andc)101+p<i\u0014min(101+p;100),whereonlys1isexecuted.Theloopnestforspace(2)inFig.11.33canthusbewrittenasinFig.11.34(a).Figure11.34(b)showstheoptimizedprogram.WehavesubstitutedFig.11.34(a)fortheloopnestinFig.11.33.Wealsopropagatedoutassignmentstop,i,andjintothearrayaccesses.Whenoptimizingattheintermediate-codelevel,someoftheseassignmentswillbeidenti\fedascommonsubexpressionsandre-extractedfromthearray-accesscode.2846CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY/*space(1)*/p=-100;i=1;j=100;X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*//*space(2)*/for(p=-99;p<=98;p++)for(i=max(1,p+1);i<=min(100,101+p);i++)for(j=max(1,i-p-1);j<=min(100,i-p);j++){if(p==i-j-1)X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/if(p==i-j)Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/}/*space(3)*/p=99;i=100;j=1;Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/Figure11.33:Splittingtheiterationspaceonthevalueofp11.7.8Source-CodeTransformsWehaveseenhowwecanderivefromsimplea\u000enepartitionsforeachstatementprogramsthataresigni\fcantlydi\u000berentfromtheoriginalsource.Itisnotapparentfromtheexamplesseensofarhowa\u000enepartitionscorrelatewithchangesatthesourcelevel.Thissectionshowsthatwecanreasonaboutsourcecodechangesrelativelyeasilybybreakingdowna\u000enepartitionsintoaseriesofprimitivetransforms.SevenPrimitiveA\u000eneTransformsEverya\u000enepartitioncanbeexpressedasaseriesofprimitivea\u000enetransforms,eachofwhichcorrespondstoasimplechangeatthesourcelevel.Therearesevenkindsofprimitivetransforms:the\frstfourprimitivesareillustratedinFig.11.35,thelastthree,alsoknownasunimodulartransforms,areillustratedinFig.11.36.The\fgureshowsoneexampleforeachprimitive:asource,ana\u000eneparti-tion,andtheresultingcode.Wealsodrawthedatadependencesforthecodebeforeandafterthetransforms.Fromthedatadependencediagrams,weseethateachprimitivecorrespondstoasimplegeometrictransformandinducesarelativelysimplecodetransform.Thesevenprimitivesare:11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM847/*space(2)*/for(p=-99;p<=98;p++){/*space(2a)*/if(p>=0){i=p+1;j=1;Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/}/*space(2b)*/for(i=max(1,p+2);i<=min(100,100+p);i++){j=i-p-1;X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/j=i-p;Y[i,j]=X[i,j-1]+Y[i,j];/*(s2)*/}/*space(2c)*/if(p<=-1){i=101+p;j=100;X[i,j]=X[i,j]+Y[i-1,j];/*(s1)*/}}(a)Splittingspace(2)onthevalueofi./*space(1);p=-100*/X[1,100]=X[1,100]+Y[0,100];/*(s1)*//*space(2)*/for(p=-99;p<=98;p++){if(p>=0)Y[p+1,1]=X[p+1,0]+Y[p+1,1];/*(s2)*/for(i=max(1,p+2);i<=min(100,100+p);i++){X[i,i-p-1]=X[i,i-p-1]+Y[i-1,i-p-1];/*(s1)*/Y[i,i-p]=X[i,i-p-1]+Y[i,i-p];/*(s2)*/}if(p<=-1)X[101+p,100]=X[101+p,100]+Y[101+p-1,100];/*(s1)*/}/*space(3);p=99*/Y[100,1]=X[100,0]+Y[100,1];/*(s2)*/(b)OptimizedcodeequivalenttoFig.11.28.Figure11.34:CodeforExample11.48848CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM849850CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.7.FINDINGSYNCHRONIZATION-FREEPARALLELISM851statementsnestedinthesameloopfollowthelexicographicorder.Geometri-cally,dependencesofatwo-dimensionalloopnestalwayspointwithintherange[0\u000e;180\u000e),meaningthattheangleofthedependencemustbebelow180\u000e,butnolessthan0\u000e.Thea\u000enetransformschangetheorderingofiterationssuchthatallthedependencesarefoundonlybetweenoperationsnestedwithinthesameiterationoftheoutermostloop.Inotherwords,therearenodependenceedgesattheboundariesofiterationsintheoutermostloop.Wecanparallelizesimplesourcecodesbydrawingtheirdependencesand\fndingsuchtransformsgeometrically.11.7.9ExercisesforSection11.7Exercise11.7.1:Forthefollowingloopfor(i=2;i<100;i++)A[i]=A[i-2];a)Whatisthelargestnumberofprocessorsthatcanbeusede\u000bectivelytoexecutethisloop?b)Rewritethecodewithprocessorpasaparameter.c)Setupand\fndonesolutiontothespace-partitionconstraintsforthisloop.d)Whatisthea\u000enepartitionofhighestrankforthisloop?Exercise11.7.2:RepeatExercise11.7.1fortheloopnestsinFig.11.37.Exercise11.7.3:Rewritethefollowingcodefor(i=0;i<100;i++)A[i]=2*A[i];for(j=0;j<100;j++)A[j]=A[j]+1;soitconsistsofasingleloop.Rewritetheloopintermsofaprocessornumberpsothecodecanbepartitionedamong100processors,withiterationpexecutedbyprocessorp.Exercise11.7.4:Inthefollowingcodefor(i=1;i<100;i++)for(j=1;j<100;j++)/*(s)*/A[i,j]=(A[i-1,j]+A[i+1,j]+A[i,j-1]+A[i,j+1])/4;852CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(i=0;i<=97;i++)A[i]=A[i+2];(a)for(i=1;i<=100;i++)for(j=1;j<=100;j++)for(k=1;k<=100;k++){A[i,j,k]=A[i,j,k]+B[i-1,j,k];B[i,j,k]=B[i,j,k]+C[i,j-1,k];C[i,j,k]=C[i,j,k]+A[i,j,k-1];}(!b)for(i=1;i<=100;i++)for(j=1;j<=100;j++)for(k=1;k<=100;k++){A[i,j,k]=A[i,j,k]+B[i-1,j,k];B[i,j,k]=B[i,j,k]+A[i,j-1,k];C[i,j,k]=C[i,j,k]+A[i,j,k-1]+B[i,j,k];}(!c)Figure11.37:CodeforExercise11.7.2theonlyconstraintsarethatthestatementsthatformsthebodyoftheloopnestmustexecuteiterationss(i\u00001;j)ands(i;j\u00001)beforeexecutingiterations(i;j).Verifythatthesearetheonlynecessaryconstraints.Thenrewritethecodesothattheouterloophasindexvariablep,andonthepthiterationoftheouterloop,allinstancesofs(i;j)suchthati+j=pareexecuted.Exercise11.7.5:RepeatExercise11.7.4,butarrangethatonthepthiterationoftheouterloop,instancesofssuchthati\u0000j=pareexecuted.!Exercise11.7.6:Combinethefollowingloopsfor(i=0;i<100;i++)A[i]=B[i];for(j=98;j>=0;j=j-2)B[i]=i;intoasingleloop,preservingalldependencies.11.8.SYNCHRONIZATIONBETWEENPARALLELLOOPS853Exercise11.7.7:Showthatthematrix\u00142111\u0015isunimodular.Describethetransformationitperformsonatwo-dimensionalloopnest.Exercise11.7.8:RepeatExercise11.7.7onthematrix\u00141325\u001511.8SynchronizationBetweenParallelLoopsMostprogramshavenoparallelismifwedonotallowprocessorstoperformanysynchronizations.Butaddingevenasmallconstantnumberofsynchronizationoperationstoaprogramcanexposemoreparallelism.Weshall\frstdiscussparallelismmadepossiblebyaconstantnumberofsynchronizationsinthissectionandthegeneralcase,whereweembedsynchronizationoperationsinloops,inthenext.11.8.1AConstantNumberofSynchronizationsProgramswithnosynchronization-freeparallelismmaycontainasequenceofloops,someofwhichareparallelizableiftheyareconsideredindependently.Wecanparallelizesuchloopsbyintroducingsynchronizationbarriersbeforeandaftertheirexecution.Example11.49illustratesthepoint.for(i=1;i<n;i++)for(j=0;j<n;j++)X[i,j]=f(X[i,j]+X[i-1,j]);for(i=0;i<n;i++)for(j=1;j<n;j++)X[i,j]=g(X[i,j]+X[i,j-1]);Figure11.38:TwosequentialloopnestsExample11.49:InFig.11.38isaprogramrepresentativeofanADI(Alter-natingDirectionImplicit)integrationalgorithm.Thereisnosynchronization-freeparallelism.Dependencesinthe\frstloopnestrequirethateachprocessorworksonacolumnofarrayX;however,dependencesinthesecondloopnestrequirethateachprocessorworksonarowofarrayX.Fortheretobenocom-munication,theentirearrayhastoresideonthesameprocessor,hencethere854CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYisnoparallelism.Weobserve,however,thatbothloopsareindependentlyparallelizable.Onewaytoparallelizethecodeistohavedi\u000berentprocessorsworkondi\u000berentcolumnsofthearrayinthe\frstloop,synchronizeandwaitforallprocessorsto\fnish,andthenoperateontheindividualrows.Inthisway,allthecomputationinthealgorithmcanbeparallelizedwiththeintroductionofjustonesynchronizationoperation.However,wenotethatwhileonlyonesynchronizationisperformed,thisparallelizationrequiresalmostallthedatainmatrixXtobetransferredbetweenprocessors.Itispossibletoreducetheamountofcommunicationbyintroducingmoresynchronizations,whichweshalldiscussinSection11.9.9.2Itmayappearthatthisapproachisapplicableonlytoprogramsconsistingofasequenceofloopnests.However,wecancreateadditionalopportunitiesfortheoptimizationthroughcodetransforms.Wecanapplyloop\fssiontodecomposeloopsintheoriginalprogramintoseveralsmallerloops,whichcanthenbeparallelizedindividuallybyseparatingthemwithbarriers.WeillustratethistechniquewithExample11.50.Example11.50:Considerthefollowingloop:for(i=1;i<=n;i++){X[i]=Y[i]+Z[i];/*(s1)*/W[A[i]]=X[i];/*(s2)*/}WithoutknowledgeofthevaluesinarrayA,wemustassumethattheaccessinstatements2maywritetoanyoftheelementsofW.Thus,theinstancesofs2mustbeexecutedsequentiallyintheordertheyareexecutedintheoriginalprogram.Thereisnosynchronization-freeparallelism,andAlgorithm11.43willsim-plyassignallthecomputationtothesameprocessor.However,attheleast,instancesofstatements1canbeexecutedinparallel.Wecanparallelizepartofthiscodebyhavingdi\u000berentprocessorsperformdi\u000berenceinstancesofstate-ments1.Then,inaseparatesequentialloop,oneprocessor,saynumbered0,executess2,asintheSPMDcodeshowninFig.11.39.211.8.2Program-DependenceGraphsTo\fndalltheparallelismmadepossiblebyaconstantnumberofsynchroniza-tions,wecanapply\fssiontotheoriginalprogramgreedily.Breakuploopsintoasmanyseparateloopsaspossible,andthenparallelizeeachloopindepen-dently.Toexposealltheopportunitiesforloop\fssion,weusetheabstractionofaprogram-dependencegraph(PDG).Aprogramdependencegraphofaprogram11.8.SYNCHRONIZATIONBETWEENPARALLELLOOPS855X[p]=Y[p]+Z[p];/*(s1)*//*synchronizationbarrier*/if(p==0)for(i=1;i<=n;i++)W[A[i]]=X[i];/*(s2)*/Figure11.39:SPMDcodefortheloopinExample11.50,withpbeingavariableholdingtheprocessorIDisagraphwhosenodesaretheassignmentstatementsoftheprogramandwhoseedgescapturethedatadependences,andthedirectionsofthedatadependence,betweenstatements.Anedgefromstatements1tostatements2existswheneversomedynamicinstanceofs1sharesadatadependencewithalaterdynamicinstanceofs2.ToconstructthePDGforaprogram,we\frst\fndthedatadependencesbetweeneverypairof(notnecessarilydistinct)staticaccessesineverypairof(notnecessarilydistinct)statements.SupposewedeterminethatthereisadependencebetweenaccessF1instatements1andaccessF2instatements2.Recallthataninstanceofastatementisspeci\fedbyanindexvectori=[i1;i2;:::;im]whereikistheloopindexofthekthoutermostloopinwhichthestatementisembedded.1.Ifthereexistsadata-dependentpairofinstances,i1ofs1andi2ofs2,andi1isexecutedbeforei2intheoriginalprogram,writteni1˚s1s2i2,thenthereisanedgefroms1tos2.2.Similarly,ifthereexistsadata-dependentpairofinstances,i1ofs1andi2ofs2,andi2˚s1s2i1,thenthereisanedgefroms2tos1.Notethatitispossibleforadatadependencebetweentwostatementss1ands2togeneratebothanedgefroms1tos2andanedgefroms2backtos1.Inthespecialcasewherestatementss1ands2arenotdistinct,i1˚s1s2i2ifandonlyifi1˚i2(i1islexicographicallylessthani2).Inthegeneralcase,s1ands2maybedi\u000berentstatements,possiblybelongingtodi\u000berentloopnests.Example11.51:FortheprogramofExample11.50,therearenodependencesamongtheinstancesofstatements1.However,theithinstanceofstatements2mustfollowtheithinstanceofstatements1.Worse,sincethereferenceW[A[i]]maywriteanyelementofarrayW,theithinstanceofs2dependsonallpreviousinstancesofs2.Thatis,statements2dependsonitself.ThePDGfortheprogramofExample11.50isshowninFig.11.40.Notethatthereisonecycleinthegraph,containings2only.2Theprogram-dependencegraphmakesiteasytodetermineifwecansplitstatementsinaloop.StatementsconnectedinacycleinaPDGcannotbe856CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY ss 12Figure11.40:Program-dependencegraphfortheprogramofExample11.50split.Ifs1!s2isadependencebetweentwostatementsinacycle,thensomeinstanceofs1mustexecutebeforesomeinstanceofs2,andviceversa.Notethatthismutualdependenceoccursonlyifs1ands2areembeddedinsomecommonloop.Becauseofthemutualdependence,wecannotexecuteallinstancesofonestatementbeforetheother,andthereforeloop\fssionisnotallowed.Ontheotherhand,ifthedependences1!s2isunidirectional,wecansplituptheloopandexecutealltheinstancesofs1\frst,thenthoseofs2.for(i=0;i<n;i++){Z[i]=Z[i]/W[i];/*(s1)*/for(j=i;j<n;j++){X[i,j]=Y[i,j]*Y[i,j];/*(s2)*/Z[j]=Z[j]+X[i,j];/*(s3)*/}}(a)Aprogram. ss 12 s3(b)Itsdependencegraph.Figure11.41:ProgramanddependencegraphforExample11.52.Example11.52:Figure11.41(b)showstheprogram-dependencegraphfortheprogramofFig.11.41(a).Statementss1ands3belongtoacycleinthegraphandthereforecannotbeplacedinseparateloops.Wecan,however,splitstatements2outandexecuteallitsinstancesbeforeexecutingtherestofthecomputation,asinFig.11.42.The\frstloopisparallelizable,butthesecondisnot.Wecanparallelizethe\frstloopbyplacingbarriersbeforeandafteritsparallelexecution.211.8.SYNCHRONIZATIONBETWEENPARALLELLOOPS857for(i=0;i<n;i++)for(j=i;j<n;j++)X[i,j]=Y[i,j]*Y[i,j];/*(s2)*/for(i=0;i<n;i++){Z[i]=Z[i]/W[i];/*(s1)*/for(j=i;j<n;j++)Z[j]=Z[j]+X[i,j];/*(s3)*/}Figure11.42:Groupingstronglyconnectedcomponentsofaloopnest11.8.3HierarchicalTimeWhiletherelation˚s1s2canbeveryhardtocomputeingeneral,thereisafamilyofprogramstowhichtheoptimizationsofthissectionarecommonlyapplied,andforwhichthereisastraightforwardwaytocomputedependencies.Assumethattheprogramisblockstructured,consistingofloopsandsimplearithmeticoperationsandnoothercontrolconstructs.Astatementintheprogramiseitheranassignmentstatement,asequenceofstatements,oraloopconstructwhosebodyisastatement.Thecontrolstructurethusrepresentsahierarchy.Atthetopofthehierarchyisthenoderepresentingthestatementofthewholeprogram.Anassignmentstatementisaleafnode.Ifastatementisasequence,thenitschildrenarethestatementswithinthesequence,laidoutfromlefttorightaccordingtotheirlexicalorder.Ifastatementisaloop,thenitschildrenarethecomponentsoftheloopbody,whichistypicallyasequenceofoneormorestatements.s0;L1:for(i=0;...){s1;L2:for(j=0;...){s2;s3;}L3:for(k=0;...)s4;s5;}Figure11.43:AhierarchicallystructuredprogramExample11.53:ThehierarchicalstructureoftheprograminFig.11.43isshowninFig.11.44.Thehierarchicalnatureoftheexecutionsequenceishigh-858CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYlightedinFig.11.45.Thesingleinstanceofs0precedesallotheroperations,becauseitisthe\frststatementexecuted.Next,weexecuteallinstructionsfromthe\frstiterationoftheouterloopbeforethoseintheseconditerationandsoforth.Foralldynamicinstanceswhoseloopindexihasvalue0,thestatementss1,L2,L3,ands5areexecutedinlexicalorder.Wecanrepeatthesameargumenttogeneratetherestoftheexecutionorder.2 L1s0 s1 L2 L3 s5 Prog s4s3s2Figure11.44:HierarchicalstructureoftheprograminExample11.53.1:s02:L1i=0s13:L2j=0s24:s35:j=1s26:s37::::8:L3k=0s49:k=1s410::::11:s512:i=1s113::::Figure11.45:ExecutionorderoftheprograminExample11.53.Wecanresolvetheorderingoftwoinstancesfromtwodi\u000berentstatementsinahierarchicalmanner.Ifthestatementssharecommonloops,wecomparethevaluesoftheircommonloopindexes,startingwiththeoutermostloop.Assoonaswe\fndadi\u000berencebetweentheirindexvalues,thedi\u000berencedeterminestheordering.Onlyiftheindexvaluesfortheouterloopsarethesamedoweneedtocomparetheindexesofthenextinnerloop.Thisprocessisanalogoustohowwewouldcomparetimeexpressedintermsofhours,minutesandseconds.Tocomparetwotimes,we\frstcomparethehours,andonlyiftheyreferto11.8.SYNCHRONIZATIONBETWEENPARALLELLOOPS859thesamehourwouldwecomparetheminutesandsoforth.Iftheindexvaluesarethesameforallcommonloops,thenweresolvetheorderbasedontheirrelativelexicalplacement.Thus,theexecutionorderforthesimplenested-loopprogramswehavebeendiscussingisoftenreferredtoas\\hierarchicaltime.\"Lets1beastatementnestedinad1-deeploop,ands2inad2-deeploop,sharingdcommon(outer)loops;noted\u0014d1andd\u0014d2certainly.Supposei=[i1;i2;:::;id1]isaninstanceofs1andj=[j1;j2;:::;jd2]isaninstanceofs2.i˚s1s2jifandonlyifeither1.[i1;i2;:::;id]˚[j1;j2;:::;jd],or2.[i1;i2;:::;id]=[j1;j2;:::;jd],ands1appearslexicallybefores2.Thepredicate[i1;i2;:::;id]˚[j1;j2;:::;jd]canbewrittenasadisjunctionoflinearinequalities:(i1<j1)_(i1=j1^i2<j2)_:::_(i1=j1^:::^id\u00001=jd\u00001^id<jd)APDGedgefroms1tos2existsaslongasthedata-dependenceconditionandoneofthedisjunctiveclausescanbemadetruesimultaneously.Thus,wemayneedtosolveuptodord+1linearintegerprograms,dependingonwhethers1appearslexicallybefores2,todeterminetheexistenceofoneedge.11.8.4TheParallelizationAlgorithmWenowpresentasimplealgorithmthat\frstsplitsupthecomputationintoasmanydi\u000berentloopsaspossible,thenparallelizesthemindependently.Algorithm11.54:MaximizethedegreeofparallelismallowedbyO(1)syn-chronizations.INPUT:Aprogramwitharrayaccesses.OUTPUT:SPMDcodewithaconstantnumberofsynchronizationbarriers.METHOD:1.Constructtheprogram-dependencegraphandpartitionthestatementsintostronglyconnectedcomponents(SCC's).RecallfromSection10.5.8thatastronglyconnectedcomponentisamaximalsubgraphoftheorig-inalwhoseeverynodeinthesubgraphcanreacheveryothernode.2.TransformthecodetoexecuteSCC'sinatopologicalorderbyapplying\fssionifnecessary.3.ApplyAlgorithm11.43toeachSCCto\fndallofitssynchronization-freeparallelism.BarriersareinsertedbeforeandaftereachparallelizedSCC.2860CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYWhileAlgorithm11.54\fndsalldegreesofparallelismwithO(1)synchro-nizations,ithasanumberofweaknesses.First,itmayintroduceunnecessarysynchronizations.Asamatteroffact,ifweapplythisalgorithmtoaprogramthatcanbeparallelizedwithoutsynchronization,thealgorithmwillparallelizeeachstatementindependentlyandintroduceasynchronizationbarrierbetweentheparallelloopsexecutingeachstatement.Second,whiletheremayonlybeaconstantnumberofsynchronizations,theparallelizationschememaytransferalotofdataamongprocessorswitheachsynchronization.Insomecases,thecostofcommunicationmakestheparallelismtooexpensive,andwemayevenbebettero\u000bexecutingtheprogramsequentiallyonauniprocessor.Inthefol-lowingsections,weshallnexttakeupwaystoincreasedatalocality,andthusreducetheamountofcommunication.11.8.5ExercisesforSection11.8Exercise11.8.1:ApplyAlgorithm11.54tothecodeofFig.11.46.for(i=0;i<100;i++)A[i]=A[i]+X[i];/*(s1)*/for(i=0;i<100;i++)for(j=0;j<100;j++)B[i,j]=Y[i,j]+A[i]+A[j];/*(s2)*/Figure11.46:CodeforExercise11.8.1Exercise11.8.2:ApplyAlgorithm11.54tothecodeofFig.11.47.for(i=0;i<100;i++)A[i]=A[i]+X[i];/*(s1)*/for(i=0;i<100;i++){B[i]=B[i]+A[i];/*(s2)*/for(j=0;j<100;j++)C[j]=Y[j]+B[j];/*(s3)*/}Figure11.47:CodeforExercise11.8.2Exercise11.8.3:ApplyAlgorithm11.54tothecodeofFig.11.48.11.9.PIPELINING861for(i=0;i<100;i++)A[i]=A[i]+X[i];/*(s1)*/for(i=0;i<100;i++){for(j=0;j<100;j++)B[j]=A[i]+Y[j];/*(s2)*/C[i]=B[i]+Z[i];/*(s3)*/for(j=0;j<100;j++)D[i,j]=A[i]+B[j];/*(s4)*/}Figure11.48:CodeforExercise11.8.311.9PipeliningInpipelining,ataskisdecomposedintoanumberofstagestobeperformedondi\u000berentprocessors.Forexample,ataskcomputedusingaloopofniterationscanbestructuredasapipelineofnstages.Eachstageisassignedtoadi\u000berentprocessor;whenoneprocessoris\fnishedwithitsstage,theresultsarepassedasinputtothenextprocessorinthepipeline.Inthefollowing,westartbyexplainingtheconceptofpipelininginmoredetail.Wethenshowareal-lifenumericalalgorithm,knownassuccessiveover-relaxation,toillustratetheconditionsunderwhichpipeliningcanbeapplied,inSection11.9.2.Wethenformallyde\fnetheconstraintsthatneedtobesolvedinSection11.9.6,anddescribeanalgorithmforsolvingtheminSection11.9.7.Programsthathavemultipleindependentsolutionstothetime-partitioncon-straintsareknownashavingoutermostfullypermutableloops;suchloopscanbepipelinedeasily,asdiscussedinSection11.9.8.11.9.1WhatisPipelining?Ourinitialattemptstoparallelizeloopspartitionedtheiterationsofaloopnestsothattwoiterationsthatshareddatawereassignedtothesameprocessor.Pipeliningallowsprocessorstosharedata,butgenerallydoessoonlyina\\local,\"way,withdatapassedfromoneprocessortoanotherthatisadjacentintheprocessorspace.Hereisasimpleexample.Example11.55:Considertheloop:for(i=1;i<=m;i++)for(j=1;j<=n;j++)X[i]=X[i]+Y[i,j];ThiscodesumsuptheithrowofYandaddsittotheithelementofX.Theinnerloop,correspondingtothesummation,mustbeperformedsequentially862CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.9.PIPELINING863ofsubsequenttaskswithnocommunicationcost.Similarly,eachinputdataelementusedbyasinglestageofdi\u000berenttasksneedstoresideonlyononeprocessor,asillustratedbyExample11.55.\u000fIfthetasksareindependent,thensimpleparallelizationhasbetterproces-sorutilizationbecauseprocessorscanexecuteallatoncewithouthavingtopayfortheoverheadof\fllinganddrainingthepipeline.However,asshowninExample11.55,thepatternofdataaccessesinapipelinedschemeisdi\u000berentfromthatofsimpleparallelization.Pipeliningmaybepreferableifitreducescommunication.11.9.2SuccessiveOver-Relaxation(SOR):AnExampleSuccessiveover-relaxation(SOR)isatechniqueforacceleratingtheconver-genceofrelaxationmethodsforsolvingsetsofsimultaneouslinearequations.Arelativelysimpletemplateillustratingitsdata-accesspatternisshowninFig.11.50(a).Here,thenewvalueofanelementinthearraydependsonthevaluesofelementsinitsneighborhood.Suchanoperationisperformedrepeat-edly,untilsomeconvergencecriterionismet.for(i=0;i<=m;i++)for(j=0;j<=n;j++)X[j+1]=1/3*(X[j]+X[j+1]+X[j+2])(a)Originalsource. j i(b)Datadependencesinthecode.Figure11.50:Anexampleofsuccessiveover-relaxation(SOR)ShowninFig.11.50(b)isapictureofthekeydatadependences.Wedonotshowdependencesthatcanbeinferredbythedependencesalreadyincludedinthe\fgure.Forexample,iteration[i;j]dependsoniterations[i;j\u00001];[i;j\u00002]andsoon.Itisclearfromthedependencesthatthereisnosynchronization-freeparallelism.SincethelongestchainofdependencesconsistsofO(m+n)edges,byintroducingsynchronization,weshouldbeableto\fndonedegreeofparallelismandexecutetheO(mn)operationsinO(m+n)unittime.864CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYInparticular,weobservethatiterationsthatliealongthe150\u000ediagonals7inFig.11.50(b)donotshareanydependences.Theyonlydependontheiterationsthatliealongdiagonalsclosertotheorigin.Thereforewecanparallelizethiscodebyexecutingiterationsoneachdiagonalinorder,startingattheoriginandproceedingoutwards.Werefertotheiterationsalongeachdiagonalasawavefront,andsuchaparallelizationschemeaswavefronting.11.9.3FullyPermutableLoopsWe\frstintroducethenotionoffullpermutability,aconceptusefulforpipeliningandotheroptimizations.Loopsarefullypermutableiftheycanbepermutedarbitrarilywithoutchangingthesemanticsoftheoriginalprogram.Onceloopsareputinafullypermutableform,wecaneasilypipelinethecodeandapplytransformationssuchasblockingtoimprovedatalocality.TheSORcode,asitwritteninFig.11.50(a),isnotfullypermutable.AsshowninSection11.7.8,permutingtwoloopsmeansthatiterationsintheorig-inaliterationspaceareexecutedcolumnbycolumninsteadofrowbyrow.Forinstance,theoriginalcomputationiniteration[2,3]wouldexecutebeforethatof[1,4],violatingthedependencesshowninFig.11.50(b).Wecan,however,transformthecodetomakeitfullypermutable.Applyingthea\u000enetransform\u00141011\u0015tothecodeyieldsthecodeshowninFig.11.51(a).Thistransformedcodeisfullypermutable,anditspermutedversionisshowninFig.11.51(c).WealsoshowtheiterationspaceanddatadependencesofthesetwoprogramsinFig.11.51(b)and(d),respectively.Fromthe\fgure,wecaneasilyseethatthisorderingpreservestherelativeorderingbetweeneverydata-dependentpairofaccesses.Whenwepermuteloops,wechangethesetofoperationsexecutedineachiterationoftheoutermostloopdrastically.Thefactthatwehavethisdegreeoffreedominschedulingmeansthatthereisalotofslackintheorderingofoperationsintheprogram.Slackinschedulingmeansopportunitiesforparallelization.Weshowlaterinthissectionthatifanesthaskoutermostfullypermutableloops,byintroducingjustO(n)synchronizations,wecangetO(k\u00001)degreesofparallelism(nisthenumberofiterationsinaloop).11.9.4PipeliningFullyPermutableLoopsAloopwithkoutermostfullypermutableloopscanbestructuredasapipelinewithO(k\u00001)dimensions.IntheSORexample,k=2,sowecanstructuretheprocessorsasalinearpipeline.11.9.PIPELINING865for(i=0;i<=m;i++)for(j=i;j<=i+n;j++)X[j-i+1]=1/3*(X[j-i]+X[j-i+1]+X[j-i+2])(a)ThecodeinFig.11.50transformedby\u00141011\u0015. j i(b)Datadependencesofthecodein(a).for(j=0;j<=m+n;j++)for(i=max(0,j);i<=min(m,j),i++)X[j-i+1]=1/3*(X[j-i]+X[j-i+1]+X[j-i+2])(c)Apermutationoftheloopsin(a). j i(d)Datadependencesofthecodein(b).Figure11.51:FullypermutableversionofthecodeFig.11.50866CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYWecanpipelinetheSORcodeintwodi\u000berentways,showninFig.11.52(a)andFig.11.52(b),correspondingtothetwopossiblepermutationsshowninFig.11.51(a)and(c),respectively.Ineachcase,everycolumnoftheiterationspaceconstitutesatask,andeveryrowconstitutesastage.Weassignstageitoprocessori,thuseachprocessorexecutestheinnerloopofthecode.Ignoringboundaryconditions,aprocessorcanexecuteiterationionlyafterprocessorp\u00001hasexecutediterationi\u00001./*0<=p<=m*/for(j=p;j<=p+n;j++){if(p>0)wait(p-1);X[j-p+1]=1/3*(X[j-p]+X[j-p+1]+X[j-p+2]);if(p<min(m,j))signal(p+1);}(a)Processorsassignedtorows./*0<=p<=m+n*/for(i=max(0,p);i<=min(m,p);i++){if(p>max(0,i))wait(p-1);X[p-i+1]=1/3*(X[p-i]+X[p-i+1]+X[p-i+2]);if(p<m+n)&(p>i)signal(p+1);}(b)Processorsassignedtocolumns.Figure11.52:TwopipeliningimplementationsofthecodefromFig.11.51Supposeeveryprocessortakesexactlythesameamountoftimetoexecuteaniterationandsynchronizationhappensinstantaneously.Boththesepipelinedschemeswouldexecutethesameiterationsinparallel;theonlydi\u000berenceisthattheyhavedi\u000berentprocessorassignments.Alltheiterationsexecutedinparallelliealongthe135\u000ediagonalsintheiterationspaceinFig.11.51(b),whichcorrespondstothe150\u000ediagonalsintheiterationspaceoftheoriginalcode;seeFig.11.50(b).However,inpractice,processorswithcachesdonotalwaysexecutethesamecodeinthesameamountoftime,andthetimeforsynchronizationalsovaries.Unliketheuseofsynchronizationbarrierswhichforcesallprocessorstooperateinlockstep,pipeliningrequiresprocessorstosynchronizeandcommunicatewithatmosttwootherprocessors.Thus,pipelininghasrelaxedwavefronts,allowingsomeprocessorstosurgeaheadwhileotherslagmomentarily.This\rexibilityreducesthetimeprocessorsspendwaitingforotherprocessorsandimprovesparallelperformance.Thetwopipeliningschemesshownabovearebuttwoofthemanywaysinwhichthecomputationcanbepipelined.Aswesaid,oncealoopisfully11.9.PIPELINING867permutable,wehavealotoffreedominhowwewishtoparallelizethecode.The\frstpipelineschememapsiteration[i;j]toprocessori;thesecondmapsiteration[i;j]toprocessorj.Wecancreatealternativepipelinesbymappingiteration[i;j]toprocessorc0i+c1j,providedc0andc1arepositiveconstants.Suchaschemewouldcreatepipelineswithrelaxedwavefrontsbetween90\u000eand180\u000e,bothexclusive.11.9.5GeneralTheoryTheexamplejustcompletedillustratesthefollowinggeneraltheoryunderlyingpipelining:ifwecancomeupwithatleasttwodi\u000berentoutermostloopsforaloopnestandsatisfyallthedependences,thenwecanpipelinethecomputation.Aloopwithkoutermostfullypermutableloopshask\u00001degreesofpipelinedparallelism.Loopsthatcannotbepipelineddonothavealternativeoutermostloops.Example11.56showsonesuchinstance.Tohonorallthedependences,eachiterationintheoutermostloopmustexecutepreciselythecomputationfoundintheoriginalcode.However,suchcodemaystillcontainparallelismintheinnerloops,whichcanbeexploitedbyintroducingatleastnsynchronizations,wherenisthenumberofiterationsintheoutermostloop.for(i=0;i<100;i++){for(j=0;j<100;j++)X[j]=X[j]+Y[i,j];/*(s1)*/Z[i]=X[A[i]];/*(s2)*/}(a) ss 12(b)Figure11.53:Asequentialouterloop(a)anditsPDG(b)Example11.56:Figure11.53isamorecomplexversionoftheproblemwesawinExample11.50.AsshownintheprogramdependencegraphinFig.11.53(b),statementss1ands2belongtothesamestronglyconnectedcomponent.Be-causewedonotknowthecontentsofmatrixA,wemustassumethattheaccessinstatements2mayreadfromanyoftheelementsofX.Thereisatruedependencefromstatements1tostatements2andanantidependencefrom868CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYstatements2tostatements1.Thereisnoopportunityforpipeliningeither,becausealloperationsbelongingtoiterationiintheouterloopmustprecedethoseiniterationi+1.To\fndmoreparallelism,werepeattheparallelizationprocessontheinnerloop.Theiterationsinthesecondloopcanbeparallelizedwithoutsynchronization.Thus,200barriersareneeded,withonebeforeandoneaftereachexecutionoftheinnerloop.211.9.6Time-PartitionConstraintsWenowfocusontheproblemof\fndingpipelinedparallelism.Ourgoalistoturnacomputationintoasetofpipelinabletasks.To\fndpipelinedparallelism,wedonotsolvedirectlyforwhatistobeexecutedoneachprocessor,likewedidwithloopparallelization.Instead,weaskthefollowingfundamentalques-tion:Whatareallthepossibleexecutionsequencesthathonortheoriginaldatadependencesintheloop?Obviouslytheoriginalexecutionsequencesatis\fesallthedatadependences.Thequestionisiftherearea\u000enetransformationsthatcancreateanalternativeschedule,whereiterationsoftheoutermostloopexe-cuteadi\u000berentsetofoperationsfromtheoriginal,andyetallthedependencesaresatis\fed.Ifwecan\fndsuchtransforms,wecanpipelinetheloop.Thekeypointisthatifthereisfreedominschedulingoperations,thereisparal-lelism;detailsofhowwederivepipelinedparallelismfromsuchtransformswillbeexplainedlater.To\fndacceptablereorderingsoftheouterloop,wewishto\fndone-dimensionala\u000enetransforms,oneforeachstatement,thatmaptheoriginalloopindexvaluestoaniterationnumberintheoutermostloop.Thetrans-formsarelegaliftheassignmentcansatisfyallthedatadependencesintheprogram.The\\time-partitionconstraints,\"shownbelow,simplysaythatifoneoperationisdependentupontheother,thenthe\frstmustbeassignedaniterationintheoutermostloopnoearlierthanthatofthesecond.Iftheyareassignedinthesameiteration,thenitisunderstoodthatthe\frstwillbeexecutedafterthanthesecondwithintheiteration.Ana\u000ene-partitionmappingofaprogramisalegal-timepartitionifandonlyifforeverytwo(notnecessarilydistinct)accessessharingadependence,sayF1=hF1;f1;B1;b1iinstatements1,whichisnestedind1loops,andF2=hF2;f2;B2;b2iinstatements2nestedind2loops,theone-dimensionalpartitionmappingshC1;c1iandhC2;c2iforstatementss1ands2,respectively,satisfythetime-partitionconstraints:\u000fForalli1inZd1andi2inZd2suchthata)i1˚s1s2i2,11.9.PIPELINING869b)B1i1+b1\u00150,c)B2i2+b2\u00150,andd)F1i1+f1=F2i2+f2,itisthecasethatC1i1+c1\u0014C2i2+c2.Thisconstraint,illustratedinFig.11.54,looksremarkablysimilartothespace-partitionconstraints.Itisarelaxationofthespace-partitionconstraints,inthatiftwoiterationsrefertothesamelocation,theydonotnecessarilyhavetobemappedtothesamepartition;weonlyrequirethattheoriginalrelativeexecutionorderbetweenthetwoiterationsispreserved.Thatis,theconstraintsherehave\u0014wherethespace-partitionconstraintshave=. F i + f11 1 C i + c 11 1i 2i Array C i + c F i + f 22 2 22 2 Time steps 1 <Figure11.54:Time-PartitionConstraintsWeknowthatthereexistsatleastonesolutiontothetime-partitioncon-straints.Wecanmapoperationsineachiterationoftheoutermostloopbacktothesameiteration,andallthedatadependenceswillbesatis\fed.Thissolutionistheonlysolutiontothetime-partitionconstraintsforprogramsthatcannotbepipelined.Ontheotherhand,ifwecan\fndseveralindependentsolutionstotime-partitionconstraints,theprogramcanbepipelined.Eachindepen-dentsolutioncorrespondstoaloopintheoutermostfullypermutablenest.Forinstance,thereisonlyoneindependentsolutiontothetimingconstraintsextractedfromtheprograminExample11.56,wherethereisnopipelinedpar-allelism.Asanotherinstance,therearetwoindependentsolutionstotheSORcodeexampleofSection11.9.2.Example11.57:LetusconsiderExample11.56,andinparticularthedatadependencesofreferencestoarrayXinstatementss1ands2.Becausethe870CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYaccessisnota\u000eneinstatements2,weapproximatetheaccessbymodelingmatrixXsimplyasascalarvariableindependenceanalysisinvolvingstatements2.Let(i;j)betheindexvalueofadynamicinstanceofs1andleti0betheindexvalueofadynamicinstanceofs2.Letthecomputationmappingsofstatementss1,ands2beh[C11;C12];c1iandh[C21];c2i,respectively.Letus\frstconsiderthetime-partitionconstraintsimposedbydependencesfromstatements1tos2.Thus,i\u0014i0,thetransformed(i;j)thiterationofs1mustbenolaterthanthetransformedi0thiterationofs2;thatis,\u0002C11C12\u0003\u0014ij\u0015+c1\u0014C21i0+c2:Expanding,wegetC11i+C12j+c1\u0014C21i0+c2:Sincejcanbearbitrarilylarge,independentofiandi0,itmustbethatC12=0.Thus,onepossiblesolutiontotheconstraintsisC11=C21=1andC12=c1=c2=0:Similarargumentsaboutthedatadependencefroms2tos1ands2backtoitselfwillyieldasimilaranswer.Inthisparticularsolution,theithiterationoftheouterloop,whichconsistsoftheinstanceiofs2andallinstances(i;j)ofs1,areallassignedtotimestepi.OtherlegalchoicesofC11,C21,c1,andc2yieldsimilarassignments,althoughtheremightbetimestepsatwhichnothinghappens.Thatis,allwaystoscheduletheouterlooprequiretheiterationstoexecuteinthesameorderasintheoriginalcode.Thisstatementholdswhetherall100iterationsareexecutedonthesameprocessor,on100di\u000berentprocessors,oranythinginbetween.2Example11.58:IntheSORcodeshowninFig.11.50(a),thewritereferenceX[j+1]sharesadependencewithitselfandwiththethreereadreferencesinthecode.Weareseekingcomputationmappingh[C1;C2];cifortheassignmentstatementsuchthat\u0002C1C2\u0003\u0014ij\u0015+\u0002c\u0003\u0014\u0002C1C2\u0003\u0014i0j0\u0015+\u0002c\u0003ifthereisadependencefrom(i;j)to(i0;j0).Byde\fnition,(i;j)˚(i0;j0);thatis,eitheri<i0or(i=i0^j<j0).Letusconsiderthreeofthepairsofdatadependences:1.TruedependencefromwriteaccessX[j+1]toreadaccessX[j+2].Sincetheinstancesmustaccessthesamelocation,j+1=j0+2orj=j0+1.Substitutingj=j0+1intothetimingconstraints,wegetC1(i0\u0000i)\u0000C2\u00150:11.9.PIPELINING871Sincej=j0+1,j>j0,theprecedenceconstraintsreducetoi<i0.Therefore,C1\u0000C2\u00150:2.AntidependencefromreadaccessX[j+2]towriteaccessX[j+1].Here,j+2=j0+1,orj=j0\u00001.Substitutingj=j0\u00001intothetimingconstraints,wegetC1(i0\u0000i)+C2\u00150:Wheni=i0,wegetC2\u00150:Wheni<i0,sinceC2\u00150,wegetC1\u00150:3.OutputdependencefromwriteaccessX[j+1]backtoitself.Herej=j0.ThetimingconstraintsreducetoC1(i0\u0000i)\u00150:Sinceonlyi<i0isrelevant,weagaingetC1\u00150:Therestofthedependencesdonotyieldanynewconstraints.Intotal,therearethreeconstraints:C1\u00150C2\u00150C1\u0000C2\u00150Herearetwoindependentsolutionstotheseconstraints:\u001410\u0015;\u001411\u0015The\frstsolutionpreservestheexecutionorderoftheiterationsintheouter-mostloop.BoththeoriginalSORcodeinFig.11.50(a)andthetransformedcodeshowninFig.11.51(a)areexamplesofsuchanarrangement.Thesecondsolutionplacesiterationslyingalongthe135\u000ediagonalsinthesameouterloop.ThecodeshowninFig.11.51(b)isanexampleofacodewiththatoutermostloopcomposition.Noticethattherearemanyotherpossiblepairsofindependentsolutions.Forexample,\u001411\u0015;\u001421\u0015wouldalsobeindependentsolutionstothesameconstraints.Wechoosethesimplestvectorstosimplifycodetransformation.2872CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY11.9.7SolvingTime-PartitionConstraintsbyFarkas'LemmaSincetime-partitionconstraintsaresimilartospace-partitionconstraints,canweuseasimilaralgorithmtosolvethem?Unfortunately,theslightdi\u000berencebetweenthetwoproblemstranslatesintoabigtechnicaldi\u000berencebetweenthetwosolutionmethods.Algorithm11.43simplysolvesforC1;c1;C2,andc2,suchthatforalli1inZd1andi2inZd2ifF1i1+f1=F2i2+f2thenC1i1+c1=C2i2+c2:Thelinearinequalitiesduetotheloopboundsareonlyusedindeterminingiftworeferencesshareadatadependence,andarenotusedotherwise.To\fndsolutionstothetime-partitionconstraints,wecannotignorethelinearinequalitiesi˚i0;ignoringthemoftenwouldallowonlythetrivialso-lutionofplacingalliterationsinthesamepartition.Thus,thealgorithmto\fndsolutionstothetime-partitionconstraintsmusthandlebothequalitiesandinequalities.Thegeneralproblemwewishtosolveis:givenamatrixA,\fndavectorcsuchthatforallvectorsxsuchthatAx\u00150,itisthecasethatcTx\u00150.Inotherwords,weareseekingcsuchthattheinnerproductofcandanycoordinatesinthepolyhedronde\fnedbytheinequalitiesAx\u00150alwaysyieldsanonnegativeanswer.ThisproblemisaddressedbyFarkas'Lemma.LetAbeanm\u0002nmatrixofreals,andletcbeareal,nonzeron-vector.Farkas'lemmasaysthateithertheprimalsystemofinequalitiesAx\u00150;cTx<0hasareal-valuedsolutionx,orthedualsystemATy=c;y\u00150hasareal-valuedsolutiony,butneverboth.ThedualsystemcanbehandledbyusingFourier-Motzkineliminationtoprojectawaythevariablesofy.Foreachcthathasasolutioninthedualsystem,thelemmaguaranteesthattherearenosolutionstotheprimalsystem.Putanotherway,wecanprovethenegationoftheprimalsystem,i.e.,wecanprovethatcTx\u00150forallxsuchthatAx\u00150,by\fndingasolutionytothedualsystem:ATy=candy\u00150.Algorithm11.59:Findingasetoflegal,maximallyindependenta\u000enetime-partitionmappingsforanoutersequentialloop.11.9.PIPELINING873874CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY(b)Letcbealltheunknownsinthepartitionmappings.ExpressthelinearinequalityconstraintsduetothepartitionmappingsascTDx\u00150forsomematrixD.(c)ExpresstheprecedenceconstraintsontheloopindexvariablesandtheloopboundsasAx\u00150forsomematrixA.(d)ApplyFarkas'Lemma.Findingxtosatisfythetwoconstraintsaboveisequivalentto\fndingysuchthatATy=DTcandy\u00150:NotethatcTDhereiscTinthestatementofFarkas'Lemma,andweareusingthenegatedformofthelemma.(e)Inthisform,applyFourier-Motzkineliminationtoprojectawaytheyvariables,andexpresstheconstraintsonthecoe\u000ecientscasEc\u00150.(f)LetE0c0\u00150bethesystemwithouttheconstantterms.3.FindamaximalsetoflinearlyindependentsolutionstoE0c0\u00150usingAlgorithmB.1inAppendixB.Theapproachofthatcomplexalgorithmistokeeptrackofthecurrentsetofsolutionsforeachofthestatements,thenincrementallylookformoreindependentsolutionsbyinsertingcon-straintsthatforcethesolutiontobelinearlyindependentforatleastonestatement.4.Fromeachsolutionofc0found,deriveonea\u000enetime-partitionmapping.TheconstanttermsarederivedusingEc\u00150.2Example11.60:TheconstraintsforExample11.57canbewrittenas\u0002\u0000C11\u0000C12C21(c2\u0000c1)\u00032664iji013775\u00150\u0002\u00001010\u00032664iji013775\u0015011.9.PIPELINING875Farkas'lemmasaysthattheseconstraintsareequivalentto2664\u000010103775\u0002z\u0003=2664\u0000C11\u0000C12C21c2\u0000c13775andz\u00150:Solvingthissystem,wegetC11=C21\u00150andC12=c2\u0000c1=0:Noticethattheseconstraintsaresatis\fedbytheparticularsolutionweobtainedinExample11.57.211.9.8CodeTransformationsIfthereexistkindependentsolutionstothetime-partitionconstraintsofaloopnest,thenitispossibletotransformtheloopnesttohavekoutermostfullypermutableloops,whichcanbetransformedtocreatek\u00001degreesofpipelining,ortocreatek\u00001innerparallelizableloops.Furthermore,wecanapplyblockingtofullypermutableloopstoimprovedatalocalityofuniprocessorsaswellasreducingsynchronizationamongprocessorsinaparallelexecution.ExploitingFullyPermutableLoopsWecancreatealoopnestwithkoutermostfullypermutableloopseasilyfromkindependentsolutionstothetime-partitionconstraints.Wecandosobysimplymakingthekthsolutionthekthrowofthenewtransform.Oncethea\u000enetransformiscreated,Algorithm11.45canbeusedtogeneratethecode.Example11.61:ThesolutionsfoundinExample11.58forourSORexamplewere\u001410\u0015;\u001411\u0015Makingthe\frstsolutionthe\frstrowandthesecondsolutionthesecondrow,wegetthetransform\u00141011\u0015whichyieldsthecodeinFig.11.51(a).Makingthesecondsolutionthe\frstrowinstead,wegetthetransform\u00141110\u0015whichyieldsthecodeinFig.11.51(c).2876CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYItiseasytoseethatsuchtransformsproducealegalsequentialprogram.The\frstrowpartitionstheentireiterationspaceaccordingtothe\frstsolution.Thetimingconstraintsguaranteethatsuchadecompositiondoesnotviolateanydatadependences.Then,wepartitiontheiterationsineachoftheouter-mostloopaccordingtothesecondsolution.Againthismustbelegalbecausewearedealingwithjustsubsetsoftheoriginaliterationspace.Thesamegoesfortherestoftherowsinthematrix.Sincewecanorderthesolutionsarbitrarily,theloopsarefullypermutable.ExploitingPipeliningWecaneasilytransformaloopwithkoutermostfullypermutableloopsintoacodewithk\u00001degreesofpipelineparallelism.Example11.62:LetusreturntoourSORexample.Aftertheloopsaretransformedtobefullypermutable,weknowthatiteration[i1;i2]canbeexe-cutedprovidediterations[i1;i2\u00001]and[i1\u00001;i2]havebeenexecuted.Wecanguaranteethisorderinapipelineasfollows.Weassigniterationi1toprocessorp1.Eachprocessorexecutesiterationsintheinnerloopintheoriginalsequen-tialorder,thusguaranteeingthatiteration[i1;i2]executesafter[i1;i2\u00001].Inaddition,werequirethatprocessorpwaitsforthesignalfromprocessorp\u00001thatithasexecutediteration[p\u00001;i2]beforeitexecutesiteration[p;i2].ThistechniquegeneratesthepipelinedcodeFig.11.52(a)and(b)fromthefullypermutableloopsFig.11.51(a)and(c),respectively.2Ingeneral,givenkoutermostfullypermutableloops,theiterationwithindexvalues(i1;:::;ik)canbeexecutedwithoutviolatingdata-dependenceconstraints,providediterations[i1\u00001;i2;:::;ik];[i1;i2\u00001;i3;:::;ik];:::;[i1;:::;ik\u00001;ik\u00001]havebeenexecuted.Wecanthusassignthepartitionsofthe\frstk\u00001dimen-sionsoftheiterationspacetoO(nk\u00001)processorsasfollows.Eachprocessorisresponsibleforonesetofiterationswhoseindexesagreeinthe\frstk\u00001dimen-sions,andvaryoverallvaluesofthekthindex.Eachprocessorexecutestheiterationsinthekthloopsequentially.Theprocessorcorrespondingtovalues[p1;p2;:::;pk\u00001]forthe\frstk\u00001loopindexescanexecuteiterationiinthekthloopaslongasitreceivesasignalfromprocessors[p1\u00001;p2;:::;pk\u00001];:::;[p1;:::;pk\u00002;pk\u00001\u00001]thattheyhaveexecutedtheirithiterationinthekthloop.WavefrontingItisalsoeasytogeneratek\u00001innerparallelizableloopsfromaloopwithkoutermostfullypermutableloops.Althoughpipeliningispreferable,weincludethisinformationhereforcompleteness.11.9.PIPELINING877Wepartitionthecomputationofaloopwithkoutermostfullypermutableloopsusinganewindexvariablei0,wherei0isde\fnedtobesomecombinationofalltheindicesinthekpermutableloopnest.Forexample,i0=i1+:::+ikisonesuchcombination.Wecreateanoutermostsequentialloopthatiteratesthroughthei0par-titionsinincreasingorder;thecomputationnestedwithineachpartitionisorderedasbefore.The\frstk\u00001loopswithineachpartitionareguaranteedtobeparallelizable.Intuitively,ifgivenatwo-dimensionaliterationspace,thistransformgroupsiterationsalong135\u000ediagonalsasanexecutionoftheouter-mostloop.Thisstrategyguaranteesthatiterationswithineachiterationoftheoutermostloophavenodatadependence.BlockingAk-deep,fullypermutableloopnestcanbeblockedink-dimensions.Insteadofassigningtheiterationstoprocessorsbasedonthevalueoftheouterorinnerloopindexes,wecanaggregateblocksofiterationsintooneunit.Blockingisusefulforenhancingdatalocalityaswellasforminimizingtheoverheadofpipelining.Supposewehaveatwo-dimensionalfullypermutableloopnest,asinFig.11.55(a),andwewishtobreakthecomputationintob\u0002bblocks.TheexecutionorderoftheblockedcodeisshowninFig.11.56,andtheequivalentcodeisinFig.11.55(b).Ifweassigneachblocktooneprocessor,thenallthepassingofdatafromoneiterationtoanotherthatiswithinablockrequiresnointerprocessorcommuni-cation.Alternatively,wecancoarsenthegranularityofpipeliningbyassigningacolumnofblockstooneprocessor.Noticethateachprocessorsynchronizeswithitspredecessorsandsuccessorsonlyatblockboundaries.Thus,anotheradvantageofblockingisthatprogramsonlyneedtocommunicatedataac-cessedattheboundariesoftheblockwiththeirneighborblocks.Valuesthatareinteriortoablockaremanagedbyonlyoneprocessor.Example11.63:Wenowusearealnumericalalgorithm|Choleskydecom-position|toillustratehowAlgorithm11.59handlessingleloopnestswithonlypipeliningparallelism.Thecode,showninFig.11.57,implementsanO(n3)al-gorithm,operatingona2-dimensionaldataarray.Theexecutediterationspaceisatriangularpyramid,sincejonlyiteratesuptothevalueoftheouterloopindexi,andkonlyiteratestothevalueofj.Theloophasfourstatements,allnestedindi\u000berentloops.ApplyingAlgorithm11.59tothisprogram\fndsthreelegitimatetimedi-mensions.Itnestsalltheoperations,someofwhichwereoriginallynestedin1-and2-deeploopnestsintoa3-dimensional,fullypermutableloopnest.Thecode,togetherwiththemappings,isshowninFig.11.58.Thecode-generationroutineguardstheexecutionoftheoperationswiththeoriginalloopboundstoensurethatthenewprogramsexecuteonlyoperations878CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(i=0;i<n;i++)for(j=1;j<n;j++){<S>}(a)Asimpleloopnest.for(ii=0;ii<n;i+=b)for(jj=0;jj<n;jj+=b)for(i=ii*b;i<=min(ii*b-1,n);i++)for(j=ii*b;j<=min(jj*b-1,n);j++){<S>}(b)Ablockedversionofthisloopnest.Figure11.55:A2-dimensionalloopnestanditsblockedversion j i j (b) After.(a) Before. iFigure11.56:Executionorderbeforeandafterblockinga2-deeploopnest.11.9.PIPELINING879for(i=1;i<=N;i++){for(j=1;j<=i-1;j++){for(k=1;k<=j-1;k++)X[i,j]=X[i,j]-X[i,k]*X[j,k];X[i,j]=X[i,j]/X[j,j];}for(m=1;m<=i-1;m++)X[i,i]=X[i,i]-X[i,m]*X[i,m];X[i,i]=sqrt(X[i,i]);}Figure11.57:Choleskydecompositionfor(i2=1;i2<=N;i2++)for(j2=1;j2<=i2;j2++){/*beginningofcodeforprocessor(i2,j2)*/for(k2=1;k2<=i2;k2++){//Mapping:i2=i,j2=j,k2=kif(j2<i2&&k2<j2)X[i2,j2]=X[i2,j2]-X[i2,k2]*X[j2,k2];//Mapping:i2=i,j2=j,k2=jif(j2==k2&&j2<i2)X[i2,j2]=X[i2,j2]/X[j2,j2];//Mapping:i2=i,j2=i,k2=mif(i2==j2&&k2<i2)X[i2,i2]=X[i2,i2]-X[i2,k2]*X[i2,k2];//Mapping:i2=i,j2=i,k2=iif(i2==j2&&j2==k2)X[k2,k2]=sqrt(X[k2,k2]);}/*endingofcodeforprocessor(i2,j2)*/}Figure11.58:Figure11.57writtenasafullypermutableloopnest880CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYthatareintheoriginalcode.Wecanpipelinethiscodebymappingthe3-dimensionalstructuretoa2-dimensionalprocessorspace.Iterations(i2;j2;k2)areassignedtotheprocessorwithID(i2;j2).Eachprocessorexecutestheinnermostloop,theloopwiththeindexk2.Beforeitexecutesthekthiteration,theprocessorwaitsforsignalsfromtheprocessorswithID's(i2\u00001;j2)and(i2;j2\u00001).Afteritexecutesitsiteration,itsignalsprocessors(i2+1;j2)and(i2;j2+1).211.9.9ParallelismWithMinimumSynchronizationWehavedescribedthreepowerfulparallelizationalgorithmsinthelastthreesections:Algorithm11.43\fndsallparallelismrequiringnosynchronizations,Algorithm11.54\fndsallparallelismrequiringonlyaconstantnumberofsyn-chronizations,andAlgorithm11.59\fndsallthepipelinableparallelismrequir-ingO(n)synchronizationswherenisthenumberofiterationsintheoutermostloop.Asa\frstapproximation,ourgoalistoparallelizeasmuchofthecompu-tationaspossible,whileintroducingaslittlesynchronizationasnecessary.Algorithm11.64,below,\fndsallthedegreesofparallelisminaprogram,startingwiththecoarsestgranularityofparallelism.Inpractice,toparallelizeacodeforamultiprocessor,wedonotneedtoexploitallthelevelsofparallelism,justtheoutermostpossibleonesuntilallthecomputationisparallelizedandalltheprocessorsarefullyutilized.Algorithm11.64:Findallthedegreesofparallelisminaprogram,withalltheparallelismbeingascoarse-grainedaspossible.INPUT:Aprogramtobeparallelized.OUTPUT:Aparallelizedversionofthesameprogram.METHOD:Dothefollowing:1.Findthemaximumdegreeofparallelismrequiringnosynchronization:ApplyAlgorithm11.43totheprogram.2.FindthemaximumdegreeofparallelismthatrequiresO(1)synchroniza-tions:ApplyAlgorithm11.54toeachofthespacepartitionsfoundinstep1.(Ifnosynchronization-freeparallelismisfound,thewholecompu-tationisleftinonepartition).3.FindthemaximumdegreeofparallelismthatrequiresO(n)synchroniza-tions.ApplyAlgorithm11.59toeachofthepartitionsfoundinstep2to\fndpipelinedparallelism.ThenapplyAlgorithm11.54toeachofthepartitionsassignedtoeachprocessor,orthebodyofthesequentialloopifnopipeliningisfound.4.Findthemaximumdegreeofparallelismwithsuccessivelygreaterdegreesofsynchronizations:RecursivelyapplyStep3tocomputationbelongingtoeachofthespacepartitionsgeneratedbythepreviousstep.11.9.PIPELINING8812Example11.65:LetusnowreturntoExample11.56.NoparallelismisfoundbySteps1and2ofAlgorithm11.64;thatis,weneedmorethanaconstantnumberofsynchronizationstoparallelizethiscode.InStep3,applyingAlgorithm11.59determinesthatthereisonlyonelegalouterloop,whichistheoneintheoriginalcodeofFig.11.53.So,theloophasnopipelinedparallelism.InthesecondpartofStep3,weapplyAlgorithm11.54toparallelizetheinnerloop.Wetreatthecodewithinapartitionlikeawholeprogram,theonlydi\u000berencebeingthatthepartitionnumberistreatedlikeasymbolicconstant.Inthiscasetheinnerloopisfoundtobeparallelizableandthereforethecodecanbeparallelizedwithnsynchronizationbarriers.2Algorithm11.64\fndsalltheparallelisminaprogramateachlevelofsyn-chronization.Thealgorithmprefersparallelizationschemesthathavelesssyn-chronization,butlesssynchronizationdoesnotmeanthatthecommunicationisminimized.Herewediscusstwoextensionstothealgorithmtoaddressitsweaknesses.ConsideringCommunicationCostStep2ofAlgorithm11.64parallelizeseachstronglyconnectedcomponentin-dependentlyifnosynchronization-freeparallelismisfound.However,itmaybepossibletoparallelizeanumberofthecomponentswithoutsynchronizationandcommunication.Onesolutionistogreedily\fndsynchronization-freepar-allelismamongsubsetsoftheprogramdependencegraphthatsharethemostdata.Ifcommunicationisnecessarybetweenstronglyconnectedcomponents,wenotethatsomecommunicationismoreexpensivethanothers.Forexample,thecostoftransposingamatrixissigni\fcantlyhigherthanjusthavingtocom-municatebetweenneighboringprocessors.Supposes1ands2arestatementsintwoseparatestronglyconnectedcomponentsaccessingthesamedatainitera-tionsi1andi2,respectively.Ifwecannot\fndpartitionmappingshC1;c1iandhC2;c2iforstatementss1ands2,respectively,suchthatC1i1+c1\u0000C2i2\u0000c2=0;weinsteadtrytosatisfytheconstraintC1i1+c1\u0000C2i2\u0000c2\u0014\u000ewhere\u000eisasmallconstant.TradingCommunicationforSynchronizationSometimeswewouldratherperformmoresynchronizationstominimizecom-munication.Example11.66discussesonesuchexample.Thus,ifwecannot882CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYparallelizeacodewithjustneighborhoodcommunicationamongstronglycon-nectedcomponents,weshouldattempttopipelinethecomputationinsteadofparallelizingeachcomponentindependently.AsshowninExample11.66,pipeliningcanbeappliedtoasequenceofloops.Example11.66:FortheADIintegrationalgorithminExample11.49,wehaveshownthatoptimizingthe\frstandsecondloopnestsindependently\fndsparallelismineachofthenests.However,suchaschemewouldrequirethatthematrixbetransposedbetweentheloops,incurringO(n2)datatra\u000ec.IfweuseAlgorithm11.59to\fndpipelinedparallelism,we\fndthatwecanturntheentireprogramintoafullypermutableloopnest,asinFig.11.59.Wethencanapplyblockingtoreducethecommunicationoverhead.ThisschemewouldincurO(n)synchronizationsbutwouldrequiremuchlesscommunication.2for(j=0;j<n;j++)for(i=1;i<n+1;i++){if(i<n)X[i,j]=f(X[i,j]+X[i-1,j])if(j>0)X[i-1,j]=g(X[i-1,j],X[i-1,j-1]);}Figure11.59:AfullypermutableloopnestforthecodeofExample11.4911.9.10ExercisesforSection11.9Exercise11.9.1:InSection11.9.4,wediscussedthepossibilityofusingdi-agonalsotherthanthehorizontalandverticalaxestopipelinethecodeofFig.11.51.WritecodeanalogoustotheloopsofFig.11.52forthediagonals:(a)135\u000e(b)120\u000e.Exercise11.9.2:Figure11.55(b)canbesimpli\fedifbdividesnevenly.Rewritethecodeunderthatassumption.for(i=0;i<100;i++){P[i,0]=1;/*s1*/P[i,i]=1;/*s2*/}for(i=2;i<100;i++)for(j=1;j<i;j++)P[i,j]=P[i-1,j-1]+P[i-1,j];/*s3*/Figure11.60:ComputingPascal'striangle11.9.PIPELINING883Exercise11.9.3:InFig.11.60isaprogramtocomputethe\frst100rowsofPascal'striangle.Thatis,P[i;j]willbecomethenumberofwaystochoosejthingsoutofi,for0\u0014j\u0014i<100.a)Rewritethecodeasasingle,fullypermutableloopnest.b)Use100processorsinapipelinetoimplementthiscode.Writethecodeforeachprocessorp,intermsofp,andindicatethesynchronizationnecessary.c)Rewritethecodeusingsquareblocksof10iterationsonaside.Sincetheiterationsformatriangle,therewillbeonly1+2+\u0001\u0001\u0001+10=55blocks.Showthecodeforaprocessor(p1;p2)assignedtothep1thblockintheidirectionandthep2thblockinthejdirection,intermsofp1andp2.for(i=0;i<100;1++){A[i,0,0]=B1[i];/*s1*/A[i,99,0]=B2[i];/*s2*/}for(j=1;j<99;j++){A[0,j,0]=B3[j];/*s3*/A[99,j,0]=B4[j];/*s4*/}for(i=0;i<99;i++)for(j=0;j<99;j++)for(k=1;k<100;k++)A[i,j,k]=(A[i,j,k-1]+A[i-1,j,k-1]+A[i+1,j,k-1]+A[i,j-1,k-1]+A[i,j+1,k-1])/5;/*s5*/Figure11.61:CodeforExercise11.9.4!Exercise11.9.4:RepeatExercise11.9.2forthecodeofFig.11.61.However,notethattheiterationsforthisproblemforma3-dimensionalcubeofside100.Thus,theblocksforpart(c)shouldbe10\u000210\u000210,andthereare1000ofthem.!Exercise11.9.5:LetusapplyAlgorithm11.59toasimpleexampleofthetime-partitionconstraints.Inwhatfollows,assumethatthevectori1is(i1;j1),andvectori2is(i2;j2);technically,boththesevectorsaretransposed.Theconditioni1˚s1s2i2consistsofthefollowingdisjunction:i.i1<i2,orii.i1=i2andj1<j2.Theotherequalitiesandinequalitiesare884CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY2i1+j1\u000010\u00150i2+2j2\u000020\u00150i1=i2+j2\u000050j1=j2+40Finally,thetime-partitioninequality,withunknownsc1,d1,e1,c2,d2,ande2,isc1i1+d1j1+e1\u0014c2i2+d2j2+e2.a)Solvethetime-partitionconstraintsforcasei|thatis,wherei1<i2.Inparticular,eliminateasmanyofi1,j1,i2,andj2asyoucan,andsetupthematricesDandAasinAlgorithm11.59.Then,applyFarkas'Lemmatotheresultingmatrixinequalities.b)Repeatpart(a)forthecaseii,wherei1=i2andj1<j2.11.10LocalityOptimizationsTheperformanceofaprocessor,beitapartofamultiprocessorornot,ishighlysensitivetoitscachebehavior.Missesinthecachecantaketensofclockcycles,sohighcache-missratescanleadtopoorprocessorperformance.Inthecontextofamultiprocessorwithacommonmemorybus,contentiononthebuscanfurtheraddtothepenaltyofpoordatalocality.Asweshallsee,evenifwejustwishtoimprovethelocalityofuniprocessors,thea\u000ene-partitioningalgorithmforparallelizationisusefulasameansofiden-tifyingopportunitiesforlooptransformations.Inthissection,wedescribethreetechniquesforimprovingdatalocalityinuniprocessorsandmultiprocessors.1.Weimprovethetemporallocalityofcomputedresultsbytryingtousetheresultsassoonastheyaregenerated.Wedosobydividingacomputationintoindependentpartitionsandexecutingallthedependentoperationsineachpartitionclosetogether.2.Arraycontractionreducesthedimensionsofanarrayandreducesthenumberofmemorylocationsaccessed.Wecanapplyarraycontractionifonlyonelocationofthearrayisusedatagiventime.3.Besidesimprovingtemporallocalityofcomputedresults,wealsoneedtooptimizeforthespatiallocalityofcomputedresults,andforboththetemporalandspatiallocalityofread-onlydata.Insteadofexecutingeachpartitiononeaftertheother,weinterleaveanumberofthepartitionssothatreusesamongpartitionsoccurclosetogether.11.10.LOCALITYOPTIMIZATIONS88511.10.1TemporalLocalityofComputedDataThea\u000ene-partitioningalgorithmpullsallthedependentoperationstogether;byexecutingthesepartitionsseriallyweimprovetemporallocalityofcomputeddata.LetusreturntothemultigridexamplediscussedinSection11.7.1.Ap-plyingAlgorithm11.43toparallelizethecodeinFig11.23\fndstwodegreesofparallelism.ThecodeinFig11.24containstwoouterloopsthatiteratethroughtheindependentpartitionsserially.Thistransformedcodehasim-provedtemporallocality,sincecomputedresultsareusedimmediatelyinthesameiteration.Thus,evenifourgoalistooptimizeforsequentialexecution,itispro\ftabletouseparallelizationto\fndtheserelatedoperationsandplacethemtogether.ThealgorithmweusehereissimilartothatofAlgorithm11.64,which\fndsallthegranularitiesofparallelismstartingwiththeoutermostloop.AsdiscussedinSection11.9.9,thealgorithmparallelizesstronglyconnectedcomponentsin-dividually,ifwecannot\fndsynchronization-freeparallelismateachlevel.Thisparallelizationtendstoincreasecommunication.Thus,wecombineseparatelyparallelizedstronglyconnectedcomponentsgreedily,iftheysharereuse.11.10.2ArrayContractionTheoptimizationofarraycontractionprovidesanotherillustrationofthetrade-o\u000bbetweenstorageandparallelism,whichwas\frstintroducedinthecontextofinstruction-levelparallelisminSection10.2.3.Justasusingmoreregistersal-lowsformoreinstruction-levelparallelism,usingmorememoryallowsformoreloop-levelparallelism.AsshowninthemultigridexampleinSection11.7.1,expandingatemporaryscalarvariableintoanarrayallowsdi\u000berentiterationstokeepdi\u000berentinstancesofthetemporaryvariablesandtoexecuteatthesametime.Conversely,whenwehaveasequentialexecutionthatoperatesononearrayelementatatimeserially,wecancontractthearray,replaceitwithascalar,andhaveeachiterationusethesamelocation.InthetransformedmultigridprogramshowninFig.11.24,eachiterationoftheinnerloopproducesandconsumesadi\u000berentelementofAP;AM;T,andarowofD.Ifthesearraysarenotusedoutsideofthecodeexcerpt,theiterationscanseriallyreusethesamedatastorageinsteadofputtingthevaluesindi\u000berentelementsandrows,respectively.Figure11.62showstheresultofreducingthedimensionalityofthearrays.Thiscoderunsfasterthantheoriginal,becauseitreadsandwriteslessdata.Especiallyinthecasewhenanarrayisreducedtoascalarvariable,wecanallocatethevariabletoaregisterandeliminatetheneedtoaccessmemoryaltogether.Aslessstorageisused,lessparallelismisavailable.Iterationsinthetrans-formedcodeinFig.11.62nowsharedatadependencesandnolongercanbeexecutedinparallel.ToparallelizethecodeonPprocessors,wecanexpandeachofthescalarvariablesbyafactorofPandhaveeachprocessoraccessitsownprivatecopy.Thus,theamountbywhichthestorageisexpandedis886CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(j=2,j<=jl,j++)for(i=2,i<=il,i++){AP=...;T=1.0/(1.0+AP);D[2]=T*AP;DW[1,2,j,i]=T*DW[1,2,j,i];for(k=3,k<=kl-1,k++){AM=AP;AP=...;T=...AP-AM*D[k-1]...;D[k]=T*AP;DW[1,k,j,i]=T*(DW[1,k,j,i]+DW[1,k-1,j,i])...;}...for(k=kl-1,k>=2,k--)DW[1,k,j,i]=DW[1,k,j,i]+D[k]*DW[1,k+1,j,i];}Figure11.62:CodeofFig.11.23afterpartitioning(Fig.11.24)andarraycon-tractiondirectlycorrelatedtotheamountofparallelismexploited.Therearethreereasonsitiscommonto\fndopportunitiesforarraycon-traction:1.Higher-levelprogramminglanguagesforscienti\fcapplications,suchasMatlabandFortran90,supportarray-leveloperations.Eachsubexpres-sionofarrayoperationsproducesatemporaryarray.Becausethearrayscanbelarge,everyarrayoperationsuchasamultiplyoraddwouldrequirereadingandwritingmanymemorylocations,whilerequiringrelativelyfewarithmeticoperations.Itisimportantthatwereorderoperationssothatdataisconsumedasitisproducedandthatwecontractthesearraysintoscalarvariables.2.Supercomputersbuiltinthe80'sand90'sareallvectormachines,somanyscienti\fcapplicationsdevelopedthenhavebeenoptimizedforsuchmachines.Eventhoughvectorizingcompilersexist,manyprogrammersstillwritetheircodetooperateonvectorsatatime.Themultigridcodeexampleofthischapterisanexampleofthisstyle.3.Opportunitiesforcontractionarealsointroducedbythecompiler.AsillustratedbyvariableTinthemultigridexample,acompilerwouldex-pandarraystoimproveparallelization.Wehavetocontractthemwhenthespaceexpansionisnotnecessary.Example11.67:ThearrayexpressionZ=W+X+Ytranslatesto11.10.LOCALITYOPTIMIZATIONS887for(i=0;i<n;i++)T[i]=W[i]+X[i];for(i=0;i<n;i++)Z[i]=T[i]+Y[i];Rewritingthecodeasfor(i=0;i<n;i++){T=W[i]+X[i];Z[i]=T+Y[i]}canspeeditupconsiderably.OfcourseatthelevelofCcode,wewouldnotevenhavetousethetemporaryT,butcouldwritetheassignmenttoZ[i]asasinglestatement.However,herewearetryingtomodeltheintermediate-codelevelatwhichavectorprocessorwoulddealwiththeoperations.2Algorithm11.68:Arraycontraction.INPUT:AprogramtransformedbyAlgorithm11.64.OUTPUT:Anequivalentprogramwithreducedarraydimensions.METHOD:Adimensionofanarraycanbecontractedtoasingleelementif1.Eachindependentpartitionusesonlyoneelementofthearray,2.Thevalueoftheelementuponentrytothepartitionisnotusedbythepartition,and3.Thevalueoftheelementisnotliveonexitfromthepartition.Identifythecontractabledimensions|thosethatsatisfythethreecondi-tionsabove|andreplacethemwithasingleelement.2Algorithm11.68assumesthattheprogramhas\frstbeentransformedbyAl-gorithm11.64topullallthedependentoperationsintoapartitionandexecutethepartitionssequentially.It\fndsthosearrayvariableswhoseelements'liverangesindi\u000berentiterationsaredisjoint.Ifthesevariablesarenotliveaftertheloop,itcontractsthearrayandhastheprocessoroperateonthesamescalarlocation.Afterarraycontraction,itmaybenecessarytoselectivelyexpandarraystoaccommodateforparallelismandotherlocalityoptimizations.ThelivenessanalysisrequiredhereismorecomplexthanthatdescribedinSection9.2.5.Ifthearrayisdeclaredasaglobalvariable,orifitisaparameter,interproceduralanalysisisrequiredtoensurethatthevalueonexitisnotused.Furthermore,weneedtocomputethelivenessofindividualarrayelements,conservativelytreatingthearrayasascalarwouldbetooimprecise.11.10.3PartitionInterleavingDi\u000berentpartitionsinaloopoftenreadthesamedata,orreadandwritethesamecachelines.Inthisandthenexttwosections,wediscusshowtooptimizeforlocalitywhenreuseisfoundacrosspartitions.888CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYReuseinInnermostBlocksWeadoptthesimplemodelthatdatacanbefoundinthecacheifitisreusedwithinasmallnumberofiterations.Iftheinnermostloophasalargeorun-knownbound,onlyreuseacrossiterationsoftheinnermostlooptranslatesintoalocalitybene\ft.Blockingcreatesinnerloopswithsmallknownbounds,al-lowingreusewithinandacrossentireblocksofcomputationtobeexploited.Thus,blockinghasthee\u000bectofcapitalizingonmoredimensionsofreuse.Example11.69:Considerthematrix-multiplycodeshowninFig.11.5anditsblockedversioninFig.11.7.Matrixmultiplicationhasreusealongeverydimensionofitsthree-dimensionaliterationspace.Intheoriginalcode,thein-nermostloophasniterations,wherenisunknownandcanbelarge.Oursimplemodelassumesthatonlythedatareusedacrossiterationsintheinnermostloopisfoundinthecache.Intheblockedversion,thethreeinnermostloopsexecuteathree-dimension-alblockofcomputation,withBiterationsoneachside.TheblocksizeBischosenbythecompilertobesmallenoughsothatallthecachelinesreadandwrittenwithintheblockofcomputation\ftintothecache.Thusreuseddataacrossiterationsinthethirdoutermostloopcanbefoundinthecache.2Werefertotheinnermostsetofloopswithsmallknownboundsastheinner-mostblock.Itisdesirablethattheinnermostblockincludeallthedimensionsoftheiterationspacethatcarryreuse,ifpossible.Maximizingthelengthsofeachsideoftheblockisnotasimportant.Forthematrix-multiplyexample,3-dimensionalblockingreducestheamountofdataaccessedforeachmatrixbyafactorofB2.Ifreuseispresent,itisbettertoaccommodatehigher-dimensionalblockswithshortersidesthanlower-dimensionalblockswithlongersides.Wecanoptimizelocalityoftheinnermostfullypermutableloopnestbyblockingthesubsetofloopsthatsharereuse.Wecangeneralizethenotionofblockingtoexploitreusesfoundamongiterationsofouterparallelloops,also.Observethatblockingprimarilyinterleavestheexecutionofasmallnumberofinstancesoftheinnermostloop.Inmatrixmultiplication,eachinstanceoftheinnermostloopcomputesoneelementofthearrayanswer;therearen2ofthem.Blockinginterleavestheexecutionofablockofinstances,computingBiterationsfromeachinstanceatatime.Similarly,wecaninterleaveiterationsinparallelloopstotakeadvantageofreusesbetweenthem.Wede\fnetwoprimitivesbelowthatcanreducethedistancebetweenreusesacrossdi\u000berentiterations.Weapplytheseprimitivesrepeatedly,startingfromtheoutermostloopuntilallthereusesaremovedadjacenttoeachotherintheinnermostblock.InterleavingInnerLoopsinaParallelLoopConsiderthecasewhereanouterparallelizableloopcontainsaninnerloop.Toexploitreuseacrossiterationsoftheouterloop,weinterleavetheexecutionsof11.10.LOCALITYOPTIMIZATIONS889a\fxednumberofinstancesoftheinnerloop,asshowninFig.11.63.Creatingtwo-dimensionalinnerblocks,thistransformationreducesthedistancebetweenreuseofconsecutiveiterationsoftheouterloop.for(i=0;i<n;i++)for(ii=0;ii<n;ii+=4)for(j=0;j<n;j++)for(j=0;j<n;j++)<S>for(i=ii;i<min(n,ii+4);i++)<S>(a)Sourceprogram.(b)Transformedcode.Figure11.63:Interleaving4instancesoftheinnerloopThestepthatturnsaloopfor(i=0;i<n;i++)<S>intofor(ii=0;ii<n;ii+=4)for(i=ii;i<min(n,ii+4);i++)<S>isknownasstripmining.InthecasewheretheouterloopinFig.11.63hasasmallknownbound,weneednotstripmineit,butcansimplypermutethetwoloopsintheoriginalprogram.InterleavingStatementsinaParallelLoopConsiderthecasewhereaparallelizableloopcontainsasequenceofstatementss1;s2;:::;sm.Ifsomeofthesestatementsareloopsthemselves,statementsfromconsecutiveiterationsmaystillbeseparatedbymanyoperations.Wecanexploitreusebetweeniterationsbyagaininterleavingtheirexecutions,asshowninFig.11.64.Thistransformationdistributesastripminedloopacrossthestatements.Again,iftheouterloophasasmall\fxednumberofiterations,weneednotstripminetheloopbutsimplydistributetheoriginalloopoverallthestatements.Weusesi(j)todenotetheexecutionofstatementsiiniterationj.InsteadoftheoriginalsequentialexecutionordershowninFig.11.65(a),thecodeexecutesintheordershowninFig.11.65(b).Example11.70:Wenowreturntothemultigridexampleandshowhowweexploitreusebetweeniterationsofouterparallelloops.WeobservethatreferencesDW[1;k;j;i],DW[1;k\u00001;j;i],andDW[1;k+1;j;i]intheinnermostloopsofthecodeinFig.11.62haveratherpoorspatiallocality.Fromreuseanalysis,asdiscussedinSection11.5,theloopwithindexicarriesspatial890CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(i=0;i<n;i++){for(ii=0;ii<n;ii+=4){<S1>for(i=ii;i<min(n,ii+4);i++)<S2><S1>...for(i=ii;i<min(n,ii+4);i++)}<S2>...}(a)Sourceprogram.(b)Transformedcode.Figure11.64:Thestatement-interleavingtransformationlocalityandtheloopwithindexkcarriesgroupreuse.Theloopwithindexkisalreadytheinnermostloop,soweareinterestedininterleavingoperationsonDWfromablockofpartitionswithconsecutiveivalues.WeapplythetransformtointerleavestatementsinthelooptoobtainthecodeinFig.11.66,thenapplythetransformtointerleaveinnerloopstoobtainthecodeinFig.11.67.NoticethatasweinterleaveBiterationsfromloopwithindexi,weneedtoexpandvariablesAP;AM;TintoarraysthatholdBresultsatatime.211.10.4PuttingitAllTogetherAlgorithm11.71optimizeslocalityforauniprocessor,andAlgorithm11.72optimizesbothparallelismandlocalityforamultiprocessor.Algorithm11.71:Optimizedatalocalityonauniprocessor.INPUT:Aprogramwitha\u000enearrayaccesses.OUTPUT:Anequivalentprogramthatmaximizesdatalocality.METHOD:Dothefollowingsteps:1.ApplyAlgorithm11.64tooptimizethetemporallocalityofcomputedresults.2.ApplyAlgorithm11.68tocontractarrayswherepossible.3.DeterminetheiterationsubspacethatmaysharethesamedataorcachelinesusingthetechniquedescribedinSection11.5.Foreachstatement,identifythoseouterparallelloopdimensionsthathavedatareuse.4.Foreachouterparallelloopcarryingreuse,moveablockoftheiterationsintotheinnermostblockbyapplyingtheinterleavingprimitivesrepeat-edly.11.10.LOCALITYOPTIMIZATIONS891s1(0);s2(0);:::;sm(0);s1(1);s2(1);:::;sm(1);s1(2);s2(2);:::;sm(2);s1(3);s2(3);:::;sm(3);s1(4);s2(4);:::;sm(4);s1(5);s2(5);:::;sm(5);s1(6);s2(6);:::;sm(6);s1(7);s2(7);:::;sm(7);:::;(a)Originalorder.s1(0);s1(1);s1(2);s1(3);s2(0);s2(1);s2(2);s2(3);:::;sm(0);sm(1);sm(2);sm(3);s1(4);s1(5);s1(6);s1(7);s2(4);s2(5);s2(6);s2(7);:::;sm(4);sm(5);sm(6);sm(7);:::;(b)Transformedorder.Figure11.65:Distributingastripminedloop5.Applyblockingtothesubsetofdimensionsintheinnermostfullyper-mutableloopnestthatcarriesreuse.6.Blockouterfullypermutableloopnestforhigherlevelsofmemoryhier-archies,suchasthethird-levelcacheorthephysicalmemory.7.Expandscalarsandarrayswherenecessarybythelengthsoftheblocks.2Algorithm11.72:Optimizeparallelismanddatalocalityformultiprocessors.INPUT:Aprogramwitha\u000enearrayaccesses.OUTPUT:Anequivalentprogramthatmaximizesparallelismanddatalocality.METHOD:Dothefollowing:1.UsetheAlgorithm11.64toparallelizetheprogramandcreateanSPMDprogram.892CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYfor(j=2,j<=jl,j++)for(ii=2,ii<=il,ii+=b){for(i=ii;i<=min(ii+b-1,il);i++){ib=i-ii+1;AP[ib]=...;T=1.0/(1.0+AP[ib]);D[2,ib]=T*AP[ib];DW[1,2,j,i]=T*DW[1,2,j,i];}for(i=ii;i<=min(ii+b-1,il);i++){for(k=3,k<=kl-1,k++)ib=i-ii+1;AM=AP[ib];AP[ib]=...;T=...AP[ib]-AM*D[ib,k-1]...;D[ib,k]=T*AP;DW[1,k,j,i]=T*(DW[1,k,j,i]+DW[1,k-1,j,i])...;}...for(i=ii;i<=min(ii+b-1,il);i++)for(k=kl-1,k>=2,k--){DW[1,k,j,i]=DW[1,k,j,i]+D[iw,k]*DW[1,k+1,j,i];/*Endscodetobeexecutedbyprocessor(j,i)*/}}Figure11.66:ExcerptofFig.11.23afterpartitioning,arraycontraction,andblocking2.ApplyAlgorithm11.71totheSPMDprogramproducedinStep1tooptimizeitslocality.211.10.5ExercisesforSection11.10Exercise11.10.1:Performarraycontractiononthefollowingvectoropera-tions:for(i=0;i<n;i++)T[i]=A[i]*B[i];for(i=0;i<n;i++)D[i]=T[i]+C[i];Exercise11.10.2:Performarraycontractiononthefollowingvectoropera-tions:11.11.OTHERUSESOFAFFINETRANSFORMS893for(j=2,j<=jl,j++)for(ii=2,ii<=il,ii+=b){for(i=ii;i<=min(ii+b-1,il);i++){ib=i-ii+1;AP[ib]=...;T=1.0/(1.0+AP[ib]);D[2,ib]=T*AP[ib];DW[1,2,j,i]=T*DW[1,2,j,i];}for(k=3,k<=kl-1,k++)for(i=ii;i<=min(ii+b-1,il);i++){ib=i-ii+1;AM=AP[ib];AP[ib]=...;T=...AP[ib]-AM*D[ib,k-1]...;D[ib,k]=T*AP;DW[1,k,j,i]=T*(DW[1,k,j,i]+DW[1,k-1,j,i])...;}...for(k=kl-1,k>=2,k--){for(i=ii;i<=min(ii+b-1,il);i++)DW[1,k,j,i]=DW[1,k,j,i]+D[iw,k]*DW[1,k+1,j,i];/*Endscodetobeexecutedbyprocessor(j,i)*/}}Figure11.67:ExcerptofFig.11.23afterpartitioning,arraycontraction,block-ing,andinner-loopinterleavingfor(i=0;i<n;i++)T[i]=A[i]+B[i];for(i=0;i<n;i++)S[i]=C[i]+D[i];for(i=0;i<n;i++)E[i]=T[i]*S[i];Exercise11.10.3:Stripminetheouterloopfor(i=n-1;i>=0;i--)for(j=0;j<n;j++)intostripsofwidth10.11.11OtherUsesofA\u000eneTransformsSofarwehavefocusedonthearchitectureofsharedmemorymachines,butthetheoryofa\u000enelooptransformshasmanyotherapplications.Wecanap-plya\u000enetransformstootherformsofparallelismincludingdistributedmemory894CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYmachines,vectorinstructions,SIMD(SingleInstructionMultipleData)instruc-tions,aswellasmultiple-instruction-issuemachines.Thereuseanalysisintro-ducedinthischapteralsoisusefulfordataprefetching,whichisane\u000bectivetechniqueforimprovingmemoryperformance.11.11.1DistributedMemoryMachinesFordistributedmemorymachines,whereprocessorscommunicatebysendingmessagestoeachother,itisevenmoreimportantthatprocessorsbeassignedlarge,independentunitsofcomputation,suchasthosegeneratedbythea\u000ene-partitioningalgorithm.Besidescomputationpartitioning,anumberofaddi-tionalcompilationissuesremain:1.Dataallocation.Ifprocessorsusedi\u000berentportionsofanarray,theyeachonlyhavetoallocateenoughspacetoholdtheportionused.Wecanuseprojectiontodeterminethesectionofarraysusedbyeachprocessor.Theinputisthesystemoflinearinequalitiesrepresentingtheloopbounds,thearrayaccessfunctions,andthea\u000enepartitionsthatmaptheiterationstoprocessorIDs.Weprojectawaytheloopindicesand\fndforeachprocessorIDthesetofarraylocationsused.2.Communicationcode.Weneedtogenerateexplicitcodetosendandreceivedatatoandfromotherprocessors.Ateachsynchronizationpoint(a)Determinethedataresidingononeprocessorthatisneededbyotherprocessors.(b)Generatethecodethat\fndsallthedatatobesentandpacksitintoabu\u000ber.(c)Similarly,determinethedataneededbytheprocessor,unpackre-ceivedmessages,andmovethedatatotherightmemorylocations.Again,ifallaccessesarea\u000ene,thesetaskscanbeperformedbythecompiler,usingthea\u000eneframework.3.Optimization.Itisnotnecessaryforallthecommunicationstotakeplaceatthesynchronizationpoints.Itispreferablethateachprocessorsendsdataassoonasitisavailable,andthateachprocessordoesnotstartwaitingfordatauntilitisneeded.Suchoptimizationsmustbebalancedbythegoalofnotgeneratingtoomanymessages,sincethereisanontrivialoverheadassociatedwithprocessingeachmessage.Techniquesdescribedherehaveotherapplicationsaswell.Forexample,aspecial-purposeembeddedsystemmayusecoprocessorstoo\u000foadsomeofitscomputations.Or,insteadofdemandfetchingdataintothecache,anembeddedsystemmayuseaseparatecontrollertoloadandunloaddataintoandoutofthecache,orotherdatabu\u000bers,whiletheprocessoroperatesonotherdata.Inthesecases,similartechniquescanbeusedtogeneratethecodetomovedataaround.11.11.OTHERUSESOFAFFINETRANSFORMS89511.11.2Multi-Instruction-IssueProcessorsWecanalsousea\u000enelooptransformstooptimizetheperformanceofmulti-instruction-issuemachines.AsdiscussedinSection10.5,theperformanceofasoftware-pipelinedloopislimitedbytwofactors:cyclesinprecedencecon-straintsandtheusageofthecriticalresource.Bychangingthemakeupoftheinnermostloop,wecanimprovetheselimits.First,wemaybeabletouselooptransformstocreateinnermostparalleliz-ableloops,thuseliminatingprecedencecyclesaltogether.Supposeaprogramhastwoloops,withtheouterbeingparallelizableandtheinnernot.Wecanpermutethetwoloopstomaketheinnerloopparallelizableandsocreatemoreopportunitiesforinstruction-levelparallelism.Noticethatitisnotnecessaryforiterationsintheinnermostlooptobecompletelyparallelizable.Itissu\u000e-cientthatthecycleofdependencesintheloopbeshortenoughsothatallthehardwareresourcesarefullyutilized.Wecanalsorelaxthelimitduetoresourceusagebyimprovingtheusagebalanceinsidealoop.Supposeonelooponlyusestheadder,andanotherusesonlythemultiplier.Or,supposeoneloopismemoryboundandanotheriscomputebound.Itisdesirabletofuseeachpairofloopsintheseexamplestogethersoastoutilizeallthefunctionalunitsatthesametime.11.11.3VectorandSIMDInstructionsBesidesmultiple-instructionissue,therearetwootherimportantformsofin-struction-levelparallelism:vectorandSIMDoperations.Inbothcases,theissueofjustoneinstructioncausesthesameoperationtobeappliedtoavectorofdata.Asmentionedpreviously,manyearlysupercomputersusedvectorinstruc-tions.Vectoroperationsareperformedinapipelinedmanner;theelementsinthevectorarefetchedseriallyandcomputationsondi\u000berentelementsareoverlapped.Inadvancedvectormachines,vectoroperationscanbechained:astheelementsofthevectorresultsareproduced,theyareimmediatelycon-sumedbyoperationsofanothervectorinstructionwithouthavingtowaitforalltheresultstobeready.Moreover,inadvancedmachineswithscatter/gatherhardware,theelementsofthevectorsneednotbecontiguous;anindexvectorisusedtospecifywheretheelementsarelocated.SIMDinstructionsspecifythatthesameoperationbeperformedoncontigu-ousmemorylocations.Theseinstructionsloaddatafrommemoryinparallel,storetheminwideregisters,andcomputeonthemusingparallelhardware.Manymedia,graphics,anddigital-signal-processingapplicationscanbene\ftfromtheseoperations.Low-endmediaprocessorscanachieveinstruction-levelparallelismsimplybyissuingoneSIMDinstructionatatime.Higher-endpro-cessorscancombineSIMDwithmultiple-instructionissuetoachievehigherperformance.SIMDandvectorinstructiongenerationsharemanysimilaritieswithlocality896CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYoptimization.Aswe\fndindependentpartitionsthatoperateoncontiguousmemorylocations,westripminethoseiterationsandinterleavetheseoperationsininnermostloops.SIMDinstructiongenerationposestwoadditionaldi\u000eculties.First,somemachinesrequirethattheSIMDdatafetchedfrommemorybealigned.Forexample,theymightrequirethat256-byteSIMDoperandsbeplacedinad-dressesthataremultiplesof256.Ifthesourceloopoperatesonjustonearrayofdata,wecangenerateonemainloopthatoperatesonaligneddataandex-tracodebeforeandafterthelooptohandlethoseelementsattheboundary.Forloopsoperatingonmorethanonearray,however,itmaynotbepossibletoalignallthedataatthesametime.Second,datausedbyconsecutiveit-erationsinaloopmaynotbecontiguous.Examplesincludemanyimportantdigital-signal-processingalgorithms,suchasViterbidecodersandfastFouriertransforms.Additionaloperationstoshu\u000fethedataaroundmaybenecessarytotakeadvantageoftheSIMDinstructions.11.11.4PrefetchingNodata-localityoptimizationcaneliminateallmemoryaccesses;forone,datausedforthe\frsttimemustbefetchedfrommemory.Tohidethelatencyofmemoryoperations,prefetchinstructionshavebeenadoptedinmanyhigh-performanceprocessors.Prefetchisamachineinstructionthatindicatestotheprocessorthatcertaindataislikelytobeusedsoon,andthatitisdesirabletoloadthedataintothecacheifitisnotpresentalready.ThereuseanalysisdescribedinSection11.5canbeusedtoestimatewhencachesmissesarelikely.Therearetwoimportantconsiderationswhengener-atingprefetchinstructions.Ifcontiguousmemorylocationsaretobeaccessed,weneedtoissueonlyoneprefetchinstructionforeachcacheline.Prefetchinstructionsshouldbeissuedearlyenoughsothatthedataisinthecachebythetimeitareused.However,weshouldnotissueprefetchinstructionstoofarinadvance.Theprefetchinstructionscandisplacedatathatmaystillbeneeded;alsotheprefetcheddatamaybe\rushedbeforeitisused.Example11.73:Considerthefollowingcode:for(i=0;ii<3;i++)for(j=0;j<100;j++)A[i,j]=...;Supposethetargetmachinehasaprefetchinstructionthatcanfetchtwowordsofdataatatime,andthatthelatencyofaprefetchinstructiontakesaboutthetimetoexecutesixiterationsoftheloopabove.TheprefetchcodefortheaboveexampleisshowninFig.11.68.Weunrolltheinnermostlooptwice,soaprefetchcanbeissuedforeachcacheline.Weusetheconceptofsoftwarepipeliningtoprefetchdatasixiterationsbeforeitisused.Theprologfetchesthedatausedinthe\frstsixiterations.The11.12.SUMMARYOFCHAPTER11897for(i=0;ii<3;i++){for(j=0;j<6;j+=2)prefetch(&A[i,j]);for(j=0;j<94;j+=2){prefetch(&A[i,j+6]);A[i,j]=...;A[i,j+1]=...;}for(j=94;j<100;j++)A[i,j]=...;}Figure11.68:Codemodi\fedtoprefetchdatasteadystateloopprefetchessixiterationsaheadasitperformsitscomputation.Theepilogissuesnoprefetches,butsimplyexecutestheremainingiterations.211.12SummaryofChapter11 ✦ParallelismandLocalityfromArrays.Themostimportantopportunitiesforbothparallelismandlocality-basedoptimizationscomefromloopsthataccessarrays.Theseloopstendtohavelimiteddependencesamongaccessestoarrayelementsandtendtoaccessarraysinaregularpattern,allowinge\u000ecientuseofthecacheforgoodlocality. ✦A\u000eneAccesses.Almostalltheoryandtechniquesforparallelismandlocalityoptimizationassumeaccessestoarraysarea\u000ene:theexpressionsforthearrayindexesarelinearfunctionsoftheloopindexes. ✦IterationSpaces.Aloopnestwithdnestedloopsde\fnesad-dimensionaliterationspace.Thepointsinthespacearethed-tuplesofvaluesthattheloopindexescanassumeduringtheexecutionoftheloopnest.Inthea\u000enecase,thelimitsoneachloopindexarelinearfunctionsoftheouterloopindexes,sotheiterationspaceisapolyhedron. ✦Fourier-MotzkinElimination.Akeymanipulationofiterationspacesistoreordertheloopsthatde\fnetheiterationspace.Doingsorequiresthatapolyhedraliterationspacebeprojectedontoasubsetofitsdimensions.TheFourier-Motzkinalgorithmreplacestheupperandlowerlimitsonagivenvariablebyinequalitiesbetweenthelimitsthemselves. ✦DataDependencesandArrayAccesses.Acentralproblemwemustsolveinordertomanipulateloopsforparallelismandlocalityoptimizationsiswhethertwoarrayaccesseshaveadatadependence(cantouchthe898CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYsamearrayelement).Whentheaccessesandloopboundsarea\u000ene,theproblemcanbeexpressedaswhethertherearesolutionstoamatrix-vectorequationwithinthepolyhedronthatde\fnestheiterationspace. ✦MatrixRankandDataReuse.Thematrixthatdescribesanarrayaccesscantellusseveralimportantthingsaboutthataccess.Iftherankofthematrixisaslargeaspossible(minimumofthenumberofrowsandnumberofcolumns),thentheaccessnevertouchesthesameelementtwiceastheloopsiterate.Ifthearrayisstoredinrow-(column-)majorform,thentherankofthematrixwiththelast(\frst)rowdeletedtellsuswhethertheaccesshasgoodlocality;i.e.,elementsinasinglecachelineareaccessedataboutthesametime. ✦DataDependenceandDiophantineEquations.Justbecausetwoaccessestothesamearraytouchthesameregionofthearraydoesnotmeanthattheyactuallyaccessanyelementincommon.Thereasonisthateachmayskipsomeelements;e.g.,oneaccessesevenelementsandtheotheraccessesoddelements.Inordertobesurethatthereisadatadependence,wemustsolveaDiophantine(integersolutionsonly)equation. ✦SolvingDiophantineLinearEquations.Thekeytechniqueistocomputethegreatestcommondivisor(GCD)ofthecoe\u000ecientsofthevariables.OnlyifthatGCDdividestheconstanttermwilltherebeintegersolutions. ✦Space-PartitionConstraints.Toparallelizetheexecutionofaloopnest,weneedtomaptheiterationsofthelooptoaspaceofprocessors,whichcanhaveoneormoredimensions.Thespace-partitionconstraintssaythatiftwoaccessesintwodi\u000berentiterationsshareadatadependence(i.e.,theyaccessthesamearrayelement),thentheymustmaptothesameprocessor.Aslongasthemappingofiterationstoprocessorsisa\u000ene,wecanformulatetheprobleminmatrix-vectorterms. ✦PrimitiveCodeTransformations.Thetransformationsusedtoparallelizeprogramswitha\u000enearrayaccessesarecombinationsofsevenprimitives:loopfusion,loop\fssion,re-indexing(addingaconstanttoloopindexes),scaling(multiplyingloopindexesbyaconstant),reversal(ofaloopindex),permutation(oftheorderofloops),andskewing(rewritingloopssothelineofpassagethroughtheiterationspaceisnolongeralongoneoftheaxes). ✦SynchronizationofParallelOperations.Sometimesmoreparallelismcanbeobtainedifweinsertsynchronizationoperationsbetweenstepsofaprogram.Forexample,consecutiveloopnestsmayhavedatadepen-dences,butsynchronizationsbetweentheloopscanallowtheloopstobeparallelizedseparately. ✦Pipelining.Thisparallelizationtechniqueallowsprocessorstosharedata,bysynchronouslypassingcertaindata(typicallyarrayelements)fromone11.13.REFERENCESFORCHAPTER11899processortoanadjacentprocessorintheprocessorspace.Themethodcanimprovethelocalityofthedataaccessedbyeachprocessor. ✦Time-PartitionConstraints.Todiscoveropportunitiesforpipelining,weneedtodiscoversolutionstothetime-partitionconstraints.Thesesaythatwhenevertwoarrayaccessescantouchthesamearrayelement,thentheaccessintheiterationthatoccurs\frstmustbeassignedtoastageinthepipelinethatoccursnolaterthanthestagetowhichthesecondaccessisassigned. ✦SolvingTime-PartitionConstraints.Farkas'Lemmaprovidesapower-fultechniquefor\fndingallthea\u000enetime-partitionmappingsthatareallowedbyagivenloopnestwitharrayaccesses.Thetechniqueises-sentiallytoreplacetheprimalformulationofthelinearinequalitiesthatexpressthetime-partitionconstraintsbytheirdual. ✦Blocking.Thistechniquebreakseachofseveralloopsinaloopnestintotwoloopseach.Theadvantageisthatdoingsomayallowustoworkonsmallsections(blocks)ofamultidimensionalarray,oneblockatatime.That,inturn,improvesthelocalityoftheprogram,lettingalltheneededdataresideinthecachewhileworkingonasingleblock. ✦Stripmining.Similartoblocking,thistechniquebreaksonlyasubsetoftheloopsofaloopnestintotwoloopseach.Apossibleadvantageisthatamultidimensionalarrayisaccesseda\\strip\"atatime,whichmayleadtothebestpossiblecacheutilization.11.13ReferencesforChapter11Fordetaileddiscussionsofmultiprocessorarchitectures,wereferthereadertothetextbyHennessyandPatterson[9].Lamport[13]andKuck,Muraoka,andChen[6]introducedtheconceptofdata-dependenceanalysis.Earlydata-dependencetestsusedheuristicstoproveapairofreferencestobeindependentbydeterminingiftherearenosolutionstoDiophantineequationsandsystemsofreallinearinequalities:[5,6,26].May-dan,Hennessy,andLam[18]formulatedthedata-dependencetestasintegerlinearprogrammingandshowedthattheproblemcanbesolvedexactlyande\u000ecientlyinpractice.Thedata-dependenceanalysisdescribedhereisbasedonworkbyMaydan,Hennessy,andLam[18]andPughandWonnacott[23],whichinturnusetechniquesofFourier-Motzkinelimination[7]andShostak'salgorithm[25].The70'sandearly80'ssawtheuseoflooptransformationstoimprovevectorizationandparallelization:loopfusion[3],loop\fssion[1],stripmining[17],andloopinterchange[28].Therewerethreemajorexperimentalparal-lelizer/vectorizingprojectsgoingonatthetime:ParafraseledbyKuckattheUniversityofIllinoisUrbana-Champaign[21],thePFCprojectledbyKennedy900CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITYatRiceUniversity[4],andthePTRANprojectledbyAllenatIBMResearch[2].McKellarandCo\u000bman[19]\frstdiscussedusingblockingtoimprovedatalocality.Lam,Rothbert,andWolf[12]providedthe\frstin-depthempiricalanalysisofblockingoncachesformodernarchitectures.WolfandLam[27]usedlinear-algebratechniquestocomputedatareuseinloops.SarkarandGao[24]introducedtheoptimizationofarraycontraction.Lamport[13]wasthe\frsttomodelloopsasiterationspacesandusedhyper-planing(aspecialcaseofana\u000enetransform)to\fndparallelismformultipro-cessors.A\u000enetransformshavetheirrootinsystolic-arrayalgorithmdesign[11].IntendedasparallelalgorithmsdirectlyimplementedinVLSI,systolicarraysrequirecommunicationtobeminimizedalongwithparallelization.Algebraictechniquesweredevelopedtomapthecomputationontospaceandtimecoordi-nates.Theconceptofana\u000enescheduleandtheuseofFarkas'Lemmaina\u000enetransformationswereintroducedbyFeautrier[8].Thea\u000ene-transformationalgorithmdescribedhereisbasedonworkbyLimetal.[15,14,16].Porter\feld[22]proposedoneofthe\frstcompileralgorithmstoprefetchdata.Mowry,Lam,andGupta[20]appliedreuseanalysistominimizetheprefetchoverheadandgainanoverallperformanceimprovement.1.Abu-Sufah,W.,D.J.Kuck,andD.H.Lawrie,\\Ontheperformanceenhancementofpagingsystemsthroughprogramanalysisandtransfor-mations,\"IEEETrans.onComputingC-30:5(1981),pp.341{356.2.Allen,F.E.,M.Burke,P.Charles,R.Cytron,andJ.Ferrante,\\AnoverviewofthePTRANanalysissystemformultiprocessing,\"J.ParallelandDistributedComputing5:5(1988),pp.617{640.3.Allen,F.E.andJ.Cocke,\\ACatalogueofoptimizingtransformations,\"inDesignandOptimizationofCompilers(R.Rustin,ed.),pp.1{30,Prentice-Hall,1972.4.Allen,R.andK.Kennedy,\\AutomatictranslationofFortranprogramstovectorform,\"ACMTransactionsonProgrammingLanguagesandSystems9:4(1987),pp.491{542.5.Banerjee,U.,DataDependenceinOrdinaryPrograms,Master'sthesis,DepartmentofComputerScience,UniversityofIllinoisUrbana-Cham-paign,1976.6.Banerjee,U.,SpeedupofOrdinaryPrograms,Ph.D.thesis,DepartmentofComputerScience,UniversityofIllinoisUrbana-Champaign,1979.7.Dantzig,G.andB.C.Eaves,\\Fourier-Motzkineliminationanditsdual,\"J.CombinatorialTheory,A(14)(1973),pp.288{297.8.Feautrier,P.,\\Somee\u000ecientsolutionstothea\u000eneschedulingproblem:I.One-dimensionaltime,\"InternationalJ.ParallelProgramming21:5(1992),pp.313{348,11.13.REFERENCESFORCHAPTER119019.Hennessy,J.L.andD.A.Patterson,ComputerArchitecture:AQuanti-tativeApproach,ThirdEdition,MorganKaufman,SanFrancisco,2003.10.Kuck,D.,Y.Muraoka,andS.Chen,\\OnthenumberofoperationssimultaneouslyexecutableinFortran-likeprogramsandtheirresultingspeedup,\"IEEETransactionsonComputersC-21:12(1972),pp.1293{1310.11.Kung,H.T.andC.E.Leiserson,\\Systolicarrays(forVLSI),\"inDu\u000b,I.S.andG.W.Stewart(eds.),SparseMatrixProceedingspp.256{282.SocietyforIndustrialandAppliedMathematics,1978.12.Lam,M.S.,E.E.Rothberg,andM.E.Wolf,\\Thecacheperformanceandoptimizationofblockedalgorithms,\"Proc.SixthInternationalConferenceonArchitecturalSupportforProgrammingLanguagesandOperatingSys-tems(1991),pp.63{74.13.Lamport,L.,\\TheparallelexecutionofDOloops,\"Comm.ACM17:2(1974),pp.83{93.14.Lim,A.W.,G.I.Cheong,andM.S.Lam,\\Ana\u000enepartitioningalgo-rithmtomaximizeparallelismandminimizecommunication,\"Proc.13thInternationalConferenceonSupercomputing(1999),pp.228{237.15.Lim,A.W.andM.S.Lam,\\Maximizingparallelismandminimizingsynchronizationwitha\u000enetransforms,\"Proc.24thACMSIGPLAN-SIG-ACTSymposiumonPrinciplesofProgrammingLanguages(1997),pp.201{214.16.Lim,A.W.,S.-W.Liao,andM.S.Lam,\\Blockingandarraycontrac-tionacrossarbitrarilynestedloopsusinga\u000enepartitioning,\"Proc.ACMSIGPLANSymposiumonPrinciplesandPracticeofParallelProgram-ming(2001),pp.103{112.17.Loveman.D.B.,\\Programimprovementbysource-to-sourcetransforma-tion,\"J.ACM24:1(1977),pp.121{145.18.Maydan,D.E.,J.L.Hennessy,andM.S.Lam,\\Ane\u000ecientmethodforexactdependenceanalysis,\"Proc.ACMSIGPLAN1991ConferenceonProgrammingLanguageDesignandImplementation,pp.1{14.19.McKeller,A.C.andE.G.Co\u000bman,\\Theorganizationofmatricesandmatrixoperationsinapagedmultiprogrammingenvironment,\"Comm.ACM,12:3(1969),pp.153{165.20.Mowry,T.C.,M.S.Lam,andA.Gupta,\\Designandevaluationofacom-pileralgorithmforprefetching,\"Proc.FifthInternationalConferenceonArchitecturalSupportforProgrammingLanguagesandOperatingSystems(1992),pp.62{73.902CHAPTER11.OPTIMIZINGFORPARALLELISMANDLOCALITY21.Padua,D.A.andM.J.Wolfe,\\Advancedcompileroptimizationsforsupercomputers,\"Comm.ACM,29:12(1986),pp.1184{1201.22.Porter\feld,A.,SoftwareMethodsforImprovingCachePerformanceonSupercomputerApplications,Ph.D.Thesis,DepartmentofComputerSci-ence,RiceUniversity,1989.23.Pugh,W.andD.Wonnacott,\\Eliminatingfalsepositivesusingtheomegatest,\"Proc.ACMSIGPLAN1992ConferenceonProgrammingLanguageDesignandImplementation,pp.140{151.24.Sarkar,V.andG.Gao,\\Optimizationofarrayaccessesbycollectivelooptransformations,\"Proc.5thInternationalConferenceonSupercomputing(1991),pp.194{205.25.R.Shostak,\\Decidinglinearinequalitiesbycomputingloopresidues,\"J.ACM,28:4(1981),pp.769{779.26.Towle,R.A.,ControlandDataDependenceforProgramTransforma-tion,Ph.D.thesis,DepartmentofComputerScience,UniversityofIllinoisUrbana-Champaign,1976.27.Wolf,M.E.andM.S.Lam,\\Adatalocalityoptimizingalgorithm,\"Proc.SIGPLAN1991ConferenceonProgrammingLanguageDesignandImplementation,pp.30{44.28.Wolfe,M.J.,TechniquesforImprovingtheInherentParallelisminPro-grams,Master'sthesis,DepartmentofComputerScience,UniversityofIllinoisUrbana-Champaign,1978.Chapter12InterproceduralAnalysisInthischapter,wemotivatetheimportanceofinterproceduralanalysisbydis-cussinganumberofimportantoptimizationproblemsthatcannotbesolvedwithintraproceduralanalysis.Webeginbydescribingthecommonformsofinterproceduralanalysisandexplainingthedi\u000ecultiesintheirimplementation.Wethendescribeapplicationsforinterproceduralanalysis.ForwidelyusedprogramminglanguageslikeCandJava,pointeraliasanalysisiskeytoanyinterproceduralanalysis.Thus,formuchofthechapter,wediscusstechniquesneededtocomputepointeraliases.Tostart,wepresentDatalog,anotationthatgreatlyhidesthecomplexityofane\u000ecientpointeranalysis.Wethende-scribeanalgorithmforpointeranalysis,andshowhowweusetheabstractionofbinarydecisiondiagrams(BDD's)toimplementthealgorithme\u000eciently.Mostcompileroptimizations,includingthosedescribedinChapters9,10,and11,areperformedonproceduresoneatatime.Werefertosuchanalysesasintraprocedural.Theseanalysesconservativelyassumethatproceduresinvokedmayalterthestateofallthevariablesvisibletotheproceduresandthattheymaycreateallpossiblesidee\u000bects,suchasmodifyinganyofthevariablesvisibletotheprocedureorgeneratingexceptionsthatcausetheunwindingofthecallstack.Intraproceduralanalysisisthusrelativelysimple,albeitimprecise.Someoptimizationsdonotneedinterproceduralanalysis,whileothersmayyieldalmostnousefulinformationwithoutit.Aninterproceduralanalysisoperatesacrossanentireprogram,\rowingin-formationfromthecallertoitscalleesandviceversa.Onerelativelysimplebutusefultechniqueistoinlineprocedures,thatis,toreplaceaprocedureinvoca-tionbythebodyoftheprocedureitselfwithsuitablemodi\fcationstoaccountforparameterpassingandthereturnvalue.Thismethodisapplicableonlyifweknowthetargetoftheprocedurecall.Ifproceduresareinvokedindirectlythroughapointerorviathemethod-dispatchmechanismprevalentinobject-orientedprogramming,analysisoftheprogram'spointersorreferencescaninsomecasesdeterminethetargetsoftheindirectinvocations.Ifthereisauniquetarget,inliningcanbeapplied.903904CHAPTER12.INTERPROCEDURALANALYSISEvenifauniquetargetisdeterminedforeachprocedureinvocation,inliningmustbeappliedjudiciously.Ingeneral,itisnotpossibletoinlinerecursiveproceduresdirectly,andevenwithoutrecursion,inliningcanexpandthecodesizeexponentially.12.1BasicConceptsInthissection,weintroducecallgraphs|graphsthattelluswhichprocedurescancallwhich.Wealsointroducetheideaof\\contextsensitivity,\"wheredata-\rowanalysesarerequiredtotakecognizanceofwhatthesequenceofprocedurecallshasbeen.Thatis,context-sensitiveanalysisincludes(asynopsisof)thecurrentsequenceofactivationrecordsonthestack,alongwiththecurrentpointintheprogram,whendistinguishingamongdi\u000berent\\places\"intheprogram.12.1.1CallGraphsAcallgraphforaprogramisasetofnodesandedgessuchthat1.Thereisonenodeforeachprocedureintheprogram.2.Thereisonenodeforeachcallsite,thatis,aplaceintheprogramwhereaprocedureisinvoked.3.Ifcallsitecmaycallprocedurep,thenthereisanedgefromthenodeforctothenodeforp.ManyprogramswritteninlanguageslikeCandFortranmakeprocedurecallsdirectly,sothecalltargetofeachinvocationcanbedeterminedstatically.Inthatcase,eachcallsitehasanedgetoexactlyoneprocedureinthecallgraph.However,iftheprogramincludestheuseofaprocedureparameterorfunctionpointer,thetargetgenerallyisnotknownuntiltheprogramisrunand,infact,mayvaryfromoneinvocationtoanother.Then,acallsitecanlinktomanyorallproceduresinthecallgraph.Indirectcallsarethenormforobject-orientedprogramminglanguages.Inparticular,whenthereisoverridingofmethodsinsubclasses,auseofmethodmmayrefertoanyofanumberofdi\u000berentmethods,dependingonthesubclassofthereceiverobjecttowhichitwasapplied.Theuseofsuchvirtualmethodinvocationsmeansthatweneedtoknowthetypeofthereceiverbeforewecandeterminewhichmethodisinvoked.Example12.1:Figure12.1showsaCprogramthatdeclarespftobeaglobalpointertoafunctionwhosetypeis\\integertointeger.\"Therearetwofunctionsofthistype,fun1andfun2,andamainfunctionthatisnotofthetypethatpfpointsto.The\fgureshowsthreecallsites,denotedc1,c2,andc3;thelabelsarenotpartoftheprogram.12.1.BASICCONCEPTS905int(*pf)(int);intfun1(intx){if(x<10)c1:return(*pf)(x+1);elsereturnx;}intfun2(inty){pf=&fun1;c2:return(*pf)(y);}voidmain(){pf=&fun2;c3:(*pf)(5);}Figure12.1:AprogramwithafunctionpointerThesimplestanalysisofwhatpfcouldpointtowouldsimplyobservethetypesoffunctions.Functionsfun1andfun2areofthesametypeaswhatpfpointsto,whilemainisnot.Thus,aconservativecallgraphisshowninFig.12.2(a).Amorecarefulanalysisoftheprogramwouldobservethatpfismadetopointtofun2inmainandismadetopointtofun1infun2.Buttherearenootherassignmentstoanypointer,so,inparticular,thereisnowayforpftopointtomain.ThisreasoningyieldsthesamecallgraphasFig.12.2(a).Anevenmorepreciseanalysiswouldsaythatatc3,itisonlypossibleforpftopointtofun2,becausethatcallisprecededimmediatelybythatassignmenttopf.Similarly,atc2itisonlypossibleforpftopointtofun1.Asaresult,theinitialcalltofun1cancomeonlyfromfun2,andfun1doesnotchangepf,sowheneverwearewithinfun1,pfpointstofun1.Inparticular,atc1,wecanbesurepfpointstofun1.Thus,Fig.12.2(b)isamoreprecise,correctcallgraph.2Ingeneral,thepresenceofreferencesorpointerstofunctionsormethodsrequiresustogetastaticapproximationofthepotentialvaluesofallprocedureparameters,functionpointers,andreceiverobjecttypes.Tomakeanaccurateapproximation,interproceduralanalysisisnecessary.Theanalysisisiterative,startingwiththestaticallyobservabletargets.Asmoretargetsarediscov-ered,theanalysisincorporatesthenewedgesintothecallgraphandrepeatsdiscoveringmoretargetsuntilconvergenceisreached.906CHAPTER12.INTERPROCEDURALANALYSIS c1 c2 c3 c1 c2 c3 fun1 main fun1 fun2 main fun2 (a) (b)Figure12.2:CallgraphsderivedfromFig.12.112.1.2ContextSensitivityInterproceduralanalysisischallengingbecausethebehaviorofeachprocedureisdependentuponthecontextinwhichitiscalled.Example12.2usestheproblemofinterproceduralconstantpropagationonasmallprogramtoillustratethesigni\fcanceofcontexts.Example12.2:ConsidertheprogramfragmentinFig.12.3.Functionfisinvokedatthreecallsites:c1,c2andc3.Constant0ispassedinastheactualparameteratc1,andconstant243ispassedinatc2andc3ineachiteration;theconstants1and244arereturned,respectively.Thus,functionfisinvokedwithaconstantineachofthecontexts,butthevalueoftheconstantiscontext-dependent.Asweshallsee,itisnotpossibletotellthatt1,t2,andt3eachareassignedconstantvalues(andthussoisX[i]),unlesswerecognizethatwhencalledincontextc1,freturns1,andwhencalledintheothertwocontexts,freturns244.Anaiveanalysiswouldconcludethatfcanreturneither1or244fromanycall.2Onesimplisticbutextremelyinaccurateapproachtointerproceduralanal-ysis,knownascontext-insensitiveanalysis,istotreateachcallandreturnstatementas\\goto\"operations.Wecreateasupercontrol-\rowgraphwhere,besidesthenormalintraproceduralcontrol\rowedges,additionaledgesarecre-atedconnecting1.Eachcallsitetothebeginningoftheprocedureitcalls,and2.Thereturnstatementsbacktothecallsites.112.1.BASICCONCEPTS907for(i=0;i<n;i++){c1:t1=f(0);c2:t2=f(243);c3:t3=f(243);X[i]=t1+t2+t3;}intf(intv){return(v+1);}Figure12.3:Aprogramfragmentillustratingtheneedforcontext-sensitiveanalysisAssignmentstatementsareaddedtoassigneachactualparametertoitscorrespondingformalparameterandtoassignthereturnedvaluetothevariablereceivingtheresult.Wecanthenapplyastandardanalysisintendedtobeusedwithinaproceduretothesupercontrol-\rowgraphto\fndcontext-insensitiveinterproceduralresults.Whilesimple,thismodelabstractsouttheimportantrelationshipbetweeninputandoutputvaluesinprocedureinvocations,causingtheanalysistobeimprecise.Example12.3:Thesupercontrol-\rowgraphfortheprograminFig.12.3isshowninFigure12.4.BlockB6isthefunctionf.BlockB3containsthecallsitec1;itsetstheformalparametervto0andthenjumpstothebeginningoff,atB6.Similarly,B4andB5representthecallsitesc2andc3,respectively.InB4,whichisreachedfromtheendoff(blockB6),wetakethereturnvaluefromfandassignittot1.Wethensetformalparametervto243andcallfagain,byjumpingtoB6.NotethatthereisnoedgefromB3toB4.Controlmust\rowthroughfonthewayfromB3toB4.B5issimilartoB4.Itreceivesthereturnfromf,assignsthereturnvaluetot2,andinitiatesthethirdcalltof.BlockB7representsthereturnfromthethirdcallandtheassignmenttoX[i].IfwetreatFig.12.4asifitwerethe\rowgraphofasingleprocedure,thenwewouldconcludethatcomingintoB6,vcanhavethevalue0or243.Thus,themostwecanconcludeaboutretvalisthatitisassigned1or244,butnoothervalue.Similarly,wecanonlyconcludeaboutt1,t2,andt3thattheycaneachbeeither1or244.Thus,X[i]appearstobeeither3,246,489,or732.Incontrast,acontext-sensitiveanalysiswouldseparatetheresultsforeachofthecallingcontextsandproducestheintuitiveanswerdescribedinExample12.2:t1isalways1,t2andt3arealways244,andX[i]is489.2908CHAPTER12.INTERPROCEDURALANALYSIS i = 0 if i<n goto L i = i+1 X[i] = t5 t5 = t4+t3 t4 = t1+t2 t3 = retval f: retval = v+1 c1: v = 0 c2: v = 243 t1 = retval t2 = retval c3: v = 243 B B B B B B B 1 2 3 4 5 6 7Figure12.4:Thecontrol-\rowgraphforFig.12.3,treatingfunctioncallsascontrol\row12.1.3CallStringsInExample12.2,wecandistinguishamongthecontextsbyjustknowingthecallsitethatcallstheproceduref.Ingeneral,acallingcontextisde\fnedbythecontentsoftheentirecallstack.Werefertothestringofcallsitesonthestackasthecallstring.Example12.4:Figure12.5isaslightmodi\fcationofFig.12.3.Herewehavereplacedthecallstofbycallstog,whichthencallsfwiththesameargument.Thereisanadditionalcallsite,c4,wheregcallsf.Therearethreecallstringstof:(c1;c4),(c2;c4),and(c3;c4).Asweseeinthisexample,thevalueofvinfunctionfdependsnotontheimmediateorlastsitec4onthecallstring.Rather,theconstantsaredeterminedbythe\frstelementineachofthecallstrings.2Example12.4illustratesthatinformationrelevanttotheanalysiscanbeintroducedearlyinthecallchain.Infact,itissometimesnecessarytoconsidertheentirecallstringtocomputethemostpreciseanswer,asillustratedinExample12.5.12.1.BASICCONCEPTS909for(i=0;i<n;i++){c1:t1=g(0);c2:t2=g(243);c3:t3=g(243);X[i]=t1+t2+t3;}intg(intv){c4:returnf(v);}intf(intv){return(v+1);}Figure12.5:Programfragmentillustratingcallstringsfor(i=0;i<n;i++){c1:t1=g(0);c2:t2=g(243);c3:t3=g(243);X[i]=t1+t2+t3;}intg(intv){if(v>1){c4:returng(v-1);}else{c5:returnf(v);}intf(intv){return(v+1);}Figure12.6:Recursiveprogramrequiringanalysisofcompletecallstrings910CHAPTER12.INTERPROCEDURALANALYSISExample12.5:Thisexampleillustrateshowtheabilitytoreasonaboutun-boundedcallstringscanyieldmorepreciseresults.InFig.12.6weseethatifgiscalledwithapositivevaluec,thengwillbeinvokedrecursivelyctimes.Eachtimegiscalled,thevalueofitsparametervdecreasesby1.Thus,thevalueofg'sparametervinthecontextwhosecallstringisc2(c4)nis243\u0000n.Thee\u000bectofgisthustoincrement0oranynegativeargumentby1,andtoreturn2onanyargument1orgreater.Therearethreepossiblecallstringsforf.Ifwestartwiththecallatc1,thengcallsfimmediately,so(c1;c5)isonesuchstring.Ifwestartatc2orc3,thenwecallgatotalof243times,andthencallf.Thesecallstringsare(c2;c4;c4;:::;c5)and(c3;c4;c4;:::;c5),whereineachcasethereare242c4'sinthesequence.Inthe\frstofthesecontexts,thevalueoff'sparametervis0,whileintheothertwocontextsitis1.2Indesigningacontext-sensitiveanalysis,wehaveachoiceinprecision.Forexample,insteadofqualifyingtheresultsbythefullcallstring,wemayjustchoosetodistinguishbetweencontextsbytheirkmostimmediatecallsites.Thistechniqueisknownask-limitingcontextanalysis.Context-insensitiveanalysisissimplyaspecialcaseofk-limitingcontextanalysis,wherekis0.Wecan\fndalltheconstantsinExample12.2usinga1-limitinganalysisandalltheconstantsinExample12.4usinga2-limitinganalysis.However,nok-limitinganalysiscan\fndalltheconstantsinExample12.5,providedtheconstant243werereplacedbytwodi\u000berentandarbitrarilylargeconstants.Insteadofchoosinga\fxedvaluek,anotherpossibilityistobefullycon-textsensitiveforallacycliccallstrings,whicharestringsthatcontainnore-cursivecycles.Forcallstringswithrecursion,wecancollapseallrecursivecycles,inordertoboundthenumberofdi\u000berentcontextsanalyzed.InEx-ample12.5,thecallsinitiatedatcallsitec2maybeapproximatedbythecallstring:(c2;c4\u0003;c5).Notethat,withthisscheme,evenforprogramswithoutrecursion,thenumberofdistinctcallingcontextscanbeexponentialinthenumberofproceduresintheprogram.12.1.4Cloning-BasedContext-SensitiveAnalysisAnotherapproachtocontext-sensitiveanalysisistoclonetheprocedurecon-ceptually,oneforeachuniquecontextofinterest.Wecanthenapplyacontext-insensitiveanalysistotheclonedcallgraph.Examples12.6and12.7showtheequivalentofaclonedversionofExamples12.4and12.5,respectively.Inreal-ity,wedonotneedtoclonethecode,wecansimplyuseane\u000ecientinternalrepresentationtokeeptrackoftheanalysisresultsofeachclone.Example12.6:TheclonedversionofFig.12.5isshowninFig.12.7.Becauseeverycallingcontextreferstoadistinctclone,thereisnoconfusion.Forex-ample,g1receives0asinputandproduces1asoutput,andg2andg3bothreceive243asinputandproduce244asoutput.212.1.BASICCONCEPTS911for(i=0;i<n;i++){c1:t1=g1(0);c2:t2=g2(243);c3:t3=g3(243);X[i]=t1+t2+t3;}intg1(intv){c4.1:returnf1(v);}intg2(intv){c4.2:returnf2(v);}intg3(intv){c4.3:returnf3(v);}intf1(intv){return(v+1);}intf2(intv){return(v+1);}intf3(intv){return(v+1);}Figure12.7:ClonedversionofFig.12.5Example12.7:TheclonedversionofExample12.5isshowninFig.12.8.Forprocedureg,wecreateaclonetorepresentallinstancesofgthatare\frstcalledfromsitesc1,c2,andc3.Inthiscase,theanalysiswoulddeterminethattheinvocationatcallsitec1returns1,assumingtheanalysiscandeducethatwithv=0,thetestv>1fails.Thisanalysisdoesnothandlerecursionwellenoughtoproducetheconstantsforcallsitesc2andc3,however.212.1.5Summary-BasedContext-SensitiveAnalysisSummary-basedinterproceduralanalysisisanextensionofregion-basedanal-ysis.Basically,inasummary-basedanalysiseachprocedureisrepresentedbyaconcisedescription(\\summary\")thatencapsulatessomeobservablebehavioroftheprocedure.Theprimarypurposeofthesummaryistoavoidreanalyzingaprocedure'sbodyateverycallsitethatmayinvoketheprocedure.Letus\frstconsiderthecasewherethereisnorecursion.Eachprocedureismodeledasaregionwithasingleentrypoint,witheachcaller-calleepairsharing912CHAPTER12.INTERPROCEDURALANALYSISfor(i=0;i<n;i++){c1:t1=g1(0);c2:t2=g2(243);c3:t3=g3(243);X[i]=t1+t2+t3;}intg1(intv){if(v>1){c4.1:returng1(v-1);}else{c5.1:returnf1(v);}}intg2(intv){if(v>1){c4.2:returng2(v-1);}else{c5.2:returnf2(v);}}intg3(intv){if(v>1){c4.3:returng3(v-1);}else{c5.3:returnf3(v);}}intf1(intv){return(v+1);}intf2(intv){return(v+1);}intf3(intv){return(v+1);}Figure12.8:ClonedversionofFig.12.612.1.BASICCONCEPTS913anouter-innerregionrelationship.Theonlydi\u000berencefromtheintraproceduralversionisthat,intheinterproceduralcase,aprocedureregioncanbenestedinsideseveraldi\u000berentouterregions.Theanalysisconsistsoftwoparts:1.Abottom-upphasethatcomputesatransferfunctiontosummarizethee\u000bectofaprocedure,and2.Atop-downphasethatpropagatescallerinformationtocomputeresultsofthecallees.Togetfullycontext-sensitiveresults,informationfromdi\u000berentcallingcontextsmustpropagatedowntothecalleesindividually.Foramoree\u000ecient,butlessprecisecalculation,informationfromallcallerscanbecombined,usingameetoperator,thenpropagateddowntothecallees.Example12.8:Forconstantpropagation,eachprocedureissummarizedbyatransferfunctionspecifyinghowitwouldpropagateconstantsthroughitsbody.InExample12.2,wecansummarizefasafunctionthat,givenaconstantcasanactualparametertov,returnstheconstantc+1.Basedonthisinformation,theanalysiswoulddeterminethatt1,t2,andt3havetheconstantvalues1,244,and244,respectively.Notethatthisanalysisdoesnotsu\u000bertheinaccuracyduetounrealizablecallstrings.RecallthatExample12.4extendsExample12.2byhavinggcallf.Thus,wecouldconcludethatthetransferfunctionforgisthesameasthetransferfunctionforf.Againweconcludethatt1,t2,andt3havetheconstantvalues1,244,and244,respectively.Now,letusconsiderwhatisthevalueofparametervinfunctionfforExample12.2.Asa\frstcut,wecancombinealltheresultsforallcallingcontexts.Sincevmayhavevalues0or243,wecansimplyconcludethatvisnotaconstant.Thisconclusionisfair,becausethereisnoconstantthatcanreplacevinthecode.Ifwedesiremorepreciseresults,wecancomputespeci\fcresultsforcontextsofinterest.Informationmustbepasseddownfromthecontextofinteresttodeterminethecontext-sensitiveanswer.Thisstepisanalogoustothetop-downpassinregion-basedanalysis.Forexample,thevalueofvis0atcallsitec1and243atsitesc2andc3.Togettheadvantageofconstantpropagationwithinf,weneedtocapturethisdistinctionbycreatingtwoclones,withthe\frstspecializedforinputvalue0andthelatterwithvalue243,asshowninFig.12.9.2WithExample12.8,weseethat,intheend,ifwewishtocompilethecodedi\u000berentlyindi\u000berentcontexts,westillneedtoclonethecode.Thedi\u000berenceisthatinthecloning-basedapproach,cloningisperformedpriortotheanalysis,basedonthecallstrings.Inthesummary-basedapproach,thecloningisperformedaftertheanalysis,usingtheanalysisresultsasabasis.914CHAPTER12.INTERPROCEDURALANALYSISfor(i=0;i<n;i++){c1:t1=f0(0);c2:t2=f243(243);c3:t3=f243(243);X[i]=t1+t2+t3;}intf0(intv){return(1);}intf243(intv){return(244);}Figure12.9:Resultofpropagatingallpossibleconstantargumentstothefunc-tionfEvenifcloningisnotapplied,inthesummary-basedapproachinferencesaboutthee\u000bectofacalledprocedurearemadeaccurately,withouttheproblemofunrealizablepaths.Insteadofcloningafunction,wecouldalsoinlinethecode.Inlininghastheadditionale\u000bectofeliminatingtheprocedure-calloverheadaswell.Wecanhandlerecursionbycomputingthe\fxedpointsolution.Inthepres-enceofrecursion,we\frst\fndthestronglyconnectedcomponentsinthecallgraph.Inthebottom-upphase,wedonotvisitastronglyconnectedcomponentunlessallitssuccessorshavebeenvisited.Foranontrivialstronglyconnectedcomponent,weiterativelycomputethetransferfunctionsforeachprocedureinthecomponentuntilconvergenceisreached;thatis,weiterativelyupdatethetransferfunctionsuntilnomorechangesoccur.12.1.6ExercisesforSection12.1Exercise12.1.1:InFig.12.10isaCprogramwithtwofunctionpointers,pandq.Nisaconstantthatcouldbelessthanorgreaterthan10.Notethattheprogramresultsinanin\fnitesequenceofcalls,butthatisofnoconcernforthepurposesofthisproblem.a)Identifyallthecallsitesinthisprogram.b)Foreachcallsite,whatcanppointto?Whatcanqpointto?c)Drawthecallgraphforthisprogram.!d)Describeallthecallstringsforfandg.12.1.BASICCONCEPTS915int(*p)(int);int(*q)(int);intf(inti){if(i<10){p=&g;return(*q)(i);}else{p=&f;return(*p)(i);}}intg(intj){if(j<10){q=&f;return(*p)(j);}else{q=&g;return(*q)(j);}}voidmain(){p=&f;q=&g;(*p)((*q)(N));}Figure12.10:ProgramforExercise12.1.1Exercise12.1.2:InFig.12.11isafunctionidthatisthe\\identityfunction\";itreturnsexactlywhatitisgivenasanargument.Wealsoseeacodefragmentconsistingofabranchandfollowingassignmentthatsumsx+y.a)Examiningthecode,whatcanwetellaboutthevalueofzattheend?b)Constructthe\rowgraphforthecodefragment,treatingthecallstoidascontrol\row.c)Ifwerunaconstant-propagationanalysis,asinSection9.4,onyour\rowgraphfrom(b),whatconstantvaluesaredetermined?d)WhatareallthecallsitesinFig.12.11?e)Whatareallthecontextsinwhichidiscalled?f)RewritethecodeofFig.12.11bycloninganewversionofidforeachcontextinwhichitiscalled.g)Constructthe\rowgraphofyourcodefrom(f),treatingthecallsascontrol\row.916CHAPTER12.INTERPROCEDURALANALYSISintid(intx){returnx;}...if(a==1){x=id(2);y=id(3);}else{x=id(3);y=id(2);}z=x+y;...Figure12.11:CodefragmentforExercise12.1.2h)Performaconstant-propagationanalysisonyour\rowgraphfrom(g).Whatconstantvaluesaredeterminednow?12.2WhyInterproceduralAnalysis?Givenhowhardinterproceduralanalysisis,letusnowaddresstheimportantproblemofwhyandwhenwewishtouseinterproceduralanalysis.Althoughweusedconstantpropagationtoillustrateinterproceduralanalysis,thisinter-proceduraloptimizationisneitherreadilyapplicablenorparticularlybene\fcialwhenitdoesoccur.Mostofthebene\ftsofconstantpropagationcanbeob-tainedsimplybyperformingintraproceduralanalysisandinliningprocedurecallsofthemostfrequentlyexecutedsectionsofcode.However,therearemanyreasonswhyinterproceduralanalysisisessential.Below,wedescribeseveralimportantapplicationsofinterproceduralanalysis.12.2.1VirtualMethodInvocationAsmentionedabove,object-orientedprogramshavemanysmallmethods.Ifweonlyoptimizeonemethodatatime,thentherearefewopportunitiesforoptimization.Resolvingmethodinvocationenablesoptimization.AlanguagelikeJavadynamicallyloadsitsclasses.Asaresult,wedonotknowatcompile-timetowhichof(perhaps)manymethodsnamedmauseof\\m\"refersinaninvocationsuchasx:m().ManyJavaimplementationsuseajust-in-timecompilertocompileitsbyte-codesatruntime.Onecommonoptimizationistopro\fletheexecutionanddeterminewhicharethecommonreceivertypes.Wecantheninlinethemeth-odsthataremostfrequentlyinvoked.Thecodeincludesadynamiccheckonthetypeandexecutestheinlinedmethodsiftherun-timeobjecthastheexpectedtype.Anotherapproachtoresolvingusesofamethodnamemispossibleaslongasallthesourcecodeisavailableatcompiletime.Then,itispossibletoperformaninterproceduralanalysistodeterminetheobjecttypes.Ifthetypeforavariablexturnsouttobeunique,thenauseofx:m()canberesolved.12.2.WHYINTERPROCEDURALANALYSIS?917Weknowexactlywhatmethodmreferstointhiscontext.Inthatcase,wecanin-linethecodeforthism,andthecompilerdoesnotevenhavetoincludeatestforthetypeofx.12.2.2PointerAliasAnalysisEvenifwedonotwishtoperforminterproceduralversionsofthecommondata-\rowanalyseslikereachingde\fnitions,theseanalysescaninfactbene\ftfrominterproceduralpointeranalysis.AlltheanalysespresentedinChapter9applyonlytolocalscalarvariablesthatcannothavealiases.However,useofpointersiscommon,especiallyinlanguageslikeC.Byknowingwhetherpointerscanbealiases(canpointtothesamelocation),wecanimprovetheaccuracyofthetechniquesfromChapter9.Example12.9:Considerthefollowingsequenceofthreestatements,whichmightformabasicblock:*p=1;*q=2;x=*p;Withoutknowingifpandqcanpointtothesamelocation|thatis,whethertheycanbealiases|wecannotconcludethatxisequalto1attheendoftheblock.212.2.3ParallelizationAsdiscussedinChapter11,themoste\u000bectivewaytoparallelizeanapplica-tionisto\fndthecoarsestgranularityofparallelism,suchasthatfoundintheoutermostloopsofaprogram.Forthistask,interproceduralanalysisisofgreatimportance.Thereisasigni\fcantdi\u000berencebetweenscalaroptimiza-tions(thosebasedonvaluesofsimplevariables,asdiscussedinChapter9)andparallelization.Inparallelization,justonespuriousdatadependencecanrenderanentireloopnotparallelizable,andgreatlyreducethee\u000bectivenessoftheoptimization.Suchampli\fcationofinaccuraciesisnotseeninscalaroptimizations.Inscalaroptimization,weonlyneedto\fndthemajorityoftheoptimizationopportunities.Missingoneopportunityortwoseldommakesmuchofadi\u000berence.12.2.4DetectionofSoftwareErrorsandVulnerabilitiesInterproceduralanalysisisnotonlyimportantforoptimizingcode.Thesametechniquescanbeusedtoanalyzeexistingsoftwareformanykindsofcodingerrors.Theseerrorscanrendersoftwareunreliable;codingerrorsthathackerscanexploittotakecontrolof,orotherwisedamage,acomputersystemcanposesigni\fcantsecurityvulnerabilityrisks.918CHAPTER12.INTERPROCEDURALANALYSISStaticanalysisisusefulindetectingoccurrencesofmanycommonerrorpatterns.Forexample,adataitemmustbeguardedbyalock.Asanotherexample,disablinganinterruptintheoperatingsystemmustbefollowedbyare-enablingoftheinterrupt.Sinceasigni\fcantsourceoferrorsistheincon-sistenciesthatspanprocedureboundaries,interproceduralanalysisisofgreatimportance.PRE\fxandMetalaretwopracticaltoolsthatuseinterproceduralanalysise\u000bectivelyto\fndmanyprogrammingerrorsinlargeprograms.Suchtools\fnderrorsstaticallyandcanimprovesoftwarereliabilitygreatly.How-ever,thesetoolsarebothincompleteandunsound,inthesensethattheymaynot\fndallerrors,andnotallreportedwarningsarerealerrors.Unfortunately,theinterproceduralanalysisusedissu\u000ecientlyimprecisethat,werethetoolstoreportallpotentialerrors,thelargenumberoffalsewarningswouldrenderthetoolsunusable.Nevertheless,eventhoughthesetoolsarenotperfect,theirsystematicusehasbeenshowntogreatlyimprovesoftwarereliability.Whenitcomestosecurityvulnerabilities,itishighlydesirablethatwe\fndallthepotentialerrorsinaprogram.In2006,twoofthe\\mostpopular\"formsofintrusionsusedbyhackerstocompromiseasystemwere1.LackofinputvalidationonWebapplications:SQLinjectionisoneofthemostpopularformsofsuchvulnerabilitywherebyhackersgaincontrolofadatabasebymanipulatinginputsacceptedbywebapplications.2.Bu\u000berover\rowsinCandC++programs.BecauseCandC++donotcheckifaccessestoarraysareinbounds,hackerscanwritewell-craftedstringsintounintendedareasandhencegaincontroloftheprogram'sexecution.Inthenextsection,weshalldiscusshowwecanuseinterproceduralanalysistoprotectprogramsagainstsuchvulnerabilities.12.2.5SQLInjectionSQLinjectionreferstothevulnerabilitywherehackerscanmanipulateuserinputtoaWebapplicationandgainunintendedaccesstoadatabase.Forexample,bankswanttheiruserstobeabletomaketransactionsonline,providedtheysupplytheircorrectpassword.AcommonarchitectureforsuchasystemistohavetheuserenterstringsintoaWebform,andthentohavethosestringsformpartofadatabasequerywrittenintheSQLlanguage.Ifsystemsdevelopersarenotcareful,thestringsprovidedbytheusercanalterthemeaningoftheSQLstatementinunexpectedways.Example12.10:Supposeabanko\u000bersitscustomersaccesstoarelationAcctData(name,password,balance)Thatis,thisrelationisatableoftriples,eachconsistingofthenameofacustomer,thepassword,andthebalanceoftheaccount.Theintentisthatcus-tomerscanseetheiraccountbalanceonlyiftheyprovideboththeirnameand12.2.WHYINTERPROCEDURALANALYSIS?919theircorrectpassword.Havingahackerseeanaccountbalanceisnottheworstthingthatcouldoccur,butthissimpleexampleistypicalofmorecomplicatedsituationswherethehackercouldexecutepaymentsfromtheaccount.Thesystemmightimplementabalanceinquiryasfollows:1.UsersinvokeaWebformwheretheyentertheirnameandpassword.2.Thenameiscopiedtoavariablenandthepasswordtoavariablep.3.Later,perhapsinsomeotherprocedure,thefollowingSQLqueryisexe-cuted:SELECTbalanceFROMAcctDataWHEREname=':n'andpassword=':p'ForreadersnotfamiliarwithSQL,thisquerysays:\\FindinthetableAcctDataarowwiththe\frstcomponent(name)equaltothestringcurrentlyinvariablenandthesecondcomponent(password)equaltothestringcurrentlyinvariablep;printthethirdcomponent(balance)ofthatrow.\"NotethatSQLusessinglequotes,notdoublequotes,todelimitstrings,andthecolonsinfrontofnandpindicatethattheyarevariablesofthesurroundinglanguage.Supposethehacker,whowantsto\fndCharlesDickens'accountbalance,suppliesthefollowingvaluesforthestringsnandp:n=CharlesDickens'--p=whocaresThee\u000bectofthesestrangestringsistoconvertthequeryintoSELECTbalanceFROMAcctDataWHEREname='CharlesDickens'--'andpassword='whocares'Inmanydatabasesystems--isacomment-introducingtokenandhasthee\u000bectofmakingwhateverfollowsonthatlineacomment.Asaresult,thequerynowasksthedatabasesystemtoprintthebalanceforeverypersonwhosenameis'CharlesDickens',regardlessofthepasswordthatappearswiththatnameinaname-password-balancetriple.Thatis,withcommentseliminated,thequeryis:SELECTbalanceFROMAcctDataWHEREname='CharlesDickens'2InExample12.10,the\\bad\"stringswerekeptintwovariables,whichmightbepassedbetweenprocedures.However,inmorerealisticcases,thesestringsmightbecopiedseveraltimes,orcombinedwithotherstoformthefullquery.WecannothopetodetectcodingerrorsthatcreateSQL-injectionvulnerabilitieswithoutdoingafullinterproceduralanalysisoftheentireprogram.920CHAPTER12.INTERPROCEDURALANALYSIS12.2.6Bu\u000berOver\rowAbu\u000berover\rowattackoccurswhencarefullycrafteddatasuppliedbytheuserwritesbeyondtheintendedbu\u000berandmanipulatestheprogramexecution.Forexample,aCprogrammayreadastringsfromtheuser,andthencopyitintoabu\u000berbusingthefunctioncall:strcpy(b,s);Ifthestringsisactuallylongerthanthebu\u000berb,thenlocationsthatarenotpartofbwillhavetheirvalueschanged.Thatinitselfwillprobablycausetheprogramtomalfunctionoratleasttoproducethewronganswer,sincesomedatausedbytheprogramwillhavebeenchanged.Butworse,thehackerwhochosethestringscanpickavaluethatwilldomorethancauseanerror.Forexample,ifthebu\u000berisontherun-timestack,thenitisnearthereturnaddressforitsfunction.Aninsidiouslychosenvalueofsmayoverwritethereturnaddress,andwhenthefunctionreturns,itgoestoaplacechosenbythehacker.Ifhackershavedetailedknowledgeofthesurroundingoperatingsystemandhardware,theymaybeabletoexecuteacommandthatwillgivethemcontrolofthemachineitself.Insomesituations,theymayevenhavetheabilitytohavethefalsereturnaddresstransfercontroltocodethatispartofthestrings,thusallowinganysortofprogramtobeinsertedintotheexecutingcode.Topreventbu\u000berover\rows,everyarray-writeoperationmustbestaticallyproventobewithinbounds,oraproperarray-boundscheckmustbeperformeddynamically.BecausetheseboundschecksneedtobeinsertedbyhandinCandC++programs,itiseasytoforgettoinsertthetestortogetthetestwrong.Heuristictoolshavebeendevelopedthatwillcheckifatleastsometest,thoughnotnecessarilyacorrecttest,hasbeenperformedbeforeastrcpyiscalled.Dynamicboundscheckingisunavoidablebecauseitisimpossibletodeter-minestaticallythesizeofusers'input.Allastaticanalysiscandoisassurethatthedynamiccheckshavebeeninsertedproperly.Thus,areasonablestrategyistohavethecompilerinsertdynamicboundscheckingoneverywrite,andusestaticanalysisasameanstooptimizeawayasmanyboundscheckaspossible.Itisnolongernecessarytocatcheverypotentialviolation;moreover,weonlyneedtooptimizeonlythosecoderegionsthatexecutefrequently.InsertingboundscheckingintoCprogramsisnontrivial,evenifwedonotmindthecost.Apointermaypointintothemiddleofsomearray,andwedonotknowtheextentofthatarray.Techniqueshavebeendevelopedtokeeptrackoftheextentofthebu\u000berpointedtobyeachpointerdynamically.Thisinformationallowsthecompilertoinsertarrayboundschecksforallaccesses.Interestinglyenough,itisnotadvisabletohaltaprogramwheneverabu\u000berover\rowisdetected.Infact,bu\u000berover\rowsdooccurinpractice,andapro-gramwouldlikelyfailifwedisableallbu\u000berover\rows.Thesolutionistoextendthesizeofthearraydynamicallytoaccommodateforthebu\u000beroverruns.12.3.ALOGICALREPRESENTATIONOFDATAFLOW921Interproceduralanalysiscanbeusedtospeedupthecostofdynamicar-rayboundschecks.Forexample,supposeweareinterestedonlyincatchingbu\u000berover\rowsinvolvinguser-inputstrings,wecanusestaticanalysistode-terminewhichvariablesmayholdcontentsprovidedbytheuser.LikeSQLinjection,beingabletotrackaninputasitiscopiedacrossproceduresisusefulineliminatingunnecessaryboundschecks.12.3ALogicalRepresentationofDataFlowTothispoint,ourrepresentationofdata-\rowproblemsandsolutionscanbetermed\\set-theoretic.\"Thatis,werepresentinformationassetsandcomputeresultsusingoperatorslikeunionandintersection.Forinstance,whenwein-troducedthereaching-de\fnitionsprobleminSection9.2.4,wecomputedIN[B]andOUT[B]forablockB,andwedescribedtheseassetsofde\fnitions.WerepresentedthecontentsoftheblockBbyitsgenandkillsets.Tocopewiththecomplexityofinterproceduralanalysis,wenowintroduceamoregeneralandsuccinctnotationbasedonlogic.Insteadofsayingsomethinglike\\de\fnitionDisinIN[B],\"weshalluseanotationlikein(B;D)tomeanthesamething.Doingsoallowsustoexpresssuccinct\\rules\"aboutinferringprogramfacts.Italsoallowsustoimplementtheserulese\u000eciently,inawaythatgeneralizesthebit-vectorapproachtoset-theoreticoperations.Finally,thelogicalapproachallowsustocombinewhatappeartobeseveralindepen-dentanalysesintoone,integratedalgorithm.Forexample,inSection9.5wedescribedpartial-redundancyeliminationbyasequenceoffourdata-\rowanal-ysesandtwootherintermediatesteps.Inthelogicalnotation,allthesestepscouldbecombinedintoonecollectionoflogicalrulesthataresolvedsimulta-neously.12.3.1IntroductiontoDatalogDatalogisalanguagethatusesaProlog-likenotation,butwhosesemanticsisfarsimplerthanthatofProlog.Tobegin,theelementsofDatalogareatomsoftheformp(X1;X2;:::;Xn).Here,1.pisapredicate|asymbolthatrepresentsatypeofstatementsuchas\\ade\fnitionreachesthebeginningofablock.\"2.X1;X2;:::;Xnaretermssuchasvariablesorconstants.Weshallalsoallowsimpleexpressionsasargumentsofapredicate.2Agroundatomisapredicatewithonlyconstantsasarguments.Everygroundatomassertsaparticularfact,anditsvalueiseithertrueorfalse.It922CHAPTER12.INTERPROCEDURALANALYSISisoftenconvenienttorepresentapredicatebyarelation,ortableofitstruegroundatoms.Eachgroundatomisrepresentedbyasinglerow,ortuple,oftherelation.Thecolumnsoftherelationarenamedbyattributes,andeachtuplehasacomponentforeachattribute.Theattributescorrespondtothecomponentsofthegroundatomsrepresentedbytherelation.Anygroundatomintherelationistrue,andgroundatomsnotintherelationarefalse.Example12.11:Letussupposethepredicatein(B;D)means\\de\fnitionDreachesthebeginningofblockB.\"Thenwemightsupposethat,foraparticular\rowgraph,in(b1;d1)istrue,asarein(b2;d1)andin(b2;d2).Wemightalsosupposethatforthis\rowgraph,allotherinfactsarefalse.ThentherelationinFig.12.12representsthevalueofthispredicateforthis\rowgraph.B12.3.ALOGICALREPRESENTATIONOFDATAFLOW923924CHAPTER12.INTERPROCEDURALANALYSISForinstance,supposethatthefollowingfacts(groundatoms)aretrue:edge(1;2),edge(2;3),andedge(3;4).Thenwecanusethe\frstrulewiththreedi\u000berentsubstitutionstoinferpath(1;2),path(2;3),andpath(3;4).Asanexample,substitutingX=1andY=2instantiatesthe\frstruletobepath(1;2):\u0000edge(1;2).Sinceedge(1;2)istrue,weinferpath(1;2).Withthesethreepathfacts,wecanusethesecondruleseveraltimes.IfwesubstituteX=1,Z=2,andY=3,weinstantiatetheruletobepath(1;3):\u0000path(1;2)&path(2;3).Sincebothsubgoalsofthebodyhavebeeninferred,theyareknowntobetrue,sowemayinferthehead:path(1;3).Then,thesubstitutionX=1,Z=3,andY=4letsusinfertheheadpath(1;4);thatis,thereisapathfromnode1tonode4.212.3.3IntensionalandExtensionalPredicatesItisconventionalinDatalogprogramstodistinguishpredicatesasfollows:1.EDB,orextensionaldatabase,predicatesarethosethatarede\fneda-priori.Thatis,theirtruefactsareeithergiveninarelationortable,ortheyaregivenbythemeaningofthepredicate(aswouldbethecaseforacomparisonpredicate,e.g.).2.IDB,orintensionaldatabase,predicatesarede\fnedonlybytherules.ApredicatemustbeIDBorEDB,anditcanbeonlyoneofthese.Asaresult,anypredicatethatappearsintheheadofoneormorerulesmustbeanIDBpredicate.PredicatesappearinginthebodycanbeeitherIDBorEDB.Forinstance,inExample12.12,edgeisanEDBpredicateandpathisanIDBpredicate.Recallthatweweregivensomeedgefacts,suchasedge(1;2),butthepathfactswereinferredbytherules.WhenDatalogprogramsareusedtoexpressdata-\rowalgorithms,theEDBpredicatesarecomputedfromthe\rowgraphitself.IDBpredicatesarethenexpressedbyrules,andthedata-\rowproblemissolvedbyinferringallpossibleIDBfactsfromtherulesandthegivenEDBfacts.Example12.13:Letusconsiderhowreachingde\fnitionsmightbeexpressedinDatalog.First,itmakessensetothinkonastatementlevel,ratherthanablocklevel;thatis,theconstructionofgenandkillsetsfromabasicblockwillbeintegratedwiththecomputationofthereachingde\fnitionsthemselves.Thus,theblockb1suggestedinFig.12.13istypical.Noticethatweidentifypointswithintheblocknumbered0;1;:::;n,ifnisthenumberofstatementsintheblock.Theithde\fnitionis\\at\"pointi,andthereisnode\fnitionatpoint0.Apointintheprogrammustberepresentedbyapair(b;n),wherebisablocknameandnisanintegerbetween0andthenumberofstatementsinblockb.OurformulationrequirestwoEDBpredicates:12.3.ALOGICALREPRESENTATIONOFDATAFLOW9250x=y+zb11*p=u2x=v3Figure12.13:Abasicblockwithpointsbetweenstatements1.def(B;N;X)istrueifandonlyiftheNthstatementinblockBmayde\fnevariableX.Forinstance,inFig.12.13def(b1;1;x)istrue,def(b1;3;x)istrue,anddef(b1;2;Y)istrueforeverypossiblevariableYthatpmaypointtoatthatpoint.Forthemoment,weshallassumethatYcanbeanyvariableofthetypethatppointsto.2.succ(B;N;C)istrueifandonlyifblockCisasuccessorofblockBinthe\rowgraph,andBhasNstatements.Thatis,controlcan\rowfromthepointNofBtothepoint0ofC.Forinstance,supposethatb2isapredecessorofblockb1inFig.12.13,andb2has5statements.Thensucc(b2;5;b1)istrue.ThereisoneIDBpredicate,rd(B;N;C;M;X).Itisintendedtobetrueifandonlyifthede\fnitionofvariableXattheMthstatementofblockCreachesthepointNinblockB.Therulesde\fningpredicaterdareinFig.12.14.1)rd(B;N;B;N;X):-def(B;N;X)2)rd(B;N;C;M;X):-rd(B;N\u00001;C;M;X)&def(B;N;Y)&X6=Y3)rd(B;0;C;M;X):-rd(D;N;C;M;X)&succ(D;N;B)Figure12.14:RulesforpredicaterdRule(1)saysthatiftheNthstatementofblockBde\fnesX,thenthatde\fnitionofXreachestheNthpointofB(i.e.,thepointimmediatelyafterthestatement).Thisrulecorrespondstotheconceptof\\gen\"inourearlier,set-theoreticformulationofreachingde\fnitions.Rule(2)representstheideathatade\fnitionpassesthroughastatementunlessitis\\killed,\"andtheonlywaytokillade\fnitionistorede\fneitsvariablewith100%certainty.Indetail,rule(2)saysthatthede\fnitionofvariableXfromtheMthstatementofblockCreachesthepointNofblockBifa)itreachesthepreviouspointN\u00001ofB,and926CHAPTER12.INTERPROCEDURALANALYSISb)thereisatleastonevariableY,otherthanX,thatmaybede\fnedattheNthstatementofB.Finally,rule(3)expressesthe\rowofcontrolinthegraph.Itsaysthatthede\fnitionofXattheMthstatementofblockCreachesthepoint0ofBifthereissomeblockDwithNstatements,suchthatthede\fnitionofXreachestheendofD,andBisasuccessorofD.2TheEDBpredicatesuccfromExample12.13clearlycanbereado\u000bthe\rowgraph.Wecanobtaindeffromthe\rowgraphaswell,ifweareconservativeandassumeapointercanpointanywhere.Ifwewanttolimittherangeofapointertovariablesoftheappropriatetype,thenwecanobtaintypeinformationfromthesymboltable,anduseasmallerrelationdef.AnoptionistomakedefanIDBpredicateandde\fneitbyrules.TheseruleswillusemoreprimitiveEDBpredicates,whichcanthemselvesbedeterminedfromthe\rowgraphandsymboltable.Example12.14:SupposeweintroducetwonewEDBpredicates:1.assign(B;N;X)istruewhenevertheNthstatementofblockBhasXontheleft.NotethatXcanbeavariableorasimpleexpressionwithanl-value,like\u0003p.2.type(X;T)istrueifthetypeofXisT.Again,Xcanbeanyexpressionwithanl-value,andTcanbeanyexpressionforalegaltype.Then,wecanwriterulesfordef,makingitanIDBpredicate.Figure12.15isanexpansionofFig.12.14,withtwoofthepossiblerulesfordef.Rule(4)saysthattheNthstatementofblockBde\fnesX,ifXisassignedbytheNthstatement.Rule(5)saysthatXcanalsobede\fnedbytheNthstatementofblockBifthatstatementassignsto\u0003P,andXisanyofthevariablesofthetypethatPpointsto.Otherkindsofassignmentswouldneedotherrulesfordef.AsanexampleofhowwewouldmakeinferencesusingtherulesofFig.12.15,letusre-examinetheblockb1ofFig.12.13.The\frststatementassignsavaluetovariablex,sothefactassign(b1;1;x)wouldbeintheEDB.Thethirdstatementalsoassignstox,soassign(b1;3;x)isanotherEDBfact.Thesecondstatementassignsindirectlythroughp,soathirdEDBfactisassign(b1;2;\u0003p).Rule(4)thenallowsustoinferdef(b1;1;x)anddef(b1;3;x).Supposethatpisoftypepointer-to-integer(*int),andxandyareintegers.Thenwemayuserule(5),withB=b1,N=2,P=p,T=int,andXequaltoeitherxory,toinferdef(b1;2;x)anddef(b1;2;y).Similarly,wecaninferthesameaboutanyothervariablewhosetypeisintegerorcoerceabletoaninteger.212.3.ALOGICALREPRESENTATIONOFDATAFLOW9271)rd(B;N;B;N;X):-def(B;N;X)2)rd(B;N;C;M;X):-rd(B;N\u00001;C;M;X)&def(B;N;Y)&X6=Y3)rd(B;0;C;M;X):-rd(D;N;C;M;X)&succ(D;N;B)4)def(B;N;X):-assign(B;N;X)5)def(B;N;X):-assign(B;N;\u0003P)&type(X;T)&type(P;\u0003T)Figure12.15:Rulesforpredicatesrdanddef12.3.4ExecutionofDatalogProgramsEverysetofDatalogrulesde\fnesrelationsforitsIDBpredicates,asafunctionoftherelationsthataregivenforitsEDBpredicates.StartwiththeassumptionthattheIDBrelationsareempty(i.e.,theIDBpredicatesarefalseforallpossiblearguments).Then,repeatedlyapplytherules,inferringnewfactswhenevertherulesrequireustodoso.Whentheprocessconverges,wearedone,andtheresultingIDBrelationsformtheoutputoftheprogram.Thisprocessisformalizedinthenextalgorithm,whichissimilartotheiterativealgorithmsdiscussedinChapter9.Algorithm12.15:SimpleevaluationofDatalogprograms.INPUT:ADatalogprogramandsetsoffactsforeachEDBpredicate.OUTPUT:SetsoffactsforeachIDBpredicate.METHOD:Foreachpredicatepintheprogram,letRpbetherelationoffactsthataretrueforthatpredicate.IfpisanEDBpredicate,thenRpisthesetoffactsgivenforthatpredicate.IfpisanIDBpredicate,weshallcomputeRp.ExecutethealgorithminFig.12.16.2Example12.16:TheprograminExample12.12computespathsinagraph.ToapplyAlgorithm12.15,westartwithEDBpredicateedgeholdingalltheedgesofthegraphandwiththerelationforpathempty.Onthe\frstround,rule(2)yieldsnothing,sincetherearenopathfacts.Butrule(1)causesalltheedgefactstobecomepathfactsaswell.Thatis,afterthe\frstround,weknowpath(a;b)ifandonlyifthereisanedgefromatob.928CHAPTER12.INTERPROCEDURALANALYSISfor(eachIDBpredicatep)Rp=;;while(changestoanyRpoccur)fconsiderallpossiblesubstitutionsofconstantsforvariablesinalltherules;determine,foreachsubstitution,whetherallthesubgoalsofthebodyaretrue,usingthecurrentRp'stodeterminetruthofEDBandIDBpredicates;if(asubstitutionmakesthebodyofaruletrue)addtheheadtoRqifqistheheadpredicate;gFigure12.16:EvaluationofDatalogprogramsOnthesecondround,rule(1)yieldsnonewpathsfacts,becausetheEDBrelationedgeneverchanges.However,nowrule(2)letsusputtogethertwopathsoflength1tomakepathsoflength2.Thatis,afterthesecondround,path(a;b)istrueifandonlyifthereisapathoflength1or2fromatob.Similarly,onthethirdround,wecancombinepathsoflength2orlesstodiscoverallpathsoflength4orless.Onthefourthround,wediscoverpathsoflengthuptoto8,andingeneral,aftertheithround,path(a;b)istrueifandonlyifthereisapathfromatoboflength2i\u00001orless.212.3.5IncrementalEvaluationofDatalogProgramsThereisane\u000eciencyenhancementofAlgorithm12.15possible.ObservethatanewIDBfactcanonlybediscoveredonroundiifitistheresultofsubstitutingconstantsinarule,suchthatatleastoneofthesubgoalsbecomesafactthatwasjustdiscoveredonroundi\u00001.Theproofofthatclaimisthatifallthefactsamongthesubgoalswereknownatroundi\u00002,thenthe\\new\"factwouldhavebeendiscoveredwhenwemadethesamesubstitutionofconstantsonroundi\u00001.Totakeadvantageofthisobservation,introduceforeachIDBpredicatepapredicatenewPthatwillholdonlythenewlydiscoveredp-factsfromthepreviousround.EachrulethathasoneormoreIDBpredicatesamongitssubgoalsisreplacedbyacollectionofrules.EachruleinthecollectionisformedbyreplacingexactlyoneoccurrenceofsomeIDBpredicateqinthebodybynewQ.Finally,forallrules,wereplacetheheadpredicatehbynewH.Theresultingrulesaresaidtobeinincrementalform.TherelationsforeachIDBpredicatepaccumulatesallthep-facts,asinAlgorithm12.15.Inoneround,we1.ApplytherulestoevaluatethenewPpredicates.12.3.ALOGICALREPRESENTATIONOFDATAFLOW929930CHAPTER12.INTERPROCEDURALANALYSISMETHOD:Foreachpredicatepintheprogram,letRpbetherelationoffactsthataretrueforthatpredicate.IfpisanEDBpredicate,thenRpisthesetoffactsgivenforthatpredicate.IfpisanIDBpredicate,weshallcomputeRp.Inaddition,foreachIDBpredicatep,letRnewPbearelationof\\new\"factsforpredicatep.1.Modifytherulesintotheincrementalformdescribedabove.2.ExecutethealgorithminFig.12.18.2for(eachIDBpredicatep)fRp=;;RnewP=;;grepeatfconsiderallpossiblesubstitutionsofconstantsforvariablesinalltherules;determine,foreachsubstitution,whetherallthesubgoalsofthebodyaretrue,usingthecurrentRp'sandRnewP'stodeterminetruthofEDBandIDBpredicates;if(asubstitutionmakesthebodyofaruletrue)addtheheadtoRnewH,wherehistheheadpredicate;for(eachpredicatep)fRnewP=RnewP\u0000Rp;Rp=Rp[RnewP;gguntil(allRnewP'sareempty);Figure12.18:EvaluationofDatalogprograms12.3.6ProblematicDatalogRulesTherearecertainDatalogrulesorprogramsthattechnicallyhavenomeaningandshouldnotbeused.Thetwomostimportantrisksare1.Unsaferules:thosethathaveavariableintheheadthatdoesnotappearinthebodyinawaythatconstrainsthatvariabletotakeononlyvaluesthatappearintheEDB.2.Unstrati\fedprograms:setsofrulesthathavearecursioninvolvinganega-tion.Weshallelaborateoneachoftheserisks.12.3.ALOGICALREPRESENTATIONOFDATAFLOW931RuleSafetyAnyvariablethatappearsintheheadofarulemustalsoappearinthebody.Moreover,thatappearancemustbeinasubgoalthatisanordinaryIDBorEDBatom.Itisnotacceptableifthevariableappearsonlyinanegatedatom,oronlyinacomparisonoperator.Thereasonforthispolicyistoavoidrulesthatletusinferanin\fnitenumberoffacts.Example12.19:Therulep(X;Y):-q(Z)&NOTr(X)&X6=Yisunsafefortworeasons.VariableXappearsonlyinthenegatedsubgoalr(X)andthecomparisonX6=Y.Yappearsonlyinthecomparison.Theconsequenceisthatpistrueforanin\fnitenumberofpairs(X;Y),aslongasr(X)isfalseandYisanythingotherthanX.2Strati\fedDatalogInorderforaprogramtomakesense,recursionandnegationmustbeseparated.Theformalrequirementisasfollows.WemustbeabletodividetheIDBpredicatesintostrata,sothatifthereisarulewithheadpredicatepandasubgoaloftheformNOTq(\u0001\u0001\u0001),thenqiseitherEDBoranIDBpredicateinalowerstratumthanp.Aslongasthisruleissatis\fed,wecanevaluatethestrata,lowest\frst,byAlgorithm12.15or12.18,andthentreattherelationsfortheIDBpredicatesofthatstrataasiftheywereEDBforthecomputationofhigherstrata.However,ifweviolatethisrule,thentheiterativealgorithmmayfailtoconverge,asthenextexampleshows.Example12.20:ConsidertheDatalogprogramconsistingoftheonerule:p(X):-e(X)&NOTp(X)SupposeeisanEDBpredicate,andonlye(1)istrue.Isp(1)true?Thisprogramisnotstrati\fed.Whateverstratumweputpin,itsrulehasasubgoalthatisnegatedandhasanIDBpredicate(namelypitself)thatissurelynotinalowerstratumthanp.Ifweapplytheiterativealgorithm,westartwithRp=;,soinitially,theansweris\\no;p(1)isnottrue.\"However,the\frstiterationletsusinferp(1),sincebothe(1)andNOTp(1)aretrue.Butthentheseconditerationtellsusp(1)isfalse.Thatis,substituting1forXintheruledoesnotallowustoinferp(1),sincesubgoalNOTp(1)isfalse.Similarly,thethirditerationsaysp(1)istrue,thefourthsaysitisfalse,andsoon.Weconcludethatthisunstrati\fedprogramismeaningless,anddonotconsideritavalidprogram.2932CHAPTER12.INTERPROCEDURALANALYSIS12.3.7ExercisesforSection12.3!Exercise12.3.1:Inthisproblem,weshallconsiderareaching-definitionsdata-\rowanalysisthatissimplerthanthatinExample12.13.Assumethateachstatementbyitselfisablock,andinitiallyassumethateachstatementde\fnesexactlyonevariable.TheEDBpredicatepred(I;J)meansthatstatementIisapredecessorofstatementJ.TheEDBpredicatede\fnes(I;X)meansthatthevariablede\fnedbystatementIisX.WeshalluseIDBpredicatesin(I;D)andout(I;D)tomeanthatde\fnitionDreachesthebeginningorendofstatementI,respectively.Notethatade\fnitionisreallyastatementnumber.Fig.12.19isaDatalogprogramthatexpressestheusualalgorithmforcomputingreachingde\fnitions.1)kill(I;D):-de\fnes(I;X)&de\fnes(D;X)2)out(I;I):-de\fnes(I;X)3)out(I;D):-in(I;D)&NOTkill(I;D)4)in(I;D):-out(J;D)&pred(J;I)Figure12.19:Datalogprogramforasimplereaching-de\fnitionsanalysisNoticethatrule(1)saysthatastatementkillsitself,butrule(2)assuresthatastatementisinitsown\\outset\"anyway.Rule(3)isthenormaltransferfunction,andrule(4)allowscon\ruence,sinceIcanhaveseveralpredecessors.Yourproblemistomodifytherulestohandlethecommoncasewhereade\fnitionisambiguous,e.g.,anassignmentthroughapointer.Inthissituation,de\fnes(I;X)maybetrueforseveraldi\u000berentX'sandoneI.Ade\fnitionisbestrepresentedbyapair(D;X),whereDisastatement,andXisoneofthevariablesthatmaybede\fnedatD.Asaresult,inandoutbecomethree-argumentpredicates;e.g.,in(I;D;X)meansthatthe(possible)de\fnitionofXatstatementDreachesthebeginningofstatementI.Exercise12.3.2:WriteaDatalogprogramanalogoustoFig.12.19tocom-puteavailableexpressions.Inadditiontopredicatede\fnes,useapredicateeval(I;X;O;Y)thatsaysstatementIcausesexpressionXOYtobeevaluated.Here,Oistheoperatorintheexpression,e.g.,+.Exercise12.3.3:WriteaDatalogprogramanalogoustoFig.12.19tocomputelivevariables.Inadditiontopredicatede\fnes,assumeapredicateuse(I;X)thatsaysstatementIusesvariableX.Exercise12.3.4:InSection9.5,wede\fnedadata-\rowcalculationthatin-volvedsixconcepts:anticipated,available,earliest,postponable,latest,andused.SupposewehadwrittenaDatalogprogramtode\fneeachofthesein12.4.ASIMPLEPOINTER-ANALYSISALGORITHM933termsofEDBconceptsderivablefromtheprogram(e.g.,genandkillinfor-mation)andothersofthesesixconcepts.Whichofthesixdependonwhichothers?Whichofthesedependencesarenegated?WouldtheresultingDatalogprogrambestrati\fed?Exercise12.3.5:SupposethattheEDBpredicateedge(X;Y)consistsofthefollowingfacts:edge(1;2)edge(2;3)edge(3;4)edge(4;1)edge(4;5)edge(5;6)a)SimulatetheDatalogprogramofExample12.12onthisdata,usingthesimpleevaluationstrategyofAlgorithm12.15.Showthepathfactsdis-coveredateachround.b)SimulatetheDatalogprogramofFig.12.17onthisdata,aspartoftheincrementalevaluationstrategyofAlgorithm12.18.Showthepathfactsdiscoveredateachround.Exercise12.3.6:Thefollowingrulep(X;Y):-q(X;Z)&r(Z;W)&NOTp(W;Y)ispartofalargerDatalogprogramP.a)Identifythehead,body,andsubgoalsofthisrule.b)WhichpredicatesarecertainlyIDBpredicatesofprogramP?!c)WhichpredicatesarecertainlyEDBpredicatesofP?d)Istherulesafe?e)IsPstrati\fed?Exercise12.3.7:ConverttherulesofFig.12.14toincrementalform.12.4ASimplePointer-AnalysisAlgorithmInthissection,webeginthediscussionofaverysimple\row-insensitivepointer-aliasanalysisassumingthattherearenoprocedurecalls.Weshallshowinsubsequentsectionshowtohandleprocedures\frstcontextinsensitively,thencontextsensitively.Flowsensitivityaddsalotofcomplexity,andislessim-portanttocontextsensitivityforlanguageslikeJavawheremethodstendtobesmall.Thefundamentalquestionthatwewishtoaskinpointer-aliasanalysisiswhetheragivenpairofpointersmaybealiased.Onewaytoanswerthisquestionistocomputeforeachpointertheanswertothequestion\\whatobjectscanthispointerpointto?\"Iftwopointerscanpointtothesameobject,thenthepointersmaybealiased.934CHAPTER12.INTERPROCEDURALANALYSIS12.4.1WhyisPointerAnalysisDi\u000ecultPointer-aliasanalysisforCprogramsisparticularlydi\u000ecult,becauseCpro-gramscanperformarbitrarycomputationsonpointers.Infact,onecanreadinanintegerandassignittoapointer,whichwouldrenderthispointerapotentialaliasofallotherpointervariablesintheprogram.PointersinJava,knownasreferences,aremuchsimpler.Noarithmeticisallowed,andpointerscanonlypointtothebeginningofanobject.Pointer-aliasanalysismustbeinterprocedural.Withoutinterproceduralanalysis,onemustassumethatanymethodcalledcanchangethecontentsofallaccessiblepointervariables,thusrenderinganyintraproceduralpointer-aliasanalysisine\u000bective.Languagesallowingindirectfunctioncallspresentanadditionalchallengeforpointer-aliasanalysis.InC,onecancallafunctionindirectlybycallingadereferencedfunctionpointer.Weneedtoknowwhatthefunctionpointercanpointtobeforewecananalyzethefunctioncalled.Andclearly,afteranalyzingthefunctioncalled,onemaydiscovermorefunctionsthatthefunctionpointercanpointto,andthereforetheprocessneedstobeiterated.WhilemostfunctionsarecalleddirectlyinC,virtualmethodsinJavacausemanyinvocationstobeindirect.Givenaninvocationx.m()inaJavaprogram,theremaybemanyclassestowhichobjectxmightbelongandthathaveamethodnamedm.Themorepreciseourknowledgeoftheactualtypeofx,themorepreciseourcallgraphis.Ideally,wecandetermineatcompiletimetheexactclassofxandthusknowexactlywhichmethodmrefersto.Example12.21:ConsiderthefollowingsequenceofJavastatements:Objecto;o=newString();n=o.hashCode();HereoisdeclaredtobeanObject.Withoutanalyzingwhatorefersto,allmethodscalled\\hashCode\"declaredforallclassesmustbeconsideredaspos-sibletargets.KnowingthatopointstoaStringwillnarrowinterproceduralanalysistopreciselythemethoddeclaredforString.2Itispossibletoapplyapproximationstoreducethenumberoftargets.Forexample,staticallywecandeterminewhatareallthetypesofobjectscreated,andwecanlimittheanalysistothose.Butwecanbemoreaccurateifwecandiscoverthecallgraphonthe\ry,basedonthepoints-toanalysisobtainedatthesametime.Moreaccuratecallgraphsleadnotonlytomorepreciseresultsbutalsocanreducegreatlytheanalysistimeotherwiseneeded.Points-toanalysisiscomplicated.Itisnotoneofthose\\easy\"data\rowproblemswhereweonlyneedtosimulatethee\u000bectofgoingaroundaloopofstatementsonce.Rather,aswediscovernewtargetsforapointer,allstatementsassigningthecontentsofthatpointertoanotherpointerneedtobere-analyzed.12.4.ASIMPLEPOINTER-ANALYSISALGORITHM935Forsimplicity,weshallfocusmainlyonJava.Weshallstartwith\row-insensitiveandcontext-insensitiveanalysis,assumingfornowthatnomethodsarecalledintheprogram.Then,wedescribehowwecandiscoverthecallgraphonthe\ryasthepoints-toresultsarecomputed.Finally,wedescribeonewayofhandlingcontextsensitivity.12.4.2AModelforPointersandReferencesLetussupposethatourlanguagehasthefollowingwaystorepresentandma-nipulatereferences:1.Certainprogramvariablesareoftype\\pointertoT\"or\\referencetoT,\"whereTisatype.Thesevariablesareeitherstaticorliveontherun-timestack.Wecallthemsimplyvariables.2.Thereisaheapofobjects.Allvariablespointtoheapobjects,nottoothervariables.Theseobjectswillbereferredtoasheapobjects.3.Aheapobjectcanhave\felds,andthevalueofa\feldcanbeareferencetoaheapobject(butnottoavariable).Javaismodeledwellbythisstructure,andweshalluseJavasyntaxinexamples.NotethatCismodeledlesswell,sincepointervariablescanpointtootherpointervariablesinC,andinprinciple,anyCvaluecanbecoercedintoapointer.Sinceweareperforminganinsensitiveanalysis,weonlyneedtoassertthatagivenvariablevcanpointtoagivenheapobjecth;wedonothavetoaddresstheissueofwhereintheprogramvcanpointtoh,orinwhatcontextsvcanpointtoh.Note,however,thatvariablescanbenamedbytheirfullname.InJava,thisnamecanincorporatethemodule,class,method,andblockwithinamethod,aswellasthevariablenameitself.Thus,wecandistinguishmanyvariablesthathavethesameidenti\fer.Heapobjectsdonothavenames.Approximationoftenisusedtonametheobjects,becauseanunboundednumberofobjectsmaybecreateddynamically.Oneconventionistorefertoobjectsbythestatementatwhichtheyarecreated.Asastatementcanbeexecutedmanytimesandcreateanewobjecteachtime,anassertionlike\\vcanpointtoh\"reallymeans\\vcanpointtooneormoreoftheobjectscreatedatthestatementlabeledh.\"Thegoaloftheanalysisistodeterminewhateachvariableandeach\feldofeachheapobjectcanpointto.Werefertothisasapoints-toanalysis;twopointersarealiasediftheirpoints-tosetsintersect.Wedescribehereaninclusion-basedanalysis;thatis,astatementsuchasv=wcausesvariablevtopointtoalltheobjectswpointsto,butnotviceversa.Whilethisapproachmayseemobvious,thereareotheralternativestohowwede\fnepoints-toanalysis.Forexample,wecande\fneanequivalence-basedanalysissuchthatastatementlikev=wwouldturnvariablesvandwintooneequivalenceclass,pointing936CHAPTER12.INTERPROCEDURALANALYSIStoallthevariablesthateachcanpointto.Whilethisformulationdoesnotapproximatealiaseswell,itprovidesaquick,andoftengood,answertothequestionofwhichvariablespointtothesamekindofobjects.12.4.3FlowInsensitivityWestartbyshowingaverysimpleexampletoillustratethee\u000bectofignoringcontrol\rowinpoints-toanalysis.Example12.22:InFig.12.20,threeobjects,h,i,andj,arecreatedandassignedtovariablesa,b,andc,respectively.Thus,surelyapointstoh,bpointstoi,andcpointstojbytheendofline(3).1)h:a=newObject();2)i:b=newObject();3)j:c=newObject();4)a=b;5)b=c;6)c=a;Figure12.20:JavacodeforExample12.22Ifyoufollowthestatements(4)through(6),youdiscoverthatafterline(4)apointsonlytoi.Afterline(5),bpointsonlytoj,andafterline(6),cpointsonlytoi.2Theaboveanalysisis\rowsensitivebecausewefollowthecontrol\rowandcomputewhateachvariablecanpointtoaftereachstatement.Inotherwords,inadditiontoconsideringwhatpoints-toinformationeachstatement\\gener-ates,\"wealsoaccountforwhatpoints-toinformationeachstatement\\kills.\"Forinstance,thestatementb=c;killsthepreviousfact\\bpointstoi\"andgeneratesthenewrelationship\\bpointstowhatcpointsto.\"A\row-insensitiveanalysisignoresthecontrol\row,whichessentiallyassumesthateverystatementintheprogramcanbeexecutedinanyorder.Itcomputesonlyoneglobalpoints-tomapindicatingwhateachvariablecanpossiblypointtoatanypointoftheprogramexecution.Ifavariablecanpointtotwodi\u000berentobjectsaftertwodi\u000berentstatementsinaprogram,wesimplyrecordthatitcanpointtobothobjects.Inotherwords,in\row-insensitiveanalysis,anassignmentdoesnot\\kill\"anypoints-torelationsbutcanonly\\generate\"morepoints-torelations.Tocomputethe\row-insensitiveresults,werepeatedlyaddthepoints-toe\u000bectsofeachstatementonthepoints-torelationshipsuntilnonewrelationsarefound.Clearly,lackof\rowsensitivityweakenstheanalysisresultsgreatly,butittendstoreducethesizeoftherepresentationoftheresultsandmakethealgorithmconvergefaster.12.4.ASIMPLEPOINTER-ANALYSISALGORITHM937Example12.23:ReturningtoExample12.22,lines(1)through(3)againtellusacanpointtoh;bcanpointtoi,andccanpointtoj.Withlines(4)and(5),acanpointtobothhandi,andbcanpointtobothiandj.Withline(6),ccanpointtoh;i;andj.Thisinformationa\u000bectsline(5),whichinturna\u000bectsline(4),Intheend,weareleftwiththeuselessconclusionthatanythingcanpointtoanything.212.4.4TheFormulationinDatalogLetusnowformalizea\row-insensitivepointer-aliasanalysisbasedonthedis-cussionabove.Weshallignoreprocedurecallsfornowandconcentrateonthefourkindsofstatementsthatcana\u000bectpointers:1.Objectcreation.h:Tv=newT();Thisstatementcreatesanewheapobject,andvariablevcanpointtoit.2.Copystatement.v=w;Here,vandwarevariables.Thestatementmakesvpointtowhateverheapobjectwcurrentlypointsto;i.e.,wiscopiedintov.3.Fieldstore.v.f=w;Thetypeofobjectthatvpointstomusthavea\feldf,andthis\feldmustbeofsomereferencetype.Letvpointtoheapobjecth,andletwpointtog.Thisstatementmakesthe\feldf,inhnowpointtog.Notethatthevariablevisunchanged.4.Fieldload.v=w.f;Here,wisavariablepointingtosomeheapobjectthathasa\feldf,andfpointstosomeheapobjecth.Thestatementmakesvariablevpointtoh.Notethatcompound\feldaccessesinthesourcecodesuchasv=w.f.gwillbebrokendownintotwoprimitive\feld-loadstatements:v1=w.f;v=v1.g;LetusnowexpresstheanalysisformallyinDatalogrules.First,thereareonlytwoIDBpredicatesweneedtocompute:1.pts(V;H)meansthatvariableVcanpointtoheapobjectH.2.hpts(H;F;G)meansthat\feldFofheapobjectHcanpointtoheapobjectG.TheEDBrelationsareconstructedfromtheprogramitself.Sincethelocationofstatementsinaprogramisirrelevantwhentheanalysisis\row-insensitive,weonlyhavetoassertintheEDBtheexistenceofstatementsthathavecertainforms.Inwhatfollows,weshallmakeaconvenientsimpli\fcation.Insteadofde\fningEDBrelationstoholdtheinformationgarneredfromthe938CHAPTER12.INTERPROCEDURALANALYSISprogram,weshalluseaquotedstatementformtosuggesttheEDBrelationorrelationsthatrepresenttheexistenceofsuchastatement.Forexample,\\H:TV=newT\"isanEDBfactassertingthatatstatementHthereisanassignmentthatmakesvariableVpointtoanewobjectoftypeT.Weas-sumethatinpractice,therewouldbeacorrespondingEDBrelationthatwouldbepopulatedwithgroundatoms,oneforeachstatementofthisformintheprogram.Withthisconvention,allweneedtowritetheDatalogprogramisoneruleforeachofthefourtypesofstatements.TheprogramisshowninFig.12.21.Rule(1)saysthatvariableVcanpointtoheapobjectHifstatementHisanassignmentofanewobjecttoV.Rule(2)saysthatifthereisacopystatementV=W,andWcanpointtoH,thenVcanpointtoH.1)pts(V;H):-\\H:TV=newT\"2)pts(V;H):-\\V=W\"&pts(W;H)3)hpts(H;F;G):-\\V:F=W\"&pts(W;G)&pts(V;H)4)pts(V;H):-\\V=W:F\"&pts(W;G)&hpts(G;F;H)Figure12.21:Datalogprogramfor\row-insensitivepointeranalysisRule(3)saysthatifthereisastatementoftheformV.F=W,WcanpointtoG,andVcanpointtoH,thentheF\feldofHcanpointtoG.Finally,rule(4)saysthatifthereisastatementoftheformV=W.F,WcanpointtoG,andtheF\feldofGcanpointtoH,thenVcanpointtoH.Noticethatptsandhptsaremutuallyrecursive,butthisDatalogprogramcanbeevaluatedbyeitheroftheiterativealgorithmsdiscussedinSection12.3.4.12.4.5UsingTypeInformationBecauseJavaistypesafe,variablescanonlypointtotypesthatarecompat-ibletothedeclaredtypes.Forexample,assigninganobjectbelongingtoasuperclassofthedeclaredtypeofavariablewouldraisearun-timeexception.ConsiderthesimpleexampleinFig.12.22,whereSisasubclassofT.Thisprogramwillgeneratearun-timeexceptionifpistrue,becauseacannotbeassignedanobjectofclassT.Thus,staticallywecanconcludethatbecauseofthetyperestriction,acanonlypointtohandnotg.12.4.ASIMPLEPOINTER-ANALYSISALGORITHM939Sa;Tb;if(p){g:b=newT();}elseh:b=newS();}a=b;Figure12.22:JavaprogramwithatypeerrorThus,weintroducetoouranalysisthreeEDBpredicatesthatre\rectimpor-tanttypeinformationinthecodebeinganalyzed.Weshallusethefollowing:1.vType(V;T)saysthatvariableVisdeclaredtohavetypeT.2.hType(H;T)saysthatheapobjectHisallocatedwithtypeT.Thetypeofacreatedobjectmaynotbeknownpreciselyif,forexample,theobjectisreturnedbyanativemethod.Suchtypesaremodeledconservativelyasallpossibletypes.3.assignable(T;S)meansthatanobjectoftypeScanbeassignedtoavariablewiththetypeT.Thisinformationisgenerallygatheredfromthedeclarationofsubtypesintheprogram,butalsoincorporatesinformationabouttheprede\fnedclassesofthelanguage.assignable(T;T)isalwaystrue.WecanmodifytherulesfromFig.12.21toallowinferencesonlyifthevariableassignedgetsaheapobjectofanassignabletype.TherulesareshowninFig.12.23.The\frstmodi\fcationistorule(2).ThelastthreesubgoalssaythatwecanonlyconcludethatVcanpointtoHiftherearetypesTandSthatvariableVandheapobjectHmayrespectivelyhave,suchthatobjectsoftypeScanbeassignedtovariablesthatarereferencestotypeT.Asimilaradditionalrestric-tionhasbeenaddedtorule(4).Noticethatthereisnoadditionalrestrictioninrule(3)becauseallstoresmustgothroughavariablewhosetypealreadyhasbeenchecked.Anytyperestrictionwouldonlycatchoneextracase,whenthebaseobjectisanullconstant.12.4.6ExercisesforSection12.4Exercise12.4.1:InFig.12.24,handgarelabelsusedtorepresentnewlycreatedobjects,andarenotpartofthecode.YoumayassumethatobjectsoftypeThavea\feldf.UsetheDatalogrulesofthissectiontoinferallpossibleptsandhptsfacts.940CHAPTER12.INTERPROCEDURALANALYSIS1)pts(V;H):-\\H:TV=newT\"2)pts(V;H):-\\V=W\"&pts(W;H)&vType(V;T)&hType(H;S)&assignable(T;S)3)hpts(H;F;G):-\\V:F=W\"&pts(W;G)&pts(V;H)4)pts(V;H):-\\V=W:F\"&pts(W;G)&hpts(G;F;H)&vType(V;T)&hType(H;S)&assignable(T;S)Figure12.23:Addingtyperestrictionsto\row-insensitivepointeranalysish:Ta=newT();g:Tb=newT();Tc=a;a.f=b;b.f=c;Td=c.f;Figure12.24:CodeforExercise12.4.1!Exercise12.4.2:Applyingthealgorithmofthissectiontothecodeg:Ta=newT();h:a=newT();Tc=a;wouldinferthatbothaandbcanpointtogandh.Hadthecodebeenwritteng:Ta=newT();h:Tb=newT();Tc=b;wewouldinferaccuratelythatacanpointtog,andbandccanpointtoh.Suggestanintraproceduraldata-\rowanalysisthatcanavoidthiskindofinaccuracy.12.5.CONTEXT-INSENSITIVEINTERPROCEDURALANALYSIS941tp(tx){h:Ta=newT;a.f=x;returna;}voidmain(){g:Tb=newT;b=p(b);b=b.f;}Figure12.25:Examplecodeforpointeranalysis!Exercise12.4.3:Wecanextendtheanalysisofthissectiontobeinterproce-duralifwesimulatecallandreturnasiftheywerecopyoperations,asinrule(2)ofFig.12.21.Thatis,acallcopiestheactualstotheircorrespondingformals,andthereturncopiesthevariablethatholdsthereturnvaluetothevariablethatisassignedtheresultofthecall.ConsidertheprogramofFig.12.25.a)Performaninsensitiveanalysisonthiscode.b)Someoftheinferencesmadein(a)areactually\\bogus,\"inthesensethattheydonotrepresentanyeventthatcanoccuratrun-time.Theproblemcanbetracedtothemultipleassignmentstovariableb.RewritethecodeofFig.12.25sothatnovariableisassignedmorethanonce.Reruntheanalysisandshowthateachinferredptsandhptsfactcanoccuratruntime.12.5Context-InsensitiveInterproceduralAnalysisWenowconsidermethodinvocations.We\frstexplainhowpoints-toanalysiscanbeusedtocomputeaprecisecallgraph,whichisusefulincomputingprecisepoints-toresults.Wethenformalizeon-the-\rycall-graphdiscoveryandshowhowDatalogcanbeusedtodescribetheanalysissuccinctly.12.5.1E\u000bectsofaMethodInvocationThee\u000bectsofamethodcallsuchasx=y.n(z)inJavaonthepoints-torela-tionscanbecomputedasfollows:1.Determinethetypeofthereceiverobject,whichistheobjectthatypointsto.Supposeitstypeist.Letmbethemethodnamedninthenarrowest942CHAPTER12.INTERPROCEDURALANALYSISsuperclassoftthathasamethodnamedn.Notethat,ingeneral,whichmethodisinvokedcanonlybedetermineddynamically.2.Theformalparametersofmareassignedtheobjectspointedtobytheac-tualparameters.Theactualparametersincludenotjusttheparameterspassedindirectly,butalsothereceiverobjectitself.Everymethodinvo-cationassignsthereceiverobjecttothethisvariable.3Werefertothethisvariablesasthe0thformalparametersofmethods.Inx=y.n(z),therearetwoformalparameters:theobjectpointedtobyyisassignedtovariablethis,andtheobjectpointedtobyzisassignedtothe\frstdeclaredformalparameterofm.3.Thereturnedobjectofmisassignedtotheleft-hand-sidevariableoftheassignmentstatement.Incontext-insensitiveanalysis,parametersandreturnedvaluesaremodeledbycopystatements.Theinterestingquestionthatremainsishowtodeterminethetypeofthereceiverobject.Wecanconservativelydeterminethetypeac-cordingtothedeclarationofthevariable;forexample,ifthedeclaredvariablehastypet,thenonlymethodsnamedninsubtypesoftcanbeinvoked.Unfor-tunately,ifthedeclaredvariablehastypeObject,thenallmethodswithnamenareallpotentialtargets.Inreal-lifeprogramsthatuseobjecthierarchiesex-tensivelyandincludemanylargelibraries,suchanapproachcanresultinmanyspuriouscalltargets,makingtheanalysisbothslowandimprecise.Weneedtoknowwhatthevariablescanpointtoinordertocomputethecalltargets;butunlessweknowthecalltargets,wecannot\fndoutwhatallthevariablescanpointto.Thisrecursiverelationshiprequiresthatwediscoverthecalltargetsonthe\ryaswecomputethepoints-toset.Theanalysiscontinuesuntilnonewcalltargetsandnonewpoints-torelationsarefound.Example12.24:InthecodeinFig.12.26,risasubtypeofs,whichitselfisasubtypeoft.Usingonlythedeclaredtypeinformation,a.n()mayinvokeanyofthethreedeclaredmethodswithnamensincesandrarebothsubtypesofa'sdeclaredtype,t.Furthermore,itappearsthatamaypointtoobjectsg;h,andiafterline(5).Byanalyzingthepoints-torelationships,we\frstdeterminethatacanpointtoj,anobjectoftypet.Thus,themethoddeclaredinline(1)isacalltarget.Analyzingline(1),wedeterminethataalsocanpointtog,anobjectoftyper.Thus,themethoddeclaredinline(3)mayalsobeacalltarget,andacannowalsopointtoi,anotherobjectoftyper.Sincetherearenomorenewcalltargets,theanalysisterminateswithoutanalyzingthemethoddeclaredinline(2)andwithoutconcludingthatacanpointtoh.2CONTEXT-INSENSITIVEINTERPROCEDURALANALYSIS943classt{1)g:tn(){returnnewr();}}classsextendst{2)h:tn(){returnnews();}}classrextendss{3)i:tn(){returnnewr();}}main(){4)j:ta=newt();5)a=a.n();}Figure12.26:Avirtualmethodinvocation12.5.2CallGraphDiscoveryinDatalogToformulatetheDatalogrulesforcontext-insensitiveinterproceduralanalysis,weintroducethreeEDBpredicates,eachofwhichisobtainableeasilyfromthesourcecode:1.actual(S;I;V)saysVistheIthactualparameterusedincallsiteS.2.formal(M;I;V)saysthatVisIthformalparameterdeclaredinmethodM.3.cha(T;N;M)saysthatMisthemethodcalledwhenNisinvokedonareceiverobjectoftypeT.(chastandsforclasshierarchyanalysis).EachedgeofthecallgraphisrepresentedbyanIDBpredicateinvokes.Aswediscovermorecall-graphedges,morepoints-torelationsarecreatedastheparametersarepassedinandreturnedvaluesarepassedout.Thise\u000bectissummarizedbytherulesshowninFigure12.27.The\frstrulecomputesthecalltargetofthecallsite.Thatis,\\S:V:N(:::)\"saysthatthereisacallsitelabeledSthatinvokesmethodnamedNonthereceiverobjectpointedtobyV.ThesubgoalssaythatifVcanpointtoheapobjectH,whichisallocatedastypeT,andMisthemethodusedwhenNisinvokedonobjectsoftypeT,thencallsiteSmayinvokemethodM.ThesecondrulesaysthatifsiteScancallmethodM,theneachformalparameterofMcanpointtowhateverthecorrespondingactualparameterofthecallcanpointto.Theruleforhandlingreturnedvaluesisleftasanexercise.CombiningthesetworuleswiththoseexplainedinSection12.4createacontext-insensitivepoints-toanalysisthatusesacallgraphthatiscomputedonthe\ry.Thisanalysishasthesidee\u000bectofcreatingacallgraphusinga944CHAPTER12.INTERPROCEDURALANALYSIS1)invokes(S;M):-\\S:V:N(:::)\"&pts(V;H)&hType(H;T)&cha(T;N;M)2)pts(V;H):-invokes(S;M)&formal(M;I;V)&actual(S;I;W)&pts(W;H)Figure12.27:Datalogprogramforcall-graphdiscoverycontext-insensitiveand\row-insensitivepoints-toanalysis.Thiscallgraphissigni\fcantlymoreaccuratethanonecomputedbasedonlyontypedeclarationsandsyntacticanalysis.12.5.3DynamicLoadingandRe\rectionLanguageslikeJavaallowdynamicloadingofclasses.Itisimpossibletoan-alyzeallthepossiblecodeexecutedbyaprogram,andhenceimpossibletoprovideanyconservativeapproximationofcallgraphsorpointeraliasesstat-ically.Staticanalysiscanonlyprovideanapproximationbasedonthecodeanalyzed.RememberthatalltheanalysesdescribedherecanbeappliedattheJavabytecodelevel,andthusitisnotnecessarytoexaminethesourcecode.Thisoptionisespeciallysigni\fcantbecauseJavaprogramstendtousemanylibraries.Evenifweassumethatallthecodetobeexecutedisanalyzed,thereisonemorecomplicationthatmakesconservativeanalysisimpossible:re\rection.Re\rectionallowsaprogramtodeterminedynamicallythetypesofobjectstobecreated,thenamesofmethodsinvoked,aswellasthenamesofthe\feldsaccessed.Thetype,method,and\feldnamescanbecomputedorderivedfromuserinput,soingeneraltheonlypossibleapproximationistoassumetheuniverse.Example12.25:Thecodebelowshowsacommonuseofre\rection:1)StringclassName=...;2)Classc=Class.forName(className);3)Objecto=c.newInstance();4)Tt=(T)o;TheforNamemethodintheClasslibrarytakesastringcontainingtheclassnameandreturnstheclass.ThemethodnewInstancereturnsaninstanceofthatclass.InsteadofleavingtheobjectowithtypeObject,thisobjectiscasttoasuperclassTofalltheexpectedclasses.212.6.CONTEXT-SENSITIVEPOINTERANALYSIS945WhilemanylargeJavaapplicationsusere\rection,theytendtousecommonidioms,suchastheoneshowninExample12.25.Aslongastheapplicationdoesnotrede\fnetheclassloader,wecantelltheclassoftheobjectifweknowthevalueofclassName.IfthevalueofclassNameisde\fnedintheprogram,becausestringsareimmutableinJava,knowingwhatclassNamepointstowillprovidethenameoftheclass.Thistechniqueisanotheruseofpoints-toanalysis.IfthevalueofclassNameisbasedonuserinput,thenthepoints-toanalysiscanhelplocatewherethevalueisentered,andthedevelopermaybeabletolimitthescopeofitsvalue.Similarly,wecanexploitthetypecaststatement,line(4)inExample12.25,toapproximatethetypeofdynamicallycreatedobjects.Assumingthatthetypecastexceptionhandlerhasnotbeenrede\fned,theobjectmustbelongtoasubclassoftheclassT.12.5.4ExercisesforSection12.5Exercise12.5.1:ForthecodeofFig.12.26a)ConstructtheEDBrelationsactual,formal,andcha.b)Makeallpossibleinferencesofptsandhptsfacts.!Exercise12.5.2:HowwouldyouaddtotheEDBpredicatesandrulesofSection12.5.2additionalpredicatesandrulestotakeintoaccountthefactthatifamethodcallreturnsanobject,thenthevariabletowhichtheresultofthecallisassignedcanpointtowhateverthevariableholdingthereturnvaluecanpointto?12.6Context-SensitivePointerAnalysisAsdiscussedinSection12.1.2,contextsensitivitycanimprovegreatlythepre-cisionofinterproceduralanalysis.Wetalkedabouttwoapproachestointerpro-ceduralanalysis,onebasedoncloning(Section12.1.4)andoneonsummaries(Section12.1.5).Whichoneshouldweuse?Thereareseveraldi\u000ecultiesincomputingthesummariesofpoints-toinfor-mation.First,thesummariesarelarge.Eachmethod'ssummarymustincludethee\u000bectofalltheupdatesthatthefunctionandallitscalleescanmake,intermsoftheincomingparameters.Thatis,amethodcanchangethepoints-tosetsofalldatareachablethroughstaticvariables,incomingparametersandallobjectscreatedbythemethodanditscallees.Whilecomplicatedschemeshavebeenproposed,thereisnoknownsolutionthatcanscaletolargeprograms.Evenifthesummariescanbecomputedinabottom-uppass,computingthepoints-tosetsforalltheexponentiallymanycontextsinatypicaltop-downpasspresentsanevengreaterproblem.Suchinformationisnecessaryforglobalquerieslike\fndingallpointsinthecodethattouchacertainobject.946CHAPTER12.INTERPROCEDURALANALYSISInthissection,wediscussacloning-basedcontext-sensitiveanalysis.Acloning-basedanalysissimplyclonesthemethods,oneforeachcontextofin-terest.Wethenapplythecontext-insensitiveanalysistotheclonedcallgraph.Whilethisapproachseemssimple,thedevilisinthedetailsofhandlingthelargenumberofclones.Howmanycontextsarethere?Evenifweusetheideaofcollapsingallrecursivecycles,asdiscussedinSection12.1.3,itisnotuncommonto\fnd1014contextsinaJavaapplication.Representingtheresultsofthesemanycontextsisthechallenge.Weseparatethediscussionofcontextsensitivityintotwoparts:1.Howtohandlecontextsensitivitylogically?Thispartiseasy,becausewesimplyapplythecontext-insensitivealgorithmtotheclonedcallgraph.2.Howtorepresenttheexponentiallymanycontexts?Onewayistorep-resenttheinformationasbinarydecisiondiagrams(BDD's),ahighly-optimizeddatastructurethathasbeenusedformanyotherapplications.Thisapproachtocontextsensitivityisanexcellentexampleoftheimpor-tanceofabstraction.Aswearegoingtoshow,weeliminatealgorithmiccom-plexitybyleveragingtheyearsofworkthatwentintotheBDDabstraction.Wecanspecifyacontext-sensitivepoints-toanalysisinjustafewlinesofDatalog,whichinturntakesadvantageofmanythousandsoflinesofexistingcodeforBDDmanipulation.Thisapproachhasseveralimportantadvantages.First,itmakespossibletheeasyexpressionoffurtheranalysesthatusetheresultsofthepoints-toanalysis.Afterall,thepoints-toresultsontheirownarenotinteresting.Second,itmakesitmucheasiertowritetheanalysiscorrectly,asitleveragesmanylinesofwell-debuggedcode.12.6.1ContextsandCallStringsThecontext-sensitivepoints-toanalysisdescribedbelowassumesthatacallgraphhasbeenalreadycomputed.Thisstephelpsmakepossibleacompactrepresentationofthemanycallingcontexts.Togetthecallgraph,we\frstrunacontext-insensitivepoints-toanalysisthatcomputesthecallgraphonthe\ry,asdiscussedinSection12.5.Wenowdescribehowtocreateaclonedcallgraph.Acontextisarepresentationofthecallstringthatformsthehistoryoftheactivefunctioncalls.Anotherwaytolookatthecontextisthatitisasummaryofthesequenceofcallswhoseactivationrecordsarecurrentlyontherun-timestack.Iftherearenorecursivefunctionsonthestack,thenthecallstring|thesequenceoflocationsfromwhichthecallsonthestackweremade|isacompleterepresentation.Itisalsoanacceptablerepresentation,inthesensethatthereisonlya\fnitenumberofdi\u000berentcontexts,althoughthatnumbermaybeexponentialinthenumberoffunctionsintheprogram.However,iftherearerecursivefunctionsintheprogram,thenthenumberofpossiblecallstringsisin\fnite,andwecannotallowallpossiblecallstringstorepresentdistinctcontexts.Therearevariouswayswecanlimitthenumberof12.6.CONTEXT-SENSITIVEPOINTERANALYSIS947distinctcontexts.Forexample,wecanwritearegularexpressionthatdescribesallpossiblecallstringsandconvertthatregularexpressiontoadeterministic\fniteautomaton,usingthemethodsofSection3.7.Thecontextscanthenbeidenti\fedwiththestatesofthisautomaton.Here,weshalladoptasimplerschemethatcapturesthehistoryofnonrecur-sivecallsbutconsidersrecursivecallstobe\\toohardtounravel.\"Webeginby\fndingallthemutuallyrecursivesetsoffunctionsintheprogram.Theprocessissimpleandwillnotbeelaboratedindetailhere.Thinkofagraphwhosenodesarethefunctions,withanedgefromptoqiffunctionpcallsfunctionq.Thestronglyconnectedcomponents(SCC's)ofthisgrapharethesetsofmutuallyrecursivefunctions.Asacommonspecialcase,afunctionpthatcallsitself,butisnotinanSCCwithanyotherfunctionisanSCCbyitself.ThenonrecursivefunctionsarealsoSCC'sbythemselves.CallanSCCnontrivialifiteitherhasmorethanonemember(themutuallyrecursivecase),orithasasingle,recursivemember.TheSCC'sthataresingle,nonrecursivefunctionsaretrivialSCC's.Ourmodi\fcationoftherulethatanycallstringisacontextisasfollows.Givenacallstring,deletetheoccurrenceofacallsitesif1.sisinafunctionp.2.Functionqiscalledatsites(q=pispossible).3.pandqareinthesamestrongcomponent(i.e.,pandqaremutuallyrecursive,orp=qandpisrecursive).TheresultisthatwhenamemberofanontrivialSCCSiscalled,thecallsiteforthatcallbecomespartofthecontext,butcallswithinStootherfunctionsinthesameSCCarenotpartofthecontext.Finally,whenacalloutsideSismade,werecordthatcallsiteaspartofthecontext.Example12.26:InFig.12.28isasketchof\fvemethodswithsomecallsitesandcallsamongthem.Anexaminationofthecallsshowsthatqandraremutuallyrecursive.However,p,s,andtarenotrecursiveatall.Thus,ourcontextswillbelistsofallthecallsitesexcepts3ands5,wheretherecursivecallsbetweenqandrtakeplace.Letusconsiderallthewayswecouldgetfromptot,thatis,allthecontextsinwhichcallstotoccur:1.pcouldcallsats2,andthenscouldcalltateithers7ors8.Thus,twopossiblecallstringsare(s2;s7)and(s2;s8).2.pcouldcallqats1.Then,qandrcouldcalleachotherrecursivelysomenumberoftimes.Wecouldbreakthecycle:(a)Ats4,wheretiscalleddirectlybyq.Thischoiceleadstoonlyonecontext,(s1;s4).948CHAPTER12.INTERPROCEDURALANALYSISvoidp(){h:Ta=newT();s1:Tb=a.q();s2:b.s();}Tq(){s3:Tc=this.r();i:Td=newT();s4:d.t();returnd;}Tr(){s5:Te=this.q();s6:e.s();returne;}voids(){s7:Tf=this.t();s8:f=f.t();}Tt(){j:Tg=newT();returng;}Figure12.28:Methodsandcallsitesforarunningexample(b)Ats6,wherercallss.Here,wecanreachteitherbythecallats7orthecallats8.Thatgivesustwomorecontexts,(s1;s6;s7)and(s1;s6;s8).Therearethus\fvedi\u000berentcontextsinwhichtcanbecalled.Noticethatallthesecontextsomittherecursivecallsites,s3ands5.Forexample,thecontext(s1;s4)actuallyrepresentsthein\fnitesetofcallstrings(s1;s3;(s5;s3)n;s4)foralln\u00150.2Wenowdescribehowwederivetheclonedcallgraph.Eachclonedmethodisidenti\fedbythemethodMintheprogramandacontextC.Edgescanbederivedbyaddingthecorrespondingcontextstoeachoftheedgesintheoriginalcallgraph.RecallthatthereisanedgeintheoriginalcallgraphlinkingcallsiteSwithmethodMifthepredicateinvokes(S;M)istrue.Toaddcontexts12.6.CONTEXT-SENSITIVEPOINTERANALYSIS949toidentifythemethodsintheclonedcallgraph,wecande\fneacorrespondingCSinvokespredicatesuchthatCSinvokes(S;C;M;D)istrueifthecallsiteSincontextCcallstheDcontextofmethodM.12.6.2AddingContexttoDatalogRulesTo\fndcontext-sensitivepoints-torelations,wecansimplyapplythesamecontext-insensitivepoints-toanalysistotheclonedcallgraph.Sinceamethodintheclonedcallgraphisrepresentedbytheoriginalmethodanditscontext,werevisealltheDatalogrulesaccordingly.Forsimplicity,therulesbelowdonotincludethetyperestriction,andthe950CHAPTER12.INTERPROCEDURALANALYSISusingthetricksdescribedbrie\ryinthenextsection.Nonetheless,thisalgorithmcannotyethandlethelargestofJavaapplications.Theheapobjectsinthisformulationarenamedbytheircallsite,butwith-outcontextsensitivity.Thatsimpli\fcationcancauseproblems.Considertheobject-factoryidiomwhere,allobjectsofthesametypeareallocatedbythesameroutine.Thecurrentschemewouldmakeallobjectsofthatclasssharethesamename.Itisrelativelysimpletohandlesuchcasesbyessentiallyinliningtheallocationcode.Ingeneral,itisdesirabletoincreasethecontextsensitivityinthenamingofobjects.WhileitiseasytoaddcontextsensitivityofobjectstotheDatalogformulation,gettingtheanalysistoscaletolargeprogramsisanothermatter.Anotherimportantformofsensitivityisobjectsensitivity.Anobject-sensitivetechniquecandistinguishbetweenmethodsinvokedondi\u000berentre-ceiverobjects.Considerthescenarioofacallsiteinacallingcontextwhereavariableisfoundtopointtotwodi\u000berentreceiverobjectsofthesameclass.Their\feldsmaypointtodi\u000berentobjects.Withoutdistinguishingbetweentheobjects,acopyamong\feldsofthethisobjectreferencewillcreatespuriousrelationshipsunlessweseparatetheanalysisaccordingtothereceiverobjects.Objectsensitivityismoreusefulthancontextsensitivityforsomeanalyses.12.6.4ExercisesforSection12.6voidp(){h:Ta=newT();i:Tb=newT();c1:Tc=a.q(b);}Tq(Ty){j:Td=newT();c2:d=this.q(d);c3:d=d.q(y);c4:d=d.r();returnd;}Tr(){returnthis;}Figure12.30:CodeforExercises12.6.1and12.6.2Exercise12.6.1:WhatareallthecontextsthatwouldbedistinguishedifweapplythemethodsofthissectiontothecodeinFig.12.30?12.7.DATALOGIMPLEMENTATIONBYBDD'S951!Exercise12.6.2:PerformacontextsensitiveanalysisofthecodeinFig.12.30.!Exercise12.6.3:ExtendtheDatalogrulesofthissectiontoincorporatethetypeandsubtypeinformation,followingtheapproachofSection12.5.12.7DatalogImplementationbyBDD'sBinaryDecisionDiagrams(BDD's)areamethodforrepresentingbooleanfunc-tionsbygraphs.Sincethereare22nbooleanfunctionsofnvariables,norepre-sentationmethodisgoingtobeverysuccinctonallbooleanfunctions.However,thebooleanfunctionsthatappearinpracticetendtohavealotofregularity.Itisthuscommonthatonecan\fndasuccinctBDDforfunctionsthatonereallywantstorepresent.ItturnsoutthatthebooleanfunctionsthataredescribedbytheDatalogprogramsthatwehavedevelopedtoanalyzeprogramsarenoexception.WhilesuccinctBDD'srepresentinginformationaboutaprogramoftenmustbefoundusingheuristicsand/ortechniquesusedincommercialBDD-manipulatingpack-ages,theBDDapproachhasbeenquitesuccessfulinpractice.Inparticular,itoutperformsmethodsbasedonconventionaldatabase-managementsystems,becausethelatteraredesignedforthemoreirregulardatapatternsthatappearintypicalcommercialdata.ItisbeyondthescopeofthisbooktocoveralloftheBDDtechnologythathasbeendevelopedovertheyears.WeshallhereintroduceyoutotheBDDnotation.WethensuggesthowonerepresentsrelationaldataasBDD'sandhowonecouldmanipulateBDD'store\recttheoperationsthatareperformedtoexecuteDatalogprogramsbyalgorithmssuchasAlgorithm12.18.Finally,wedescribehowtorepresenttheexponentiallymanycontextsinBDD's,thekeytothesuccessoftheuseofBDD'sincontext-sensitiveanalysis.12.7.1BinaryDecisionDiagramsABDDrepresentsabooleanfunctionbyarootedDAG.TheinteriornodesoftheDAGareeachlabeledbyoneofthevariablesoftherepresentedfunction.Atthebottomaretwoleaves,onelabeled0theotherlabeled1.Eachinteriornodehastwoedgestochildren;theseedgesarecalled\\low\"and\\high.\"Thelowedgeisassociatedwiththecasethatthevariableatthenodehasvalue0,andthehighedgeisassociatedwiththecasewherethevariablehasvalue1.Givenatruthassignmentforthevariables,wecanstartattheroot,andateachnode,sayanodelabeledx,followtheloworhighedge,dependingonwhetherthetruthvalueforxis0or1,respectively.Ifwearriveattheleaflabeled1,thentherepresentedfunctionistrueforthistruthassignment;otherwiseitisfalse.Example12.27:InFig.12.31weseeaBDD.Weshallseethefunctionitrepresentsshortly.Noticethatwehavelabeledallthe\\low\"edgeswith0and952CHAPTER12.INTERPROCEDURALANALYSIS w xx yy zz 0 1 0 0 0 0 0 00 1 1 1 1 11 1Figure12.31:Abinarydecisiondiagramallthe\\high\"edgesby1.Considerthetruthassignmentforvariableswxyzthatsetsw=x=y=0andz=1.Startingattheroot,sincew=0wetakethelowedge,whichgetsustotheleftmostofthenodeslabeledx.Sincex=0,weagainfollowthelowedgefromthisnode,whichtakesustotheleftmostofthenodeslabeledy.Sincey=0wenextmovetotheleftmostofthenodeslabeledz.Now,sincez=1,wetakethehighedgeandwindupattheleaflabeled1.Ourconclusionisthatthefunctionistrueforthistruthassignment.Now,considerthetruthassignmentwxyz=0101,thatis,w=y=0andx=z=1.Weagainstartattheroot.Sincew=0weagainmovetotheleftmostofthenodeslabeledx.Butnow,sincex=1,wefollowthehighedge,whichjumpstothe0leaf.Thatis,weknownotonlythattruthassignment0101makesthefunctionfalse,butsinceweneverevenlookedatyorz,anytruthassignmentoftheform01yzwillalsomakethefunctionhavevalue0.This\\short-circuiting\"abilityisoneofthereasonsBDD'stendtobesuccinctrepresentationsofbooleanfunctions.2InFig.12.31theinteriornodesareinranks|eachrankhavingnodeswithaparticularvariableaslabel.Althoughitisnotanabsoluterequirement,itisconvenienttorestrictourselvestoorderedBDD's.InanorderedBDD,thereisanorderx1;x2;:::;xntothevariables,andwheneverthereisanedgefromaparentnodelabeledxitoachildlabeledxj,theni<j.WeshallseethatitiseasiertooperateonorderedBDD's,andfromhereweassumeallBDD'sare12.7.DATALOGIMPLEMENTATIONBYBDD'S953ordered.NoticealsothatBDD'sareDAG's,nottrees.Notonlywilltheleaves0and1typicallyhavemanyparents,butinteriornodesalsomayhaveseveralparents.Forexample,therightmostofthenodeslabeledzinFig.12.31hastwoparents.ThiscombinationofnodesthatwouldresultinthesamedecisionisanotherreasonthatBDD'stendtobesuccinct.12.7.2TransformationsonBDD'sWealluded,inthediscussionabove,totwosimpli\fcationsonBDD'sthathelpmakethemmoresuccinct:1.Short-Circuiting:IfanodeNhasbothitshighandlowedgesgotothesamenodeM,thenwemayeliminateN.EdgesenteringNgotoMinstead.2.Node-Merging:IftwonodesNandMhavelowedgesthatgotothesamenodeandalsohavehighedgesthatgotothesamenode,thenwemaymergeNwithM.EdgesenteringeitherNorMgotothemergednode.Itisalsopossibletorunthesetransformationsintheoppositedirection.Inparticular,wecanintroduceanodealonganedgefromNtoM.BothedgesfromtheintroducednodegotoM,andtheedgefromNnowgoestotheintroducednode.Note,however,thatthevariableassignedtothenewnodemustbeoneofthosethatliesbetweenthevariablesofNandMintheorder.Figure12.32showsthetwotransformationsschematically. x y z x z xx x yz yz (a) Short−circuiting (b) Node−mergingFigure12.32:TransformationsonBDD's954CHAPTER12.INTERPROCEDURALANALYSIS12.7.3RepresentingRelationsbyBDD'sTherelationswithwhichwehavebeendealinghavecomponentsthataretakenfrom\\domains.\"Adomainforacomponentofarelationisthesetofpossiblevaluesthattuplescanhaveinthatcomponent.Forexample,therelationpts(V;H)hasthedomainofallprogramvariablesforits\frstcomponentandthedomainofallobject-creatingstatementsforthesecondcomponent.Ifadomainhasmorethan2n\u00001possiblevaluesbutnomorethan2nvalues,thenitrequiresnbitsorbooleanvariablestorepresentvaluesinthatdomain.Atupleinarelationmaythusbeviewedasatruthassignmenttothevariablesthatrepresentvaluesinthedomainsforeachofthecomponentsofthetuple.Wemayseearelationasabooleanfunctionthatreturnsthevaluetrueforallandonlythosetruthassignmentsthatrepresenttuplesintherelation.Anexampleshouldmaketheseideasclear.Example12.28:Considerarelationr(A;B)suchthatthedomainsofbothAandBarefa;b;c;dg.Weshallencodeabybits00,bby01,cby10,anddby11.Letthetuplesofrelationrbe:A12.7.DATALOGIMPLEMENTATIONBYBDD'S9551.Initialization:WeneedtocreateaBDDthatrepresentsasingletupleofarelation.We'llassembletheseintoBDD'sthatrepresentlargerelationsbytakingtheunion.2.Union:Totaketheunionofrelations,wetakethelogicalORofthebooleanfunctionsthatrepresenttherelations.Thisoperationisneedednotonlytoconstructinitialrelations,butalsotocombinetheresultsofseveralrulesforthesameheadpredicate,andtoaccumulatenewfactsintothesetofoldfacts,asintheincrementalAlgorithm12.18.3.Projection:Whenweevaluatearulebody,weneedtoconstructtheheadrelationthatisimpliedbythetruetuplesofthebody.IntermsoftheBDDthatrepresentstherelation,weneedtoeliminatethenodesthatarelabeledbythosebooleanvariablesthatdonotrepresentcomponentsofthehead.WemayalsoneedtorenamethevariablesintheBDDtocorrespondtothebooleanvariablesforthecomponentsoftheheadrelation.4.Join:To\fndtheassignmentsofvaluestovariablesthatmakearulebodytrue,weneedto\\join\"therelationscorrespondingtoeachofthesubgoals.Forexample,supposewehavetwosubgoalsr(A;B)&s(B;C).Thejoinoftherelationsforthesesubgoalsisthesetof(a;b;c)triplessuchthat(a;b)isatupleintherelationforr,and(b;c)isatupleintherelationfors.Weshallseethat,afterrenamingbooleanvariablesinBDD'ssothecomponentsforthetwoB'sagreeinvariablenames,theoperationonBDD'sissimilartothelogicalAND,whichinturnissimilartotheORoperationonBDD'sthatimplementstheunion.BDD'sforSingleTuplesToinitializearelation,weneedtohaveawaytoconstructaBDDforthefunctionthatistrueforasingletruthassignment.Supposethebooleanvari-ablesarex1;x2;:::;xn,andthetruthassignmentisa1a2\u0001\u0001\u0001an,whereeachaiiseither0or1.TheBDDwillhaveonenodeNiforeachxi.Ifai=0,thenthehighedgefromNileadstotheleaf0,andthelowedgeleadstoNi+1,ortotheleaf1ifi=n.Ifai=1,thenwedothesame,butthehighandlowedgesarereversed.ThisstrategygivesusaBDDthatcheckswhethereachxihasthecorrectvalue,fori=1;2;:::;n.Assoonaswe\fndanincorrectvalue,wejumpdirectlytothe0leaf.Weonlywindupatthe1leafifallvariableshavetheircorrectvalue.Asanexample,lookaheadtoFig.12.33(b).ThisBDDrepresentsthefunctionthatistrueifandonlyifx=y=0,i.e.,thetruthassignment00.956CHAPTER12.INTERPROCEDURALANALYSISUnionWeshallgiveindetailanalgorithmfortakingthelogicalORofBDD's,thatis,theunionoftherelationsrepresentedbytheBDD's.Algorithm12.29:UnionofBDD's.INPUT:TwoorderedBDD'swiththesamesetofvariables,inthesameorder.OUTPUT:ABDDrepresentingthefunctionthatisthelogicalORofthetwobooleanfunctionsrepresentedbytheinputBDD's.METHOD:WeshalldescribearecursiveprocedureforcombiningtwoBDD's.TheinductionisonthesizeofthesetofvariablesappearingintheBDD's.BASIS:Zerovariables.TheBDD'smustbothbeleaves,labeledeither0or1.Theoutputistheleaflabeled1ifeitherinputis1,ortheleaflabeled0ifbothare0.INDUCTION:Supposetherearekvariables,y1;y2;:::;ykfoundamongthetwoBDD's.Dothefollowing:1.Ifnecessary,useinverseshort-circuitingtoaddanewrootsothatbothBDD'shavearootlabeledy1.2.LetthetworootsbeNandM;lettheirlowchildrenbeN0andM0,andlettheirhighchildrenbeN1andM1.RecursivelyapplythisalgorithmtotheBDD'srootedatN0andM0.Also,recursivelyapplythisalgorithmtotheBDD'srootedatN1andM1.The\frstoftheseBDD'srepresentsthefunctionthatistrueforalltruthassignmentsthathavey1=0andthatmakeoneorbothofthegivenBDD'strue.Thesecondrepresentsthesameforthetruthassignmentswithy1=1.3.Createanewrootnodelabeledy1.Itslowchildistherootofthe\frstrecursivelyconstructedBDD,anditshighchildistherootofthesecondBDD.4.Mergethetwoleaveslabeled0andthetwoleaveslabeled1inthecom-binedBDDjustconstructed.5.Applymergingandshort-circuitingwherepossibletosimplifytheBDD.2Example12.30:InFig.12.33(a)and(b)aretwosimpleBDD's.The\frstrepresentsthefunctionxORy,andthesecondrepresentsthefunctionNOTxANDNOTy12.7.DATALOGIMPLEMENTATIONBYBDD'S957 x y 01 x y 01 x y 01 (a) (b) (c)Figure12.33:ConstructingtheBDDforalogicalORNoticethattheirlogicalORisthefunction1thatisalwaystrue.ToapplyAlgorithm12.29tothesetwoBDD's,weconsiderthelowchildrenofthetworootsandthehighchildrenofthetworoots;letustakeupthelatter\frst.ThehighchildoftherootinFig.12.33(a)is1,andinFig.12.33(b)itis0.Sincethesechildrenarebothattheleaflevel,wedonothavetoinsertnodeslabeledyalongeachedge,althoughtheresultwouldbethesamehadwechosentodoso.Thebasiscasefortheunionof0and1istoproducealeaflabeled1thatwillbecomethehighchildofthenewroot.ThelowchildrenoftherootsinFig.12.33(a)and(b)arebothlabeledy,sowecancomputetheirunionBDDrecursively.Thesetwonodeshavelowchildrenlabeled0and1,sothecombinationoftheirlowchildrenistheleaflabeled1.Likewise,theirhighchildrenare1and0,sothecombinationisagaintheleaf1.Whenweaddanewrootlabeledx,wehavetheBDDseeninFig.12.33(c).Wearenotdone,sinceFig.12.33(c)canbesimpli\fed.Thenodelabeledyhasbothchildrenthenode1,sowecandeletethenodeyandhavetheleaf1bethelowchildoftheroot.Now,bothchildrenoftherootaretheleaf1,sowecaneliminatetheroot.Thatis,thesimplestBDDfortheunionistheleaf1,allbyitself.212.7.5UsingBDD'sforPoints-toAnalysisGettingcontext-insensitivepoints-toanalysistoworkisalreadynontrivial.TheorderingoftheBDDvariablescangreatlychangethesizeoftherepresentation.Manyconsiderations,aswellastrialanderror,areneededtocomeupwithanorderingthatallowstheanalysistocompletequickly.Itisevenhardertogetcontext-sensitivepoints-toanalysistoexecutebe-causeoftheexponentiallymanycontextsintheprogram.Inparticular,ifwe958CHAPTER12.INTERPROCEDURALANALYSISarbitrarilyassignnumberstorepresentcontextsinacallgraph,wecannothan-dleevensmallJavaprograms.Itisimportantthatthecontextsbenumberedsothatthebinaryencodingofthepoints-toanalysiscanbemadeverycom-pact.Twocontextsofthesamemethodwithsimilarcallpathssharealotofcommonalities,soitisdesirabletonumberthencontextsofamethodconsecu-tively.Similarly,becausepairsofcaller-calleesforthesamecallsitesharemanysimilarities,wewishtonumberthecontextssuchthatthenumericdi\u000berencebetweeneachcaller-calleepairofacallsiteisalwaysaconstant.Evenwithaclevernumberingschemeforthecallingcontexts,itisstillhardtoanalyzelargeJavaprogramse\u000eciently.Activemachinelearninghasbeenfoundusefulinderivingavariableorderinge\u000ecientenoughtohandlelargeapplications.12.7.6ExercisesforSection12.7Exercise12.7.1:UsingtheencodingofsymbolsinExample12.28,developaBDDthatrepresentstherelationconsistingofthetuples(b;b),(c;a),and(b;a).YoumayorderthebooleanvariablesinwhateverwaygivesyouthemostsuccinctBDD.!Exercise12.7.2:Asafunctionofn,howmanynodesarethereinthemostsuccinctBDDthatrepresentstheexclusive-orfunctiononnvariables.Thatis,thefunctionistrueifanoddnumberofthenvariablesaretrueandfalseifanevennumberaretrue.Exercise12.7.3:ModifyAlgorithm12.29soitproducestheintersection(log-icalAND)oftwoBDD's.!!Exercise12.7.4:Findalgorithmstoperformthefollowingrelationalopera-tionsontheorderedBDD'sthatrepresentthem:a)Projectoutsomeofthebooleanvariables.Thatis,thefunctionrepre-sentedshouldbetrueforagiventruthassignment\u000biftherewasanytruthassignmentforthemissingvariablesthat,togetherwith\u000bmadetheoriginalfunctiontrue.b)Jointworelationsrands,bycombiningatuplefromrwithonefromswheneverthesetuplesagreeontheattributesthatrandshaveincommon.Itisreallysu\u000ecienttoconsiderthecasewheretherelationshaveonlytwocomponents,andonefromeachrelationmatches;thatis,therelationsarer(A;B)ands(B;C).12.8SummaryofChapter12 ✦InterproceduralAnalysis:Adata-\rowanalysisthattracksinformationacrossprocedureboundariesissaidtobeinterprocedural.Manyanalyses,12.8.SUMMARYOFCHAPTER12959suchaspoints-toanalysis,canonlybedoneinameaningfulwayiftheyareinterprocedural. ✦CallSites:Programscallproceduresatcertainpointsreferredtoascallsites.Theprocedurecalledatasitemaybeobvious,oritmaybeam-biguous,shouldthecallbeindirectthroughapointeroracallofavirtualmethodthathasseveralimplementations. ✦CallGraphs:Acallgraphforaprogramisabipartitegraphwithnodesforcallsitesandnodesforprocedures.Anedgegoesfromacall-sitenodetoaprocedurenodeifthatproceduremaybecalledatthesite. ✦Inlining:Aslongasthereisnorecursioninaprogram,wecaninprinciplereplaceallprocedurecallsbycopiesoftheircode,anduseintraproceduralanalysisontheresultingprogram.Thisanalysisisine\u000bect,interproce-dural. ✦FlowSensitivityandContext-Sensitivity:Adata-\rowanalysisthatpro-ducesfactsthatdependonlocationintheprogramissaidtobe\row-sensitive.Iftheanalysisproducesfactsthatdependonthehistoryofprocedurecallsissaidtobecontext-sensitive.Adata-\rowanalysiscanbeeither\row-orcontext-sensitive,both,orneither. ✦Cloning-BasedContext-SensitiveAnalysis:Inprinciple,onceweestablishthedi\u000berentcontextsinwhichaprocedurecanbecalled,wecanimaginethatthereisacloneofeachprocedureforeachcontext.Inthatway,acontext-insensitiveanalysisservesasacontext-sensitiveanalysis. ✦Summary-BasedContext-SensitiveAnalysis:Anotherapproachtointer-proceduralanalysisextendstheregion-basedanalysistechniquethatwasdescribedforintraproceduralanalysis.Eachprocedurehasatransferfunctionandistreatedasaregionateachplacewherethatprocedureiscalled. ✦ApplicationsofInterproceduralAnalysis:Animportantapplicationre-quiringinterproceduralanalysisisthedetectionofsoftwarevulnerabili-ties.Theseareoftencharacterizedbyhavingdatareadfromanuntrustedinputsourcebyoneprocedureandusedinanexploitablewaybyanotherprocedure. ✦Datalog:ThelanguageDatalogisasimplenotationforif-thenrulesthatcanbeusedtodescribedata-\rowanalysesatahighlevel.CollectionsofDatalogrules,orDatalogprograms,canbeevaluatedusingoneofseveralstandardalgorithms. ✦DatalogRules:ADatalogruleconsistsofabody(antecedent)andhead(consequent).Thebodyisoneormoreatoms,andtheheadisanatom.Atomsarepredicatesappliedtoargumentsthatarevariablesorconstants.960CHAPTER12.INTERPROCEDURALANALYSISTheatomsofthebodyareconnectedbylogicalAND,andanatominthebodymaybenegated. ✦IDBandEDBPredicates:EDBpredicatesinaDatalogprogramhavetheirtruefactsgivena-priori.Inadata-\rowanalysis,thesepredicatescorrespondtothefactsthatcanbeobtainedfromthecodebeinganalyzed.IDBpredicatesarede\fnedbytherulesthemselvesandcorrespondinadata-\rowanalysistotheinformationwearetryingtoextractfromthecodebeinganalyzed. ✦EvaluationofDatalogprograms:Weapplyrulesbysubstitutingconstantsforvariablesthatmakethebodytrue.Wheneverwedoso,weinferthatthehead,withthesamesubstitutionforvariables,isalsotrue.Thisoperationisrepeated,untilnomorefactscanbeinferred. ✦IncrementalEvaluationofDatalogPrograms:Ane\u000eciencyimprovementisobtainedbydoingincrementalevaluation.Weperformaseriesofrounds.Inoneround,weconsideronlysubstitutionsofconstantsforvariablesthatmakeatleastoneatomofthebodybeafactthatwasjustdiscoveredonthepreviousround. ✦JavaPointerAnalysis:WecanmodelpointeranalysisinJavabyaframe-workinwhichtherearereferencevariablesthatpointtoheapobjects,whichmayhave\feldsthatpointtootherheapobjects.AninsensitivepointeranalysiscanbewrittenasaDatalogprogramthatinferstwokindsoffacts:avariablecanpointtoaheapobject,ora\feldofaheapobjectcanpointtoanotherheapobject. ✦TypeInformationtoImprovePointerAnalysis:Wecangetmoreprecisepointeranalysisifwetakeadvantageofthefactthatreferencevariablescanonlypointtoheapobjectsthatareofthesametypeasthevariableorasubtype. ✦InterproceduralPointerAnalysis:Tomaketheanalysisinterprocedural,wemustaddrulesthatre\recthowparametersarepassedandreturnvaluesassignedtovariables.Theserulesareessentiallythesameastherulesforcopyingonereferencevariabletoanother. ✦Call-GraphDiscovery:SinceJavahasvirtualmethods,interproceduralanalysisrequiresthatwe\frstlimitwhatprocedurescanbecalledatagivencallsite.Theprincipalwaytodiscoverlimitsonwhatcanbecalledwhereistoanalyzethetypesofobjectsandtakeadvantageofthefactthattheactualmethodreferredtobyavirtualmethodcallmustbelongtoanappropriateclass. ✦Context-SensitiveAnalysis:Whenproceduresarerecursive,wemustcon-densetheinformationcontainedincallstringsintoa\fnitenumberofcontexts.Ane\u000bectivewaytodosoistodropfromthecallstringany12.9.REFERENCESFORCHAPTER12961callsitewhereaprocedurecallsanotherprocedure(perhapsitself)withwhichitismutuallyrecursive.Usingthisrepresentation,wecanmod-ifytherulesforintraproceduralpointeranalysissothecontextiscarriedalonginpredicates;thisapproachsimulatescloning-basedanalysis. ✦BinaryDecisionDiagrams:BDD'sareasuccinctrepresentationofbool-eanfunctionsbyrootedDAG's.Theinteriornodescorrespondtobooleanvariablesandhavetwochildren,low(representingtruthvalue0)andhigh(representing1).Therearetwoleaveslabeled0and1.Atruthassignmentmakestherepresentedfunctiontrueifandonlyifthepathfromtherootinwhichwegotothelowchildifthevariableatanodeis0andtothehighchildotherwise,leadstothe1leaf. ✦BDD'sandRelations:ABDDcanserveasasuccinctrepresentationofoneofthepredicatesinaDatalogprogram.Constantsareencodedastruthassignmentstoacollectionofbooleanvariables,andthefunctionrepresentedbytheBDDistrueifanonlyifthebooleanvariablesrepresentatruefactforthatpredicate. ✦ImplementingData-FlowAnalysisbyBDD's:Anydata-\rowanalysisthatcanbeexpressedasDatalogrulescanbeimplementedbymanipulationsontheBDD'sthatrepresentthepredicatesinvolvedinthoserules.Often,thisrepresentationleadstoamoree\u000ecientimplementationofthedata-\rowanalysisthananyotherknownapproach.12.9ReferencesforChapter12Someofthebasicconceptsininterproceduralanalysiscanbefoundin[1,6,7,and21].Callahanetal.[11]describeaninterproceduralconstant-propagationalgorithm.Steensgaard[22]publishedthe\frstscalablepointer-aliasanalysis.Itiscontext-insensitive,\row-insensitive,andequivalence-based.Acontext-insens-itiveversionoftheinclusion-basedpoints-toanalysiswasderivedbyAnder-sen[2].Later,HeintzeandTardieu[15]describedane\u000ecientalgorithmforthisanalysis.F\u0000ahndrich,Rehof,andDas[14]presentedacontext-sensitive,\row-insensitive,equivalence-basedanalysisthatscalestolargeprogramslikegcc.Notableamongpreviousattemptstocreateacontext-sensitive,inclusion-basedpoints-toanalysisisEmami,Ghiya,andHendren[13],whichisacloning-basedcontext-sensitive,\row-sensitive,inclusion-based,points-toalgorithm.Binarydecisiondiagrams(BDD's)\frstappearedinBryant[9].Theirusefordata-\rowanalysiswasbyBallandRajamani[4].TheapplicationofBDD'stoinsensitivepointeranalysisisreportedbyZhu[25]andBerndletal.[8].WhaleyandLam[24]describethe\frstcontext-sensitive,\row-insensitive,inclusion-basedalgorithmthathasbeenshowntoapplytoreal-lifeapplications.Thepaperdescribesatoolcalledbddbddbthatautomaticallytranslatesanalysis962CHAPTER12.INTERPROCEDURALANALYSISdescribedinDatalogintoBDDcode.Object-sensitivitywasintroducedbyMilanova,Rountev,andRyder[18].ForadiscussionofDatalog,seeUllmanandWidom[23].AlsoseeLametal.[16]foradiscussionoftheconnectionofdata-\rowanalysistoDatalog.TheMetalcodecheckerisdescribedbyEngleretal.[12]andthePRE\fxcheckerwascreatedbyBush,Pincus,andSiela\u000b[10].BallandRajamani[4]developedaprogramanalysisenginecalledSLAMusingmodelcheckingandsymbolicexecutiontosimulateallpossiblebehaviorsofasystem.Balletal.[5]havecreatedastaticanalysistoolcalledSDVbasedonSLAMto\fndAPIusageerrorsinCdevice-driverprogramsbyapplyingBDD'stomodelchecking.LivshitsandLam[17]describehowcontext-sensitivepoints-toanalysiscanbeusedto\fndSQLvulnerabilitiesinJavawebapplications.RuwaseandLam[20]describehowtokeeptrackofarrayextentsandinsertdynamicboundschecksautomatically.Rinardetal.[19]describehowtoextendarraysdynam-icallytoaccommodatefortheover\rowedcontents.Avotsetal.[3]extendthecontext-sensitiveJavapoints-toanalysistoCandshowhowitcanbeusedtoreducethecostofdynamicdetectionofbu\u000berover\rows.1.Allen,F.E.,\\Interproceduraldata\rowanalysis,\"Proc.IFIPCongress1974,pp.398{402,NorthHolland,Amsterdam,1974.2.Andersen,L.,ProgramAnalysisandSpecializationfortheCProgrammingLanguage,Ph.D.thesis,DIKU,Univ.ofCopenhagen,Denmark,1994.3.Avots,D.,M.Dalton,V.B.Livshits,andM.S.Lam,\\ImprovingsoftwaresecuritywithaCpointeranalysis,\"ICSE2005:Proc.27thInternationalConferenceonSoftwareEngineering,pp.332{341.4.Ball,T.andS.K.Rajamani,\\Asymbolicmodelcheckerforbooleanprograms,\"Proc.SPIN2000WorkshoponModelCheckingofSoftware,pp.113{130.5.Ball,T.,E.Bounimova,B.Cook,V.Levin,J.Lichtenberg,C.McGarvey,B.Ondrusek,S.Rajamani,andA.Ustuner,\\Thoroughstaticanalysisofdevicedrivers,\"EuroSys(2006),pp.73{85.6.Banning,J.P.,\\Ane\u000ecientwayto\fndthesidee\u000bectsofproceduralcallsandthealiasesofvariables,\"Proc.SixthAnnualSymposiumonPrinciplesofProgrammingLanguages(1979),pp.29{41.7.Barth,J.M.,\\Apracticalinterproceduraldata\rowanalysisalgorithm,\"Comm.ACM21:9(1978),pp.724{736.8.Berndl,M.,O.Lohtak,F.Qian,L.Hendren,andN.Umanee,\\Points-toanalysisusingBDD's,\"Proc.ACMSIGPLAN2003ConferenceonProgrammingLanguageDesignandImplementation,pp.103{114.9.Bryant,R.E.,\\Graph-basedalgorithmsforBooleanfunctionmanipula-tion,\"IEEETrans.onComputersC-35:8(1986),pp.677{691.12.9.REFERENCESFORCHAPTER1296310.Bush,W.R.,J.D.Pincus,andD.J.Siela\u000b,\\Astaticanalyzerfor\fndingdynamicprogrammingerrors,\"Software{PracticeandExperience,30:7(2000),pp.775{802.11.Callahan,D.,K.D.Cooper,K.Kennedy,andL.Torczon,\\Interprocedu-ralconstantpropagation,\"Proc.SIGPLAN1986SymposiumonCompilerConstruction,SIGPLANNotices,21:7(1986),pp.152{161.12.Engler,D.,B.Chelf,A.Chou,andS.Hallem,\\Checkingsystemrulesus-ingsystem-speci\fc,programmer-writtencompilerextensions,\"Proc.SixthUSENIXConferenceonOperatingSystemsDesignandImplementation(2000).pp.1{16.13.Emami,M.,R.Ghiya,andL.J.Hendren,\\Context-sensitiveinterproce-duralpoints-toanalysisinthepresenceoffunctionpointers,\"Proc.SIG-PLANConferenceonProgrammingLanguageDesignandImplementation(1994),pp.224{256.14.F\u0000ahndrich,M.,J.Rehof,andM.Das,\\Scalablecontext-sensitive\rowanalysisusinginstantiationconstraints,\"Proc.SIGPLANConferenceonProgrammingLanguageDesignandImplementation(2000),pp.253{263.15.Heintze,N.andO.Tardieu,\\\"Ultra-fastaliasinganalysisusingCLA:amillionlinesofCcodeinasecond,\"Proc.oftheSIGPLANConferenceonProgrammingLanguageDesignandImplementation(2001),pp.254{263.16.Lam,M.S.,J.Whaley,V.B.Livshits,M.C.Martin,D.Avots,M.Carbin,andC.Unkel,\\Context-sensitiveprogramanalysisasdatabasequeries,\"Proc.2005ACMSymposiumonPrinciplesofDatabaseSystems,pp.1{12.17.Livshits,V.B.andM.S.Lam,\\FindingsecurityvulnerabilitiesinJavaapplicationsusingstaticanalysis,\"Proc.14thUSENIXSecuritySympo-sium(2005),pp.271{286.18.Milanova,A.,A.Rountev,andB.G.Ryder,\\Parameterizedobjectsen-sitivityforpoints-toandside-e\u000bectanalysesforJava,\"Proc.2002ACMSIGSOFTInternationalSymposiumonSoftwareTestingandAnalysis,pp.1{11.19.Rinard,M.,C.Cadar,D.Dumitran,D.Roy,andT.Leu,\\Adynamictechniqueforeliminatingbu\u000berover\rowvulnerabilities(andothermem-oryerrors),\"Proc.2004AnnualComputerSecurityApplicationsConfer-ence,pp.82{90.20.Ruwase,O.andM.S.Lam,\\Apracticaldynamicbu\u000berover\rowdetec-tor,\"Proc.11thAnnualNetworkandDistributedSystemSecuritySym-posium(2004),pp.159{169.964CHAPTER12.INTERPROCEDURALANALYSIS21.Sharir,M.andA.Pnueli,\\Twoapproachestointerproceduraldata\rowanalysis,\"inS.MuchnickandN.Jones(eds.)ProgramFlowAnalysis:TheoryandApplications,Chapter7,pp.189{234.Prentice-Hall,UpperSaddleRiverNJ,1981.22.Steensgaard,B.,\\Points-toanalysisinlineartime,\"Twenty-ThirdACMSymposiumonPrinciplesofProgrammingLanguages(1996).23.Ullman,J.D.andJ.Widom,AFirstCourseinDatabaseSystems,Pren-tice-Hall,UpperSaddleRiverNJ,2002.24.Whaley,J.andM.S.Lam,\\Cloning-basedcontext-sensitivepointeraliasanalysisusingbinarydecisiondiagrams,\"Proc.ACMSIGPLAN2004ConferenceonProgrammingLanguageDesignandImplementation,pp.131{144.25.Zhu,J.,\\SymbolicPointerAnalysis,\"Proc.InternationalConferenceinComputer-AidedDesign(2002),pp.150{157.AppendixAACompleteFrontEndThecompletecompilerfrontendinthisappendixisbasedontheinformallydescribedsimplecompilerofSections2.5-2.8.Themaindi\u000berencefromChap-ter2isthatthefrontendgeneratesjumpingcodeforbooleanexpressions,asinSection6.6.Webeginwiththesyntaxofthesourcelanguage,describedbyagrammarthatneedstobeadaptedfortop-downparsing.TheJavacodeforthetranslatorconsistsof\fvepackages:main,lexer,symbols,parser,andinter.Packageintercontainsclassesforthelanguageconstructsintheabstractsyntax.Sincethecodefortheparserinteractswiththerestofthepackages,itwillbediscussedlast.Eachpackageisstoredasaseparatedirectorywitha\fleperclass.Goingintotheparser,thesourceprogramconsistsofastreamoftokens,soobject-orientationhaslittletodowiththecodefortheparser.Comingoutoftheparser,thesourceprogramconsistsofasyntaxtree,withconstructsornodesimplementedasobjects.Theseobjectsdealwithallofthefollowing:constructasyntax-treenode,checktypes,andgeneratethree-addressintermediatecode(seepackageinter).A.1TheSourceLanguageAprograminthelanguageconsistsofablockwithoptionaldeclarationsandstatements.Tokenbasicrepresentsbasictypes.program!blockblock!{declsstmts}decls!declsdeclj\u000fdecl!typeid;type!type[num]jbasicstmts!stmtsstmtj\u000fTreatingassignmentsasstatements,ratherthanasoperatorswithinexpres-sions,simpli\festranslation.965966APPENDIXA.ACOMPLETEFRONTENDA.3.LEXICALANALYZER9673)publicclassMain{4)publicstaticvoidmain(String[]args)throwsIOException{5)Lexerlex=newLexer();6)Parserparse=newParser(lex);7)parse.program();8)System.out.write('\\n');9)}10)}A.3LexicalAnalyzerPackagelexerisanextensionofthecodeforthelexicalanalyzerinSec-tion2.6.5.ClassTagde\fnesconstantsfortokens:1)packagelexer;//FileTag.java2)publicclassTag{3)publicfinalstaticint4)AND=256,BASIC=257,BREAK=258,DO=259,ELSE=260,5)EQ=261,FALSE=262,GE=263,ID=264,IF=265,6)INDEX=266,LE=267,MINUS=268,NE=269,NUM=270,7)OR=271,REAL=272,TEMP=273,TRUE=274,WHILE=275;8)}Threeoftheconstants,INDEX,MINUS,andTEMP,arenotlexicaltokens;theywillbeusedinsyntaxtrees.ClassesTokenandNumareasinSection2.6.5,withmethodtoStringadded:1)packagelexer;//FileToken.java2)publicclassToken{3)publicfinalinttag;4)publicToken(intt){tag=t;}5)publicStringtoString(){return\"\"+(char)tag;}6)}1)packagelexer;//FileNum.java2)publicclassNumextendsToken{3)publicfinalintvalue;4)publicNum(intv){super(Tag.NUM);value=v;}5)publicStringtoString(){return\"\"+value;}6)}ClassWordmanageslexemesforreservedwords,identi\fers,andcompositetokenslike&&.Itisalsousefulformanagingthewrittenformofoperatorsintheintermediatecodelikeunaryminus;forexample,thesourcetext-2hastheintermediateformminus2.1)packagelexer;//FileWord.java2)publicclassWordextendsToken{3)publicStringlexeme=\"\";4)publicWord(Strings,inttag){super(tag);lexeme=s;}5)publicStringtoString(){returnlexeme;}6)publicstaticfinalWord7)and=newWord(\"&&\",Tag.AND),or=newWord(\"||\",Tag.OR),968APPENDIXA.ACOMPLETEFRONTEND8)eq=newWord(\"==\",Tag.EQ),ne=newWord(\"!=\",Tag.NE),9)le=newWord(\"<=\",Tag.LE),ge=newWord(\">=\",Tag.GE),10)minus=newWord(\"minus\",Tag.MINUS),11)True=newWord(\"true\",Tag.TRUE),12)False=newWord(\"false\",Tag.FALSE),13)temp=newWord(\"t\",Tag.TEMP);14)}ClassRealisfor\roatingpointnumbers:1)packagelexer;//FileReal.java2)publicclassRealextendsToken{3)publicfinalfloatvalue;4)publicReal(floatv){super(Tag.REAL);value=v;}5)publicStringtoString(){return\"\"+value;}6)}ThemainmethodinclassLexer,functionscan,recognizesnumbers,iden-ti\fers,andreservedwords,asdiscussedinSection2.6.5.Lines9-13inclassLexerreserveselectedkeywords.Lines14-16reservelexemesforobjectsde\fnedelsewhere.ObjectsWord.TrueandWord.Falsearede\fnedinclassWord.Objectsforthebasictypesint,char,bool,andfloatarede\fnedinclassType,asubclassofWord.ClassTypeisfrompackagesymbols.1)packagelexer;//FileLexer.java2)importjava.io.*;importjava.util.*;importsymbols.*;3)publicclassLexer{4)publicstaticintline=1;5)charpeek='';6)Hashtablewords=newHashtable();7)voidreserve(Wordw){words.put(w.lexeme,w);}8)publicLexer(){9)reserve(newWord(\"if\",Tag.IF));10)reserve(newWord(\"else\",Tag.ELSE));11)reserve(newWord(\"while\",Tag.WHILE));12)reserve(newWord(\"do\",Tag.DO));13)reserve(newWord(\"break\",Tag.BREAK));14)reserve(Word.True);reserve(Word.False);15)reserve(Type.Int);reserve(Type.Char);16)reserve(Type.Bool);reserve(Type.Float);17)}Functionreadch()(line18)isusedtoreadthenextinputcharacterintovariablepeek.Thenamereadchisreusedoroverloaded(lines19-24)tohelprecognizecompositetokens.Forexample,onceinput<isseen,thecallreadch('=')readsthenextcharacterintopeekandcheckswhetheritis=.18)voidreadch()throwsIOException{peek=(char)System.in.read();}19)booleanreadch(charc)throwsIOException{20)readch();21)if(peek!=c)returnfalse;22)peek='';23)returntrue;24)}A.3.LEXICALANALYZER969Functionscanbeginsbyskippingwhitespace(lines26-30).Itrecognizescompositetokenslike<=(lines31-44)andnumberslike365and3.14(lines45-58),beforecollectingwords(lines59-70).25)publicTokenscan()throwsIOException{26)for(;;readch()){27)if(peek==''||peek=='\\t')continue;28)elseif(peek=='\\n')line=line+1;29)elsebreak;30)}31)switch(peek){32)case'&':33)if(readch('&'))returnWord.and;elsereturnnewToken('&');34)case'|':35)if(readch('|'))returnWord.or;elsereturnnewToken('|');36)case'=':37)if(readch('='))returnWord.eq;elsereturnnewToken('=');38)case'!':39)if(readch('='))returnWord.ne;elsereturnnewToken('!');40)case'<':41)if(readch('='))returnWord.le;elsereturnnewToken('<');42)case'>':43)if(readch('='))returnWord.ge;elsereturnnewToken('>');44)}45)if(Character.isDigit(peek)){46)intv=0;47)do{48)v=10*v+Character.digit(peek,10);readch();49)}while(Character.isDigit(peek));50)if(peek!='.')returnnewNum(v);51)floatx=v;floatd=10;52)for(;;){53)readch();54)if(!Character.isDigit(peek))break;55)x=x+Character.digit(peek,10)/d;d=d*10;56)}57)returnnewReal(x);58)}59)if(Character.isLetter(peek)){60)StringBufferb=newStringBuffer();61)do{62)b.append(peek);readch();63)}while(Character.isLetterOrDigit(peek));64)Strings=b.toString();65)Wordw=(Word)words.get(s);66)if(w!=null)returnw;67)w=newWord(s,Tag.ID);68)words.put(s,w);69)returnw;70)}Finally,anyremainingcharactersarereturnedastokens(lines71-72).71)Tokentok=newToken(peek);peek='';72)returntok;73)}74)}970APPENDIXA.ACOMPLETEFRONTENDA.4SymbolTablesandTypesPackagesymbolsimplementssymboltablesandtypes.ClassEnvisessentiallyunchangedfromFig.2.37.WhereasclassLexermapsstringstowords,classEnvmapswordtokenstoobjectsofclassId,whichisde\fnedinpackageinteralongwiththeclassesforexpressionsandstatements.1)packagesymbols;//FileEnv.java2)importjava.util.*;importlexer.*;importinter.*;3)publicclassEnv{4)privateHashtabletable;5)protectedEnvprev;6)publicEnv(Envn){table=newHashtable();prev=n;}7)publicvoidput(Tokenw,Idi){table.put(w,i);}8)publicIdget(Tokenw){9)for(Enve=this;e!=null;e=e.prev){10)Idfound=(Id)(e.table.get(w));11)if(found!=null)returnfound;12)}13)returnnull;14)}15)}Wede\fneclassTypetobeasubclassofWordsincebasictypenameslikeintaresimplyreservedwords,tobemappedfromlexemestoappropriateobjectsbythelexicalanalyzer.TheobjectsforthebasictypesareType.Int,Type.Float,Type.Char,andType.Bool(lines7-10).Allofthemhaveinherited\feldtagsettoTag.BASIC,sotheparsertreatsthemallalike.1)packagesymbols;//FileType.java2)importlexer.*;3)publicclassTypeextendsWord{4)publicintwidth=0;//widthisusedforstorageallocation5)publicType(Strings,inttag,intw){super(s,tag);width=w;}6)publicstaticfinalType7)Int=newType(\"int\",Tag.BASIC,4),8)Float=newType(\"float\",Tag.BASIC,8),9)Char=newType(\"char\",Tag.BASIC,1),10)Bool=newType(\"bool\",Tag.BASIC,1);Functionsnumeric(lines11-14)andmax(lines15-20)areusefulfortypeconversions.11)publicstaticbooleannumeric(Typep){12)if(p==Type.Char||p==Type.Int||p==Type.Float)returntrue;13)elsereturnfalse;14)}15)publicstaticTypemax(Typep1,Typep2){16)if(!numeric(p1)||!numeric(p2))returnnull;17)elseif(p1==Type.Float||p2==Type.Float)returnType.Float;18)elseif(p1==Type.Int||p2==Type.Int)returnType.Int;19)elsereturnType.Char;20)}21)}A.5.INTERMEDIATECODEFOREXPRESSIONS971Conversionsareallowedbetweenthe\\numeric\"typesType.Char,Type.Int,andType.Float.Whenanarithmeticoperatorisappliedtotwonumerictypes,theresulthasthe\\max\"ofthetwotypes.Arraysaretheonlyconstructedtypeinthesourcelanguage.Thecalltosuperonline7sets\feldwidth,whichisessentialforaddresscalculations.Italsosetslexemeandtoktodefaultvaluesthatarenotused.1)packagesymbols;//FileArray.java2)importlexer.*;3)publicclassArrayextendsType{4)publicTypeof;//array*of*type5)publicintsize=1;//numberofelements6)publicArray(intsz,Typep){7)super(\"[]\",Tag.INDEX,sz*p.width);size=sz;of=p;8)}9)publicStringtoString(){return\"[\"+size+\"]\"+of.toString();}10)}A.5IntermediateCodeforExpressionsPackageintercontainstheNodeclasshierarchy.Nodehastwosubclasses:ExprforexpressionnodesandStmtforstatementnodes.ThissectionintroducesExpranditssubclasses.SomeofthemethodsinExprdealwithbooleansandjumpingcode;theywillbediscussedinSectionA.6,alongwiththeremainingsubclassesofExpr.NodesinthesyntaxtreeareimplementedasobjectsofclassNode.Forerrorreporting,\feldlexline(line4,\fleNode.java)savesthesource-linenumberoftheconstructatthisnode.Lines7-10areusedtoemitthree-addresscode.1)packageinter;//FileNode.java2)importlexer.*;3)publicclassNode{4)intlexline=0;5)Node(){lexline=Lexer.line;}6)voiderror(Strings){thrownewError(\"nearline\"+lexline+\":\"+s);}7)staticintlabels=0;8)publicintnewlabel(){return++labels;}9)publicvoidemitlabel(inti){System.out.print(\"L\"+i+\":\");}10)publicvoidemit(Strings){System.out.println(\"\\t\"+s);}11)}ExpressionconstructsareimplementedbysubclassesofExpr.ClassExprhas\feldsopandtype(lines4-5,\fleExpr.java),representingtheoperatorandtype,respectively,atanode.1)packageinter;//FileExpr.java2)importlexer.*;importsymbols.*;3)publicclassExprextendsNode{4)publicTokenop;5)publicTypetype;6)Expr(Tokentok,Typep){op=tok;type=p;}972APPENDIXA.ACOMPLETEFRONTENDMethodgen(line7)returnsa\\term\"thatcan\fttherightsideofathree-addressinstruction.GivenexpressionE=E1+E2,methodgenreturnsatermx1+x2,wherex1andx2areaddressesforthevaluesofE1andE2,respectively.Thereturnvaluethisisappropriateifthisobjectisanaddress;subclassesofExprtypicallyreimplementgen.Methodreduce(line8)computesor\\reduces\"anexpressiondowntoasingleaddress;thatis,itreturnsaconstant,anidenti\fer,oratemporaryname.GivenexpressionE,methodreducereturnsatemporarytholdingthevalueofE.Again,thisisanappropriatereturnvalueifthisobjectisanaddress.Wedeferdiscussionofmethodsjumpingandemitjumps(lines9-18)untilSectionA.6;theygeneratejumpingcodeforbooleanexpressions.7)publicExprgen(){returnthis;}8)publicExprreduce(){returnthis;}9)publicvoidjumping(intt,intf){emitjumps(toString(),t,f);}10)publicvoidemitjumps(Stringtest,intt,intf){11)if(t!=0&&f!=0){12)emit(\"if\"+test+\"gotoL\"+t);13)emit(\"gotoL\"+f);14)}15)elseif(t!=0)emit(\"if\"+test+\"gotoL\"+t);16)elseif(f!=0)emit(\"iffalse\"+test+\"gotoL\"+f);17)else;//nothingsincebothtandffallthrough18)}19)publicStringtoString(){returnop.toString();}20)}ClassIdinheritsthedefaultimplementationsofgenandreduceinclassExpr,sinceanidenti\ferisanaddress.1)packageinter;//FileId.java2)importlexer.*;importsymbols.*;3)publicclassIdextendsExpr{4)publicintoffset;//relativeaddress5)publicId(Wordid,Typep,intb){super(id,p);offset=b;}6)}Thenodeforanidenti\ferofclassIdisaleaf.Thecallsuper(id,p)(line5,\fleId.java)savesidandpininherited\feldsopandtype,respectively.Fieldoffset(line4)holdstherelativeaddressofthisidenti\fer.ClassOpprovidesanimplementationofreduce(lines5-10,\fleOp.java)thatisinheritedbysubclassesArithforarithmeticoperators,Unaryforunaryoperators,andAccessforarrayaccesses.Ineachcase,reducecallsgentogenerateaterm,emitsaninstructiontoassignthetermtoanewtemporaryname,andreturnsthetemporary.1)packageinter;//FileOp.java2)importlexer.*;importsymbols.*;3)publicclassOpextendsExpr{4)publicOp(Tokentok,Typep){super(tok,p);}5)publicExprreduce(){6)Exprx=gen();A.5.INTERMEDIATECODEFOREXPRESSIONS9737)Tempt=newTemp(type);8)emit(t.toString()+\"=\"+x.toString());9)returnt;10)}11)}ClassArithimplementsbinaryoperatorslike+and*.ConstructorArithbeginsbycallingsuper(tok,null)(line6),wheretokisatokenrepresentingtheoperatorandnullisaplaceholderforthetype.Thetypeisdeterminedonline7byusingType.max,whichcheckswhetherthetwooperandscanbecoercedtoacommonnumerictype;thecodeforType.maxisinSectionA.4.Iftheycanbecoerced,typeissettotheresulttype;otherwise,atypeerrorisreported(line8).Thissimplecompilercheckstypes,butitdoesnotinserttypeconversions.1)packageinter;//FileArith.java2)importlexer.*;importsymbols.*;3)publicclassArithextendsOp{4)publicExprexpr1,expr2;5)publicArith(Tokentok,Exprx1,Exprx2){6)super(tok,null);expr1=x1;expr2=x2;7)type=Type.max(expr1.type,expr2.type);8)if(type==null)error(\"typeerror\");9)}10)publicExprgen(){11)returnnewArith(op,expr1.reduce(),expr2.reduce());12)}13)publicStringtoString(){14)returnexpr1.toString()+\"\"+op.toString()+\"\"+expr2.toString();15)}16)}Methodgenconstructstherightsideofathree-addressinstructionbyreduc-ingthesubexpressionstoaddressesandapplyingtheoperatortotheaddresses(line11,\fleArith.java).Forexample,supposegeniscalledattherootfora+b*c.Thecallstoreducereturnaastheaddressforsubexpressionaandatemporarytastheaddressforb*c.Meanwhile,reduceemitstheinstructiont=b*c.MethodgenreturnsanewArithnode,withoperator*andaddressesaandtasoperands.1Itisworthnotingthattemporarynamesaretyped,alongwithallotherexpressions.TheconstructorTempisthereforecalledwithatypeasaparameter(line6,\fleTemp.java).21)packageinter;//FileTemp.java2)importlexer.*;importsymbols.*;3)publicclassTempextendsExpr{974APPENDIXA.ACOMPLETEFRONTEND4)staticintcount=0;5)intnumber=0;6)publicTemp(Typep){super(Word.temp,p);number=++count;}7)publicStringtoString(){return\"t\"+number;}8)}ClassUnaryistheone-operandcounterpartofclassArith:1)packageinter;//FileUnary.java2)importlexer.*;importsymbols.*;3)publicclassUnaryextendsOp{4)publicExprexpr;5)publicUnary(Tokentok,Exprx){//handlesminus,for!seeNot6)super(tok,null);expr=x;7)type=Type.max(Type.Int,expr.type);8)if(type==null)error(\"typeerror\");9)}10)publicExprgen(){returnnewUnary(op,expr.reduce());}11)publicStringtoString(){returnop.toString()+\"\"+expr.toString();}12)}A.6JumpingCodeforBooleanExpressionsJumpingcodeforabooleanexpressionBisgeneratedbymethodjumping,whichtakestwolabelstandfasparameters,calledthetrueandfalseexitsofB,respectively.ThecodecontainsajumptotifBevaluatestotrue,andajumptofifBevaluatestofalse.Byconvention,thespeciallabel0meansthatcontrolfallsthroughBtothenextinstructionafterthecodeforB.WebeginwithclassConstant.TheconstructorConstantonline4takesatokentokandatypepasparameters.Itconstructsaleafinthesyntaxtreewithlabeltokandtypep.Forconvenience,theconstructorConstantisoverloaded(line5)tocreateaconstantobjectfromaninteger.1)packageinter;//FileConstant.java2)importlexer.*;importsymbols.*;3)publicclassConstantextendsExpr{4)publicConstant(Tokentok,Typep){super(tok,p);}5)publicConstant(inti){super(newNum(i),Type.Int);}6)publicstaticfinalConstant7)True=newConstant(Word.True,Type.Bool),8)False=newConstant(Word.False,Type.Bool);9)publicvoidjumping(intt,intf){10)if(this==True&&t!=0)emit(\"gotoL\"+t);11)elseif(this==False&&f!=0)emit(\"gotoL\"+f);12)}13)}Methodjumping(lines9-12,\fleConstant.java)takestwoparameters,labelstandf.IfthisconstantisthestaticobjectTrue(de\fnedonline7)andtisnotthespeciallabel0,thenajumptotisgenerated.Otherwise,ifthisistheobjectFalse(de\fnedonline8)andfisnonzero,thenajumptofisgenerated.A.6.JUMPINGCODEFORBOOLEANEXPRESSIONS975ClassLogicalprovidessomecommonfunctionalityforclassesOr,And,andNot.expr1andexpr2(line4)correspondtotheoperandsofalogicalopera-tor.(AlthoughclassNotimplementsaunaryoperator,forconvenience,itisasubclassofLogical.)TheconstructorLogical(tok,a,b)(lines5-10)buildsasyntaxnodewithoperatortokandoperandsaandb.Indoingsoitusesfunctionchecktoensurethatbothaandbarebooleans.Methodgenwillbediscussedattheendofthissection.1)packageinter;//FileLogical.java2)importlexer.*;importsymbols.*;3)publicclassLogicalextendsExpr{4)publicExprexpr1,expr2;5)Logical(Tokentok,Exprx1,Exprx2){6)super(tok,null);//nulltypetostart7)expr1=x1;expr2=x2;8)type=check(expr1.type,expr2.type);9)if(type==null)error(\"typeerror\");10)}11)publicTypecheck(Typep1,Typep2){12)if(p1==Type.Bool&&p2==Type.Bool)returnType.Bool;13)elsereturnnull;14)}15)publicExprgen(){16)intf=newlabel();inta=newlabel();17)Temptemp=newTemp(type);18)this.jumping(0,f);19)emit(temp.toString()+\"=true\");20)emit(\"gotoL\"+a);21)emitlabel(f);emit(temp.toString()+\"=false\");22)emitlabel(a);23)returntemp;24)}25)publicStringtoString(){26)returnexpr1.toString()+\"\"+op.toString()+\"\"+expr2.toString();27)}28)}InclassOr,methodjumping(lines5-10)generatesjumpingcodeforabooleanexpressionB=B1||B2.Forthemoment,supposethatneitherthetrueexittnorthefalseexitfofBisthespeciallabel0.SinceBistrueifB1istrue,thetrueexitofB1mustbetandthefalseexitcorrespondstothe\frstinstructionofB2.ThetrueandfalseexitsofB2arethesameasthoseofB.1)packageinter;//FileOr.java2)importlexer.*;importsymbols.*;3)publicclassOrextendsLogical{4)publicOr(Tokentok,Exprx1,Exprx2){super(tok,x1,x2);}5)publicvoidjumping(intt,intf){6)intlabel=t!=0?t:newlabel();7)expr1.jumping(label,0);8)expr2.jumping(t,f);9)if(t==0)emitlabel(label);10)}11)}976APPENDIXA.ACOMPLETEFRONTENDInthegeneralcase,t,thetrueexitofB,canbethespeciallabel0.Variablelabel(line6,\fleOr.java)ensuresthatthetrueexitofB1issetproperlytotheendofthecodeforB.Iftis0,thenlabelissettoanewlabelthatisemittedaftercodegenerationforbothB1andB2.ThecodeforclassAndissimilartothecodeforOr.1)packageinter;//FileAnd.java2)importlexer.*;importsymbols.*;3)publicclassAndextendsLogical{4)publicAnd(Tokentok,Exprx1,Exprx2){super(tok,x1,x2);}5)publicvoidjumping(intt,intf){6)intlabel=f!=0?f:newlabel();7)expr1.jumping(0,label);8)expr2.jumping(t,f);9)if(f==0)emitlabel(label);10)}11)}ClassNothasenoughincommonwiththeotherbooleanoperatorsthatwemakeitasubclassofLogical,eventhoughNotimplementsaunaryoperator.Thesuperclassexpectstwooperands,sox2appearstwiceinthecalltosuperonline4.Onlyexpr2(declaredonline4,\fleLogical.java)isusedinthemethodsonlines5-6.Online5,methodjumpingsimplycallsexpr2.jumpingwiththetrueandfalseexitsreversed.1)packageinter;//FileNot.java2)importlexer.*;importsymbols.*;3)publicclassNotextendsLogical{4)publicNot(Tokentok,Exprx2){super(tok,x2,x2);}5)publicvoidjumping(intt,intf){expr2.jumping(f,t);}6)publicStringtoString(){returnop.toString()+\"\"+expr2.toString();}7)}ClassRelimplementstheoperators<,<=,==,!=,>=,and>.Functioncheck(lines5-9)checksthatthetwooperandshavethesametypeandthattheyarenotarrays.Forsimplicity,coercionsarenotpermitted.1)packageinter;//FileRel.java2)importlexer.*;importsymbols.*;3)publicclassRelextendsLogical{4)publicRel(Tokentok,Exprx1,Exprx2){super(tok,x1,x2);}5)publicTypecheck(Typep1,Typep2){6)if(p1instanceofArray||p2instanceofArray)returnnull;7)elseif(p1==p2)returnType.Bool;8)elsereturnnull;9)}10)publicvoidjumping(intt,intf){11)Expra=expr1.reduce();12)Exprb=expr2.reduce();13)Stringtest=a.toString()+\"\"+op.toString()+\"\"+b.toString();14)emitjumps(test,t,f);15)}16)}A.6.JUMPINGCODEFORBOOLEANEXPRESSIONS977Methodjumping(lines10-15,\fleRel.java)beginsbygeneratingcodeforthesubexpressionsexpr1andexpr2(lines11-12).Itthencallsmethodemitjumpsde\fnedonlines10-18,\fleExpr.java,inSectionA.5.Ifneithertnorfisthespeciallabel0,thenemitjumpsexecutesthefollowing12)emit(\"if\"+test+\"gotoL\"+t);//FileExpr.java13)emit(\"gotoL\"+f);Atmostoneinstructionisgeneratedifeithertorfisthespeciallabel0(again,from\fleExpr.java):15)elseif(t!=0)emit(\"if\"+test+\"gotoL\"+t);16)elseif(f!=0)emit(\"iffalse\"+test+\"gotoL\"+f);17)else;//nothingsincebothtandffallthroughForanotheruseofemitjumps,considerthecodeforclassAccess.Thesourcelanguageallowsbooleanvaluestobeassignedtoidenti\fersandarrayelements,soabooleanexpressioncanbeanarrayaccess.ClassAccesshasmethodgenforgenerating\\normal\"codeandmethodjumpingforjumpingcode.Methodjumping(line11)callsemitjumpsafterreducingthisarrayaccesstoatemporary.Theconstructor(lines6-9)iscalledwitha\rattenedarraya,anindexi,andthetypepofanelementinthe\rattenedarray.Typecheckingisdoneduringarrayaddresscalculation.1)packageinter;//FileAccess.java2)importlexer.*;importsymbols.*;3)publicclassAccessextendsOp{4)publicIdarray;5)publicExprindex;6)publicAccess(Ida,Expri,Typep){//piselementtypeafter7)super(newWord(\"[]\",Tag.INDEX),p);//flatteningthearray8)array=a;index=i;9)}10)publicExprgen(){returnnewAccess(array,index.reduce(),type);}11)publicvoidjumping(intt,intf){emitjumps(reduce().toString(),t,f);}12)publicStringtoString(){13)returnarray.toString()+\"[\"+index.toString()+\"]\";14)}15)}Jumpingcodecanalsobeusedtoreturnabooleanvalue.ClassLogical,earlierinthissection,hasamethodgen(lines15-24)thatreturnsatemporarytemp,whosevalueisdeterminedbythe\rowofcontrolthroughthejumpingcodeforthisexpression.Atthetrueexitofthisbooleanexpression,tempisassignedtrue;atthefalseexit,tempisassignedfalse.Thetemporaryisdeclaredonline17.Jumpingcodeforthisexpressionisgeneratedonline18withthetrueexitbeingthenextinstructionandthefalseexitbeinganewlabelf.Thenextinstructionassignstruetotemp(line19),followedbyajumptoanewlabela(line20).Thecodeonline21emitslabelfandaninstructionthatassignsfalsetotemp.Thecodefragmentendswithlabela,generatedonline22.Finally,genreturnstemp(line23).978APPENDIXA.ACOMPLETEFRONTENDA.7IntermediateCodeforStatementsEachstatementconstructisimplementedbyasubclassofStmt.The\feldsforthecomponentsofaconstructareintherelevantsubclass;forexample,classWhilehas\feldsforatestexpressionandasubstatement,asweshallsee.Lines3-4inthefollowingcodeforclassStmtdealwithsyntax-treecon-struction.TheconstructorStmt()doesnothing,sincetheworkisdoneinthesubclasses.ThestaticobjectStmt.Null(line4)representsanemptysequenceofstatements.1)packageinter;//FileStmt.java2)publicclassStmtextendsNode{3)publicStmt(){}4)publicstaticStmtNull=newStmt();5)publicvoidgen(intb,inta){}//calledwithlabelsbeginandafter6)intafter=0;//saveslabelafter7)publicstaticStmtEnclosing=Stmt.Null;//usedforbreakstmts8)}Lines5-7dealwiththegenerationofthree-addresscode.Themethodgeniscalledwithtwolabelsbanda,wherebmarksthebeginningofthecodeforthisstatementandamarksthe\frstinstructionafterthecodeforthisstatement.Methodgen(line5)isaplaceholderforthegenmethodsinthesubclasses.ThesubclassesWhileandDosavetheirlabelainthe\feldafter(line6)soitcanbeusedbyanyenclosedbreakstatementtojumpoutofitsenclosingconstruct.TheobjectStmt.Enclosingisusedduringparsingtokeeptrackoftheenclosingconstruct.(Forasourcelanguagewithcontinuestatements,wecanusethesameapproachtokeeptrackoftheenclosingconstructforacontinuestatement.)TheconstructorforclassIfbuildsanodeforastatementif(E)S.FieldsexprandstmtholdthenodesforEandS,respectively.Notethatexprinlower-caselettersnamesa\feldofclassExpr;similarly,stmtnamesa\feldofclassStmt.1)packageinter;//FileIf.java2)importsymbols.*;3)publicclassIfextendsStmt{4)Exprexpr;Stmtstmt;5)publicIf(Exprx,Stmts){6)expr=x;stmt=s;7)if(expr.type!=Type.Bool)expr.error(\"booleanrequiredinif\");8)}9)publicvoidgen(intb,inta){10)intlabel=newlabel();//labelforthecodeforstmt11)expr.jumping(0,a);//fallthroughontrue,gotoaonfalse12)emitlabel(label);stmt.gen(label,a);13)}14)}ThecodeforanIfobjectconsistsofjumpingcodeforexprfollowedbythecodeforstmt.AsdiscussedinSectionA.6,thecallexpr.jumping(0,a)onlineA.7.INTERMEDIATECODEFORSTATEMENTS97911speci\festhatcontrolmustfallthroughthecodeforexprifexprevaluatestotrue,andmust\rowtolabelaotherwise.TheimplementationofclassElse,whichhandlesconditionalswithelseparts,isanalogoustothatofclassIf:1)packageinter;//FileElse.java2)importsymbols.*;3)publicclassElseextendsStmt{4)Exprexpr;Stmtstmt1,stmt2;5)publicElse(Exprx,Stmts1,Stmts2){6)expr=x;stmt1=s1;stmt2=s2;7)if(expr.type!=Type.Bool)expr.error(\"booleanrequiredinif\");8)}9)publicvoidgen(intb,inta){10)intlabel1=newlabel();//label1forstmt111)intlabel2=newlabel();//label2forstmt212)expr.jumping(0,label2);//fallthroughtostmt1ontrue13)emitlabel(label1);stmt1.gen(label1,a);emit(\"gotoL\"+a);14)emitlabel(label2);stmt2.gen(label2,a);15)}16)}TheconstructionofaWhileobjectissplitbetweentheconstructorWhile(),whichcreatesanodewithnullchildren(line5),andaninitializationfunctioninit(x,s),whichsetschildexprtoxandchildstmttos(lines6{9).Functiongen(b,a)forgeneratingthree-addresscode(lines10{16)isinthespiritofthecorrespondingfunctiongen()inclassIf.Thedi\u000berenceisthatlabelaissavedin\feldafter(line11)andthatthecodeforstmtisfollowedbyajumptob(line15)forthenextiterationofthewhileloop.1)packageinter;//FileWhile.java2)importsymbols.*;3)publicclassWhileextendsStmt{4)Exprexpr;Stmtstmt;5)publicWhile(){expr=null;stmt=null;}6)publicvoidinit(Exprx,Stmts){7)expr=x;stmt=s;8)if(expr.type!=Type.Bool)expr.error(\"booleanrequiredinwhile\");9)}10)publicvoidgen(intb,inta){11)after=a;//savelabela12)expr.jumping(0,a);13)intlabel=newlabel();//labelforstmt14)emitlabel(label);stmt.gen(label,b);15)emit(\"gotoL\"+b);16)}17)}ClassDoisverysimilartoclassWhile.1)packageinter;//FileDo.java2)importsymbols.*;3)publicclassDoextendsStmt{4)Exprexpr;Stmtstmt;980APPENDIXA.ACOMPLETEFRONTEND5)publicDo(){expr=null;stmt=null;}6)publicvoidinit(Stmts,Exprx){7)expr=x;stmt=s;8)if(expr.type!=Type.Bool)expr.error(\"booleanrequiredindo\");9)}10)publicvoidgen(intb,inta){11)after=a;12)intlabel=newlabel();//labelforexpr13)stmt.gen(b,label);14)emitlabel(label);15)expr.jumping(b,0);16)}17)}ClassSetimplementsassignmentswithanidenti\ferontheleftsideandanexpressionontheright.MostofthecodeinclassSetisforconstructinganodeandcheckingtypes(lines5-13).Functiongenemitsathree-addressinstruction(lines14-16).1)packageinter;//FileSet.java2)importlexer.*;importsymbols.*;3)publicclassSetextendsStmt{4)publicIdid;publicExprexpr;5)publicSet(Idi,Exprx){6)id=i;expr=x;7)if(check(id.type,expr.type)==null)error(\"typeerror\");8)}9)publicTypecheck(Typep1,Typep2){10)if(Type.numeric(p1)&&Type.numeric(p2))returnp2;11)elseif(p1==Type.Bool&&p2==Type.Bool)returnp2;12)elsereturnnull;13)}14)publicvoidgen(intb,inta){15)emit(id.toString()+\"=\"+expr.gen().toString());16)}17)}ClassSetElemimplementsassignmentstoanarrayelement:1)packageinter;//FileSetElem.java2)importlexer.*;importsymbols.*;3)publicclassSetElemextendsStmt{4)publicIdarray;publicExprindex;publicExprexpr;5)publicSetElem(Accessx,Expry){6)array=x.array;index=x.index;expr=y;7)if(check(x.type,expr.type)==null)error(\"typeerror\");8)}9)publicTypecheck(Typep1,Typep2){10)if(p1instanceofArray||p2instanceofArray)returnnull;11)elseif(p1==p2)returnp2;12)elseif(Type.numeric(p1)&&Type.numeric(p2))returnp2;13)elsereturnnull;14)}15)publicvoidgen(intb,inta){16)Strings1=index.reduce().toString();17)Strings2=expr.reduce().toString();A.8.PARSER98118)emit(array.toString()+\"[\"+s1+\"]=\"+s2);19)}20)}ClassSeqimplementsasequenceofstatements.Thetestsfornullstate-mentsonlines6-7areforavoidinglabels.Notethatnocodeisgeneratedforthenullstatement,Stmt.Null,sincemethodgeninclassStmtdoesnothing.1)packageinter;//FileSeq.java2)publicclassSeqextendsStmt{3)Stmtstmt1;Stmtstmt2;4)publicSeq(Stmts1,Stmts2){stmt1=s1;stmt2=s2;}5)publicvoidgen(intb,inta){6)if(stmt1==Stmt.Null)stmt2.gen(b,a);7)elseif(stmt2==Stmt.Null)stmt1.gen(b,a);8)else{9)intlabel=newlabel();10)stmt1.gen(b,label);11)emitlabel(label);12)stmt2.gen(label,a);13)}14)}15)}Abreakstatementsendscontroloutofanenclosinglooporswitchstate-ment.ClassBreakuses\feldstmttosavetheenclosingstatementconstruct(theparserensuresthatStmt.Enclosingdenotesthesyntax-treenodefortheenclosingconstruct).ThecodeforaBreakobjectisajumptothela-belstmt.after,whichmarkstheinstructionimmediatelyafterthecodeforstmt.1)packageinter;//FileBreak.java2)publicclassBreakextendsStmt{3)Stmtstmt;4)publicBreak(){5)if(Stmt.Enclosing==Stmt.Null)error(\"unenclosedbreak\");6)stmt=Stmt.Enclosing;7)}8)publicvoidgen(intb,inta){9)emit(\"gotoL\"+stmt.after);10)}11)}A.8ParserTheparserreadsastreamoftokensandbuildsasyntaxtreebycallingtheappropriateconstructorfunctionsfromSectionsA.5-A.7.ThecurrentsymboltableismaintainedasinthetranslationschemeinFig.2.38inSection2.7.Packageparsercontainsoneclass,Parser:1)packageparser;//FileParser.java2)importjava.io.*;importlexer.*;importsymbols.*;importinter.*;982APPENDIXA.ACOMPLETEFRONTEND3)publicclassParser{4)privateLexerlex;//lexicalanalyzerforthisparser5)privateTokenlook;//lookaheadtoken6)Envtop=null;//currentortopsymboltable7)intused=0;//storageusedfordeclarations8)publicParser(Lexerl)throwsIOException{lex=l;move();}9)voidmove()throwsIOException{look=lex.scan();}10)voiderror(Strings){thrownewError(\"nearline\"+lex.line+\":\"+s);}11)voidmatch(intt)throwsIOException{12)if(look.tag==t)move();13)elseerror(\"syntaxerror\");14)}LikethesimpleexpressiontranslatorinSection2.5,classParserhasapro-cedureforeachnonterminal.Theproceduresarebasedonagrammarformedbyremovingleftrecursionfromthesource-languagegrammarinSectionA.1.Parsingbeginswithacalltoprocedureprogram,whichcallsblock()(line16)toparsetheinputstreamandbuildthesyntaxtree.Lines17-18generateintermediatecode.15)publicvoidprogram()throwsIOException{//program->block16)Stmts=block();17)intbegin=s.newlabel();intafter=s.newlabel();18)s.emitlabel(begin);s.gen(begin,after);s.emitlabel(after);19)}Symbol-tablehandlingisshownexplicitlyinprocedureblock.3Variabletop(declaredonline5)holdsthetopsymboltable;variablesavedEnv(line21)isalinktotheprevioussymboltable.20)Stmtblock()throwsIOException{//block->{declsstmts}21)match('{');EnvsavedEnv=top;top=newEnv(top);22)decls();Stmts=stmts();23)match('}');top=savedEnv;24)returns;25)}Declarationsresultinsymbol-tableentriesforidenti\fers(seeline30).Al-thoughnotshownhere,declarationscanalsoresultininstructionstoreservestoragefortheidenti\fersatruntime.26)voiddecls()throwsIOException{27)while(look.tag==Tag.BASIC){//D->typeID;28)Typep=type();Tokentok=look;match(Tag.ID);match(';');29)Idid=newId((Word)tok,p,used);30)top.put(tok,id);31)used=used+p.width;32)}33)}34)Typetype()throwsIOException{35)Typep=(Type)look;//expectlook.tag==Tag.BASICA.8.PARSER98336)match(Tag.BASIC);37)if(look.tag!='[')returnp;//T->basic38)elsereturndims(p);//returnarraytype39)}40)Typedims(Typep)throwsIOException{41)match('[');Tokentok=look;match(Tag.NUM);match(']');42)if(look.tag=='[')43)p=dims(p);44)returnnewArray(((Num)tok).value,p);45)}ProcedurestmthasaswitchstatementwithcasescorrespondingtotheproductionsfornonterminalStmt.Eachcasebuildsanodeforaconstruct,usingtheconstructorfunctionsdiscussedinSectionA.7.Thenodesforwhileanddostatementsareconstructedwhentheparserseestheopeningkeyword.Thenodesareconstructedbeforethestatementisparsedtoallowanyenclosedbreakstatementtopointbacktoitsenclosingloop.NestedloopsarehandledbyusingvariableStmt.EnclosinginclassStmtandsavedStmt(declaredonline52)tomaintainthecurrentenclosingloop.46)Stmtstmts()throwsIOException{47)if(look.tag=='}')returnStmt.Null;48)elsereturnnewSeq(stmt(),stmts());49)}50)Stmtstmt()throwsIOException{51)Exprx;Stmts,s1,s2;52)StmtsavedStmt;//saveenclosingloopforbreaks53)switch(look.tag){54)case';':55)move();56)returnStmt.Null;57)caseTag.IF:58)match(Tag.IF);match('(');x=bool();match(')');59)s1=stmt();60)if(look.tag!=Tag.ELSE)returnnewIf(x,s1);61)match(Tag.ELSE);62)s2=stmt();63)returnnewElse(x,s1,s2);64)caseTag.WHILE:65)Whilewhilenode=newWhile();66)savedStmt=Stmt.Enclosing;Stmt.Enclosing=whilenode;67)match(Tag.WHILE);match('(');x=bool();match(')');68)s1=stmt();69)whilenode.init(x,s1);70)Stmt.Enclosing=savedStmt;//resetStmt.Enclosing71)returnwhilenode;72)caseTag.DO:73)Dodonode=newDo();74)savedStmt=Stmt.Enclosing;Stmt.Enclosing=donode;75)match(Tag.DO);76)s1=stmt();77)match(Tag.WHILE);match('(');x=bool();match(')');match(';');78)donode.init(s1,x);79)Stmt.Enclosing=savedStmt;//resetStmt.Enclosing80)returndonode;984APPENDIXA.ACOMPLETEFRONTEND81)caseTag.BREAK:82)match(Tag.BREAK);match(';');83)returnnewBreak();84)case'{':85)returnblock();86)default:87)returnassign();88)}89)}Forconvenience,thecodeforassignmentsappearsinanauxiliaryprocedure,assign.90)Stmtassign()throwsIOException{91)Stmtstmt;Tokent=look;92)match(Tag.ID);93)Idid=top.get(t);94)if(id==null)error(t.toString()+\"undeclared\");95)if(look.tag=='='){//S->id=E;96)move();stmt=newSet(id,bool());97)}98)else{//S->L=E;99)Accessx=offset(id);100)match('=');stmt=newSetElem(x,bool());101)}102)match(';');103)returnstmt;104)}Theparsingofarithmeticandbooleanexpressionsissimilar.Ineachcase,anappropriatesyntax-treenodeiscreated.Codegenerationforthetwoisdi\u000berent,asdiscussedinSectionsA.5-A.6.105)Exprbool()throwsIOException{106)Exprx=join();107)while(look.tag==Tag.OR){108)Tokentok=look;move();x=newOr(tok,x,join());109)}110)returnx;111)}112)Exprjoin()throwsIOException{113)Exprx=equality();114)while(look.tag==Tag.AND){115)Tokentok=look;move();x=newAnd(tok,x,equality());116)}117)returnx;118)}119)Exprequality()throwsIOException{120)Exprx=rel();121)while(look.tag==Tag.EQ||look.tag==Tag.NE){122)Tokentok=look;move();x=newRel(tok,x,rel());123)}124)returnx;125)}126)Exprrel()throwsIOException{127)Exprx=expr();A.8.PARSER985128)switch(look.tag){129)case'<':caseTag.LE:caseTag.GE:case'>':130)Tokentok=look;move();returnnewRel(tok,x,expr());131)default:132)returnx;133)}134)}135)Exprexpr()throwsIOException{136)Exprx=term();137)while(look.tag=='+'||look.tag=='-'){138)Tokentok=look;move();x=newArith(tok,x,term());139)}140)returnx;141)}142)Exprterm()throwsIOException{143)Exprx=unary();144)while(look.tag=='*'||look.tag=='/'){145)Tokentok=look;move();x=newArith(tok,x,unary());146)}147)returnx;148)}149)Exprunary()throwsIOException{150)if(look.tag=='-'){151)move();returnnewUnary(Word.minus,unary());152)}153)elseif(look.tag=='!'){154)Tokentok=look;move();returnnewNot(tok,unary());155)}156)elsereturnfactor();157)}Therestofthecodeintheparserdealswith\\factors\"inexpressions.Theauxiliaryprocedureoffsetgeneratescodeforarrayaddresscalculations,asdiscussedinSection6.4.3.158)Exprfactor()throwsIOException{159)Exprx=null;160)switch(look.tag){161)case'(':162)move();x=bool();match(')');163)returnx;164)caseTag.NUM:165)x=newConstant(look,Type.Int);move();returnx;166)caseTag.REAL:167)x=newConstant(look,Type.Float);move();returnx;168)caseTag.TRUE:169)x=Constant.True;move();returnx;170)caseTag.FALSE:171)x=Constant.False;move();returnx;172)default:173)error(\"syntaxerror\");174)returnx;175)caseTag.ID:176)Strings=look.toString();177)Idid=top.get(look);178)if(id==null)error(look.toString()+\"undeclared\");986APPENDIXA.ACOMPLETEFRONTEND179)move();180)if(look.tag!='[')returnid;181)elsereturnoffset(id);182)}183)}184)Accessoffset(Ida)throwsIOException{//I->[E]|[E]I185)Expri;Exprw;Exprt1,t2;Exprloc;//inheritid186)Typetype=a.type;187)match('[');i=bool();match(']');//firstindex,I->[E]188)type=((Array)type).of;189)w=newConstant(type.width);190)t1=newArith(newToken('*'),i,w);191)loc=t1;192)while(look.tag=='['){//multi-dimensionalI->[E]I193)match('[');i=bool();match(']');194)type=((Array)type).of;195)w=newConstant(type.width);196)t1=newArith(newToken('*'),i,w);197)t2=newArith(newToken('+'),loc,t1);198)loc=t2;199)}200)returnnewAccess(a,loc,type);201)}202)}A.9CreatingtheFrontEndThecodeforthepackagesappearsin\fvedirectories:main,lexer,symbol,parser,andinter.Thecommandsforcreatingthecompilervaryfromsystemtosystem.ThefollowingarefromaUNIXimplementation:javaclexer/*.javajavacsymbols/*.javajavacinter/*.javajavacparser/*.javajavacmain/*.javaThejavaccommandcreates.class\flesforeachclass.Thetranslatorcanthenbeexercisedbytypingjavamain.Mainfollowedbythesourceprogramtobetranslated;e.g.,thecontentsof\fletest1){//Filetest2)inti;intj;floatv;floatx;float[100]a;3)while(true){4)doi=i+1;while(a[i]<v);5)doj=j-1;while(a[j]>v);6)if(i>=j)break;7)x=a[i];a[i]=a[j];a[j]=x;8)}9)}Onthisinput,thefrontendproducesA.9.CREATINGTHEFRONTEND9871)L1:L3:i=i+12)L5:t1=i*83)t2=a[t1]4)ift2<vgotoL35)L4:j=j-16)L7:t3=j*87)t4=a[t3]8)ift4>vgotoL49)L6:iffalsei>=jgotoL810)L9:gotoL211)L8:t5=i*812)x=a[t5]13)L10:t6=i*814)t7=j*815)t8=a[t7]16)a[t6]=t817)L11:t9=j*818)a[t9]=x19)gotoL120)L2:Tryit. This page intentionally left blank AppendixBFindingLinearlyIndependentSolutionsAlgorithmB.1:FindsamaximalsetoflinearlyindependentsolutionsforA~x\u0015~0,andexpressesthemasrowsofmatrixB.INPUT:Anm\u0002nmatrixA.OUTPUT:AmatrixBoflinearlyindependentsolutionstoA~x\u0015~0.METHOD:Thealgorithmisshowninpseudocodebelow.NotethatX[y]de-notestheythrowofmatrixX,X[y:z]denotesrowsythroughzofmatrixX,andX[y:z][u:v]denotestherectangleofmatrixXinrowsythroughzandcolumnsuthroughv.2989990APPENDIXB.FINDINGLINEARLYINDEPENDENTSOLUTIONSM=AT;r0=1;c0=1;B=In\u0002n;/*ann-by-nidentitymatrix*/while(true)f/*1.MakeM[r0:r0\u00001][c0:c0\u00001]intoadiagonalmatrixwithpositivediagonalentriesandM[r0:n][c0:m]=0.M[r0:n]aresolutions.*/r0=r0;c0=c00;while(thereexistsM[r][c]6=0suchthatr\u0000r0andc\u0000c0areboth\u00150)fMovepivotM[r][c]toM[r0][c0]byrowandcolumninterchange;Interchangerowrwithrowr0inB;if(M[r0][c0]<0)fM[r0]=\u00001\u0003M[r0];B[r0]=\u00001\u0003B[r0];gfor(row=r0ton)fif(row6=r0andM[row][c0]6=0)fu=\u0000(M[row][c0]=M[r0][c0]);M[row]=M[row]+u\u0003M[r0];B[row]=B[row]+u\u0003B[r0];ggr0=r0+1;c0=c0+1;g991/*2.FindasolutionbesidesM[r0:n].ItmustbeanonnegativecombinationofM[r0:r0\u00001][c0:m]*/Findkr0;:::;kr0\u00001\u00150suchthatkr0M[r0][c0:m]+\u0001\u0001\u0001+kr0\u00001M[r0\u00001][c0:m]\u00150;if(thereexistsanontrivialsolution,saykr>0)fM[r]=kr0M[r0]+\u0001\u0001\u0001+kr0\u00001M[r0\u00001];NoMoreSoln=false;gelse/*M[r0:n]aretheonlysolutions*/NoMoreSoln=true;/*3.MakeM[r0:rn\u00001][c0:m]\u00150*/if(NoMoreSoln)f/*MovesolutionsM[r0:n]toM[r0:rn\u00001]*/for(r=r0ton)Interchangerowsrandr0+r\u0000r0inMandB;rn=r0+n\u0000r0+1;gelsef/*Userowadditionto\fndmoresolutions*/rn=n+1;for(col=c0tom)if(thereexistsM[row][col]<0suchthatrow\u0015r0)if(thereexistsM[r][col]>0suchthatr\u0015r0)ffor(row=r0torn\u00001)if(M[row][col]<0)fu=d(\u0000M[row][col]=M[r][col])e;M[row]=M[row]+u\u0003M[r];B[row]=B[row]+u\u0003B[r];ggelsefor(row=rn\u00001tor0step-1)if(M[row][col]<0)frn=rn\u00001;InterchangeM[row]withM[rn];InterchangeB[row]withB[rn];gg992APPENDIXB.FINDINGLINEARLYINDEPENDENTSOLUTIONS/*4.MakeM[r0:rn\u00001][1:c0\u00001]\u00150*/for(row=r0torn\u00001)for(col=1toc0\u00001)if(M[row][col]<0)fPickanrsuchthatM[r][col]>0andr<r0;u=d(\u0000M[row][col]=M[r][col])e;M[row]=M[row]+u\u0003M[r];B[row]=B[row]+u\u0003B[r];g/*5.Ifnecessary,repeatwithrowsM[rn:n]*/if(NoMoreSolnorrn>norrn=r0)fRemoverowsrntonfromB;returnB;gelsefcn=m+1;for(col=mto1step-1)if(thereisnoM[r][col]>0suchthatr<rn)fcn=cn\u00001;InterchangecolumncolwithcninM;gr0=rn;c0=cn;ggIndexAAbstractsyntaxtreeSeeSyntaxtreeAbu-Sufah,W.900Acceptance149AcceptingstateSeeFinalstateAccesslink434,445{449Action58{59,249,327Activationrecord433{452Activationtree430{433Actualparameter33,434,942Acycliccallstring910Acyclicpath667Acyclictest821{822Ada391Address364,374Addressdescriptor543,545{547Addressspace427Advancingedge661A\u000enearrayaccess781,801{804,815{826A\u000eneexpression687,770A\u000enepartitioning781A\u000enespacepartition830{838A\u000enetransformation778{782,846{851Aho,A.V.189{190,301,579{580Aho-Corasickalgorithm138{140Algebraicidentities536,552Alias35,713,903,917,933Alignment374,428Allen,F.E.704,899{900,962Allen,R.900Allocation,ofmemory453Alpha703Alphabet117Ambiguousgrammar47,203{204,210{212,255,278{283,291{294Amdahl'slaw774Analysis4Ancestor46Andersen,L.962Annotatedparsetree54Anticipatedexpression645{648,653Antidependence711,816Antisymmetry619Antlr300,302Architecture19{22Arithmeticexpression49{50,68{69,378{381,971{974Array373{375,381{384,537{539,541,584,712{713,770,920SeealsoA\u000enearrayaccessArraycontraction884{887ASCII117Assembler3Assemblylanguage13,508Associativity48,122,279{281,293,619Atom921Attribute54,112SeealsoInheritedattribute,Mainattribute,Synthesizedat-tributeAttributegrammar306Augmentedgrammar243Auslander,M.A.580Auto-increment739Automaton147993994INDEXSeealsoDeterministic\fniteau-tomaton,LR(0)automaton,Nondeterministic\fniteau-tomatonAvailableexpression610{615,648{649,653Avots,D.962{963BBackedge662,664{665Backend4,357Backpatching410{417Backus,J.W.300{301Backus-NaurformSeeBNFBackward\row610,615,618,627,669Baker,H.G.Jr.502Baker'salgorithm475{476,482Ball,T.962Banerjee,U.900Banning,J.P.962Barth,J.M.962Baseaddress381Baseregister762Basicblock525{541,597,600{601,721{726Basictype371Bauer,F.L.354{355BDD951{958Bddbddb961Bergin,T.J.38Berndl,M.961{962Bernstein,D.766{767Best-\ft458Big-oh159Binaryalphabet117BinarydecisiondiagramSeeBDDBinarytranslation22Binning,ofchunks458Birman,A.301Bison300Block29,86{87,95SeealsoBasicblockBlockstructureSeeStaticscopeBlocking770{771,785{787,877{880,888BNFSeeContext-freegrammarBody43,197,923Bodyregion673Booleanexpression399{400,403{409,411{413,974{977Bottomelement619,622Bottom-upparser233{240SeealsoLRparser,Shift-reduceparserBoundarycondition615Boundarytag459Boundschecking19,24,920{921Bounimova,E.962BranchSeeJumpBranch-and-bound824{825Break-statement416{417Brooker,R.A.354Bryant,R.E.961{962Bu\u000ber115{117Bu\u000berover\row918,920{921Burke,M.900Bus772{773Bush,W.R.962{963Bytecode2CC13,18,25,28{29,381,498,903,934Cache20,454{455,457,772,783{785Cacheinterference788Cadar,C.963Call365,423{424,467,518{522,539,541Callgraph904{906,943{944Callsite904,950Callstring908{910,946{949Callahan,D.961,963Call-by-name35INDEX995Call-by-reference34Call-by-value34Callingsequence436{438CanonicalderivationSeeRightmostderivationCanonicalLRparser259,265{266,283CanonicalLR(1)setofitems260{264CanonicalLR(0)setofitems243,247Cantor,D.C.300{301Carbin,M.963Casesensitivity125CFGSeeGrammarChaitin,G.J.580Chandra,A.K.580Characterclass123,126Charles,P.900Chelf,B.963Chen,S.766{767,899,901Cheney,C.J.502{503Cheney'salgorithm479{482Cheong,G.I.901Child46Chomsky,N.300{301ChomskyNormalForm232,300Chou,A.963Chow,F.579{580Chunk457{459Church,A.502{503Circulardependency307CISC21,507{508Class33,376Classvariable25{26Clock708Cloning910{911Closure119,121{122,243{245,261{262SeealsoPositiveclosureClosure,oftransferfunctions679Coalescing,ofchunks459{460Cocke,J.301,579{580,704,900Cocke-Younger-Kasamialgorithm232,301Codegeneration10{11,505{581,707{767SeealsoSchedulingCodemotion592SeealsoDownwardcodemo-tion,Loop-invariantexpres-sion,Partialredundancyelim-ination,Upwardcodemo-tionCodeoptimization5,10,15{19,368,583{705,769{963CodeschedulingSeeSchedulingCoercion99,388{389Co\u000bman,E.G.900{901Coherentcacheprotocol772{773Collins,G.E.503Coloring556{557Column-majororder382,785Comment77Commonsubexpression533{535,588{590,611,639{641Communication828,881{882,894Commutativity122,619Compiletime25Complexinstruction-setcomputerSeeCISCComposition624,678,693ComputerarchitectureSeeArchitectureConcatenation119,121{122Concurrentgarbagecollection495{497Conditionaljump513,527Con\fguration249Con\rict144,565SeealsoReduce-reducecon\rict,Shift-reducecon\rictConservativedata-\rowanalysis603Constant78{79Constantfolding536,632{637ConstantpropagationSeeConstantfolding996INDEXConstraintSeeControl-dependenceconstraint,Datadependence,ResourceconstraintContextsensitivity906{908,945{951Context-freegrammarSeeGrammarContext-freelanguage200,215{216Context-sensitiveanalysis906{907,945{950Contiguousevaluation574Continue-statement416{417Controlequivalence728Control\row399{409,413{417,525Controllink434Control-dependenceconstraint710,716{717Control-\rowequation600,605Convexpolyhedron789{790,795{796Cook,B.962Cooper,K.D.580,963Copypropagation590{591Copystatement544,937Copyinggarbagecollector478{482,488,497{498Corasick,M.J.189{190Cousot,P.704Cousot,R.704C++13,18,34,498Criticalcycle758Criticaledge643Criticalpath725Crossedge662CUP300,302Cutset645Cyclicgarbage488CYKalgorithmSeeCocke-Younger-Kasamial-gorithmCytron,R.704,900DDAG359{362,533{541,951Dain,J.300{301Dalton,M.962Danglingelse210{212,281{283Danglingpointer461Dantzig,G.900Das,M.961,963Dataabstraction18Datadependence711{715,732,747{749,771,781{782,804{805,815{826SeealsoAntidependence,Out-putdependence,Truede-pendenceDatalocality891{892SeealsoLocalityDatareuse804{815,887{888Dataspace779{780Data-dependencegraph722{723Data-\rowanalysis18,23,597{705,921Data-\rowanalysisframework618Datalog921{933Datalogprogram923Davidson,E.S.767Deadcode533,535,550,591{592Deadstate172,183Deadvariable608Deallocation,ofmemory453,460{463Declaration32,373,376Declarativelanguage13Decode708Def609De\fnition32De\fnition,ofavariable601Dependencygraph310{312Depth,ofa\rowgraph665Depth-\frstorder660Depth-\frstsearch57Depth-\frstspanningtree660Dereferencing461DeRemer,F.300{301Derivation44{46,199{202SeealsoLeftmostderivation,Right-mostderivationDescendant46INDEX997Deterministic\fniteautomaton149{156,164{166,170{186,206DFASeeDeterministic\fniteautoma-tonDijkstra,E.W.502{503Diophantineequation818{820DirectedacyclicgraphSeeDAGDirect-mappedcache457,788Display449{451Distributiveframework625,635{636Distributivity122Do-acrossloop743{745Do-allloop738Domain,ofadata-\rowanalysis599,615Domain,ofarelation954Dominator656{659,672,728Dominatortree657Donnelly,C.301Downwardcodemotion731{732Dumitran,D.963Dynamicaccess816Dynamicloading944Dynamicpolicy25Dynamicprogramming573{577SeealsoCocke-Younger-KasamialgorithmDynamicRAM456Dynamicscheduler719,737Dynamicscope31{33Dynamicstorage429SeealsoHeap,Run-timestackEEarley,J.301Earliestexpression649{650,654Eaves,B.C.900EDBSeeExtensionaldatabasepred-icateEdgeSeeAdvancingedge,Backedge,Criticaledge,Crossedge,RetreatingedgeEmami,M.961,963Emptystring44,118,121Engler,D.963Entrynode531,605Environment26{28Epilog742\u000fSeeEmptystring\u000f-freegrammar232\u000f-production63,65{66Eqn331Equivalence-basedanalysis935Errorcorrection113{114,192{196,228{231Errorproduction196Errorrecovery283{284,295{297Ershov,A.P426,579{580,705Ershovnumber567{572Euclideanalgorithm820Executionpath597,628Exitblock677Exitnode605Expression94,96{97,101{105,359,568{572SeealsoArithmeticexpression,Booleanexpression,In\fxexpression,Post\fxexpres-sion,Pre\fxexpression,Reg-ularexpression,Typeex-pressionExtensionaldatabasepredicate924FFahndrich,M.961,963Fall-throughcode406Farkas'lemma872{875Feautrier,P.900Feldman,S.I.426Fenichel,R.R.502{503Ferrante,J.704,900Fetch708Field377,584,935Fieldload937Fieldstore937998INDEXFifth-generationlanguage13Finalstate130{131,147,205FiniteautomatonSeeAutomatonFIRST220{222First-\ft458First-generationlanguage13Firstpos175{177Fischer,C.N.580Fisher,J.A.766{767Fission848,850,854FixedpointSeeMaximum\fxedpointFlex189{190Floatinggarbage484Flowgraph529{531SeealsoReducible\rowgraph,Supercontrol-\rowgraphFlowsensitivity933,936{937Floyd,R.W.300{301FOLLOW220{222Followpos177{179Formalparameter33,942Fortran113,382,779,886FortranH703Forward\row615,618,627,668Fourier-Motzkinalgorithm796{797Fourth-generationlanguage13Fragmentation457{460FrameworkSeeData-\rowanalysisframe-work,Distributiveframe-work,MonotoneframeworkFraser,C.W.580Freechunk457Freelist459{460,471Freestate473Frege,G.502{503Frontend4,40{41,357,986FrontierSeeYieldFullredundancy645Fullypermutableloops861,864{867,875{876Fullyrankedmatrix808Function29SeealsoProcedureFunctioncallSeeCallFunctiontype371,423Functionallanguage443Fusion848,850GGanapathi,M.579{580Gao,G.902Garbagecollection25,430,463{499SeealsoMark-and-compact,Mark-and-sweep,Short-pausegarbagecollectionGCD818{820Gear,C.W.705Gen603,611Generationalgarbagecollection483,488{489Gen-killform603Geschke,C.M.705Ghiya,R.961,963Gibson,R.G.38Glaeser,C.D.767Glanville,R.S.579{580GlobalcodeoptimizationSeeCodeoptimizationGlobalvariable442GNU38,426Gosling,J.426GOTO246,249,261Graham,S.L.579{580Grammar42{50,197{199,204{205SeealsoAmbiguousgrammar,AugmentedgrammarGrammarsymbol199Granularity917Granularity,ofparallelism773{775GraphSeeCallgraph,DAG,Data-de-pendencegraph,Dependencygraph,Flowgraph,Program-dependencegraphGraphcoloringINDEX999SeeColoringGreatestcommondivisorSeeGCDGreatestlowerbound620,622Gross,T.R.766{767Groundatom921Groupreuse806,811{813Grune,D.302Gupta,A.900{901HHallem,S.963Halstead,M.H.426Handle235{236Hanson,D.R.580Hardwareregisterrenaming714Hardwaresynthesis22Head42,197,923Header665,672Heap428{430,452{463,518,935Hecht,M.S.705Height,ofasemilattice623,626,628Heintze,N.961,963Hendren,L.J.961{963Hennessy,J.L.38,579{580,766{767,899,901Hewitt,C.502{503Hierarchicalreduction761{762Hierarchicaltime857{859Higher-orderfunction444Hoare,C.A.R.302Hobbs,S.O.705Hole457Hopcroft,J.E.189{190,302Hopkins,M.E.580Hudson,R.L.502{503Hudson,S.E.302Hu\u000bman,D.A.189{190Huskey,H.D.426IIDBSeeIntensionaldatabasepred-icateIdealsolution,toadata-\rowprob-lem628{630Idempotence122,619Identi\fer28,79{80Identityfunction624If-statement401Immediatedominator657{658Imperativelanguage13Inclusion-basedanalysis935Incrementinstruction509Incrementalevaluation928{930Incrementalgarbagecollection483{487IncrementaltranslationSeeOn-the-\rygenerationIndependentvariablestest820{821Index365Indexedaddress513Indirectaddress513Indirecttriples368{369Inductionvariable592{596,687{688In\fxexpression40,52{53Ingerman,P.Z.302Inheritance18Inheritedattribute55,304{305,307InitialstateSeeStartstateInitialization615Initiationinterval745Inlining903{904,914Inputbu\u000beringSeeBu\u000berInstructionpipeline708{709SeealsoSoftwarepipeliningIntegerlinearprogramming817{825Intensionaldatabasepredicate924Interleaving887{890Intermediatecode9,91{105,357{426,507,971{981Interpreter2Interproceduralanalysis713,903{964Interrupt526Intersection612{613,615,620,650Intraproceduralanalysis9031000INDEXIrons,E.T.354Item242{243SeealsoKernelitem,Setofitems,ValiditemIterationspace779{780,788{799Iterativedata-\rowalgorithm605{607,610,614,626{628JJacobs,C.J.H.302Java2,13,18{19,25,34,76,381,903,934,944Javavirtualmachine507{508Jazayeri,M.354JFlex189{190Johnson,R.K.705Johnson,S.C.300{302,355,426,502{503,579{580Join621,955Jump513,527,551{552Jumpingcode408,974{977Just-in-timecompilation508JVMSeeJavavirtualmachineKKam,J.B.705Kasami,T.301{302,705Kennedy,K.899{900,963Kernel777Kernelitem245,272{273Kernighan,B.W.189{190Keyword50{51,79{80,132{133Kill601,603,611Killdall,G.704{705KleeneclosureSeeClosureKleene,S.C.189{190Knoop,J.705Knuth,D.E.189{190,300,302,354{355,502{503Knuth-Morris-Prattalgorithm136{138Korenjak,A.J.300,302Kosaraju,S.R.705Kuck,D.J.766{767,899{901Kung,H.T.901LLabel46,364,366LALRparser259,266{275,283,287Lam,M.S.767,899{902,961{964Lamport,L.503,766{767,899{901Language44,118SeealsoJava,Sourcelanguage,TargetlanguageLastpos175{177Latestexpression649,654Lattice621SeealsoSemilatticeLatticediagram621{622L-attributedde\fnition313{314,331{352LawSeeAssociativity,Commutativ-ity,Distributivity,Idempo-tenceLawrie,D.H.900LazycodemotionSeePartialredundancyelimi-nationLea458Leader526{527Leaf45{46Leafregion673Leastupperbound621LeBlanc,R.J.580LeftsideSeeHeadLeft-associativity48Left-factoring214{215Leftmostderivation201Left-recursion67{68,71,212{214,328{331Left-sententialform201Leiserson,C.E.901Lesk,M.E.189{190Leu,T.963Levin,V.962INDEX1001Lewis,P.M.II300,302,355Lex126{127,140{145,166{167,189{190,294{295Lexeme111Lexicalanalyzer5{7,41,76{84,86,109{190,209{210,294{295,967{969Lexicalerror194LexicalscopeSeeStaticscopeLexicographicorder791Liao,S.-W.901Lichtenber,J.962Lieberman,H.502{503Lim,A.W.901LinearprogrammingSeeIntegerlinearprogrammingListscheduling723{726Literal922Livevariable528{529,608{610,615Livshits,V.B.962{963LLgrammar223LLparserSeePredictiveparserLLgen300Loadinstruction512Loader3LocalcodeoptimizationSeeBasicblockLocality455,769SeealsoSpatiallocality,Tem-porallocalityLocation26{28Logicaladdress427Logicalerror194Lohtak,O.962Lookahead78,144{145,171{172,272{275Lookahead-LRparserSeeLALRparserLoop531,554,556,655{656,775SeealsoDo-allloop,Fullyper-mutableloops,NaturalloopLoop\fssionSeeFissionLoopfusionSeeFusionLoopnest780,791,797,862Loopregion674LoopreversalSeeReversalLoopunrolling735,740{741,743Loop-invariantexpression641{642Loop-residuetest822{823Loveman,D.B.901Lowry,E.S.579{580,705LR(0)automaton243,247{248,252LRparser53{252,275{277,325,348{352SeealsoCanonicalLRparser,LALRparser,SLRparserL-value26,98SeealsoLocationMMachinelanguage508Macro13Mainattribute341Mark-and-compact476{482Mark-and-sweep471{476,482Markernonterminal349Markstein,P.W.580Martin,A.J.503Martin,M.C.963Matrixmultiplication782{788Maximum\fxedpoint626{628,630{631Maydan,D.E.899,901McArthur,R.426McCarthy,J.189{190,502{503McClure,R.M.302McCullough,W.S.189{190McGarvey,C.962McKellar,A.C.900{901McNaughton,R.189{190McNaughton-Yamada-Thompsonal-gorithm159{161Medlock,C.W.579{580,705Meet605,615,618{619,622{623,633,678,6951002INDEXMeet-over-pathssolution629{631Memoization823Memory20,772{773SeealsoHeap,Physicalmem-ory,Storage,Virtualmem-oryMemoryhierarchy20,454{455Memoryleak25,461Message-passingmachine773,894META300Metal918,962Method29SeealsoProcedure,VirtualmethodMethodcallSeeCallMethodinvocation33MGUSeeMostgeneraluni\ferMilanova,A.962{963Milner,R.426Minimization,ofstates180{185Minsky,M.503ML387,443{445Mock,O.426Modularresource-reservationtable746{747,758Modularvariableexpansion758{761Monotoneframework624{628,635Moore,E.F.189{190MOPSeeMeet-over-pathssolutionMorel,E.705Morris,D.354Morris,J.H.189{190Moss,J.E.B.502{503Mostgeneraluni\fer393SeealsoUni\fcationMotwani,R.189{190,302Mowry,T.C.900{901Multiprocessor772{773,895SeealsoSIMD,Single-programmultipledataMuraoka,Y.766{767,899,901Mutator464NNAA690NAC633Name26{28Narrowing388{389Naturalloop665{667,673Naur,P.300,302Neighborhoodcompaction736Neliac425Nestedproceduredeclarations442{445Next-\ft458{459NFASeeNondeterministic\fniteau-tomatonNode46Nodemerging953Nondeterministic\fniteautomaton147{148,152{175,205,257Nonreducible\rowgraphSeeReducible\rowgraphNonterminal42{43,45,197{198SeealsoMarkernonterminalNonuniformmemoryaccess773Nullspace808{809Nullable175{177Nullity808NUMASeeNonuniformmemoryaccessOObjectcode358SeealsoCodegenerationObjectcreation937Objectownership462Objectprogram427{428Objectsensitivity950Object-orientedlanguageSeeC++,JavaO\u000bset377{378Ogden,W.F.354Olsztyn,J.426Ondrusek,B.962INDEX1003On-the-\rygeneration340{343,380{381OptimizationSeeCodeoptimizationOrderedBDD952Outputdependence711,816Overloading99,390{391PPaakki,J.354{355Padua,D.A.902Panic-modegarbagecollection492{493Panic-moderecovery195{196,228{230,283{284Panini300Parafrase899Parallelgarbagecollection495{497Parallelism19{20,707{902,917Parameter422SeealsoActualparameter,For-malparameter,ProcedureparameterParameterpassing33{35,365Parametricpolymorphism391SeealsoPolymorphismParent46Parr,T.302Parsetree45{48,201{204SeealsoAnnotatedparsetreeParser8,41,45,60{61,110{111,191{302,981{986SeealsoBottom-upparser,Top-downparserParsergeneratorSeeAntlr,Bison,CUP,LLgen,YaccParserstate241{242SeealsoSetofitemsPartialgarbagecollection483,487{494Partialorder619{621,623Partialredundancyelimination639{655Partiallydeadvariable655PartiallyorderedsetSeePosetPass11Patel,J.H.767PathSeeAcyclicpath,Criticalpath,Executionpath,Meet-over-pathssolution,Weight,ofapathPattern111Patternmatching,oftrees563{567Patterson,D.A.38,579{580,766{767,899,901Pausetime465SeealsoShort-pausegarbagecol-lectionP-code386PDGSeeProgram-dependencegraphPeepholeoptimization549{552Pelegri-Llopart,E.580Permuation849{850Peterson,W.W.705PFC899Phase11Phoenix38Phrase-levelrecovery196,231Physicaladdress427Physicalmemory454{455Pierce,B.C.426Pincus,J.D.962{963PipelineSeeInstructionpipeline,Pipelin-ing,SoftwarepipeliningPipelining861{884Pitts,W.189{190Pnueli,A.964Pointer365,373,514,539,935SeealsoDanglingpointer,StackpointerPointeranalysis713,903,917,933{951Poisonbit718PolyhedronSeeConvexpolyhedron1004INDEXPolymorphism391{395Porter\feld,A.900,902Poset619Positiveclosure123Postdominator728Post\fxexpression40,53{54Post\fxtranslationscheme324{327Postordertraversal58,432SeealsoDepth-\frstorderPostponableexpression646,649,651{654Powerset620Pratt,V.R.189{190PRESeePartialredundancyelimi-nationPrecedence48,121{122,279{281,293{294Predecessor529Predicate921{922Predicatedexecution718,761Predictiveparser64{68,222{231,343{348Prefetch457Prefetching718,896Pre\fx119,918,962Pre\fxexpression327Preordertraversal58,432Preprocessor3Prioritizedtopologicalorder725{726Private31Privatizablevariable758Procedure29,422{424ProcedurecallSeeCallProcedureparameter448{449Processorspace779{781,838{841Productlattice622{623Production42{43,45,197,199SeealsoErrorproductionProebsting,T.A.580Program-dependencegraph854{857Programminglanguage12{14,25{35SeealsoAda,C,C++,Fortran,Java,MLProjection955Prolog742Prosser,R.T.705Protected31Pseudoregister713PTRAN900Public31Pugh,W.899,902Purify25,462QQian,F.962Quadruple366{368Quicksort431{432,585RRabin,M.O.189{190Rajamani,S.K.962Randell,B.502{503Rank,ofamatrix807{809Rau,B.R.767Reachingde\fnitions601{608,615Readbarrier486Record371,376{378,584Recursivedescent338{343Recursivetype372Recursive-descentparser64,219{222Reducedinstruction-setcomputerSeeRISCReduce-reducecon\rict238{240,293Reducible\rowgraph662,664,673{677,684{685Reduction234,324Reductioninstrength536,552,592{596ReferenceSeePointerReferencecount462{463,466,468{470Referencevariable34,686{689Re\rection944{945Re\rexivity619INDEX1005Region672{686,694{699,733{734,911Region-basedallocation463Register18,20,454{455,542{543,714{715SeealsoPseudoregister,Rotat-ingregister\fleRegisterallocation510{512,553{557,570{572,716,743Registerassignment510,556Registerdescriptor543,545{547Registerpair510RegisterrenamingSeeHardwareregisterrenam-ingRegularde\fnition123Regularexpression116{122,159{163,179{180,189,210Rehof,J.961,963Re-indexing848,850Relation922,954Relativeaddress371,373,381Rememberedset491Renvoise,C.705ReservedwordSeeKeywordResourceconstraint711Resource-reservationtable719{720SeealsoModularresource-reservationtableRetreatingedge661,664{665Return365,467,518{522,906,942Returnvalue434ReuseSeeDatareuseReversal849{850RightsideSeeBodyRight-associativity48Rightmostderivation201Right-sententialform201,256Rinard,M.962{963RISC21,507{508Ritchie,D.M.426,502{503Rodeh,M.766{767Root46Rootset466{467,488Rosen,B.K.704Rosenkrantz,D.J.355Rotatingregister\fle762Rothberg,E.E.900{901Rounds,W.C.354Rountev,A.962{963RowSeeTupleRow-majororder382,785Roy,D.963Rule922{923Runtime25Run-timeenvironment427Run-timestack428{451,468Russell,L.J.502{503Ruwase,O.962{963R-value26,98Ryder,B.G.962{963SSadgupta,S.767SafetySeeConservativedata-\rowanal-ysisSamelson,K.354{355Sarkar,V.902S-attributedde\fnition306,312{313,324Scaling848,850Scannedstate474Scanning110SeealsoLexicalanalyzerSCCSeeStronglyconnectedcompo-nentScheduling710{711,716Scholten,C.S.503Schorre,D.V.302Schwartz,J.T.579,581,704Scope86Scott,D.189{190Scott,M.L.38Scriptinglanguage13{141006INDEXSDDSeeSyntax-directedde\fnitionSDTSeeSyntax-directedtranslationSDV962Secondarystorage20Second-generationlanguage13Sedgewick,R.585Selfreuse806{811Semanticanalysis8{9Semanticerror194SemanticruleSeeSyntax-directedde\fnitionSemantics40Semilattice618{623SensitivitySeeContextsensitivity,Flowsen-sitivitySentence200Sententialform200SeealsoLeft-sententialform,Right-sententialformSentinel116Setassociativity457Setofitems243{246,257SeealsoCanonicalLR(0)setofitems,CanonicalLR(1)setofitemsSethi,R.38,579,581Shannon,C.189{190Sharir,M.964Shift-reducecon\rict238{240,293Shift-reduceparser236{240Short-circuiting953Short-pausegarbagecollection483{494Shostak,R.902Sidee\u000bect306,314{316,727Siela\u000b,D.J.962{963Signature361SIMD21,895{896Simplesyntax-directedde\fnition56Simulation23Singleinstruction,multipledataSeeSIMDSingleproduction232Single-programmultipledata776Skewing849{850SLAM962SLRparser252{257,283SMPSeeSymmetricmultiprocessorSoftwarepipelining738{763,895Softwareproductivity23{25SoftwarevulnerabilitySeeVulnerability,ofsoftwareSORSeeSuccessiveover-relaxationSoundtypesystem387Sourcelanguage1SpaceSeeDataspace,Iterationspace,Nullspace,ProcessorspaceSpace-partitionconstraint831{838Spatiallocality455{457,465,777,884Spatialreuse806,809{811Speculativeexecution708,717{719Spilling,ofregisters716SPMDSeeSingle-programmultipledataSQL22{23SQLinjection918{919SSASeeStaticsingle-assignmentformStableset488Stack325,518,520SeealsoRun-timestackStackmachine507Stackpointer437Stallman,R.301Startstate131,147,205Startsymbol43,45,197State147,205SeealsoDeadstate,Minimiza-tion,ofstates,ParserstateState(oftheprogramstore)26{28Statement93{94,100{101,978{981SeealsoBreak-statement,Continue-statement,If-statement,Switch-INDEX1007statement,While-statementStaticaccess816Staticallocation518,524Staticchecking97{98,357SeealsoTypecheckingStaticpolicy25StaticRAM456Staticscope25,28{31,442SeealsoScopeStaticsingle-assignmentform369{370Staticstorage429,442Steadystate742Stearns,R.E.300,302,355Steel,T.426Steensgaard,B.961,964Ste\u000bens,E.F.M.503StorageSeeDynamicstorage,Staticstor-ageStoragelayout373Storage-relateddependenceSeeAntidependence,Outputde-pendenceStoreinstruction512Strati\fedDatalogprogram930{931StrengthreductionSeeReductioninstrengthString118{119,373Strong,J.426Stronglyconnectedcomponent751,859Stronglytypedlanguage387StructureSeeClass,RecordSubgoal923Subsequence119Subsetconstruction153{154Substring119Successiveover-relaxation863Successor529Su\u000ex119Summary-basedanalysis911{914Supercontrol-\rowgraph906Superscalarmachine710Switch-statement418{421Symboltable4{5,11,85{91,423,970{971Symbolicanalysis686{699Symbolicconstant793Symbolicmap690Symmetricmultiprocessor772Synchronization828,832,853{854,880{882Syntax40SeealsoGrammarSyntaxanalysisSeeParserSyntaxerror194Syntaxtree41,69{70,92{93,318{321,358,367,981{986Syntax-directedde\fnition54{56,304{316Syntax-directedtranslation40,57{60,324{352Synthesis4Synthesizedattribute54{56,304{305TTableSeeRelation,Resource-reservationtable,Symboltable,Tran-sitiontableTailrecursion73Takizuka,T.767Tamura,E.767Tardieu,O.961,963TargetcodeSeeObjectcodeTargetlanguage1Targetset488Taskparallelism776Temporallocality455{457,777,884{885Temporalreuse806Terminal42{43,45,197{198,305TeX331Third-generationlanguage13Thompson,K.189{1901008INDEXThree-addresscode42,99,363{369TickSeeClockTiling560{563Time-partitionconstraint868{875,989{992Tjiang,S.W.K.579{580TMG300Token41,43,76,111Tokoro,M.767Tokura,N.705Topelement619,622Top-downparser61{68,217{233SeealsoPredictiveparser,Recursive-descentparserTopologicalorder312SeealsoPrioritizedtopologicalorderTorczon,L.580,963Towle,R.A.902Trace-basedgarbagecollection470{471SeealsoMark-and-compact,Mark-and-sweepTrainalgorithm483,490{493Transferbarrier486Transferfunction599{600,603{604,615,623{624,629,634,676{679,691{693Transition205Transitiondiagram130{131,147{148SeealsoAutomatonTransitionfunction147,150Transitiontable148{149,185{186Transitivity619{620Traversal56{57SeealsoDepth-\frstsearch,Pos-tordertraversal,PreordertraversalTree46,56Treerewriting558{567Triple367{368Tritter,A.426Truedependence711,815T1-T2reduction677Tuple954Type938SeealsoBasictype,Functiontype,RecursivetypeTypechecking24,98{99,370,386{398Typeconversion388{390SeealsoCoercionTypeequivalence372{373Typeexpression371{372,393,395Typeinference387,391{395Typesafety19,464{465Typesynthesis387Typevariable391UUllman,J.D.189{190,301{302,579,581,705,962,964Umanee,N.962UNCOL425UNDEF633Uni\fcation393,395{398Union119,121{122,605,613,615,620,650,955{957Unkel,C.963UnreachablecodeSeeDeadcodeUnreachedstate473UnsafeDatalogrule930Unsafelanguage498Unscannedstate474Upwardcodemotion730{732Usagecount554{555Use609Usebeforede\fnition602Usedexpression649,653{654Usedvariable528{529Ustuner,A.962VValiditem256Value26{27Value-number360{362,390INDEX1009Variable26{28SeealsoNonterminal,ReferencevariableVariableexpansionSeeModularvariableexpansionVariable-lengthdata438{440Vectormachine886,895{896Very-busyexpressionSeeAnticipatedexpressionVery-longinstructionwordSeeVLIWViablepre\fx256{257Virtualmachine2SeealsoJavavirtualmachineVirtualmemory454{455Virtualmethod904,916{917,934,941{944VLIW19{21,710VonNeumannlanguage13Vulnerability,ofsoftware917{921Vyssotsky,V.704{705WWavefronting876{877Weber,H.300,302Wegman,M.N.704Wegner,P.704{705Wegstein,J.426Weight,ofapath822Weinberger,P.J.189{190Weinstock,C.B.705Wexelblat,R.L.38Whaley,J.961,963{964While-statement401Whitespace41,77{78Widening388{389Widom,J.962,964Width,ofatype374Wildernesschunk458Wilson,P.R.502{503Wirth,N.300,302,426Wolf,M.E.900{902Wolfe,M.J.902Wonnacott,D.899,902Wood,G.767Writebarrier486{487Wulf,W.A.705YYacc287{297,354Yamada,H.189{190Yield46{47,201Yochelson,J.C.502{503Younger,D.H.301{302ZZadeck,F.K.704Zhu,J.961,964AlfredV.AhoistheLawrenceGussmanprofessorofcomputerscienceatColumbiaUniversity.ProfessorAhohaswonseveralawards,includingtheGreatTeacherAwardfor2003fromtheSocietyofColumbiaGraduatesandtheInstituteofElectricalandElectronicsEngineers(IEEE)JohnvonNeumannMedal.HeisamemberoftheNationalAcademyofEngineering(NAE)andafellowoftheAssociationofComputingMachinery(ACM)andIEEE.MonicaS.LamisaprofessorofcomputerscienceatStanfordUniversity,wasthechiefscientistatTensilica,andisthefoundingchiefexecutiveo\u000ecerofmoka5.SheledtheSUIFproject,whichproducedoneofthemostpop-ularresearchcompilers,andpioneerednumerouscompilertechniquesusedinindustry.RaviSethilaunchedtheresearchorganizationinAvayaandispresidentofAvayaLabs.Previously,hewasaseniorvicepresidentatBellLaboratoriesandchieftechnicalo\u000ecerforcommunicationssoftwareatLucentTechnologies.HehasheldteachingpositionsatthePennsylvaniaStateUniversityandtheUniversityofArizonaandhastaughtatPrincetonUniversityandRutgersUni-versity.HeisafellowoftheACM.Je\u000breyD.Ullmanischiefexecutiveo\u000ecerofGradianceCorp.andStanfordW.Aschermanprofessorofcomputerscience(emeritus)atStanfordUniversity.Hisresearchinterestsincludedatabasetheory,databaseintegration,datamin-ing,andeducationusingtheinformationinfrastructure.HeisamemberoftheNAE,afellowoftheACM,andwinneroftheKarlstromAwardandKnuthPrize.","libVersion":"0.2.3","langs":""}