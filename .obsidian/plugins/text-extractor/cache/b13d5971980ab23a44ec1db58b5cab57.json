{"path":"2-仓库/0-代数/_assets/PFPL-Cheatsheet.pdf","text":"Cheat Sheet for PFPL August 16, 2016 I. Judgements and Rules 1 Abstract Syntax N P Expression Name Say Meaning 1 5 P Script P Proposition Something to be proved 2 5 P(a) Script P of a Proposition about tree a Something to be proved about AST a 3 5 O Script O Operator An operator that can be used in an AST 4 5 O(a) Script O of a Operator of arity a An operator of a given arity 5 5 Xs Script X sub s Variables x of sort s Variables x of sort s 6 5 S S A set of sorts A set of sorts 7 5 {Xs}s∈S Family Family X of s A sort-indexed family of disjoint ﬁ- nite sets Xs of variables x of sort s 8 6 [b/x ] a Substitution Substitute b for x in a Substitute b for x in a 9 7 x1 , ..., xn.a Abstractor Bind variables xn to ex- pression a Bind variables xn to expression a 10 8 −→x X arrow List of xs x1 , ..., xn 11 8 ρ : −→x ↔ −→x ′ Fresh renaming Freshen x using renam- ing ρ A bijection between −→x and −→x ′ where −→x ′ is fresh. 12 8 ̂ρi (ai ) Rho hat sub i Rename result The result of applying the renaming ρi to ai 13 8 x =α y Equal alpha α-equivalence Trees x and y equal up to renaming 14 9 x ∆ = y Delta equals Replacement Replace expression x with expression y 2 Inductive Deﬁnitions N P Expression Name Say Meaning 15 13 τ type Type Type τ Judgement that τ is a type 16 13 e : τ Colon e is of type τ Judgement that expression e is of type τ 17 13 e ⇓ v Down arrow e has value v Judgement that expression e has value v 18 14 J1 ...Jk J Surfboard Infers Judgements J1 ...Jk infer judgement J 1 3 Hypothetical and General Judgements N P Expression Name Say Meaning 19 23 J1 ...Jk ⊢R K Turnstile Entails Given R and J infer K 20 23 Γ Gamma Judgements Gamma A ﬁnite set of judgements 21 23 ∆ Delta Judgements Delta A ﬁnite set of type judgements 22 25 Γ |=R J Double turnstile Admissible ⊢R Γ implies ⊢R J 23 28 ▽ Down triangle Generic derivation Generic derivation II. Statics and Dynamics 4 Statics N P Expression Name Say Meaning 24 36 n ::= s Colon colon equals The syntax of n is s Speciﬁes the syntax of n 25 36 ; Semicolon And Separates arguments to expression- sin abstact notation 5 Dynamics N P Expression Name Say Meaning 26 41 s 7−→ s ′ Bar arrow Transistion State s transitions to state s ′ 27 42 s 7−→∗ s ′ Bar arrow star Iterated transistion State s transitions to state s ′ over more than zero transitions 28 42 s 7−→n s ′ Bar arrow n N times iterated transis- tion State s transitions to state s ′ over n transitions 29 44 E Script E Expression context Expression context 30 45 ◦ Circle Hole Placeholder to put an instruction 31 46 e ≡ e ′ Equivalent Deﬁnitional equivalence e is deﬁnitionally equivalent to e ′ 6 Type Safety N P Expression Name Say Meaning 32 58 e?? Wrong E goes wrong Expression e goes wrong 7 Evaluation Dynamics N P Expression Name Say Meaning 33 58 e ⇓k v Downarrow k E evaluates in k steps Expression e evaluates to v in k steps 2 III. Total Functions 8 Function Deﬁnitions and Values N P Expression Name Say Meaning 34 63 {f } Brace brackets Function Surround function f in abstract no- tation 35 63 f .e Dot Dot Introduces the scope e of a function f in abstract notation 36 64 f (τ1 ) : τ2 Function Function deﬁnition A function taking an argument of type τ1 and returning a value of type τ2 37 64 [[x.e/f ]]e′ Script bracket Function substitution Function substitution 38 65 τ1 → τ2 Right arrow Maps to A total function that maps elements of type τ1 to elements of type τ2 39 65 λ Lambda Lambda Abstraction 9 System T of Higher-Order Recursion N P Expression Name Say Meaning 40 71 ,→ Hook arrow Select Selector (used in System T recur- sion, sum types, and product types) 41 71 | Bar Either A choice 42 71 n Overline Church numbering The Church numbering 43 76 ⌈n⌉ Divided hat G¨odel numbering The G¨odel numbering IV. Finite Data Types 10 Product Types N P Expression Name Say Meaning 44 81 <> Angle brackets Null tuple Null tuple 45 81 < e1, e2 > Angle brackets Ordered pair Ordered pair 46 81 e.l Left Left projection Select left member of the ordered pair 47 81 e.r Right Right projection Select right member of the ordered pair 11 Sum Types N P Expression Name Say Meaning 48 87 l.e Left Left injection Create sum type element using left type 49 87 r.e Right Right injection Create sum type element using right type 50 93 ≜ Delta equals Delta equals Replacement 3 VI. Inﬁnite Data Types 14 Generic Programming N P Expression Name Say Meaning 51 121 t.τ Dot Type operator Bind t to type τ 15 Inductive and Coinductive Types N P Expression Name Say Meaning 52 133 ∼= Tilde equal Isomorphism Isomorphism VII. Variable Types 17 Abstract Types N P Expression Name Say Meaning 53 149 ∃(t.τ ) Existential quan- tiﬁer Exists Deﬁnes an interface 54 153 ∀(t.τ −→ τ2) Universal quan- tiﬁer For all Deﬁnes universal type 18 Higher Kinds N P Expression Name Say Meaning 55 157 :: Colon colon Kind type constructor Maps types to types VIII. Partiality and Recursive Types 19 System PCF of Recursive Functions N P Expression Name Say Meaning 56 166 7→ Short bar arrow Maps to Function deﬁnition 57 166 ⊥ Bottom Bottom Totally undeﬁned partial function 58 167 τ1 ⇀ τ2 Harpoon Partial function Partial function 20 System FPC of Recursive Types N P Expression Name Say Meaning 59 177 Underscore Underscore Unfree variable IX. Dynamic Types 21 The Untyped λ-Calculus N P Expression Name Say Meaning 60 185 Λ Lambda Lambda calculus The lambda calculus 61 188 Y Y Y Combinator The Y combinator 62 190 x† Superscript cross Superscript cross Language isomorphism 4 X. Subtyping 24 Structural Subtyping N P Expression Name Say Meaning 63 213 τ ′ <: τ Subtype τ ′ is a subtype of τ τ ′ is a subtype of τ XI. Dynamic Dispatch 27 Inheritance N P Expression Name Say Meaning 64 252 ()‡ Isomorphism Isomorphism ()‡ is a method isomorphism XII. Control Flow 28 Control Stacks N P Expression Name Say Meaning 65 257 k ▷ e Right triangle Evaluation state Evaluate e on k 66 257 k ▹ e Left triangle Return state Evaluate k on e 67 258 ϵ Epsilon Empty frame Empty frame 68 258 (—) Frame hole Frame hole A place to put an evaluated expres- sion into a frame 69 258 k; f Stack with frame Stack k with frame f Stack k has frame f at the bottom 70 259 k ▹: τ Triangle colon Stack k expects value of type τ Stack k expects value of type τ 71 259 f : τ ⇝ τ ′ Squiggle arrow Transform Frame f transforms expression of type τ into expression of type τ ′ 72 261 s ↬ e Loop arrow Unravel State s goes to expression e 73 261 k ▷▹ e = e′ Bowtie Goes to Stack k and expression e goes to ex- pression e′ 29 Exceptions N P Expression Name Say Meaning 74 266 k♦ Dark left triangle Failed Stack k is in a failed state XIII. Symbolic Data 31 Symbols N P Expression Name Say Meaning 75 282 a ∼ τ Tilde Deﬁne a Deﬁne symbol a as type τ 76 282 Σ Sigma Symbol context Set of symbol deﬁnitions 77 284 ′a Quote Symbol reference Symbol reference 5 32 Fluid Binding N P Expression Name Say Meaning 78 290 µ′ ⊗ a ,→ e Tensor product Extended by Map symbol a to expression e 79 290 µ′ ⊗ a ,→ • Tensor product Extended by Symbol a is undeﬁned 80 290 µ′ ⊗ a ,→ Tensor product Extended by Symbol a is indeterminate XIV. Mutable State 34 Modernized Algol N P Expression Name Say Meaning 81 308 x ← e; m Left arrow Sequence Execute command m with e substi- tuted for x 82 308 a := e Colon equals Assign Assign e to a 83 308 ∗a Star Reference Get the value of a 84 309 m∥µ State State Command m with memory map µ 85 314 m ∼ τ Dotted tilde Dotted tilde Command m returns a value of type τ 6","libVersion":"0.2.3","langs":""}